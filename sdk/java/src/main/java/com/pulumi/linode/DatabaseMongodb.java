// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.linode.DatabaseMongodbArgs;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.DatabaseMongodbState;
import com.pulumi.linode.outputs.DatabaseMongodbUpdates;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Linode Mongo Database resource. This can be used to create, modify, and delete Linode MongoDB Databases.
 * For more information, see the [Linode APIv4 docs](https://www.linode.com/docs/api/databases/).
 * 
 * Please keep in mind that Managed Databases can take up to an hour to provision.
 * 
 * ## Example Usage
 * 
 * Creating a simple MongoDB database instance:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabaseMongodb;
 * import com.pulumi.linode.DatabaseMongodbArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabaseMongodb(&#34;foobar&#34;, DatabaseMongodbArgs.builder()        
 *             .engineId(&#34;mongodb/4.4.10&#34;)
 *             .label(&#34;mydatabase&#34;)
 *             .region(&#34;us-southeast&#34;)
 *             .type(&#34;g6-nanode-1&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Creating a complex MongoDB database instance:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabaseMongodb;
 * import com.pulumi.linode.DatabaseMongodbArgs;
 * import com.pulumi.linode.inputs.DatabaseMongodbUpdatesArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabaseMongodb(&#34;foobar&#34;, DatabaseMongodbArgs.builder()        
 *             .allowLists(&#34;0.0.0.0/0&#34;)
 *             .clusterSize(3)
 *             .compressionType(&#34;zlib&#34;)
 *             .encrypted(true)
 *             .engineId(&#34;mongodb/4.4.10&#34;)
 *             .label(&#34;mydatabase&#34;)
 *             .region(&#34;us-southeast&#34;)
 *             .sslConnection(true)
 *             .storageEngine(&#34;wiredtiger&#34;)
 *             .type(&#34;g6-nanode-1&#34;)
 *             .updates(DatabaseMongodbUpdatesArgs.builder()
 *                 .dayOfWeek(&#34;saturday&#34;)
 *                 .duration(1)
 *                 .frequency(&#34;monthly&#34;)
 *                 .hourOfDay(22)
 *                 .weekOfMonth(2)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ## updates
 * 
 * The following arguments are supported in the `updates` specification block:
 * 
 * * `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)
 * 
 * * `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)
 * 
 * * `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
 * 
 * * `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)
 * 
 * * `week_of_month` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
 * 
 * ## Import
 * 
 * Linode MongoDB Databases can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import linode:index/databaseMongodb:DatabaseMongodb foobar 1234567
 * ```
 * 
 */
@ResourceType(type="linode:index/databaseMongodb:DatabaseMongodb")
public class DatabaseMongodb extends com.pulumi.resources.CustomResource {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    @Export(name="allowLists", type=List.class, parameters={String.class})
    private Output<List<String>> allowLists;

    /**
     * @return A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    public Output<List<String>> allowLists() {
        return this.allowLists;
    }
    /**
     * The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     */
    @Export(name="caCert", type=String.class, parameters={})
    private Output<String> caCert;

    /**
     * @return The base64-encoded SSL CA certificate for the Managed Database instance.
     * 
     */
    public Output<String> caCert() {
        return this.caCert;
    }
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    @Export(name="clusterSize", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> clusterSize;

    /**
     * @return The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    public Output<Optional<Integer>> clusterSize() {
        return Codegen.optional(this.clusterSize);
    }
    /**
     * The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
     * 
     */
    @Export(name="compressionType", type=String.class, parameters={})
    private Output</* @Nullable */ String> compressionType;

    /**
     * @return The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
     * 
     */
    public Output<Optional<String>> compressionType() {
        return Codegen.optional(this.compressionType);
    }
    /**
     * When this Managed Database was created.
     * 
     */
    @Export(name="created", type=String.class, parameters={})
    private Output<String> created;

    /**
     * @return When this Managed Database was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Whether the Managed Databases is encrypted. (default `false`)
     * 
     */
    @Export(name="encrypted", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> encrypted;

    /**
     * @return Whether the Managed Databases is encrypted. (default `false`)
     * 
     */
    public Output<Optional<Boolean>> encrypted() {
        return Codegen.optional(this.encrypted);
    }
    /**
     * The Managed Database engine. (e.g. `mongodb`)
     * 
     */
    @Export(name="engine", type=String.class, parameters={})
    private Output<String> engine;

    /**
     * @return The Managed Database engine. (e.g. `mongodb`)
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }
    /**
     * The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
     * 
     */
    @Export(name="engineId", type=String.class, parameters={})
    private Output<String> engineId;

    /**
     * @return The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
     * 
     */
    public Output<String> engineId() {
        return this.engineId;
    }
    /**
     * The primary host for the Managed Database.
     * 
     */
    @Export(name="hostPrimary", type=String.class, parameters={})
    private Output<String> hostPrimary;

    /**
     * @return The primary host for the Managed Database.
     * 
     */
    public Output<String> hostPrimary() {
        return this.hostPrimary;
    }
    /**
     * The secondary/private network host for the Managed Database.
     * 
     */
    @Export(name="hostSecondary", type=String.class, parameters={})
    private Output<String> hostSecondary;

    /**
     * @return The secondary/private network host for the Managed Database.
     * 
     */
    public Output<String> hostSecondary() {
        return this.hostSecondary;
    }
    /**
     * A unique, user-defined string referring to the Managed Database.
     * 
     */
    @Export(name="label", type=String.class, parameters={})
    private Output<String> label;

    /**
     * @return A unique, user-defined string referring to the Managed Database.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * A set of peer addresses for this Database.
     * 
     */
    @Export(name="peers", type=List.class, parameters={String.class})
    private Output<List<String>> peers;

    /**
     * @return A set of peer addresses for this Database.
     * 
     */
    public Output<List<String>> peers() {
        return this.peers;
    }
    /**
     * The access port for this Managed Database.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output<Integer> port;

    /**
     * @return The access port for this Managed Database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * The region to use for the Managed Database.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return The region to use for the Managed Database.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
     * 
     */
    @Export(name="replicaSet", type=String.class, parameters={})
    private Output<String> replicaSet;

    /**
     * @return Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
     * 
     */
    public Output<String> replicaSet() {
        return this.replicaSet;
    }
    /**
     * The randomly-generated root password for the Managed Database instance.
     * 
     */
    @Export(name="rootPassword", type=String.class, parameters={})
    private Output<String> rootPassword;

    /**
     * @return The randomly-generated root password for the Managed Database instance.
     * 
     */
    public Output<String> rootPassword() {
        return this.rootPassword;
    }
    /**
     * The root username for the Managed Database instance.
     * 
     */
    @Export(name="rootUsername", type=String.class, parameters={})
    private Output<String> rootUsername;

    /**
     * @return The root username for the Managed Database instance.
     * 
     */
    public Output<String> rootUsername() {
        return this.rootUsername;
    }
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
     * 
     */
    @Export(name="sslConnection", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> sslConnection;

    /**
     * @return Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
     * 
     */
    public Output<Optional<Boolean>> sslConnection() {
        return Codegen.optional(this.sslConnection);
    }
    /**
     * The operating status of the Managed Database.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The operating status of the Managed Database.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
     * 
     */
    @Export(name="storageEngine", type=String.class, parameters={})
    private Output</* @Nullable */ String> storageEngine;

    /**
     * @return The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
     * 
     */
    public Output<Optional<String>> storageEngine() {
        return Codegen.optional(this.storageEngine);
    }
    /**
     * The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The Linode Instance type used for the nodes of the  Managed Database instance.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * When this Managed Database was last updated.
     * 
     */
    @Export(name="updated", type=String.class, parameters={})
    private Output<String> updated;

    /**
     * @return When this Managed Database was last updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }
    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Export(name="updates", type=DatabaseMongodbUpdates.class, parameters={})
    private Output<DatabaseMongodbUpdates> updates;

    /**
     * @return Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Output<DatabaseMongodbUpdates> updates() {
        return this.updates;
    }
    /**
     * The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     */
    @Export(name="version", type=String.class, parameters={})
    private Output<String> version;

    /**
     * @return The Managed Database engine version. (e.g. `v8.0.26`)
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseMongodb(String name) {
        this(name, DatabaseMongodbArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseMongodb(String name, DatabaseMongodbArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseMongodb(String name, DatabaseMongodbArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/databaseMongodb:DatabaseMongodb", name, args == null ? DatabaseMongodbArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DatabaseMongodb(String name, Output<String> id, @Nullable DatabaseMongodbState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/databaseMongodb:DatabaseMongodb", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "caCert",
                "rootPassword",
                "rootUsername"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseMongodb get(String name, Output<String> id, @Nullable DatabaseMongodbState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseMongodb(name, id, state, options);
    }
}
