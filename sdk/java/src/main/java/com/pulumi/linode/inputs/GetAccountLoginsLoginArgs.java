// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetAccountLoginsLoginArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetAccountLoginsLoginArgs Empty = new GetAccountLoginsLoginArgs();

    /**
     * When the login was initiated.
     * 
     */
    @Import(name="datetime", required=true)
    private Output<String> datetime;

    /**
     * @return When the login was initiated.
     * 
     */
    public Output<String> datetime() {
        return this.datetime;
    }

    /**
     * The unique ID of this login object.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The unique ID of this login object.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The remote IP address that requested the login.
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return The remote IP address that requested the login.
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * True if the User that was logged into was a restricted User, false otherwise.
     * 
     */
    @Import(name="restricted", required=true)
    private Output<Boolean> restricted;

    /**
     * @return True if the User that was logged into was a restricted User, false otherwise.
     * 
     */
    public Output<Boolean> restricted() {
        return this.restricted;
    }

    @Import(name="status", required=true)
    private Output<String> status;

    public Output<String> status() {
        return this.status;
    }

    /**
     * The username of the User that was logged into.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The username of the User that was logged into.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private GetAccountLoginsLoginArgs() {}

    private GetAccountLoginsLoginArgs(GetAccountLoginsLoginArgs $) {
        this.datetime = $.datetime;
        this.id = $.id;
        this.ip = $.ip;
        this.restricted = $.restricted;
        this.status = $.status;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccountLoginsLoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccountLoginsLoginArgs $;

        public Builder() {
            $ = new GetAccountLoginsLoginArgs();
        }

        public Builder(GetAccountLoginsLoginArgs defaults) {
            $ = new GetAccountLoginsLoginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datetime When the login was initiated.
         * 
         * @return builder
         * 
         */
        public Builder datetime(Output<String> datetime) {
            $.datetime = datetime;
            return this;
        }

        /**
         * @param datetime When the login was initiated.
         * 
         * @return builder
         * 
         */
        public Builder datetime(String datetime) {
            return datetime(Output.of(datetime));
        }

        /**
         * @param id The unique ID of this login object.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of this login object.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param ip The remote IP address that requested the login.
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The remote IP address that requested the login.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param restricted True if the User that was logged into was a restricted User, false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder restricted(Output<Boolean> restricted) {
            $.restricted = restricted;
            return this;
        }

        /**
         * @param restricted True if the User that was logged into was a restricted User, false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder restricted(Boolean restricted) {
            return restricted(Output.of(restricted));
        }

        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param username The username of the User that was logged into.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username of the User that was logged into.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GetAccountLoginsLoginArgs build() {
            if ($.datetime == null) {
                throw new MissingRequiredPropertyException("GetAccountLoginsLoginArgs", "datetime");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetAccountLoginsLoginArgs", "id");
            }
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("GetAccountLoginsLoginArgs", "ip");
            }
            if ($.restricted == null) {
                throw new MissingRequiredPropertyException("GetAccountLoginsLoginArgs", "restricted");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetAccountLoginsLoginArgs", "status");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("GetAccountLoginsLoginArgs", "username");
            }
            return $;
        }
    }

}
