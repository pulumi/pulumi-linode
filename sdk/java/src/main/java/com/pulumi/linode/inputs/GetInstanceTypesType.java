// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.GetInstanceTypesTypeAddon;
import com.pulumi.linode.inputs.GetInstanceTypesTypePrice;
import com.pulumi.linode.inputs.GetInstanceTypesTypeRegionPrice;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetInstanceTypesType extends com.pulumi.resources.InvokeArgs {

    public static final GetInstanceTypesType Empty = new GetInstanceTypesType();

    @Import(name="addons", required=true)
    private List<GetInstanceTypesTypeAddon> addons;

    public List<GetInstanceTypesTypeAddon> addons() {
        return this.addons;
    }

    /**
     * The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     */
    @Import(name="class", required=true)
    private String class_;

    /**
     * @return The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
     * 
     */
    public String class_() {
        return this.class_;
    }

    /**
     * The Disk size, in MB, of the Linode Type.
     * 
     */
    @Import(name="disk", required=true)
    private Integer disk;

    /**
     * @return The Disk size, in MB, of the Linode Type.
     * 
     */
    public Integer disk() {
        return this.disk;
    }

    /**
     * The ID representing the Linode Type.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The ID representing the Linode Type.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The Linode Type&#39;s label is for display purposes only.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return The Linode Type&#39;s label is for display purposes only.
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * The amount of RAM included in this Linode Type.
     * 
     */
    @Import(name="memory", required=true)
    private Integer memory;

    /**
     * @return The amount of RAM included in this Linode Type.
     * 
     */
    public Integer memory() {
        return this.memory;
    }

    /**
     * The Mbits outbound bandwidth allocation.
     * 
     */
    @Import(name="networkOut", required=true)
    private Integer networkOut;

    /**
     * @return The Mbits outbound bandwidth allocation.
     * 
     */
    public Integer networkOut() {
        return this.networkOut;
    }

    @Import(name="prices", required=true)
    private List<GetInstanceTypesTypePrice> prices;

    public List<GetInstanceTypesTypePrice> prices() {
        return this.prices;
    }

    @Import(name="regionPrices", required=true)
    private List<GetInstanceTypesTypeRegionPrice> regionPrices;

    public List<GetInstanceTypesTypeRegionPrice> regionPrices() {
        return this.regionPrices;
    }

    /**
     * The monthly outbound transfer amount, in MB.
     * 
     */
    @Import(name="transfer", required=true)
    private Integer transfer;

    /**
     * @return The monthly outbound transfer amount, in MB.
     * 
     */
    public Integer transfer() {
        return this.transfer;
    }

    /**
     * The number of VCPU cores this Linode Type offers.
     * 
     */
    @Import(name="vcpus", required=true)
    private Integer vcpus;

    /**
     * @return The number of VCPU cores this Linode Type offers.
     * 
     */
    public Integer vcpus() {
        return this.vcpus;
    }

    private GetInstanceTypesType() {}

    private GetInstanceTypesType(GetInstanceTypesType $) {
        this.addons = $.addons;
        this.class_ = $.class_;
        this.disk = $.disk;
        this.id = $.id;
        this.label = $.label;
        this.memory = $.memory;
        this.networkOut = $.networkOut;
        this.prices = $.prices;
        this.regionPrices = $.regionPrices;
        this.transfer = $.transfer;
        this.vcpus = $.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInstanceTypesType defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInstanceTypesType $;

        public Builder() {
            $ = new GetInstanceTypesType();
        }

        public Builder(GetInstanceTypesType defaults) {
            $ = new GetInstanceTypesType(Objects.requireNonNull(defaults));
        }

        public Builder addons(List<GetInstanceTypesTypeAddon> addons) {
            $.addons = addons;
            return this;
        }

        public Builder addons(GetInstanceTypesTypeAddon... addons) {
            return addons(List.of(addons));
        }

        /**
         * @param class_ The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
         * 
         * @return builder
         * 
         */
        public Builder class_(String class_) {
            $.class_ = class_;
            return this;
        }

        /**
         * @param disk The Disk size, in MB, of the Linode Type.
         * 
         * @return builder
         * 
         */
        public Builder disk(Integer disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param id The ID representing the Linode Type.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param label The Linode Type&#39;s label is for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param memory The amount of RAM included in this Linode Type.
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param networkOut The Mbits outbound bandwidth allocation.
         * 
         * @return builder
         * 
         */
        public Builder networkOut(Integer networkOut) {
            $.networkOut = networkOut;
            return this;
        }

        public Builder prices(List<GetInstanceTypesTypePrice> prices) {
            $.prices = prices;
            return this;
        }

        public Builder prices(GetInstanceTypesTypePrice... prices) {
            return prices(List.of(prices));
        }

        public Builder regionPrices(List<GetInstanceTypesTypeRegionPrice> regionPrices) {
            $.regionPrices = regionPrices;
            return this;
        }

        public Builder regionPrices(GetInstanceTypesTypeRegionPrice... regionPrices) {
            return regionPrices(List.of(regionPrices));
        }

        /**
         * @param transfer The monthly outbound transfer amount, in MB.
         * 
         * @return builder
         * 
         */
        public Builder transfer(Integer transfer) {
            $.transfer = transfer;
            return this;
        }

        /**
         * @param vcpus The number of VCPU cores this Linode Type offers.
         * 
         * @return builder
         * 
         */
        public Builder vcpus(Integer vcpus) {
            $.vcpus = vcpus;
            return this;
        }

        public GetInstanceTypesType build() {
            $.addons = Objects.requireNonNull($.addons, "expected parameter 'addons' to be non-null");
            $.class_ = Objects.requireNonNull($.class_, "expected parameter 'class' to be non-null");
            $.disk = Objects.requireNonNull($.disk, "expected parameter 'disk' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.memory = Objects.requireNonNull($.memory, "expected parameter 'memory' to be non-null");
            $.networkOut = Objects.requireNonNull($.networkOut, "expected parameter 'networkOut' to be non-null");
            $.prices = Objects.requireNonNull($.prices, "expected parameter 'prices' to be non-null");
            $.regionPrices = Objects.requireNonNull($.regionPrices, "expected parameter 'regionPrices' to be non-null");
            $.transfer = Objects.requireNonNull($.transfer, "expected parameter 'transfer' to be non-null");
            $.vcpus = Objects.requireNonNull($.vcpus, "expected parameter 'vcpus' to be non-null");
            return $;
        }
    }

}
