// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetLkeClustersLkeClusterControlPlane;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLkeClustersLkeCluster extends com.pulumi.resources.InvokeArgs {

    public static final GetLkeClustersLkeCluster Empty = new GetLkeClustersLkeCluster();

    /**
     * Enables the App Platform Layer for this cluster. Note: v4beta only and may not currently be available to all users.
     * 
     */
    @Import(name="aplEnabled", required=true)
    private Boolean aplEnabled;

    /**
     * @return Enables the App Platform Layer for this cluster. Note: v4beta only and may not currently be available to all users.
     * 
     */
    public Boolean aplEnabled() {
        return this.aplEnabled;
    }

    /**
     * Defines settings for the Kubernetes Control Plane.
     * 
     */
    @Import(name="controlPlane")
    private @Nullable GetLkeClustersLkeClusterControlPlane controlPlane;

    /**
     * @return Defines settings for the Kubernetes Control Plane.
     * 
     */
    public Optional<GetLkeClustersLkeClusterControlPlane> controlPlane() {
        return Optional.ofNullable(this.controlPlane);
    }

    /**
     * When this Kubernetes cluster was created.
     * 
     */
    @Import(name="created", required=true)
    private String created;

    /**
     * @return When this Kubernetes cluster was created.
     * 
     */
    public String created() {
        return this.created;
    }

    /**
     * The LKE Cluster&#39;s ID.
     * 
     */
    @Import(name="id", required=true)
    private Integer id;

    /**
     * @return The LKE Cluster&#39;s ID.
     * 
     */
    public Integer id() {
        return this.id;
    }

    /**
     * The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     * 
     */
    @Import(name="k8sVersion", required=true)
    private String k8sVersion;

    /**
     * @return The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     * 
     */
    public String k8sVersion() {
        return this.k8sVersion;
    }

    /**
     * The unique label for the cluster.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return The unique label for the cluster.
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * This Kubernetes cluster&#39;s location.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     */
    public String region() {
        return this.region;
    }

    /**
     * The networking stack type of the Kubernetes cluster.
     * 
     */
    @Import(name="stackType", required=true)
    private String stackType;

    /**
     * @return The networking stack type of the Kubernetes cluster.
     * 
     */
    public String stackType() {
        return this.stackType;
    }

    /**
     * The status of the cluster.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The status of the cluster.
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled).
     * 
     */
    @Import(name="subnetId", required=true)
    private Integer subnetId;

    /**
     * @return The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled).
     * 
     */
    public Integer subnetId() {
        return this.subnetId;
    }

    /**
     * An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
     * 
     */
    @Import(name="tags", required=true)
    private List<String> tags;

    /**
     * @return An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
     * 
     */
    @Import(name="tier", required=true)
    private String tier;

    /**
     * @return The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
     * 
     */
    public String tier() {
        return this.tier;
    }

    /**
     * When this Kubernetes cluster was updated.
     * 
     */
    @Import(name="updated", required=true)
    private String updated;

    /**
     * @return When this Kubernetes cluster was updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    /**
     * The ID of the VPC to use for the Kubernetes cluster.
     * 
     */
    @Import(name="vpcId", required=true)
    private Integer vpcId;

    /**
     * @return The ID of the VPC to use for the Kubernetes cluster.
     * 
     */
    public Integer vpcId() {
        return this.vpcId;
    }

    private GetLkeClustersLkeCluster() {}

    private GetLkeClustersLkeCluster(GetLkeClustersLkeCluster $) {
        this.aplEnabled = $.aplEnabled;
        this.controlPlane = $.controlPlane;
        this.created = $.created;
        this.id = $.id;
        this.k8sVersion = $.k8sVersion;
        this.label = $.label;
        this.region = $.region;
        this.stackType = $.stackType;
        this.status = $.status;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.tier = $.tier;
        this.updated = $.updated;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLkeClustersLkeCluster defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLkeClustersLkeCluster $;

        public Builder() {
            $ = new GetLkeClustersLkeCluster();
        }

        public Builder(GetLkeClustersLkeCluster defaults) {
            $ = new GetLkeClustersLkeCluster(Objects.requireNonNull(defaults));
        }

        /**
         * @param aplEnabled Enables the App Platform Layer for this cluster. Note: v4beta only and may not currently be available to all users.
         * 
         * @return builder
         * 
         */
        public Builder aplEnabled(Boolean aplEnabled) {
            $.aplEnabled = aplEnabled;
            return this;
        }

        /**
         * @param controlPlane Defines settings for the Kubernetes Control Plane.
         * 
         * @return builder
         * 
         */
        public Builder controlPlane(@Nullable GetLkeClustersLkeClusterControlPlane controlPlane) {
            $.controlPlane = controlPlane;
            return this;
        }

        /**
         * @param created When this Kubernetes cluster was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            $.created = created;
            return this;
        }

        /**
         * @param id The LKE Cluster&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            $.id = id;
            return this;
        }

        /**
         * @param k8sVersion The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(String k8sVersion) {
            $.k8sVersion = k8sVersion;
            return this;
        }

        /**
         * @param label The unique label for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param region This Kubernetes cluster&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        /**
         * @param stackType The networking stack type of the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder stackType(String stackType) {
            $.stackType = stackType;
            return this;
        }

        /**
         * @param status The status of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param subnetId The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled).
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Integer subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param tags An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tier The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param updated When this Kubernetes cluster was updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC to use for the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Integer vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        public GetLkeClustersLkeCluster build() {
            if ($.aplEnabled == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "aplEnabled");
            }
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "created");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "id");
            }
            if ($.k8sVersion == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "k8sVersion");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "label");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "region");
            }
            if ($.stackType == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "stackType");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "status");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "subnetId");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "tags");
            }
            if ($.tier == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "tier");
            }
            if ($.updated == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "updated");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "vpcId");
            }
            return $;
        }
    }

}
