// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpAssignmentArgs Empty = new ReservedIpAssignmentArgs();

    /**
     * The resulting IPv4 address.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return The resulting IPv4 address.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
     * `skip_implicit_reboots` provider argument.
     * 
     */
    @Import(name="applyImmediately")
    private @Nullable Output<Boolean> applyImmediately;

    /**
     * @return If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
     * `skip_implicit_reboots` provider argument.
     * 
     */
    public Optional<Output<Boolean>> applyImmediately() {
        return Optional.ofNullable(this.applyImmediately);
    }

    /**
     * The ID of the Linode to allocate an IPv4 address for.
     * 
     */
    @Import(name="linodeId", required=true)
    private Output<Integer> linodeId;

    /**
     * @return The ID of the Linode to allocate an IPv4 address for.
     * 
     */
    public Output<Integer> linodeId() {
        return this.linodeId;
    }

    /**
     * Whether the IPv4 address is public or private.
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return Whether the IPv4 address is public or private.
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * The reverse DNS assigned to this address.
     * 
     */
    @Import(name="rdns")
    private @Nullable Output<String> rdns;

    /**
     * @return The reverse DNS assigned to this address.
     * 
     */
    public Optional<Output<String>> rdns() {
        return Optional.ofNullable(this.rdns);
    }

    private ReservedIpAssignmentArgs() {}

    private ReservedIpAssignmentArgs(ReservedIpAssignmentArgs $) {
        this.address = $.address;
        this.applyImmediately = $.applyImmediately;
        this.linodeId = $.linodeId;
        this.public_ = $.public_;
        this.rdns = $.rdns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpAssignmentArgs $;

        public Builder() {
            $ = new ReservedIpAssignmentArgs();
        }

        public Builder(ReservedIpAssignmentArgs defaults) {
            $ = new ReservedIpAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The resulting IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The resulting IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param applyImmediately If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
         * `skip_implicit_reboots` provider argument.
         * 
         * @return builder
         * 
         */
        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            $.applyImmediately = applyImmediately;
            return this;
        }

        /**
         * @param applyImmediately If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
         * `skip_implicit_reboots` provider argument.
         * 
         * @return builder
         * 
         */
        public Builder applyImmediately(Boolean applyImmediately) {
            return applyImmediately(Output.of(applyImmediately));
        }

        /**
         * @param linodeId The ID of the Linode to allocate an IPv4 address for.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Output<Integer> linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param linodeId The ID of the Linode to allocate an IPv4 address for.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            return linodeId(Output.of(linodeId));
        }

        /**
         * @param public_ Whether the IPv4 address is public or private.
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Whether the IPv4 address is public or private.
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param rdns The reverse DNS assigned to this address.
         * 
         * @return builder
         * 
         */
        public Builder rdns(@Nullable Output<String> rdns) {
            $.rdns = rdns;
            return this;
        }

        /**
         * @param rdns The reverse DNS assigned to this address.
         * 
         * @return builder
         * 
         */
        public Builder rdns(String rdns) {
            return rdns(Output.of(rdns));
        }

        public ReservedIpAssignmentArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("ReservedIpAssignmentArgs", "address");
            }
            if ($.linodeId == null) {
                throw new MissingRequiredPropertyException("ReservedIpAssignmentArgs", "linodeId");
            }
            return $;
        }
    }

}
