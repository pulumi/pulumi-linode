// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceDiskState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceDiskState Empty = new InstanceDiskState();

    /**
     * A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image.
     * 
     */
    @Import(name="authorizedKeys")
    private @Nullable Output<List<String>> authorizedKeys;

    /**
     * @return A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image.
     * 
     */
    public Optional<Output<List<String>>> authorizedKeys() {
        return Optional.ofNullable(this.authorizedKeys);
    }

    /**
     * A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the
     * 
     */
    @Import(name="authorizedUsers")
    private @Nullable Output<List<String>> authorizedUsers;

    /**
     * @return A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the
     * 
     */
    public Optional<Output<List<String>>> authorizedUsers() {
        return Optional.ofNullable(this.authorizedUsers);
    }

    /**
     * When this disk was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return When this disk was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)
     * 
     */
    @Import(name="filesystem")
    private @Nullable Output<String> filesystem;

    /**
     * @return The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)
     * 
     */
    public Optional<Output<String>> filesystem() {
        return Optional.ofNullable(this.filesystem);
    }

    /**
     * An Image ID to deploy the Linode Disk from.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return An Image ID to deploy the Linode Disk from.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The Disk&#39;s label for display purposes only.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The Disk&#39;s label for display purposes only.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The ID of the Linode to create this Disk under.
     * 
     */
    @Import(name="linodeId")
    private @Nullable Output<Integer> linodeId;

    /**
     * @return The ID of the Linode to create this Disk under.
     * 
     */
    public Optional<Output<Integer>> linodeId() {
        return Optional.ofNullable(this.linodeId);
    }

    /**
     * The root user’s password on a newly-created Linode Disk when deploying from an Image.
     * 
     */
    @Import(name="rootPass")
    private @Nullable Output<String> rootPass;

    /**
     * @return The root user’s password on a newly-created Linode Disk when deploying from an Image.
     * 
     */
    public Optional<Output<String>> rootPass() {
        return Optional.ofNullable(this.rootPass);
    }

    /**
     * The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.
     * 
     */
    @Import(name="stackscriptData")
    private @Nullable Output<Map<String,Object>> stackscriptData;

    /**
     * @return An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.
     * 
     */
    public Optional<Output<Map<String,Object>>> stackscriptData() {
        return Optional.ofNullable(this.stackscriptData);
    }

    /**
     * A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.
     * 
     */
    @Import(name="stackscriptId")
    private @Nullable Output<Integer> stackscriptId;

    /**
     * @return A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.
     * 
     */
    public Optional<Output<Integer>> stackscriptId() {
        return Optional.ofNullable(this.stackscriptId);
    }

    /**
     * A brief description of this Disk&#39;s current state.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return A brief description of this Disk&#39;s current state.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * When this disk was last updated.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return When this disk was last updated.
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    private InstanceDiskState() {}

    private InstanceDiskState(InstanceDiskState $) {
        this.authorizedKeys = $.authorizedKeys;
        this.authorizedUsers = $.authorizedUsers;
        this.created = $.created;
        this.filesystem = $.filesystem;
        this.image = $.image;
        this.label = $.label;
        this.linodeId = $.linodeId;
        this.rootPass = $.rootPass;
        this.size = $.size;
        this.stackscriptData = $.stackscriptData;
        this.stackscriptId = $.stackscriptId;
        this.status = $.status;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceDiskState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceDiskState $;

        public Builder() {
            $ = new InstanceDiskState();
        }

        public Builder(InstanceDiskState defaults) {
            $ = new InstanceDiskState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizedKeys A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image.
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeys(@Nullable Output<List<String>> authorizedKeys) {
            $.authorizedKeys = authorizedKeys;
            return this;
        }

        /**
         * @param authorizedKeys A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image.
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeys(List<String> authorizedKeys) {
            return authorizedKeys(Output.of(authorizedKeys));
        }

        /**
         * @param authorizedKeys A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image.
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeys(String... authorizedKeys) {
            return authorizedKeys(List.of(authorizedKeys));
        }

        /**
         * @param authorizedUsers A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(@Nullable Output<List<String>> authorizedUsers) {
            $.authorizedUsers = authorizedUsers;
            return this;
        }

        /**
         * @param authorizedUsers A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(List<String> authorizedUsers) {
            return authorizedUsers(Output.of(authorizedUsers));
        }

        /**
         * @param authorizedUsers A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(String... authorizedUsers) {
            return authorizedUsers(List.of(authorizedUsers));
        }

        /**
         * @param created When this disk was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When this disk was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param filesystem The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)
         * 
         * @return builder
         * 
         */
        public Builder filesystem(@Nullable Output<String> filesystem) {
            $.filesystem = filesystem;
            return this;
        }

        /**
         * @param filesystem The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)
         * 
         * @return builder
         * 
         */
        public Builder filesystem(String filesystem) {
            return filesystem(Output.of(filesystem));
        }

        /**
         * @param image An Image ID to deploy the Linode Disk from.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image An Image ID to deploy the Linode Disk from.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param label The Disk&#39;s label for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The Disk&#39;s label for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param linodeId The ID of the Linode to create this Disk under.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(@Nullable Output<Integer> linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param linodeId The ID of the Linode to create this Disk under.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            return linodeId(Output.of(linodeId));
        }

        /**
         * @param rootPass The root user’s password on a newly-created Linode Disk when deploying from an Image.
         * 
         * @return builder
         * 
         */
        public Builder rootPass(@Nullable Output<String> rootPass) {
            $.rootPass = rootPass;
            return this;
        }

        /**
         * @param rootPass The root user’s password on a newly-created Linode Disk when deploying from an Image.
         * 
         * @return builder
         * 
         */
        public Builder rootPass(String rootPass) {
            return rootPass(Output.of(rootPass));
        }

        /**
         * @param size The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param stackscriptData An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.
         * 
         * @return builder
         * 
         */
        public Builder stackscriptData(@Nullable Output<Map<String,Object>> stackscriptData) {
            $.stackscriptData = stackscriptData;
            return this;
        }

        /**
         * @param stackscriptData An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.
         * 
         * @return builder
         * 
         */
        public Builder stackscriptData(Map<String,Object> stackscriptData) {
            return stackscriptData(Output.of(stackscriptData));
        }

        /**
         * @param stackscriptId A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.
         * 
         * @return builder
         * 
         */
        public Builder stackscriptId(@Nullable Output<Integer> stackscriptId) {
            $.stackscriptId = stackscriptId;
            return this;
        }

        /**
         * @param stackscriptId A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.
         * 
         * @return builder
         * 
         */
        public Builder stackscriptId(Integer stackscriptId) {
            return stackscriptId(Output.of(stackscriptId));
        }

        /**
         * @param status A brief description of this Disk&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status A brief description of this Disk&#39;s current state.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updated When this disk was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated When this disk was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public InstanceDiskState build() {
            return $;
        }
    }

}
