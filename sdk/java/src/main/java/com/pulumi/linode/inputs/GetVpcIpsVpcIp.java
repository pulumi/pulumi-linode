// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetVpcIpsVpcIp extends com.pulumi.resources.InvokeArgs {

    public static final GetVpcIpsVpcIp Empty = new GetVpcIpsVpcIp();

    /**
     * True if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise false.
     * 
     */
    @Import(name="active", required=true)
    private Boolean active;

    /**
     * @return True if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise false.
     * 
     */
    public Boolean active() {
        return this.active;
    }

    /**
     * An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Null if an address_range.
     * 
     */
    @Import(name="address", required=true)
    private String address;

    /**
     * @return An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Null if an address_range.
     * 
     */
    public String address() {
        return this.address;
    }

    /**
     * A range of IPv4 addresses configured for this VPC interface. Null if a single address.
     * 
     */
    @Import(name="addressRange", required=true)
    private String addressRange;

    /**
     * @return A range of IPv4 addresses configured for this VPC interface. Null if a single address.
     * 
     */
    public String addressRange() {
        return this.addressRange;
    }

    /**
     * The globally general entity identifier for the Linode configuration profile where the VPC is included.
     * 
     */
    @Import(name="configId", required=true)
    private Integer configId;

    /**
     * @return The globally general entity identifier for the Linode configuration profile where the VPC is included.
     * 
     */
    public Integer configId() {
        return this.configId;
    }

    /**
     * The default gateway for the VPC subnet that the IP or IP range belongs to.
     * 
     */
    @Import(name="gateway", required=true)
    private String gateway;

    /**
     * @return The default gateway for the VPC subnet that the IP or IP range belongs to.
     * 
     */
    public String gateway() {
        return this.gateway;
    }

    /**
     * The globally general API entity identifier for the Linode interface.
     * 
     */
    @Import(name="interfaceId", required=true)
    private Integer interfaceId;

    /**
     * @return The globally general API entity identifier for the Linode interface.
     * 
     */
    public Integer interfaceId() {
        return this.interfaceId;
    }

    /**
     * The identifier for the Linode the VPC interface currently belongs to.
     * 
     */
    @Import(name="linodeId", required=true)
    private Integer linodeId;

    /**
     * @return The identifier for the Linode the VPC interface currently belongs to.
     * 
     */
    public Integer linodeId() {
        return this.linodeId;
    }

    /**
     * The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn&#39;t used.
     * 
     */
    @Import(name="nat11", required=true)
    private String nat11;

    /**
     * @return The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn&#39;t used.
     * 
     */
    public String nat11() {
        return this.nat11;
    }

    /**
     * The number of bits set in the subnet mask.
     * 
     */
    @Import(name="prefix", required=true)
    private Integer prefix;

    /**
     * @return The number of bits set in the subnet mask.
     * 
     */
    public Integer prefix() {
        return this.prefix;
    }

    /**
     * The region of the VPC.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return The region of the VPC.
     * 
     */
    public String region() {
        return this.region;
    }

    /**
     * The id of the VPC Subnet for this interface.
     * 
     */
    @Import(name="subnetId", required=true)
    private Integer subnetId;

    /**
     * @return The id of the VPC Subnet for this interface.
     * 
     */
    public Integer subnetId() {
        return this.subnetId;
    }

    /**
     * The mask that separates host bits from network bits for the address or address_range.
     * 
     */
    @Import(name="subnetMask", required=true)
    private String subnetMask;

    /**
     * @return The mask that separates host bits from network bits for the address or address_range.
     * 
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * The id of the parent VPC for the list of VPC IPs.
     * 
     * * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
     * 
     */
    @Import(name="vpcId", required=true)
    private Integer vpcId;

    /**
     * @return The id of the parent VPC for the list of VPC IPs.
     * 
     * * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
     * 
     */
    public Integer vpcId() {
        return this.vpcId;
    }

    private GetVpcIpsVpcIp() {}

    private GetVpcIpsVpcIp(GetVpcIpsVpcIp $) {
        this.active = $.active;
        this.address = $.address;
        this.addressRange = $.addressRange;
        this.configId = $.configId;
        this.gateway = $.gateway;
        this.interfaceId = $.interfaceId;
        this.linodeId = $.linodeId;
        this.nat11 = $.nat11;
        this.prefix = $.prefix;
        this.region = $.region;
        this.subnetId = $.subnetId;
        this.subnetMask = $.subnetMask;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpcIpsVpcIp defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpcIpsVpcIp $;

        public Builder() {
            $ = new GetVpcIpsVpcIp();
        }

        public Builder(GetVpcIpsVpcIp defaults) {
            $ = new GetVpcIpsVpcIp(Objects.requireNonNull(defaults));
        }

        /**
         * @param active True if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise false.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            $.active = active;
            return this;
        }

        /**
         * @param address An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Null if an address_range.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            $.address = address;
            return this;
        }

        /**
         * @param addressRange A range of IPv4 addresses configured for this VPC interface. Null if a single address.
         * 
         * @return builder
         * 
         */
        public Builder addressRange(String addressRange) {
            $.addressRange = addressRange;
            return this;
        }

        /**
         * @param configId The globally general entity identifier for the Linode configuration profile where the VPC is included.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param gateway The default gateway for the VPC subnet that the IP or IP range belongs to.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param interfaceId The globally general API entity identifier for the Linode interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceId(Integer interfaceId) {
            $.interfaceId = interfaceId;
            return this;
        }

        /**
         * @param linodeId The identifier for the Linode the VPC interface currently belongs to.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param nat11 The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn&#39;t used.
         * 
         * @return builder
         * 
         */
        public Builder nat11(String nat11) {
            $.nat11 = nat11;
            return this;
        }

        /**
         * @param prefix The number of bits set in the subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Integer prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param region The region of the VPC.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        /**
         * @param subnetId The id of the VPC Subnet for this interface.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Integer subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetMask The mask that separates host bits from network bits for the address or address_range.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param vpcId The id of the parent VPC for the list of VPC IPs.
         * 
         * * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Integer vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        public GetVpcIpsVpcIp build() {
            if ($.active == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "active");
            }
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "address");
            }
            if ($.addressRange == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "addressRange");
            }
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "configId");
            }
            if ($.gateway == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "gateway");
            }
            if ($.interfaceId == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "interfaceId");
            }
            if ($.linodeId == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "linodeId");
            }
            if ($.nat11 == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "nat11");
            }
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "prefix");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "region");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "subnetId");
            }
            if ($.subnetMask == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "subnetMask");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("GetVpcIpsVpcIp", "vpcId");
            }
            return $;
        }
    }

}
