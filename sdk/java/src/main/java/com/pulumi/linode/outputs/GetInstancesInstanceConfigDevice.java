// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSda;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSdb;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSdc;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSdd;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSde;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSdf;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSdg;
import com.pulumi.linode.outputs.GetInstancesInstanceConfigDeviceSdh;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstanceConfigDevice {
    /**
     * @return ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `&#34;fullvirt&#34;` `virt_mode`.
     * 
     */
    private List<GetInstancesInstanceConfigDeviceSda> sdas;
    private List<GetInstancesInstanceConfigDeviceSdb> sdbs;
    private List<GetInstancesInstanceConfigDeviceSdc> sdcs;
    private List<GetInstancesInstanceConfigDeviceSdd> sdds;
    private List<GetInstancesInstanceConfigDeviceSde> sdes;
    private List<GetInstancesInstanceConfigDeviceSdf> sdfs;
    private List<GetInstancesInstanceConfigDeviceSdg> sdgs;
    private List<GetInstancesInstanceConfigDeviceSdh> sdhs;

    private GetInstancesInstanceConfigDevice() {}
    /**
     * @return ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `&#34;fullvirt&#34;` `virt_mode`.
     * 
     */
    public List<GetInstancesInstanceConfigDeviceSda> sdas() {
        return this.sdas;
    }
    public List<GetInstancesInstanceConfigDeviceSdb> sdbs() {
        return this.sdbs;
    }
    public List<GetInstancesInstanceConfigDeviceSdc> sdcs() {
        return this.sdcs;
    }
    public List<GetInstancesInstanceConfigDeviceSdd> sdds() {
        return this.sdds;
    }
    public List<GetInstancesInstanceConfigDeviceSde> sdes() {
        return this.sdes;
    }
    public List<GetInstancesInstanceConfigDeviceSdf> sdfs() {
        return this.sdfs;
    }
    public List<GetInstancesInstanceConfigDeviceSdg> sdgs() {
        return this.sdgs;
    }
    public List<GetInstancesInstanceConfigDeviceSdh> sdhs() {
        return this.sdhs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstanceConfigDevice defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetInstancesInstanceConfigDeviceSda> sdas;
        private List<GetInstancesInstanceConfigDeviceSdb> sdbs;
        private List<GetInstancesInstanceConfigDeviceSdc> sdcs;
        private List<GetInstancesInstanceConfigDeviceSdd> sdds;
        private List<GetInstancesInstanceConfigDeviceSde> sdes;
        private List<GetInstancesInstanceConfigDeviceSdf> sdfs;
        private List<GetInstancesInstanceConfigDeviceSdg> sdgs;
        private List<GetInstancesInstanceConfigDeviceSdh> sdhs;
        public Builder() {}
        public Builder(GetInstancesInstanceConfigDevice defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sdas = defaults.sdas;
    	      this.sdbs = defaults.sdbs;
    	      this.sdcs = defaults.sdcs;
    	      this.sdds = defaults.sdds;
    	      this.sdes = defaults.sdes;
    	      this.sdfs = defaults.sdfs;
    	      this.sdgs = defaults.sdgs;
    	      this.sdhs = defaults.sdhs;
        }

        @CustomType.Setter
        public Builder sdas(List<GetInstancesInstanceConfigDeviceSda> sdas) {
            if (sdas == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdas");
            }
            this.sdas = sdas;
            return this;
        }
        public Builder sdas(GetInstancesInstanceConfigDeviceSda... sdas) {
            return sdas(List.of(sdas));
        }
        @CustomType.Setter
        public Builder sdbs(List<GetInstancesInstanceConfigDeviceSdb> sdbs) {
            if (sdbs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdbs");
            }
            this.sdbs = sdbs;
            return this;
        }
        public Builder sdbs(GetInstancesInstanceConfigDeviceSdb... sdbs) {
            return sdbs(List.of(sdbs));
        }
        @CustomType.Setter
        public Builder sdcs(List<GetInstancesInstanceConfigDeviceSdc> sdcs) {
            if (sdcs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdcs");
            }
            this.sdcs = sdcs;
            return this;
        }
        public Builder sdcs(GetInstancesInstanceConfigDeviceSdc... sdcs) {
            return sdcs(List.of(sdcs));
        }
        @CustomType.Setter
        public Builder sdds(List<GetInstancesInstanceConfigDeviceSdd> sdds) {
            if (sdds == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdds");
            }
            this.sdds = sdds;
            return this;
        }
        public Builder sdds(GetInstancesInstanceConfigDeviceSdd... sdds) {
            return sdds(List.of(sdds));
        }
        @CustomType.Setter
        public Builder sdes(List<GetInstancesInstanceConfigDeviceSde> sdes) {
            if (sdes == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdes");
            }
            this.sdes = sdes;
            return this;
        }
        public Builder sdes(GetInstancesInstanceConfigDeviceSde... sdes) {
            return sdes(List.of(sdes));
        }
        @CustomType.Setter
        public Builder sdfs(List<GetInstancesInstanceConfigDeviceSdf> sdfs) {
            if (sdfs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdfs");
            }
            this.sdfs = sdfs;
            return this;
        }
        public Builder sdfs(GetInstancesInstanceConfigDeviceSdf... sdfs) {
            return sdfs(List.of(sdfs));
        }
        @CustomType.Setter
        public Builder sdgs(List<GetInstancesInstanceConfigDeviceSdg> sdgs) {
            if (sdgs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdgs");
            }
            this.sdgs = sdgs;
            return this;
        }
        public Builder sdgs(GetInstancesInstanceConfigDeviceSdg... sdgs) {
            return sdgs(List.of(sdgs));
        }
        @CustomType.Setter
        public Builder sdhs(List<GetInstancesInstanceConfigDeviceSdh> sdhs) {
            if (sdhs == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceConfigDevice", "sdhs");
            }
            this.sdhs = sdhs;
            return this;
        }
        public Builder sdhs(GetInstancesInstanceConfigDeviceSdh... sdhs) {
            return sdhs(List.of(sdhs));
        }
        public GetInstancesInstanceConfigDevice build() {
            final var _resultValue = new GetInstancesInstanceConfigDevice();
            _resultValue.sdas = sdas;
            _resultValue.sdbs = sdbs;
            _resultValue.sdcs = sdcs;
            _resultValue.sdds = sdds;
            _resultValue.sdes = sdes;
            _resultValue.sdfs = sdfs;
            _resultValue.sdgs = sdgs;
            _resultValue.sdhs = sdhs;
            return _resultValue;
        }
    }
}
