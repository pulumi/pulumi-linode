// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetNodebalancersNodebalancerTransferArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetNodebalancersNodebalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetNodebalancersNodebalancerArgs Empty = new GetNodebalancersNodebalancerArgs();

    /**
     * Throttle connections per second (0-20)
     * 
     */
    @Import(name="clientConnThrottle", required=true)
    private Output<Integer> clientConnThrottle;

    /**
     * @return Throttle connections per second (0-20)
     * 
     */
    public Output<Integer> clientConnThrottle() {
        return this.clientConnThrottle;
    }

    /**
     * When this Linode NodeBalancer was created
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return When this Linode NodeBalancer was created
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * The Linode NodeBalancer&#39;s unique ID
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The Linode NodeBalancer&#39;s unique ID
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The Public IPv4 Address of this NodeBalancer
     * 
     */
    @Import(name="ipv4", required=true)
    private Output<String> ipv4;

    /**
     * @return The Public IPv4 Address of this NodeBalancer
     * 
     */
    public Output<String> ipv4() {
        return this.ipv4;
    }

    /**
     * The Public IPv6 Address of this NodeBalancer
     * 
     */
    @Import(name="ipv6", required=true)
    private Output<String> ipv6;

    /**
     * @return The Public IPv6 Address of this NodeBalancer
     * 
     */
    public Output<String> ipv6() {
        return this.ipv6;
    }

    /**
     * The label of the Linode NodeBalancer
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The label of the Linode NodeBalancer
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    @Import(name="transfers", required=true)
    private Output<List<GetNodebalancersNodebalancerTransferArgs>> transfers;

    public Output<List<GetNodebalancersNodebalancerTransferArgs>> transfers() {
        return this.transfers;
    }

    /**
     * When this Linode NodeBalancer was last updated
     * 
     */
    @Import(name="updated", required=true)
    private Output<String> updated;

    /**
     * @return When this Linode NodeBalancer was last updated
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }

    private GetNodebalancersNodebalancerArgs() {}

    private GetNodebalancersNodebalancerArgs(GetNodebalancersNodebalancerArgs $) {
        this.clientConnThrottle = $.clientConnThrottle;
        this.created = $.created;
        this.hostname = $.hostname;
        this.id = $.id;
        this.ipv4 = $.ipv4;
        this.ipv6 = $.ipv6;
        this.label = $.label;
        this.region = $.region;
        this.tags = $.tags;
        this.transfers = $.transfers;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodebalancersNodebalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodebalancersNodebalancerArgs $;

        public Builder() {
            $ = new GetNodebalancersNodebalancerArgs();
        }

        public Builder(GetNodebalancersNodebalancerArgs defaults) {
            $ = new GetNodebalancersNodebalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientConnThrottle Throttle connections per second (0-20)
         * 
         * @return builder
         * 
         */
        public Builder clientConnThrottle(Output<Integer> clientConnThrottle) {
            $.clientConnThrottle = clientConnThrottle;
            return this;
        }

        /**
         * @param clientConnThrottle Throttle connections per second (0-20)
         * 
         * @return builder
         * 
         */
        public Builder clientConnThrottle(Integer clientConnThrottle) {
            return clientConnThrottle(Output.of(clientConnThrottle));
        }

        /**
         * @param created When this Linode NodeBalancer was created
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When this Linode NodeBalancer was created
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param hostname This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param id The Linode NodeBalancer&#39;s unique ID
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The Linode NodeBalancer&#39;s unique ID
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param ipv4 The Public IPv4 Address of this NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder ipv4(Output<String> ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv4 The Public IPv4 Address of this NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder ipv4(String ipv4) {
            return ipv4(Output.of(ipv4));
        }

        /**
         * @param ipv6 The Public IPv6 Address of this NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder ipv6(Output<String> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 The Public IPv6 Address of this NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder ipv6(String ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param label The label of the Linode NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the Linode NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param region The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public Builder transfers(Output<List<GetNodebalancersNodebalancerTransferArgs>> transfers) {
            $.transfers = transfers;
            return this;
        }

        public Builder transfers(List<GetNodebalancersNodebalancerTransferArgs> transfers) {
            return transfers(Output.of(transfers));
        }

        public Builder transfers(GetNodebalancersNodebalancerTransferArgs... transfers) {
            return transfers(List.of(transfers));
        }

        /**
         * @param updated When this Linode NodeBalancer was last updated
         * 
         * @return builder
         * 
         */
        public Builder updated(Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated When this Linode NodeBalancer was last updated
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public GetNodebalancersNodebalancerArgs build() {
            if ($.clientConnThrottle == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "clientConnThrottle");
            }
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "created");
            }
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "hostname");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "id");
            }
            if ($.ipv4 == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "ipv4");
            }
            if ($.ipv6 == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "ipv6");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "label");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "region");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "tags");
            }
            if ($.transfers == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "transfers");
            }
            if ($.updated == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancerArgs", "updated");
            }
            return $;
        }
    }

}
