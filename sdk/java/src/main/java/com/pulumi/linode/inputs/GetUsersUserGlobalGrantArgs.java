// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetUsersUserGlobalGrantArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetUsersUserGlobalGrantArgs Empty = new GetUsersUserGlobalGrantArgs();

    /**
     * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
     * 
     */
    @Import(name="accountAccess", required=true)
    private Output<String> accountAccess;

    /**
     * @return The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
     * 
     */
    public Output<String> accountAccess() {
        return this.accountAccess;
    }

    /**
     * If true, this User may add Managed Databases.
     * 
     */
    @Import(name="addDatabases", required=true)
    private Output<Boolean> addDatabases;

    /**
     * @return If true, this User may add Managed Databases.
     * 
     */
    public Output<Boolean> addDatabases() {
        return this.addDatabases;
    }

    /**
     * If true, this User may add Domains.
     * 
     */
    @Import(name="addDomains", required=true)
    private Output<Boolean> addDomains;

    /**
     * @return If true, this User may add Domains.
     * 
     */
    public Output<Boolean> addDomains() {
        return this.addDomains;
    }

    /**
     * If true, this User may add Firewalls.
     * 
     */
    @Import(name="addFirewalls", required=true)
    private Output<Boolean> addFirewalls;

    /**
     * @return If true, this User may add Firewalls.
     * 
     */
    public Output<Boolean> addFirewalls() {
        return this.addFirewalls;
    }

    /**
     * If true, this User may add Images.
     * 
     */
    @Import(name="addImages", required=true)
    private Output<Boolean> addImages;

    /**
     * @return If true, this User may add Images.
     * 
     */
    public Output<Boolean> addImages() {
        return this.addImages;
    }

    /**
     * If true, this User may create Linodes.
     * 
     */
    @Import(name="addLinodes", required=true)
    private Output<Boolean> addLinodes;

    /**
     * @return If true, this User may create Linodes.
     * 
     */
    public Output<Boolean> addLinodes() {
        return this.addLinodes;
    }

    /**
     * If true, this User may create Longview clients and view the current plan.
     * 
     */
    @Import(name="addLongview", required=true)
    private Output<Boolean> addLongview;

    /**
     * @return If true, this User may create Longview clients and view the current plan.
     * 
     */
    public Output<Boolean> addLongview() {
        return this.addLongview;
    }

    /**
     * If true, this User may add NodeBalancers.
     * 
     */
    @Import(name="addNodebalancers", required=true)
    private Output<Boolean> addNodebalancers;

    /**
     * @return If true, this User may add NodeBalancers.
     * 
     */
    public Output<Boolean> addNodebalancers() {
        return this.addNodebalancers;
    }

    /**
     * If true, this User may add Placement Groups.
     * 
     */
    @Import(name="addPlacementGroups", required=true)
    private Output<Boolean> addPlacementGroups;

    /**
     * @return If true, this User may add Placement Groups.
     * 
     */
    public Output<Boolean> addPlacementGroups() {
        return this.addPlacementGroups;
    }

    @Import(name="addStackscripts", required=true)
    private Output<Boolean> addStackscripts;

    public Output<Boolean> addStackscripts() {
        return this.addStackscripts;
    }

    /**
     * If true, this User may add Volumes.
     * 
     */
    @Import(name="addVolumes", required=true)
    private Output<Boolean> addVolumes;

    /**
     * @return If true, this User may add Volumes.
     * 
     */
    public Output<Boolean> addVolumes() {
        return this.addVolumes;
    }

    /**
     * If true, this User may add Virtual Private Clouds (VPCs).
     * 
     */
    @Import(name="addVpcs", required=true)
    private Output<Boolean> addVpcs;

    /**
     * @return If true, this User may add Virtual Private Clouds (VPCs).
     * 
     */
    public Output<Boolean> addVpcs() {
        return this.addVpcs;
    }

    /**
     * If true, this User may cancel the entire Account.
     * 
     */
    @Import(name="cancelAccount", required=true)
    private Output<Boolean> cancelAccount;

    /**
     * @return If true, this User may cancel the entire Account.
     * 
     */
    public Output<Boolean> cancelAccount() {
        return this.cancelAccount;
    }

    /**
     * If true, this User may manage the Account’s Longview subscription.
     * 
     */
    @Import(name="longviewSubscription", required=true)
    private Output<Boolean> longviewSubscription;

    /**
     * @return If true, this User may manage the Account’s Longview subscription.
     * 
     */
    public Output<Boolean> longviewSubscription() {
        return this.longviewSubscription;
    }

    private GetUsersUserGlobalGrantArgs() {}

    private GetUsersUserGlobalGrantArgs(GetUsersUserGlobalGrantArgs $) {
        this.accountAccess = $.accountAccess;
        this.addDatabases = $.addDatabases;
        this.addDomains = $.addDomains;
        this.addFirewalls = $.addFirewalls;
        this.addImages = $.addImages;
        this.addLinodes = $.addLinodes;
        this.addLongview = $.addLongview;
        this.addNodebalancers = $.addNodebalancers;
        this.addPlacementGroups = $.addPlacementGroups;
        this.addStackscripts = $.addStackscripts;
        this.addVolumes = $.addVolumes;
        this.addVpcs = $.addVpcs;
        this.cancelAccount = $.cancelAccount;
        this.longviewSubscription = $.longviewSubscription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUsersUserGlobalGrantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUsersUserGlobalGrantArgs $;

        public Builder() {
            $ = new GetUsersUserGlobalGrantArgs();
        }

        public Builder(GetUsersUserGlobalGrantArgs defaults) {
            $ = new GetUsersUserGlobalGrantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountAccess The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
         * 
         * @return builder
         * 
         */
        public Builder accountAccess(Output<String> accountAccess) {
            $.accountAccess = accountAccess;
            return this;
        }

        /**
         * @param accountAccess The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
         * 
         * @return builder
         * 
         */
        public Builder accountAccess(String accountAccess) {
            return accountAccess(Output.of(accountAccess));
        }

        /**
         * @param addDatabases If true, this User may add Managed Databases.
         * 
         * @return builder
         * 
         */
        public Builder addDatabases(Output<Boolean> addDatabases) {
            $.addDatabases = addDatabases;
            return this;
        }

        /**
         * @param addDatabases If true, this User may add Managed Databases.
         * 
         * @return builder
         * 
         */
        public Builder addDatabases(Boolean addDatabases) {
            return addDatabases(Output.of(addDatabases));
        }

        /**
         * @param addDomains If true, this User may add Domains.
         * 
         * @return builder
         * 
         */
        public Builder addDomains(Output<Boolean> addDomains) {
            $.addDomains = addDomains;
            return this;
        }

        /**
         * @param addDomains If true, this User may add Domains.
         * 
         * @return builder
         * 
         */
        public Builder addDomains(Boolean addDomains) {
            return addDomains(Output.of(addDomains));
        }

        /**
         * @param addFirewalls If true, this User may add Firewalls.
         * 
         * @return builder
         * 
         */
        public Builder addFirewalls(Output<Boolean> addFirewalls) {
            $.addFirewalls = addFirewalls;
            return this;
        }

        /**
         * @param addFirewalls If true, this User may add Firewalls.
         * 
         * @return builder
         * 
         */
        public Builder addFirewalls(Boolean addFirewalls) {
            return addFirewalls(Output.of(addFirewalls));
        }

        /**
         * @param addImages If true, this User may add Images.
         * 
         * @return builder
         * 
         */
        public Builder addImages(Output<Boolean> addImages) {
            $.addImages = addImages;
            return this;
        }

        /**
         * @param addImages If true, this User may add Images.
         * 
         * @return builder
         * 
         */
        public Builder addImages(Boolean addImages) {
            return addImages(Output.of(addImages));
        }

        /**
         * @param addLinodes If true, this User may create Linodes.
         * 
         * @return builder
         * 
         */
        public Builder addLinodes(Output<Boolean> addLinodes) {
            $.addLinodes = addLinodes;
            return this;
        }

        /**
         * @param addLinodes If true, this User may create Linodes.
         * 
         * @return builder
         * 
         */
        public Builder addLinodes(Boolean addLinodes) {
            return addLinodes(Output.of(addLinodes));
        }

        /**
         * @param addLongview If true, this User may create Longview clients and view the current plan.
         * 
         * @return builder
         * 
         */
        public Builder addLongview(Output<Boolean> addLongview) {
            $.addLongview = addLongview;
            return this;
        }

        /**
         * @param addLongview If true, this User may create Longview clients and view the current plan.
         * 
         * @return builder
         * 
         */
        public Builder addLongview(Boolean addLongview) {
            return addLongview(Output.of(addLongview));
        }

        /**
         * @param addNodebalancers If true, this User may add NodeBalancers.
         * 
         * @return builder
         * 
         */
        public Builder addNodebalancers(Output<Boolean> addNodebalancers) {
            $.addNodebalancers = addNodebalancers;
            return this;
        }

        /**
         * @param addNodebalancers If true, this User may add NodeBalancers.
         * 
         * @return builder
         * 
         */
        public Builder addNodebalancers(Boolean addNodebalancers) {
            return addNodebalancers(Output.of(addNodebalancers));
        }

        /**
         * @param addPlacementGroups If true, this User may add Placement Groups.
         * 
         * @return builder
         * 
         */
        public Builder addPlacementGroups(Output<Boolean> addPlacementGroups) {
            $.addPlacementGroups = addPlacementGroups;
            return this;
        }

        /**
         * @param addPlacementGroups If true, this User may add Placement Groups.
         * 
         * @return builder
         * 
         */
        public Builder addPlacementGroups(Boolean addPlacementGroups) {
            return addPlacementGroups(Output.of(addPlacementGroups));
        }

        public Builder addStackscripts(Output<Boolean> addStackscripts) {
            $.addStackscripts = addStackscripts;
            return this;
        }

        public Builder addStackscripts(Boolean addStackscripts) {
            return addStackscripts(Output.of(addStackscripts));
        }

        /**
         * @param addVolumes If true, this User may add Volumes.
         * 
         * @return builder
         * 
         */
        public Builder addVolumes(Output<Boolean> addVolumes) {
            $.addVolumes = addVolumes;
            return this;
        }

        /**
         * @param addVolumes If true, this User may add Volumes.
         * 
         * @return builder
         * 
         */
        public Builder addVolumes(Boolean addVolumes) {
            return addVolumes(Output.of(addVolumes));
        }

        /**
         * @param addVpcs If true, this User may add Virtual Private Clouds (VPCs).
         * 
         * @return builder
         * 
         */
        public Builder addVpcs(Output<Boolean> addVpcs) {
            $.addVpcs = addVpcs;
            return this;
        }

        /**
         * @param addVpcs If true, this User may add Virtual Private Clouds (VPCs).
         * 
         * @return builder
         * 
         */
        public Builder addVpcs(Boolean addVpcs) {
            return addVpcs(Output.of(addVpcs));
        }

        /**
         * @param cancelAccount If true, this User may cancel the entire Account.
         * 
         * @return builder
         * 
         */
        public Builder cancelAccount(Output<Boolean> cancelAccount) {
            $.cancelAccount = cancelAccount;
            return this;
        }

        /**
         * @param cancelAccount If true, this User may cancel the entire Account.
         * 
         * @return builder
         * 
         */
        public Builder cancelAccount(Boolean cancelAccount) {
            return cancelAccount(Output.of(cancelAccount));
        }

        /**
         * @param longviewSubscription If true, this User may manage the Account’s Longview subscription.
         * 
         * @return builder
         * 
         */
        public Builder longviewSubscription(Output<Boolean> longviewSubscription) {
            $.longviewSubscription = longviewSubscription;
            return this;
        }

        /**
         * @param longviewSubscription If true, this User may manage the Account’s Longview subscription.
         * 
         * @return builder
         * 
         */
        public Builder longviewSubscription(Boolean longviewSubscription) {
            return longviewSubscription(Output.of(longviewSubscription));
        }

        public GetUsersUserGlobalGrantArgs build() {
            if ($.accountAccess == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "accountAccess");
            }
            if ($.addDatabases == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addDatabases");
            }
            if ($.addDomains == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addDomains");
            }
            if ($.addFirewalls == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addFirewalls");
            }
            if ($.addImages == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addImages");
            }
            if ($.addLinodes == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addLinodes");
            }
            if ($.addLongview == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addLongview");
            }
            if ($.addNodebalancers == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addNodebalancers");
            }
            if ($.addPlacementGroups == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addPlacementGroups");
            }
            if ($.addStackscripts == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addStackscripts");
            }
            if ($.addVolumes == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addVolumes");
            }
            if ($.addVpcs == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "addVpcs");
            }
            if ($.cancelAccount == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "cancelAccount");
            }
            if ($.longviewSubscription == null) {
                throw new MissingRequiredPropertyException("GetUsersUserGlobalGrantArgs", "longviewSubscription");
            }
            return $;
        }
    }

}
