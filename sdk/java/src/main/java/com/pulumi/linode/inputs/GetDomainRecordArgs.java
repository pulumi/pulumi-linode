// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainRecordArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainRecordArgs Empty = new GetDomainRecordArgs();

    /**
     * The associated domain&#39;s unique ID.
     * 
     */
    @Import(name="domainId", required=true)
    private Output<Integer> domainId;

    /**
     * @return The associated domain&#39;s unique ID.
     * 
     */
    public Output<Integer> domainId() {
        return this.domainId;
    }

    /**
     * The unique ID of the Domain Record.
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The unique ID of the Domain Record.
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the Record.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Record.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetDomainRecordArgs() {}

    private GetDomainRecordArgs(GetDomainRecordArgs $) {
        this.domainId = $.domainId;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainRecordArgs $;

        public Builder() {
            $ = new GetDomainRecordArgs();
        }

        public Builder(GetDomainRecordArgs defaults) {
            $ = new GetDomainRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainId The associated domain&#39;s unique ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(Output<Integer> domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param domainId The associated domain&#39;s unique ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(Integer domainId) {
            return domainId(Output.of(domainId));
        }

        /**
         * @param id The unique ID of the Domain Record.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of the Domain Record.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the Record.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Record.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetDomainRecordArgs build() {
            if ($.domainId == null) {
                throw new MissingRequiredPropertyException("GetDomainRecordArgs", "domainId");
            }
            return $;
        }
    }

}
