// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetProfileReferral;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProfileResult {
    /**
     * @return The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     */
    private List<String> authorizedKeys;
    /**
     * @return The profile email address. This address will be used for communication with Linode as necessary.
     * 
     */
    private String email;
    /**
     * @return If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     */
    private Boolean emailNotifications;
    private String id;
    /**
     * @return If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     */
    private Boolean ipWhitelistEnabled;
    /**
     * @return The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     */
    private String lishAuthMethod;
    /**
     * @return Credit Card information associated with this Account.
     * 
     */
    private List<GetProfileReferral> referrals;
    /**
     * @return If true, the user has restrictions on what can be accessed on the Account.
     * 
     */
    private Boolean restricted;
    /**
     * @return The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     */
    private String timezone;
    /**
     * @return If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     */
    private Boolean twoFactorAuth;
    /**
     * @return The username for logging in to Linode services.
     * 
     */
    private String username;

    private GetProfileResult() {}
    /**
     * @return The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is &#39;disabled&#39;.
     * 
     */
    public List<String> authorizedKeys() {
        return this.authorizedKeys;
    }
    /**
     * @return The profile email address. This address will be used for communication with Linode as necessary.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.
     * 
     */
    public Boolean emailNotifications() {
        return this.emailNotifications;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.
     * 
     */
    public Boolean ipWhitelistEnabled() {
        return this.ipWhitelistEnabled;
    }
    /**
     * @return The methods of authentication allowed when connecting via Lish. &#39;keys_only&#39; is the most secure with the intent to use Lish, and &#39;disabled&#39; is recommended for users that will not use Lish at all.
     * 
     */
    public String lishAuthMethod() {
        return this.lishAuthMethod;
    }
    /**
     * @return Credit Card information associated with this Account.
     * 
     */
    public List<GetProfileReferral> referrals() {
        return this.referrals;
    }
    /**
     * @return If true, the user has restrictions on what can be accessed on the Account.
     * 
     */
    public Boolean restricted() {
        return this.restricted;
    }
    /**
     * @return The profile&#39;s preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return If true, logins from untrusted computers will require Two Factor Authentication.
     * 
     */
    public Boolean twoFactorAuth() {
        return this.twoFactorAuth;
    }
    /**
     * @return The username for logging in to Linode services.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProfileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> authorizedKeys;
        private String email;
        private Boolean emailNotifications;
        private String id;
        private Boolean ipWhitelistEnabled;
        private String lishAuthMethod;
        private List<GetProfileReferral> referrals;
        private Boolean restricted;
        private String timezone;
        private Boolean twoFactorAuth;
        private String username;
        public Builder() {}
        public Builder(GetProfileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizedKeys = defaults.authorizedKeys;
    	      this.email = defaults.email;
    	      this.emailNotifications = defaults.emailNotifications;
    	      this.id = defaults.id;
    	      this.ipWhitelistEnabled = defaults.ipWhitelistEnabled;
    	      this.lishAuthMethod = defaults.lishAuthMethod;
    	      this.referrals = defaults.referrals;
    	      this.restricted = defaults.restricted;
    	      this.timezone = defaults.timezone;
    	      this.twoFactorAuth = defaults.twoFactorAuth;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder authorizedKeys(List<String> authorizedKeys) {
            if (authorizedKeys == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "authorizedKeys");
            }
            this.authorizedKeys = authorizedKeys;
            return this;
        }
        public Builder authorizedKeys(String... authorizedKeys) {
            return authorizedKeys(List.of(authorizedKeys));
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emailNotifications(Boolean emailNotifications) {
            if (emailNotifications == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "emailNotifications");
            }
            this.emailNotifications = emailNotifications;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipWhitelistEnabled(Boolean ipWhitelistEnabled) {
            if (ipWhitelistEnabled == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "ipWhitelistEnabled");
            }
            this.ipWhitelistEnabled = ipWhitelistEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder lishAuthMethod(String lishAuthMethod) {
            if (lishAuthMethod == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "lishAuthMethod");
            }
            this.lishAuthMethod = lishAuthMethod;
            return this;
        }
        @CustomType.Setter
        public Builder referrals(List<GetProfileReferral> referrals) {
            if (referrals == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "referrals");
            }
            this.referrals = referrals;
            return this;
        }
        public Builder referrals(GetProfileReferral... referrals) {
            return referrals(List.of(referrals));
        }
        @CustomType.Setter
        public Builder restricted(Boolean restricted) {
            if (restricted == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "restricted");
            }
            this.restricted = restricted;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder twoFactorAuth(Boolean twoFactorAuth) {
            if (twoFactorAuth == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "twoFactorAuth");
            }
            this.twoFactorAuth = twoFactorAuth;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetProfileResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetProfileResult build() {
            final var _resultValue = new GetProfileResult();
            _resultValue.authorizedKeys = authorizedKeys;
            _resultValue.email = email;
            _resultValue.emailNotifications = emailNotifications;
            _resultValue.id = id;
            _resultValue.ipWhitelistEnabled = ipWhitelistEnabled;
            _resultValue.lishAuthMethod = lishAuthMethod;
            _resultValue.referrals = referrals;
            _resultValue.restricted = restricted;
            _resultValue.timezone = timezone;
            _resultValue.twoFactorAuth = twoFactorAuth;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
