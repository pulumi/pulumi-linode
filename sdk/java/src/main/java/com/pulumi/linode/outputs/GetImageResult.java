// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetImageReplication;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetImageResult {
    private List<String> capabilities;
    /**
     * @return When this Image was created.
     * 
     */
    private String created;
    /**
     * @return The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     */
    private String createdBy;
    /**
     * @return Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     */
    private Boolean deprecated;
    /**
     * @return A detailed description of this Image.
     * 
     */
    private String description;
    private String expiry;
    private String id;
    /**
     * @return True if the Image is public.
     * 
     */
    private Boolean isPublic;
    /**
     * @return A short description of the Image.
     * 
     */
    private String label;
    /**
     * @return A list of image replication regions and corresponding status.
     * 
     */
    private @Nullable List<GetImageReplication> replications;
    /**
     * @return The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     */
    private Integer size;
    /**
     * @return The status of an image replica.
     * 
     */
    private String status;
    /**
     * @return A list of customized tags.
     * 
     */
    private List<String> tags;
    /**
     * @return The total size of the image in all available regions.
     * 
     */
    private Integer totalSize;
    /**
     * @return How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     */
    private String type;
    /**
     * @return The upstream distribution vendor. `None` for private Images.
     * 
     */
    private String vendor;

    private GetImageResult() {}
    public List<String> capabilities() {
        return this.capabilities;
    }
    /**
     * @return When this Image was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     */
    public Boolean deprecated() {
        return this.deprecated;
    }
    /**
     * @return A detailed description of this Image.
     * 
     */
    public String description() {
        return this.description;
    }
    public String expiry() {
        return this.expiry;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return True if the Image is public.
     * 
     */
    public Boolean isPublic() {
        return this.isPublic;
    }
    /**
     * @return A short description of the Image.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return A list of image replication regions and corresponding status.
     * 
     */
    public List<GetImageReplication> replications() {
        return this.replications == null ? List.of() : this.replications;
    }
    /**
     * @return The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The status of an image replica.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of customized tags.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The total size of the image in all available regions.
     * 
     */
    public Integer totalSize() {
        return this.totalSize;
    }
    /**
     * @return How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The upstream distribution vendor. `None` for private Images.
     * 
     */
    public String vendor() {
        return this.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> capabilities;
        private String created;
        private String createdBy;
        private Boolean deprecated;
        private String description;
        private String expiry;
        private String id;
        private Boolean isPublic;
        private String label;
        private @Nullable List<GetImageReplication> replications;
        private Integer size;
        private String status;
        private List<String> tags;
        private Integer totalSize;
        private String type;
        private String vendor;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.created = defaults.created;
    	      this.createdBy = defaults.createdBy;
    	      this.deprecated = defaults.deprecated;
    	      this.description = defaults.description;
    	      this.expiry = defaults.expiry;
    	      this.id = defaults.id;
    	      this.isPublic = defaults.isPublic;
    	      this.label = defaults.label;
    	      this.replications = defaults.replications;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.totalSize = defaults.totalSize;
    	      this.type = defaults.type;
    	      this.vendor = defaults.vendor;
        }

        @CustomType.Setter
        public Builder capabilities(List<String> capabilities) {
            if (capabilities == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "capabilities");
            }
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder deprecated(Boolean deprecated) {
            if (deprecated == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "deprecated");
            }
            this.deprecated = deprecated;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expiry(String expiry) {
            if (expiry == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "expiry");
            }
            this.expiry = expiry;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(Boolean isPublic) {
            if (isPublic == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "isPublic");
            }
            this.isPublic = isPublic;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder replications(@Nullable List<GetImageReplication> replications) {

            this.replications = replications;
            return this;
        }
        public Builder replications(GetImageReplication... replications) {
            return replications(List.of(replications));
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder totalSize(Integer totalSize) {
            if (totalSize == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "totalSize");
            }
            this.totalSize = totalSize;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vendor(String vendor) {
            if (vendor == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "vendor");
            }
            this.vendor = vendor;
            return this;
        }
        public GetImageResult build() {
            final var _resultValue = new GetImageResult();
            _resultValue.capabilities = capabilities;
            _resultValue.created = created;
            _resultValue.createdBy = createdBy;
            _resultValue.deprecated = deprecated;
            _resultValue.description = description;
            _resultValue.expiry = expiry;
            _resultValue.id = id;
            _resultValue.isPublic = isPublic;
            _resultValue.label = label;
            _resultValue.replications = replications;
            _resultValue.size = size;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.totalSize = totalSize;
            _resultValue.type = type;
            _resultValue.vendor = vendor;
            return _resultValue;
        }
    }
}
