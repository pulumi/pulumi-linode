// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseAccessControlsState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseAccessControlsState Empty = new DatabaseAccessControlsState();

    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     */
    @Import(name="allowLists")
    private @Nullable Output<List<String>> allowLists;

    /**
     * @return A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     * 
     */
    public Optional<Output<List<String>>> allowLists() {
        return Optional.ofNullable(this.allowLists);
    }

    /**
     * The unique ID of the target database.
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<Integer> databaseId;

    /**
     * @return The unique ID of the target database.
     * 
     */
    public Optional<Output<Integer>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    /**
     * The unique type of the target database. (`mysql`, `postgresql`)
     * 
     */
    @Import(name="databaseType")
    private @Nullable Output<String> databaseType;

    /**
     * @return The unique type of the target database. (`mysql`, `postgresql`)
     * 
     */
    public Optional<Output<String>> databaseType() {
        return Optional.ofNullable(this.databaseType);
    }

    private DatabaseAccessControlsState() {}

    private DatabaseAccessControlsState(DatabaseAccessControlsState $) {
        this.allowLists = $.allowLists;
        this.databaseId = $.databaseId;
        this.databaseType = $.databaseType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseAccessControlsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseAccessControlsState $;

        public Builder() {
            $ = new DatabaseAccessControlsState();
        }

        public Builder(DatabaseAccessControlsState defaults) {
            $ = new DatabaseAccessControlsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(@Nullable Output<List<String>> allowLists) {
            $.allowLists = allowLists;
            return this;
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(List<String> allowLists) {
            return allowLists(Output.of(allowLists));
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(String... allowLists) {
            return allowLists(List.of(allowLists));
        }

        /**
         * @param databaseId The unique ID of the target database.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(@Nullable Output<Integer> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId The unique ID of the target database.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Integer databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param databaseType The unique type of the target database. (`mysql`, `postgresql`)
         * 
         * @return builder
         * 
         */
        public Builder databaseType(@Nullable Output<String> databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        /**
         * @param databaseType The unique type of the target database. (`mysql`, `postgresql`)
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            return databaseType(Output.of(databaseType));
        }

        public DatabaseAccessControlsState build() {
            return $;
        }
    }

}
