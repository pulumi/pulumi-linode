// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetImagesImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetImagesImageArgs Empty = new GetImagesImageArgs();

    @Import(name="capabilities", required=true)
    private Output<List<String>> capabilities;

    public Output<List<String>> capabilities() {
        return this.capabilities;
    }

    /**
     * When this Image was created.
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return When this Image was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     */
    @Import(name="createdBy", required=true)
    private Output<String> createdBy;

    /**
     * @return The name of the User who created this Image, or &#34;linode&#34; for official Images.
     * 
     */
    public Output<String> createdBy() {
        return this.createdBy;
    }

    /**
     * Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     */
    @Import(name="deprecated", required=true)
    private Output<Boolean> deprecated;

    /**
     * @return Whether or not this Image is deprecated. Will only be true for deprecated public Images.
     * 
     */
    public Output<Boolean> deprecated() {
        return this.deprecated;
    }

    /**
     * A detailed description of this Image.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A detailed description of this Image.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    @Import(name="expiry", required=true)
    private Output<String> expiry;

    public Output<String> expiry() {
        return this.expiry;
    }

    /**
     * The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * True if the Image is public.
     * 
     */
    @Import(name="isPublic", required=true)
    private Output<Boolean> isPublic;

    /**
     * @return True if the Image is public.
     * 
     */
    public Output<Boolean> isPublic() {
        return this.isPublic;
    }

    /**
     * A short description of the Image.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return A short description of the Image.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return The minimum size this Image needs to deploy. Size is in MB. example: 2500
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return The current status of this image. (`creating`, `pending_upload`, `available`)
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The upstream distribution vendor. `None` for private Images.
     * 
     */
    @Import(name="vendor", required=true)
    private Output<String> vendor;

    /**
     * @return The upstream distribution vendor. `None` for private Images.
     * 
     */
    public Output<String> vendor() {
        return this.vendor;
    }

    private GetImagesImageArgs() {}

    private GetImagesImageArgs(GetImagesImageArgs $) {
        this.capabilities = $.capabilities;
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.deprecated = $.deprecated;
        this.description = $.description;
        this.expiry = $.expiry;
        this.id = $.id;
        this.isPublic = $.isPublic;
        this.label = $.label;
        this.size = $.size;
        this.status = $.status;
        this.type = $.type;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagesImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagesImageArgs $;

        public Builder() {
            $ = new GetImagesImageArgs();
        }

        public Builder(GetImagesImageArgs defaults) {
            $ = new GetImagesImageArgs(Objects.requireNonNull(defaults));
        }

        public Builder capabilities(Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param created When this Image was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When this Image was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param createdBy The name of the User who created this Image, or &#34;linode&#34; for official Images.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The name of the User who created this Image, or &#34;linode&#34; for official Images.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param deprecated Whether or not this Image is deprecated. Will only be true for deprecated public Images.
         * 
         * @return builder
         * 
         */
        public Builder deprecated(Output<Boolean> deprecated) {
            $.deprecated = deprecated;
            return this;
        }

        /**
         * @param deprecated Whether or not this Image is deprecated. Will only be true for deprecated public Images.
         * 
         * @return builder
         * 
         */
        public Builder deprecated(Boolean deprecated) {
            return deprecated(Output.of(deprecated));
        }

        /**
         * @param description A detailed description of this Image.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A detailed description of this Image.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder expiry(Output<String> expiry) {
            $.expiry = expiry;
            return this;
        }

        public Builder expiry(String expiry) {
            return expiry(Output.of(expiry));
        }

        /**
         * @param id The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isPublic True if the Image is public.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param isPublic True if the Image is public.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param label A short description of the Image.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A short description of the Image.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param size The minimum size this Image needs to deploy. Size is in MB. example: 2500
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The minimum size this Image needs to deploy. Size is in MB. example: 2500
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param status The current status of this image. (`creating`, `pending_upload`, `available`)
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of this image. (`creating`, `pending_upload`, `available`)
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type How the Image was created. Manual Images can be created at any time. &#34;Automatic&#34; Images are created automatically from a deleted Linode. (`manual`, `automatic`)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vendor The upstream distribution vendor. `None` for private Images.
         * 
         * @return builder
         * 
         */
        public Builder vendor(Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        /**
         * @param vendor The upstream distribution vendor. `None` for private Images.
         * 
         * @return builder
         * 
         */
        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public GetImagesImageArgs build() {
            $.capabilities = Objects.requireNonNull($.capabilities, "expected parameter 'capabilities' to be non-null");
            $.created = Objects.requireNonNull($.created, "expected parameter 'created' to be non-null");
            $.createdBy = Objects.requireNonNull($.createdBy, "expected parameter 'createdBy' to be non-null");
            $.deprecated = Objects.requireNonNull($.deprecated, "expected parameter 'deprecated' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.expiry = Objects.requireNonNull($.expiry, "expected parameter 'expiry' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isPublic = Objects.requireNonNull($.isPublic, "expected parameter 'isPublic' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.vendor = Objects.requireNonNull($.vendor, "expected parameter 'vendor' to be non-null");
            return $;
        }
    }

}
