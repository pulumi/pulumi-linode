// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InstanceConfigInterfaceIpv6RangeArgs;
import com.pulumi.linode.inputs.InstanceConfigInterfaceIpv6SlaacArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfigInterfaceIpv6Args extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfigInterfaceIpv6Args Empty = new InstanceConfigInterfaceIpv6Args();

    /**
     * If true, connections from the interface to IPv6 addresses outside the VPC, and connections from IPv6 addresses outside the VPC to the interface will be permitted. (Default: `false`)
     * 
     * * `slaac` - (Optional) An array of SLAAC prefixes to use for this interface.
     * 
     * * `range` - (Optional) An array of IPv6 ranges to use for this interface.
     * 
     */
    @Import(name="isPublic")
    private @Nullable Output<Boolean> isPublic;

    /**
     * @return If true, connections from the interface to IPv6 addresses outside the VPC, and connections from IPv6 addresses outside the VPC to the interface will be permitted. (Default: `false`)
     * 
     * * `slaac` - (Optional) An array of SLAAC prefixes to use for this interface.
     * 
     * * `range` - (Optional) An array of IPv6 ranges to use for this interface.
     * 
     */
    public Optional<Output<Boolean>> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    /**
     * A prefix to add to this interface, or `auto` for a new IPv6 prefix to be automatically allocated.
     * 
     */
    @Import(name="ranges")
    private @Nullable Output<List<InstanceConfigInterfaceIpv6RangeArgs>> ranges;

    /**
     * @return A prefix to add to this interface, or `auto` for a new IPv6 prefix to be automatically allocated.
     * 
     */
    public Optional<Output<List<InstanceConfigInterfaceIpv6RangeArgs>>> ranges() {
        return Optional.ofNullable(this.ranges);
    }

    /**
     * An array of SLAAC prefixes to use for this interface.
     * 
     */
    @Import(name="slaacs")
    private @Nullable Output<List<InstanceConfigInterfaceIpv6SlaacArgs>> slaacs;

    /**
     * @return An array of SLAAC prefixes to use for this interface.
     * 
     */
    public Optional<Output<List<InstanceConfigInterfaceIpv6SlaacArgs>>> slaacs() {
        return Optional.ofNullable(this.slaacs);
    }

    private InstanceConfigInterfaceIpv6Args() {}

    private InstanceConfigInterfaceIpv6Args(InstanceConfigInterfaceIpv6Args $) {
        this.isPublic = $.isPublic;
        this.ranges = $.ranges;
        this.slaacs = $.slaacs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfigInterfaceIpv6Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfigInterfaceIpv6Args $;

        public Builder() {
            $ = new InstanceConfigInterfaceIpv6Args();
        }

        public Builder(InstanceConfigInterfaceIpv6Args defaults) {
            $ = new InstanceConfigInterfaceIpv6Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param isPublic If true, connections from the interface to IPv6 addresses outside the VPC, and connections from IPv6 addresses outside the VPC to the interface will be permitted. (Default: `false`)
         * 
         * * `slaac` - (Optional) An array of SLAAC prefixes to use for this interface.
         * 
         * * `range` - (Optional) An array of IPv6 ranges to use for this interface.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(@Nullable Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param isPublic If true, connections from the interface to IPv6 addresses outside the VPC, and connections from IPv6 addresses outside the VPC to the interface will be permitted. (Default: `false`)
         * 
         * * `slaac` - (Optional) An array of SLAAC prefixes to use for this interface.
         * 
         * * `range` - (Optional) An array of IPv6 ranges to use for this interface.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param ranges A prefix to add to this interface, or `auto` for a new IPv6 prefix to be automatically allocated.
         * 
         * @return builder
         * 
         */
        public Builder ranges(@Nullable Output<List<InstanceConfigInterfaceIpv6RangeArgs>> ranges) {
            $.ranges = ranges;
            return this;
        }

        /**
         * @param ranges A prefix to add to this interface, or `auto` for a new IPv6 prefix to be automatically allocated.
         * 
         * @return builder
         * 
         */
        public Builder ranges(List<InstanceConfigInterfaceIpv6RangeArgs> ranges) {
            return ranges(Output.of(ranges));
        }

        /**
         * @param ranges A prefix to add to this interface, or `auto` for a new IPv6 prefix to be automatically allocated.
         * 
         * @return builder
         * 
         */
        public Builder ranges(InstanceConfigInterfaceIpv6RangeArgs... ranges) {
            return ranges(List.of(ranges));
        }

        /**
         * @param slaacs An array of SLAAC prefixes to use for this interface.
         * 
         * @return builder
         * 
         */
        public Builder slaacs(@Nullable Output<List<InstanceConfigInterfaceIpv6SlaacArgs>> slaacs) {
            $.slaacs = slaacs;
            return this;
        }

        /**
         * @param slaacs An array of SLAAC prefixes to use for this interface.
         * 
         * @return builder
         * 
         */
        public Builder slaacs(List<InstanceConfigInterfaceIpv6SlaacArgs> slaacs) {
            return slaacs(Output.of(slaacs));
        }

        /**
         * @param slaacs An array of SLAAC prefixes to use for this interface.
         * 
         * @return builder
         * 
         */
        public Builder slaacs(InstanceConfigInterfaceIpv6SlaacArgs... slaacs) {
            return slaacs(List.of(slaacs));
        }

        public InstanceConfigInterfaceIpv6Args build() {
            return $;
        }
    }

}
