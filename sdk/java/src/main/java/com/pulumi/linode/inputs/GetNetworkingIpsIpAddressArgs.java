// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetNetworkingIpsIpAddressVpcNat11Args;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetNetworkingIpsIpAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetNetworkingIpsIpAddressArgs Empty = new GetNetworkingIpsIpAddressArgs();

    /**
     * The IPv4 address that is configured as a 1:1 NAT for this VPC interface.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return The IPv4 address that is configured as a 1:1 NAT for this VPC interface.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * The default gateway for this address.
     * 
     */
    @Import(name="gateway", required=true)
    private Output<String> gateway;

    /**
     * @return The default gateway for this address.
     * 
     */
    public Output<String> gateway() {
        return this.gateway;
    }

    /**
     * The ID of the Linode this address currently belongs to.
     * 
     */
    @Import(name="linodeId", required=true)
    private Output<Integer> linodeId;

    /**
     * @return The ID of the Linode this address currently belongs to.
     * 
     */
    public Output<Integer> linodeId() {
        return this.linodeId;
    }

    /**
     * The number of bits set in the subnet mask.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<Integer> prefix;

    /**
     * @return The number of bits set in the subnet mask.
     * 
     */
    public Output<Integer> prefix() {
        return this.prefix;
    }

    /**
     * Whether this is a public or private IP address.
     * 
     */
    @Import(name="public", required=true)
    private Output<Boolean> public_;

    /**
     * @return Whether this is a public or private IP address.
     * 
     */
    public Output<Boolean> public_() {
        return this.public_;
    }

    /**
     * The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
     * 
     */
    @Import(name="rdns", required=true)
    private Output<String> rdns;

    /**
     * @return The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
     * 
     */
    public Output<String> rdns() {
        return this.rdns;
    }

    /**
     * The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Whether this IP address is a reserved IP.
     * 
     */
    @Import(name="reserved", required=true)
    private Output<Boolean> reserved;

    /**
     * @return Whether this IP address is a reserved IP.
     * 
     */
    public Output<Boolean> reserved() {
        return this.reserved;
    }

    /**
     * The mask that separates host bits from network bits for this address.
     * 
     */
    @Import(name="subnetMask", required=true)
    private Output<String> subnetMask;

    /**
     * @return The mask that separates host bits from network bits for this address.
     * 
     */
    public Output<String> subnetMask() {
        return this.subnetMask;
    }

    /**
     * The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
     * 
     */
    @Import(name="vpcNat11", required=true)
    private Output<GetNetworkingIpsIpAddressVpcNat11Args> vpcNat11;

    /**
     * @return Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
     * 
     */
    public Output<GetNetworkingIpsIpAddressVpcNat11Args> vpcNat11() {
        return this.vpcNat11;
    }

    private GetNetworkingIpsIpAddressArgs() {}

    private GetNetworkingIpsIpAddressArgs(GetNetworkingIpsIpAddressArgs $) {
        this.address = $.address;
        this.gateway = $.gateway;
        this.linodeId = $.linodeId;
        this.prefix = $.prefix;
        this.public_ = $.public_;
        this.rdns = $.rdns;
        this.region = $.region;
        this.reserved = $.reserved;
        this.subnetMask = $.subnetMask;
        this.type = $.type;
        this.vpcNat11 = $.vpcNat11;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNetworkingIpsIpAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNetworkingIpsIpAddressArgs $;

        public Builder() {
            $ = new GetNetworkingIpsIpAddressArgs();
        }

        public Builder(GetNetworkingIpsIpAddressArgs defaults) {
            $ = new GetNetworkingIpsIpAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The IPv4 address that is configured as a 1:1 NAT for this VPC interface.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The IPv4 address that is configured as a 1:1 NAT for this VPC interface.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param gateway The default gateway for this address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway The default gateway for this address.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param linodeId The ID of the Linode this address currently belongs to.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Output<Integer> linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param linodeId The ID of the Linode this address currently belongs to.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            return linodeId(Output.of(linodeId));
        }

        /**
         * @param prefix The number of bits set in the subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output<Integer> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The number of bits set in the subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Integer prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param public_ Whether this is a public or private IP address.
         * 
         * @return builder
         * 
         */
        public Builder public_(Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Whether this is a public or private IP address.
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param rdns The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
         * 
         * @return builder
         * 
         */
        public Builder rdns(Output<String> rdns) {
            $.rdns = rdns;
            return this;
        }

        /**
         * @param rdns The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
         * 
         * @return builder
         * 
         */
        public Builder rdns(String rdns) {
            return rdns(Output.of(rdns));
        }

        /**
         * @param region The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param reserved Whether this IP address is a reserved IP.
         * 
         * @return builder
         * 
         */
        public Builder reserved(Output<Boolean> reserved) {
            $.reserved = reserved;
            return this;
        }

        /**
         * @param reserved Whether this IP address is a reserved IP.
         * 
         * @return builder
         * 
         */
        public Builder reserved(Boolean reserved) {
            return reserved(Output.of(reserved));
        }

        /**
         * @param subnetMask The mask that separates host bits from network bits for this address.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask The mask that separates host bits from network bits for this address.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        /**
         * @param type The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpcNat11 Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcNat11(Output<GetNetworkingIpsIpAddressVpcNat11Args> vpcNat11) {
            $.vpcNat11 = vpcNat11;
            return this;
        }

        /**
         * @param vpcNat11 Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcNat11(GetNetworkingIpsIpAddressVpcNat11Args vpcNat11) {
            return vpcNat11(Output.of(vpcNat11));
        }

        public GetNetworkingIpsIpAddressArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "address");
            }
            if ($.gateway == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "gateway");
            }
            if ($.linodeId == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "linodeId");
            }
            if ($.prefix == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "prefix");
            }
            if ($.public_ == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "public_");
            }
            if ($.rdns == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "rdns");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "region");
            }
            if ($.reserved == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "reserved");
            }
            if ($.subnetMask == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "subnetMask");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "type");
            }
            if ($.vpcNat11 == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsIpAddressArgs", "vpcNat11");
            }
            return $;
        }
    }

}
