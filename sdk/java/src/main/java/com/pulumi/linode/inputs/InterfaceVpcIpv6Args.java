// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InterfaceVpcIpv6AssignedRangeArgs;
import com.pulumi.linode.inputs.InterfaceVpcIpv6AssignedSlaacArgs;
import com.pulumi.linode.inputs.InterfaceVpcIpv6RangeArgs;
import com.pulumi.linode.inputs.InterfaceVpcIpv6SlaacArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfaceVpcIpv6Args extends com.pulumi.resources.ResourceArgs {

    public static final InterfaceVpcIpv6Args Empty = new InterfaceVpcIpv6Args();

    /**
     * Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
     * 
     */
    @Import(name="assignedRanges")
    private @Nullable Output<List<InterfaceVpcIpv6AssignedRangeArgs>> assignedRanges;

    /**
     * @return Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv6AssignedRangeArgs>>> assignedRanges() {
        return Optional.ofNullable(this.assignedRanges);
    }

    /**
     * Assigned IPv6 SLAAC address ranges to use in the VPC subnet, calculated from `slaac` input.
     * 
     */
    @Import(name="assignedSlaacs")
    private @Nullable Output<List<InterfaceVpcIpv6AssignedSlaacArgs>> assignedSlaacs;

    /**
     * @return Assigned IPv6 SLAAC address ranges to use in the VPC subnet, calculated from `slaac` input.
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv6AssignedSlaacArgs>>> assignedSlaacs() {
        return Optional.ofNullable(this.assignedSlaacs);
    }

    /**
     * Indicates whether the IPv6 configuration profile interface is public. (Default `false`)
     * 
     */
    @Import(name="isPublic")
    private @Nullable Output<Boolean> isPublic;

    /**
     * @return Indicates whether the IPv6 configuration profile interface is public. (Default `false`)
     * 
     */
    public Optional<Output<Boolean>> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    /**
     * Defines additional IPv6 network ranges.
     * 
     */
    @Import(name="ranges")
    private @Nullable Output<List<InterfaceVpcIpv6RangeArgs>> ranges;

    /**
     * @return Defines additional IPv6 network ranges.
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv6RangeArgs>>> ranges() {
        return Optional.ofNullable(this.ranges);
    }

    /**
     * Defines IPv6 SLAAC address ranges. An address is automatically generated from the assigned /64 prefix using the Linode’s MAC address, just like on public IPv6 interfaces. Router advertisements (RA) are sent to the Linode, so standard SLAAC configuration works without any changes.
     * 
     */
    @Import(name="slaacs")
    private @Nullable Output<List<InterfaceVpcIpv6SlaacArgs>> slaacs;

    /**
     * @return Defines IPv6 SLAAC address ranges. An address is automatically generated from the assigned /64 prefix using the Linode’s MAC address, just like on public IPv6 interfaces. Router advertisements (RA) are sent to the Linode, so standard SLAAC configuration works without any changes.
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv6SlaacArgs>>> slaacs() {
        return Optional.ofNullable(this.slaacs);
    }

    private InterfaceVpcIpv6Args() {}

    private InterfaceVpcIpv6Args(InterfaceVpcIpv6Args $) {
        this.assignedRanges = $.assignedRanges;
        this.assignedSlaacs = $.assignedSlaacs;
        this.isPublic = $.isPublic;
        this.ranges = $.ranges;
        this.slaacs = $.slaacs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfaceVpcIpv6Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfaceVpcIpv6Args $;

        public Builder() {
            $ = new InterfaceVpcIpv6Args();
        }

        public Builder(InterfaceVpcIpv6Args defaults) {
            $ = new InterfaceVpcIpv6Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(@Nullable Output<List<InterfaceVpcIpv6AssignedRangeArgs>> assignedRanges) {
            $.assignedRanges = assignedRanges;
            return this;
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(List<InterfaceVpcIpv6AssignedRangeArgs> assignedRanges) {
            return assignedRanges(Output.of(assignedRanges));
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(InterfaceVpcIpv6AssignedRangeArgs... assignedRanges) {
            return assignedRanges(List.of(assignedRanges));
        }

        /**
         * @param assignedSlaacs Assigned IPv6 SLAAC address ranges to use in the VPC subnet, calculated from `slaac` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedSlaacs(@Nullable Output<List<InterfaceVpcIpv6AssignedSlaacArgs>> assignedSlaacs) {
            $.assignedSlaacs = assignedSlaacs;
            return this;
        }

        /**
         * @param assignedSlaacs Assigned IPv6 SLAAC address ranges to use in the VPC subnet, calculated from `slaac` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedSlaacs(List<InterfaceVpcIpv6AssignedSlaacArgs> assignedSlaacs) {
            return assignedSlaacs(Output.of(assignedSlaacs));
        }

        /**
         * @param assignedSlaacs Assigned IPv6 SLAAC address ranges to use in the VPC subnet, calculated from `slaac` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedSlaacs(InterfaceVpcIpv6AssignedSlaacArgs... assignedSlaacs) {
            return assignedSlaacs(List.of(assignedSlaacs));
        }

        /**
         * @param isPublic Indicates whether the IPv6 configuration profile interface is public. (Default `false`)
         * 
         * @return builder
         * 
         */
        public Builder isPublic(@Nullable Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param isPublic Indicates whether the IPv6 configuration profile interface is public. (Default `false`)
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param ranges Defines additional IPv6 network ranges.
         * 
         * @return builder
         * 
         */
        public Builder ranges(@Nullable Output<List<InterfaceVpcIpv6RangeArgs>> ranges) {
            $.ranges = ranges;
            return this;
        }

        /**
         * @param ranges Defines additional IPv6 network ranges.
         * 
         * @return builder
         * 
         */
        public Builder ranges(List<InterfaceVpcIpv6RangeArgs> ranges) {
            return ranges(Output.of(ranges));
        }

        /**
         * @param ranges Defines additional IPv6 network ranges.
         * 
         * @return builder
         * 
         */
        public Builder ranges(InterfaceVpcIpv6RangeArgs... ranges) {
            return ranges(List.of(ranges));
        }

        /**
         * @param slaacs Defines IPv6 SLAAC address ranges. An address is automatically generated from the assigned /64 prefix using the Linode’s MAC address, just like on public IPv6 interfaces. Router advertisements (RA) are sent to the Linode, so standard SLAAC configuration works without any changes.
         * 
         * @return builder
         * 
         */
        public Builder slaacs(@Nullable Output<List<InterfaceVpcIpv6SlaacArgs>> slaacs) {
            $.slaacs = slaacs;
            return this;
        }

        /**
         * @param slaacs Defines IPv6 SLAAC address ranges. An address is automatically generated from the assigned /64 prefix using the Linode’s MAC address, just like on public IPv6 interfaces. Router advertisements (RA) are sent to the Linode, so standard SLAAC configuration works without any changes.
         * 
         * @return builder
         * 
         */
        public Builder slaacs(List<InterfaceVpcIpv6SlaacArgs> slaacs) {
            return slaacs(Output.of(slaacs));
        }

        /**
         * @param slaacs Defines IPv6 SLAAC address ranges. An address is automatically generated from the assigned /64 prefix using the Linode’s MAC address, just like on public IPv6 interfaces. Router advertisements (RA) are sent to the Linode, so standard SLAAC configuration works without any changes.
         * 
         * @return builder
         * 
         */
        public Builder slaacs(InterfaceVpcIpv6SlaacArgs... slaacs) {
            return slaacs(List.of(slaacs));
        }

        public InterfaceVpcIpv6Args build() {
            return $;
        }
    }

}
