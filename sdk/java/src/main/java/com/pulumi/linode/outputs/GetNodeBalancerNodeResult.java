// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNodeBalancerNodeResult {
    /**
     * @return The private IP Address where this backend can be reached.
     * 
     */
    private String address;
    private Integer configId;
    private Integer id;
    /**
     * @return The label of the Linode NodeBalancer Node. This is for display purposes only.
     * 
     */
    private String label;
    /**
     * @return The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)
     * 
     */
    private String mode;
    private Integer nodebalancerId;
    /**
     * @return The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).
     * 
     */
    private String status;
    /**
     * @return Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
     * 
     */
    private Integer weight;

    private GetNodeBalancerNodeResult() {}
    /**
     * @return The private IP Address where this backend can be reached.
     * 
     */
    public String address() {
        return this.address;
    }
    public Integer configId() {
        return this.configId;
    }
    public Integer id() {
        return this.id;
    }
    /**
     * @return The label of the Linode NodeBalancer Node. This is for display purposes only.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)
     * 
     */
    public String mode() {
        return this.mode;
    }
    public Integer nodebalancerId() {
        return this.nodebalancerId;
    }
    /**
     * @return The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeBalancerNodeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private Integer configId;
        private Integer id;
        private String label;
        private String mode;
        private Integer nodebalancerId;
        private String status;
        private Integer weight;
        public Builder() {}
        public Builder(GetNodeBalancerNodeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.configId = defaults.configId;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.mode = defaults.mode;
    	      this.nodebalancerId = defaults.nodebalancerId;
    	      this.status = defaults.status;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder configId(Integer configId) {
            this.configId = Objects.requireNonNull(configId);
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder nodebalancerId(Integer nodebalancerId) {
            this.nodebalancerId = Objects.requireNonNull(nodebalancerId);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            this.weight = Objects.requireNonNull(weight);
            return this;
        }
        public GetNodeBalancerNodeResult build() {
            final var _resultValue = new GetNodeBalancerNodeResult();
            _resultValue.address = address;
            _resultValue.configId = configId;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.mode = mode;
            _resultValue.nodebalancerId = nodebalancerId;
            _resultValue.status = status;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
