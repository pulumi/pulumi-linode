// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetChildAccountsChildAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetChildAccountsChildAccountArgs Empty = new GetChildAccountsChildAccountArgs();

    /**
     * When this account was first activated
     * 
     */
    @Import(name="activeSince", required=true)
    private Output<String> activeSince;

    /**
     * @return When this account was first activated
     * 
     */
    public Output<String> activeSince() {
        return this.activeSince;
    }

    /**
     * First line of this Account&#39;s billing address.
     * 
     */
    @Import(name="address1", required=true)
    private Output<String> address1;

    /**
     * @return First line of this Account&#39;s billing address.
     * 
     */
    public Output<String> address1() {
        return this.address1;
    }

    /**
     * Second line of this Account&#39;s billing address.
     * 
     */
    @Import(name="address2", required=true)
    private Output<String> address2;

    /**
     * @return Second line of this Account&#39;s billing address.
     * 
     */
    public Output<String> address2() {
        return this.address2;
    }

    /**
     * This Account&#39;s balance, in US dollars.
     * 
     */
    @Import(name="balance", required=true)
    private Output<Double> balance;

    /**
     * @return This Account&#39;s balance, in US dollars.
     * 
     */
    public Output<Double> balance() {
        return this.balance;
    }

    /**
     * A set containing all the capabilities of this Account.
     * 
     */
    @Import(name="capabilities", required=true)
    private Output<List<String>> capabilities;

    /**
     * @return A set containing all the capabilities of this Account.
     * 
     */
    public Output<List<String>> capabilities() {
        return this.capabilities;
    }

    /**
     * The city for this Account&#39;s billing address.
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    /**
     * @return The city for this Account&#39;s billing address.
     * 
     */
    public Output<String> city() {
        return this.city;
    }

    /**
     * The company name associated with this Account.
     * 
     */
    @Import(name="company", required=true)
    private Output<String> company;

    /**
     * @return The company name associated with this Account.
     * 
     */
    public Output<String> company() {
        return this.company;
    }

    /**
     * The two-letter country code of this Account&#39;s billing address.
     * 
     */
    @Import(name="country", required=true)
    private Output<String> country;

    /**
     * @return The two-letter country code of this Account&#39;s billing address.
     * 
     */
    public Output<String> country() {
        return this.country;
    }

    /**
     * The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * The unique ID of this Account.
     * 
     */
    @Import(name="euuid", required=true)
    private Output<String> euuid;

    /**
     * @return The unique ID of this Account.
     * 
     */
    public Output<String> euuid() {
        return this.euuid;
    }

    /**
     * The first name of the person associated with this Account.
     * 
     */
    @Import(name="firstName", required=true)
    private Output<String> firstName;

    /**
     * @return The first name of the person associated with this Account.
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }

    /**
     * The Email of the Account.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The Email of the Account.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The last name of the person associated with this Account.
     * 
     */
    @Import(name="lastName", required=true)
    private Output<String> lastName;

    /**
     * @return The last name of the person associated with this Account.
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }

    /**
     * The phone number associated with this Account.
     * 
     */
    @Import(name="phone", required=true)
    private Output<String> phone;

    /**
     * @return The phone number associated with this Account.
     * 
     */
    public Output<String> phone() {
        return this.phone;
    }

    /**
     * If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    /**
     * @return If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     */
    public Output<String> state() {
        return this.state;
    }

    /**
     * The zip code of this Account&#39;s billing address.
     * 
     */
    @Import(name="zip", required=true)
    private Output<String> zip;

    /**
     * @return The zip code of this Account&#39;s billing address.
     * 
     */
    public Output<String> zip() {
        return this.zip;
    }

    private GetChildAccountsChildAccountArgs() {}

    private GetChildAccountsChildAccountArgs(GetChildAccountsChildAccountArgs $) {
        this.activeSince = $.activeSince;
        this.address1 = $.address1;
        this.address2 = $.address2;
        this.balance = $.balance;
        this.capabilities = $.capabilities;
        this.city = $.city;
        this.company = $.company;
        this.country = $.country;
        this.email = $.email;
        this.euuid = $.euuid;
        this.firstName = $.firstName;
        this.id = $.id;
        this.lastName = $.lastName;
        this.phone = $.phone;
        this.state = $.state;
        this.zip = $.zip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetChildAccountsChildAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetChildAccountsChildAccountArgs $;

        public Builder() {
            $ = new GetChildAccountsChildAccountArgs();
        }

        public Builder(GetChildAccountsChildAccountArgs defaults) {
            $ = new GetChildAccountsChildAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeSince When this account was first activated
         * 
         * @return builder
         * 
         */
        public Builder activeSince(Output<String> activeSince) {
            $.activeSince = activeSince;
            return this;
        }

        /**
         * @param activeSince When this account was first activated
         * 
         * @return builder
         * 
         */
        public Builder activeSince(String activeSince) {
            return activeSince(Output.of(activeSince));
        }

        /**
         * @param address1 First line of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder address1(Output<String> address1) {
            $.address1 = address1;
            return this;
        }

        /**
         * @param address1 First line of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder address1(String address1) {
            return address1(Output.of(address1));
        }

        /**
         * @param address2 Second line of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder address2(Output<String> address2) {
            $.address2 = address2;
            return this;
        }

        /**
         * @param address2 Second line of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder address2(String address2) {
            return address2(Output.of(address2));
        }

        /**
         * @param balance This Account&#39;s balance, in US dollars.
         * 
         * @return builder
         * 
         */
        public Builder balance(Output<Double> balance) {
            $.balance = balance;
            return this;
        }

        /**
         * @param balance This Account&#39;s balance, in US dollars.
         * 
         * @return builder
         * 
         */
        public Builder balance(Double balance) {
            return balance(Output.of(balance));
        }

        /**
         * @param capabilities A set containing all the capabilities of this Account.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities A set containing all the capabilities of this Account.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities A set containing all the capabilities of this Account.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param city The city for this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        /**
         * @param city The city for this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            return city(Output.of(city));
        }

        /**
         * @param company The company name associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder company(Output<String> company) {
            $.company = company;
            return this;
        }

        /**
         * @param company The company name associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder company(String company) {
            return company(Output.of(company));
        }

        /**
         * @param country The two-letter country code of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder country(Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country The two-letter country code of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param email The email address for this Account, for account management communications, and may be used for other communications as configured.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email address for this Account, for account management communications, and may be used for other communications as configured.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param euuid The unique ID of this Account.
         * 
         * @return builder
         * 
         */
        public Builder euuid(Output<String> euuid) {
            $.euuid = euuid;
            return this;
        }

        /**
         * @param euuid The unique ID of this Account.
         * 
         * @return builder
         * 
         */
        public Builder euuid(String euuid) {
            return euuid(Output.of(euuid));
        }

        /**
         * @param firstName The first name of the person associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName The first name of the person associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param id The Email of the Account.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The Email of the Account.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param lastName The last name of the person associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName The last name of the person associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param phone The phone number associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder phone(Output<String> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone The phone number associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        /**
         * @param state If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param zip The zip code of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder zip(Output<String> zip) {
            $.zip = zip;
            return this;
        }

        /**
         * @param zip The zip code of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder zip(String zip) {
            return zip(Output.of(zip));
        }

        public GetChildAccountsChildAccountArgs build() {
            if ($.activeSince == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "activeSince");
            }
            if ($.address1 == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "address1");
            }
            if ($.address2 == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "address2");
            }
            if ($.balance == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "balance");
            }
            if ($.capabilities == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "capabilities");
            }
            if ($.city == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "city");
            }
            if ($.company == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "company");
            }
            if ($.country == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "country");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "email");
            }
            if ($.euuid == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "euuid");
            }
            if ($.firstName == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "firstName");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "id");
            }
            if ($.lastName == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "lastName");
            }
            if ($.phone == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "phone");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "state");
            }
            if ($.zip == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccountArgs", "zip");
            }
            return $;
        }
    }

}
