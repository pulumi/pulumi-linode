// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNodeBalancerFirewallOutbound {
    /**
     * @return Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
     * 
     */
    private String action;
    /**
     * @return A list of IPv4 addresses or networks. Must be in IP/mask format.
     * 
     */
    private List<String> ipv4s;
    /**
     * @return A list of IPv6 addresses or networks. Must be in IP/mask format.
     * 
     */
    private List<String> ipv6s;
    /**
     * @return Used to identify this rule. For display purposes only.
     * 
     */
    private String label;
    /**
     * @return A string representation of ports and/or port ranges (i.e. &#34;443&#34; or &#34;80-90, 91&#34;).
     * 
     */
    private String ports;
    /**
     * @return The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
     * 
     */
    private String protocol;

    private GetNodeBalancerFirewallOutbound() {}
    /**
     * @return Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return A list of IPv4 addresses or networks. Must be in IP/mask format.
     * 
     */
    public List<String> ipv4s() {
        return this.ipv4s;
    }
    /**
     * @return A list of IPv6 addresses or networks. Must be in IP/mask format.
     * 
     */
    public List<String> ipv6s() {
        return this.ipv6s;
    }
    /**
     * @return Used to identify this rule. For display purposes only.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return A string representation of ports and/or port ranges (i.e. &#34;443&#34; or &#34;80-90, 91&#34;).
     * 
     */
    public String ports() {
        return this.ports;
    }
    /**
     * @return The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeBalancerFirewallOutbound defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<String> ipv4s;
        private List<String> ipv6s;
        private String label;
        private String ports;
        private String protocol;
        public Builder() {}
        public Builder(GetNodeBalancerFirewallOutbound defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.ipv4s = defaults.ipv4s;
    	      this.ipv6s = defaults.ipv6s;
    	      this.label = defaults.label;
    	      this.ports = defaults.ports;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetNodeBalancerFirewallOutbound", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4s(List<String> ipv4s) {
            if (ipv4s == null) {
              throw new MissingRequiredPropertyException("GetNodeBalancerFirewallOutbound", "ipv4s");
            }
            this.ipv4s = ipv4s;
            return this;
        }
        public Builder ipv4s(String... ipv4s) {
            return ipv4s(List.of(ipv4s));
        }
        @CustomType.Setter
        public Builder ipv6s(List<String> ipv6s) {
            if (ipv6s == null) {
              throw new MissingRequiredPropertyException("GetNodeBalancerFirewallOutbound", "ipv6s");
            }
            this.ipv6s = ipv6s;
            return this;
        }
        public Builder ipv6s(String... ipv6s) {
            return ipv6s(List.of(ipv6s));
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetNodeBalancerFirewallOutbound", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder ports(String ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetNodeBalancerFirewallOutbound", "ports");
            }
            this.ports = ports;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNodeBalancerFirewallOutbound", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        public GetNodeBalancerFirewallOutbound build() {
            final var _resultValue = new GetNodeBalancerFirewallOutbound();
            _resultValue.action = action;
            _resultValue.ipv4s = ipv4s;
            _resultValue.ipv6s = ipv6s;
            _resultValue.label = label;
            _resultValue.ports = ports;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
