// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.ObjectStorageBucketLifecycleRuleExpiration;
import com.pulumi.linode.outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ObjectStorageBucketLifecycleRule {
    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     * * `expiration` - (Optional) Specifies a period in the object&#39;s expire.
     * 
     * * `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.
     * 
     */
    private @Nullable Integer abortIncompleteMultipartUploadDays;
    /**
     * @return Specifies whether the lifecycle rule is active.
     * 
     */
    private Boolean enabled;
    private @Nullable ObjectStorageBucketLifecycleRuleExpiration expiration;
    /**
     * @return The unique identifier for the rule.
     * 
     */
    private @Nullable String id;
    private @Nullable ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
    /**
     * @return The object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    private @Nullable String prefix;

    private ObjectStorageBucketLifecycleRule() {}
    /**
     * @return Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     * 
     * * `expiration` - (Optional) Specifies a period in the object&#39;s expire.
     * 
     * * `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.
     * 
     */
    public Optional<Integer> abortIncompleteMultipartUploadDays() {
        return Optional.ofNullable(this.abortIncompleteMultipartUploadDays);
    }
    /**
     * @return Specifies whether the lifecycle rule is active.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    public Optional<ObjectStorageBucketLifecycleRuleExpiration> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return The unique identifier for the rule.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }
    /**
     * @return The object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectStorageBucketLifecycleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer abortIncompleteMultipartUploadDays;
        private Boolean enabled;
        private @Nullable ObjectStorageBucketLifecycleRuleExpiration expiration;
        private @Nullable String id;
        private @Nullable ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
        private @Nullable String prefix;
        public Builder() {}
        public Builder(ObjectStorageBucketLifecycleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUploadDays = defaults.abortIncompleteMultipartUploadDays;
    	      this.enabled = defaults.enabled;
    	      this.expiration = defaults.expiration;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.prefix = defaults.prefix;
        }

        @CustomType.Setter
        public Builder abortIncompleteMultipartUploadDays(@Nullable Integer abortIncompleteMultipartUploadDays) {
            this.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder expiration(@Nullable ObjectStorageBucketLifecycleRuleExpiration expiration) {
            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder noncurrentVersionExpiration(@Nullable ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        public ObjectStorageBucketLifecycleRule build() {
            final var o = new ObjectStorageBucketLifecycleRule();
            o.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            o.enabled = enabled;
            o.expiration = expiration;
            o.id = id;
            o.noncurrentVersionExpiration = noncurrentVersionExpiration;
            o.prefix = prefix;
            return o;
        }
    }
}
