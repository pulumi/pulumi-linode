// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNetworkingIpsFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetNetworkingIpsFilterArgs Empty = new GetNetworkingIpsFilterArgs();

    /**
     * The type of comparison to use for this filter.
     * 
     */
    @Import(name="matchBy")
    private @Nullable Output<String> matchBy;

    /**
     * @return The type of comparison to use for this filter.
     * 
     */
    public Optional<Output<String>> matchBy() {
        return Optional.ofNullable(this.matchBy);
    }

    /**
     * The name of the attribute to filter on.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the attribute to filter on.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The value(s) to be used in the filter.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return The value(s) to be used in the filter.
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private GetNetworkingIpsFilterArgs() {}

    private GetNetworkingIpsFilterArgs(GetNetworkingIpsFilterArgs $) {
        this.matchBy = $.matchBy;
        this.name = $.name;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNetworkingIpsFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNetworkingIpsFilterArgs $;

        public Builder() {
            $ = new GetNetworkingIpsFilterArgs();
        }

        public Builder(GetNetworkingIpsFilterArgs defaults) {
            $ = new GetNetworkingIpsFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchBy The type of comparison to use for this filter.
         * 
         * @return builder
         * 
         */
        public Builder matchBy(@Nullable Output<String> matchBy) {
            $.matchBy = matchBy;
            return this;
        }

        /**
         * @param matchBy The type of comparison to use for this filter.
         * 
         * @return builder
         * 
         */
        public Builder matchBy(String matchBy) {
            return matchBy(Output.of(matchBy));
        }

        /**
         * @param name The name of the attribute to filter on.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the attribute to filter on.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param values The value(s) to be used in the filter.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The value(s) to be used in the filter.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The value(s) to be used in the filter.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public GetNetworkingIpsFilterArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsFilterArgs", "name");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("GetNetworkingIpsFilterArgs", "values");
            }
            return $;
        }
    }

}
