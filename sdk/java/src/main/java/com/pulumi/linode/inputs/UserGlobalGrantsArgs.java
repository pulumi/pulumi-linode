// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserGlobalGrantsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserGlobalGrantsArgs Empty = new UserGlobalGrantsArgs();

    /**
     * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
     * 
     */
    @Import(name="accountAccess")
    private @Nullable Output<String> accountAccess;

    /**
     * @return The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
     * 
     */
    public Optional<Output<String>> accountAccess() {
        return Optional.ofNullable(this.accountAccess);
    }

    /**
     * If true, this User may add Databases.
     * 
     */
    @Import(name="addDatabases")
    private @Nullable Output<Boolean> addDatabases;

    /**
     * @return If true, this User may add Databases.
     * 
     */
    public Optional<Output<Boolean>> addDatabases() {
        return Optional.ofNullable(this.addDatabases);
    }

    /**
     * If true, this User may add Domains.
     * 
     */
    @Import(name="addDomains")
    private @Nullable Output<Boolean> addDomains;

    /**
     * @return If true, this User may add Domains.
     * 
     */
    public Optional<Output<Boolean>> addDomains() {
        return Optional.ofNullable(this.addDomains);
    }

    /**
     * If true, this User may add Firewalls.
     * 
     */
    @Import(name="addFirewalls")
    private @Nullable Output<Boolean> addFirewalls;

    /**
     * @return If true, this User may add Firewalls.
     * 
     */
    public Optional<Output<Boolean>> addFirewalls() {
        return Optional.ofNullable(this.addFirewalls);
    }

    /**
     * If true, this User may add Images.
     * 
     */
    @Import(name="addImages")
    private @Nullable Output<Boolean> addImages;

    /**
     * @return If true, this User may add Images.
     * 
     */
    public Optional<Output<Boolean>> addImages() {
        return Optional.ofNullable(this.addImages);
    }

    /**
     * If true, this User may create Linodes.
     * 
     */
    @Import(name="addLinodes")
    private @Nullable Output<Boolean> addLinodes;

    /**
     * @return If true, this User may create Linodes.
     * 
     */
    public Optional<Output<Boolean>> addLinodes() {
        return Optional.ofNullable(this.addLinodes);
    }

    /**
     * If true, this User may create Longview clients and view the current plan.
     * 
     */
    @Import(name="addLongview")
    private @Nullable Output<Boolean> addLongview;

    /**
     * @return If true, this User may create Longview clients and view the current plan.
     * 
     */
    public Optional<Output<Boolean>> addLongview() {
        return Optional.ofNullable(this.addLongview);
    }

    /**
     * If true, this User may add NodeBalancers.
     * 
     */
    @Import(name="addNodebalancers")
    private @Nullable Output<Boolean> addNodebalancers;

    /**
     * @return If true, this User may add NodeBalancers.
     * 
     */
    public Optional<Output<Boolean>> addNodebalancers() {
        return Optional.ofNullable(this.addNodebalancers);
    }

    /**
     * If true, this User may add Placement Groups.
     * 
     */
    @Import(name="addPlacementGroups")
    private @Nullable Output<Boolean> addPlacementGroups;

    /**
     * @return If true, this User may add Placement Groups.
     * 
     */
    public Optional<Output<Boolean>> addPlacementGroups() {
        return Optional.ofNullable(this.addPlacementGroups);
    }

    /**
     * If true, this User may add StackScripts.
     * 
     */
    @Import(name="addStackscripts")
    private @Nullable Output<Boolean> addStackscripts;

    /**
     * @return If true, this User may add StackScripts.
     * 
     */
    public Optional<Output<Boolean>> addStackscripts() {
        return Optional.ofNullable(this.addStackscripts);
    }

    /**
     * If true, this User may add Volumes.
     * 
     */
    @Import(name="addVolumes")
    private @Nullable Output<Boolean> addVolumes;

    /**
     * @return If true, this User may add Volumes.
     * 
     */
    public Optional<Output<Boolean>> addVolumes() {
        return Optional.ofNullable(this.addVolumes);
    }

    /**
     * If true, this User may add Virtual Private Clouds (VPCs).
     * 
     */
    @Import(name="addVpcs")
    private @Nullable Output<Boolean> addVpcs;

    /**
     * @return If true, this User may add Virtual Private Clouds (VPCs).
     * 
     */
    public Optional<Output<Boolean>> addVpcs() {
        return Optional.ofNullable(this.addVpcs);
    }

    /**
     * If true, this User may cancel the entire Account.
     * 
     */
    @Import(name="cancelAccount")
    private @Nullable Output<Boolean> cancelAccount;

    /**
     * @return If true, this User may cancel the entire Account.
     * 
     */
    public Optional<Output<Boolean>> cancelAccount() {
        return Optional.ofNullable(this.cancelAccount);
    }

    /**
     * If true, this User may manage the Account’s Longview subscription.
     * 
     */
    @Import(name="longviewSubscription")
    private @Nullable Output<Boolean> longviewSubscription;

    /**
     * @return If true, this User may manage the Account’s Longview subscription.
     * 
     */
    public Optional<Output<Boolean>> longviewSubscription() {
        return Optional.ofNullable(this.longviewSubscription);
    }

    private UserGlobalGrantsArgs() {}

    private UserGlobalGrantsArgs(UserGlobalGrantsArgs $) {
        this.accountAccess = $.accountAccess;
        this.addDatabases = $.addDatabases;
        this.addDomains = $.addDomains;
        this.addFirewalls = $.addFirewalls;
        this.addImages = $.addImages;
        this.addLinodes = $.addLinodes;
        this.addLongview = $.addLongview;
        this.addNodebalancers = $.addNodebalancers;
        this.addPlacementGroups = $.addPlacementGroups;
        this.addStackscripts = $.addStackscripts;
        this.addVolumes = $.addVolumes;
        this.addVpcs = $.addVpcs;
        this.cancelAccount = $.cancelAccount;
        this.longviewSubscription = $.longviewSubscription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserGlobalGrantsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserGlobalGrantsArgs $;

        public Builder() {
            $ = new UserGlobalGrantsArgs();
        }

        public Builder(UserGlobalGrantsArgs defaults) {
            $ = new UserGlobalGrantsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountAccess The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
         * 
         * @return builder
         * 
         */
        public Builder accountAccess(@Nullable Output<String> accountAccess) {
            $.accountAccess = accountAccess;
            return this;
        }

        /**
         * @param accountAccess The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
         * 
         * @return builder
         * 
         */
        public Builder accountAccess(String accountAccess) {
            return accountAccess(Output.of(accountAccess));
        }

        /**
         * @param addDatabases If true, this User may add Databases.
         * 
         * @return builder
         * 
         */
        public Builder addDatabases(@Nullable Output<Boolean> addDatabases) {
            $.addDatabases = addDatabases;
            return this;
        }

        /**
         * @param addDatabases If true, this User may add Databases.
         * 
         * @return builder
         * 
         */
        public Builder addDatabases(Boolean addDatabases) {
            return addDatabases(Output.of(addDatabases));
        }

        /**
         * @param addDomains If true, this User may add Domains.
         * 
         * @return builder
         * 
         */
        public Builder addDomains(@Nullable Output<Boolean> addDomains) {
            $.addDomains = addDomains;
            return this;
        }

        /**
         * @param addDomains If true, this User may add Domains.
         * 
         * @return builder
         * 
         */
        public Builder addDomains(Boolean addDomains) {
            return addDomains(Output.of(addDomains));
        }

        /**
         * @param addFirewalls If true, this User may add Firewalls.
         * 
         * @return builder
         * 
         */
        public Builder addFirewalls(@Nullable Output<Boolean> addFirewalls) {
            $.addFirewalls = addFirewalls;
            return this;
        }

        /**
         * @param addFirewalls If true, this User may add Firewalls.
         * 
         * @return builder
         * 
         */
        public Builder addFirewalls(Boolean addFirewalls) {
            return addFirewalls(Output.of(addFirewalls));
        }

        /**
         * @param addImages If true, this User may add Images.
         * 
         * @return builder
         * 
         */
        public Builder addImages(@Nullable Output<Boolean> addImages) {
            $.addImages = addImages;
            return this;
        }

        /**
         * @param addImages If true, this User may add Images.
         * 
         * @return builder
         * 
         */
        public Builder addImages(Boolean addImages) {
            return addImages(Output.of(addImages));
        }

        /**
         * @param addLinodes If true, this User may create Linodes.
         * 
         * @return builder
         * 
         */
        public Builder addLinodes(@Nullable Output<Boolean> addLinodes) {
            $.addLinodes = addLinodes;
            return this;
        }

        /**
         * @param addLinodes If true, this User may create Linodes.
         * 
         * @return builder
         * 
         */
        public Builder addLinodes(Boolean addLinodes) {
            return addLinodes(Output.of(addLinodes));
        }

        /**
         * @param addLongview If true, this User may create Longview clients and view the current plan.
         * 
         * @return builder
         * 
         */
        public Builder addLongview(@Nullable Output<Boolean> addLongview) {
            $.addLongview = addLongview;
            return this;
        }

        /**
         * @param addLongview If true, this User may create Longview clients and view the current plan.
         * 
         * @return builder
         * 
         */
        public Builder addLongview(Boolean addLongview) {
            return addLongview(Output.of(addLongview));
        }

        /**
         * @param addNodebalancers If true, this User may add NodeBalancers.
         * 
         * @return builder
         * 
         */
        public Builder addNodebalancers(@Nullable Output<Boolean> addNodebalancers) {
            $.addNodebalancers = addNodebalancers;
            return this;
        }

        /**
         * @param addNodebalancers If true, this User may add NodeBalancers.
         * 
         * @return builder
         * 
         */
        public Builder addNodebalancers(Boolean addNodebalancers) {
            return addNodebalancers(Output.of(addNodebalancers));
        }

        /**
         * @param addPlacementGroups If true, this User may add Placement Groups.
         * 
         * @return builder
         * 
         */
        public Builder addPlacementGroups(@Nullable Output<Boolean> addPlacementGroups) {
            $.addPlacementGroups = addPlacementGroups;
            return this;
        }

        /**
         * @param addPlacementGroups If true, this User may add Placement Groups.
         * 
         * @return builder
         * 
         */
        public Builder addPlacementGroups(Boolean addPlacementGroups) {
            return addPlacementGroups(Output.of(addPlacementGroups));
        }

        /**
         * @param addStackscripts If true, this User may add StackScripts.
         * 
         * @return builder
         * 
         */
        public Builder addStackscripts(@Nullable Output<Boolean> addStackscripts) {
            $.addStackscripts = addStackscripts;
            return this;
        }

        /**
         * @param addStackscripts If true, this User may add StackScripts.
         * 
         * @return builder
         * 
         */
        public Builder addStackscripts(Boolean addStackscripts) {
            return addStackscripts(Output.of(addStackscripts));
        }

        /**
         * @param addVolumes If true, this User may add Volumes.
         * 
         * @return builder
         * 
         */
        public Builder addVolumes(@Nullable Output<Boolean> addVolumes) {
            $.addVolumes = addVolumes;
            return this;
        }

        /**
         * @param addVolumes If true, this User may add Volumes.
         * 
         * @return builder
         * 
         */
        public Builder addVolumes(Boolean addVolumes) {
            return addVolumes(Output.of(addVolumes));
        }

        /**
         * @param addVpcs If true, this User may add Virtual Private Clouds (VPCs).
         * 
         * @return builder
         * 
         */
        public Builder addVpcs(@Nullable Output<Boolean> addVpcs) {
            $.addVpcs = addVpcs;
            return this;
        }

        /**
         * @param addVpcs If true, this User may add Virtual Private Clouds (VPCs).
         * 
         * @return builder
         * 
         */
        public Builder addVpcs(Boolean addVpcs) {
            return addVpcs(Output.of(addVpcs));
        }

        /**
         * @param cancelAccount If true, this User may cancel the entire Account.
         * 
         * @return builder
         * 
         */
        public Builder cancelAccount(@Nullable Output<Boolean> cancelAccount) {
            $.cancelAccount = cancelAccount;
            return this;
        }

        /**
         * @param cancelAccount If true, this User may cancel the entire Account.
         * 
         * @return builder
         * 
         */
        public Builder cancelAccount(Boolean cancelAccount) {
            return cancelAccount(Output.of(cancelAccount));
        }

        /**
         * @param longviewSubscription If true, this User may manage the Account’s Longview subscription.
         * 
         * @return builder
         * 
         */
        public Builder longviewSubscription(@Nullable Output<Boolean> longviewSubscription) {
            $.longviewSubscription = longviewSubscription;
            return this;
        }

        /**
         * @param longviewSubscription If true, this User may manage the Account’s Longview subscription.
         * 
         * @return builder
         * 
         */
        public Builder longviewSubscription(Boolean longviewSubscription) {
            return longviewSubscription(Output.of(longviewSubscription));
        }

        public UserGlobalGrantsArgs build() {
            return $;
        }
    }

}
