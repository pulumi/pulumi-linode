// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetVpcSubnetsVpcSubnetLinode;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVpcSubnetsVpcSubnet {
    /**
     * @return The date and time when the VPC Subnet was created.
     * 
     */
    private String created;
    /**
     * @return The unique id of the VPC subnet.
     * 
     */
    private Integer id;
    /**
     * @return The IPv4 range of this subnet in CIDR format.
     * 
     */
    private String ipv4;
    /**
     * @return The label of the VPC subnet.
     * 
     */
    private String label;
    /**
     * @return A list of Linode IDs that added to this subnet.
     * 
     */
    private List<GetVpcSubnetsVpcSubnetLinode> linodes;
    /**
     * @return The date and time when the VPC Subnet was last updated.
     * 
     */
    private String updated;

    private GetVpcSubnetsVpcSubnet() {}
    /**
     * @return The date and time when the VPC Subnet was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The unique id of the VPC subnet.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The IPv4 range of this subnet in CIDR format.
     * 
     */
    public String ipv4() {
        return this.ipv4;
    }
    /**
     * @return The label of the VPC subnet.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return A list of Linode IDs that added to this subnet.
     * 
     */
    public List<GetVpcSubnetsVpcSubnetLinode> linodes() {
        return this.linodes;
    }
    /**
     * @return The date and time when the VPC Subnet was last updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpcSubnetsVpcSubnet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String created;
        private Integer id;
        private String ipv4;
        private String label;
        private List<GetVpcSubnetsVpcSubnetLinode> linodes;
        private String updated;
        public Builder() {}
        public Builder(GetVpcSubnetsVpcSubnet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.id = defaults.id;
    	      this.ipv4 = defaults.ipv4;
    	      this.label = defaults.label;
    	      this.linodes = defaults.linodes;
    	      this.updated = defaults.updated;
        }

        @CustomType.Setter
        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4(String ipv4) {
            this.ipv4 = Objects.requireNonNull(ipv4);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder linodes(List<GetVpcSubnetsVpcSubnetLinode> linodes) {
            this.linodes = Objects.requireNonNull(linodes);
            return this;
        }
        public Builder linodes(GetVpcSubnetsVpcSubnetLinode... linodes) {
            return linodes(List.of(linodes));
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            this.updated = Objects.requireNonNull(updated);
            return this;
        }
        public GetVpcSubnetsVpcSubnet build() {
            final var o = new GetVpcSubnetsVpcSubnet();
            o.created = created;
            o.id = id;
            o.ipv4 = ipv4;
            o.label = label;
            o.linodes = linodes;
            o.updated = updated;
            return o;
        }
    }
}
