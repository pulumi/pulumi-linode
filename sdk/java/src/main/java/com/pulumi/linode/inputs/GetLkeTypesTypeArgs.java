// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetLkeTypesTypePriceArgs;
import com.pulumi.linode.inputs.GetLkeTypesTypeRegionPriceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetLkeTypesTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetLkeTypesTypeArgs Empty = new GetLkeTypesTypeArgs();

    /**
     * The unique ID assigned to this LKE Type.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique ID assigned to this LKE Type.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The LKE Type&#39;s label.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The LKE Type&#39;s label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * Cost in US dollars, broken down into hourly and monthly charges.
     * 
     */
    @Import(name="prices", required=true)
    private Output<List<GetLkeTypesTypePriceArgs>> prices;

    /**
     * @return Cost in US dollars, broken down into hourly and monthly charges.
     * 
     */
    public Output<List<GetLkeTypesTypePriceArgs>> prices() {
        return this.prices;
    }

    /**
     * A list of region-specific prices for this LKE Type.
     * 
     */
    @Import(name="regionPrices", required=true)
    private Output<List<GetLkeTypesTypeRegionPriceArgs>> regionPrices;

    /**
     * @return A list of region-specific prices for this LKE Type.
     * 
     */
    public Output<List<GetLkeTypesTypeRegionPriceArgs>> regionPrices() {
        return this.regionPrices;
    }

    /**
     * The monthly outbound transfer amount, in MB.
     * 
     */
    @Import(name="transfer", required=true)
    private Output<Integer> transfer;

    /**
     * @return The monthly outbound transfer amount, in MB.
     * 
     */
    public Output<Integer> transfer() {
        return this.transfer;
    }

    private GetLkeTypesTypeArgs() {}

    private GetLkeTypesTypeArgs(GetLkeTypesTypeArgs $) {
        this.id = $.id;
        this.label = $.label;
        this.prices = $.prices;
        this.regionPrices = $.regionPrices;
        this.transfer = $.transfer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLkeTypesTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLkeTypesTypeArgs $;

        public Builder() {
            $ = new GetLkeTypesTypeArgs();
        }

        public Builder(GetLkeTypesTypeArgs defaults) {
            $ = new GetLkeTypesTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique ID assigned to this LKE Type.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID assigned to this LKE Type.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param label The LKE Type&#39;s label.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The LKE Type&#39;s label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param prices Cost in US dollars, broken down into hourly and monthly charges.
         * 
         * @return builder
         * 
         */
        public Builder prices(Output<List<GetLkeTypesTypePriceArgs>> prices) {
            $.prices = prices;
            return this;
        }

        /**
         * @param prices Cost in US dollars, broken down into hourly and monthly charges.
         * 
         * @return builder
         * 
         */
        public Builder prices(List<GetLkeTypesTypePriceArgs> prices) {
            return prices(Output.of(prices));
        }

        /**
         * @param prices Cost in US dollars, broken down into hourly and monthly charges.
         * 
         * @return builder
         * 
         */
        public Builder prices(GetLkeTypesTypePriceArgs... prices) {
            return prices(List.of(prices));
        }

        /**
         * @param regionPrices A list of region-specific prices for this LKE Type.
         * 
         * @return builder
         * 
         */
        public Builder regionPrices(Output<List<GetLkeTypesTypeRegionPriceArgs>> regionPrices) {
            $.regionPrices = regionPrices;
            return this;
        }

        /**
         * @param regionPrices A list of region-specific prices for this LKE Type.
         * 
         * @return builder
         * 
         */
        public Builder regionPrices(List<GetLkeTypesTypeRegionPriceArgs> regionPrices) {
            return regionPrices(Output.of(regionPrices));
        }

        /**
         * @param regionPrices A list of region-specific prices for this LKE Type.
         * 
         * @return builder
         * 
         */
        public Builder regionPrices(GetLkeTypesTypeRegionPriceArgs... regionPrices) {
            return regionPrices(List.of(regionPrices));
        }

        /**
         * @param transfer The monthly outbound transfer amount, in MB.
         * 
         * @return builder
         * 
         */
        public Builder transfer(Output<Integer> transfer) {
            $.transfer = transfer;
            return this;
        }

        /**
         * @param transfer The monthly outbound transfer amount, in MB.
         * 
         * @return builder
         * 
         */
        public Builder transfer(Integer transfer) {
            return transfer(Output.of(transfer));
        }

        public GetLkeTypesTypeArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetLkeTypesTypeArgs", "id");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetLkeTypesTypeArgs", "label");
            }
            if ($.prices == null) {
                throw new MissingRequiredPropertyException("GetLkeTypesTypeArgs", "prices");
            }
            if ($.regionPrices == null) {
                throw new MissingRequiredPropertyException("GetLkeTypesTypeArgs", "regionPrices");
            }
            if ($.transfer == null) {
                throw new MissingRequiredPropertyException("GetLkeTypesTypeArgs", "transfer");
            }
            return $;
        }
    }

}
