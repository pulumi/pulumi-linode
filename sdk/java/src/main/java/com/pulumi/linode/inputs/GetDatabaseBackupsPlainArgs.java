// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetDatabaseBackupsBackup;
import com.pulumi.linode.inputs.GetDatabaseBackupsFilter;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseBackupsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseBackupsPlainArgs Empty = new GetDatabaseBackupsPlainArgs();

    @Import(name="backups")
    private @Nullable List<GetDatabaseBackupsBackup> backups;

    public Optional<List<GetDatabaseBackupsBackup>> backups() {
        return Optional.ofNullable(this.backups);
    }

    /**
     * The ID of the database to retrieve backups for.
     * 
     */
    @Import(name="databaseId", required=true)
    private Integer databaseId;

    /**
     * @return The ID of the database to retrieve backups for.
     * 
     */
    public Integer databaseId() {
        return this.databaseId;
    }

    /**
     * The type of the database to retrieve backups for. (`mysql`, `postgresql`)
     * 
     */
    @Import(name="databaseType", required=true)
    private String databaseType;

    /**
     * @return The type of the database to retrieve backups for. (`mysql`, `postgresql`)
     * 
     */
    public String databaseType() {
        return this.databaseType;
    }

    @Import(name="filters")
    private @Nullable List<GetDatabaseBackupsFilter> filters;

    public Optional<List<GetDatabaseBackupsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * If true, only the latest backup will be returned.
     * 
     * * `filter` - (Optional) A set of filters used to select database backups that meet certain requirements.
     * 
     */
    @Import(name="latest")
    private @Nullable Boolean latest;

    /**
     * @return If true, only the latest backup will be returned.
     * 
     * * `filter` - (Optional) A set of filters used to select database backups that meet certain requirements.
     * 
     */
    public Optional<Boolean> latest() {
        return Optional.ofNullable(this.latest);
    }

    /**
     * The order in which results should be returned. (`asc`, `desc`; default `asc`)
     * 
     */
    @Import(name="order")
    private @Nullable String order;

    /**
     * @return The order in which results should be returned. (`asc`, `desc`; default `asc`)
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * The attribute to order the results by. (`created`)
     * 
     */
    @Import(name="orderBy")
    private @Nullable String orderBy;

    /**
     * @return The attribute to order the results by. (`created`)
     * 
     */
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    private GetDatabaseBackupsPlainArgs() {}

    private GetDatabaseBackupsPlainArgs(GetDatabaseBackupsPlainArgs $) {
        this.backups = $.backups;
        this.databaseId = $.databaseId;
        this.databaseType = $.databaseType;
        this.filters = $.filters;
        this.latest = $.latest;
        this.order = $.order;
        this.orderBy = $.orderBy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseBackupsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseBackupsPlainArgs $;

        public Builder() {
            $ = new GetDatabaseBackupsPlainArgs();
        }

        public Builder(GetDatabaseBackupsPlainArgs defaults) {
            $ = new GetDatabaseBackupsPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder backups(@Nullable List<GetDatabaseBackupsBackup> backups) {
            $.backups = backups;
            return this;
        }

        public Builder backups(GetDatabaseBackupsBackup... backups) {
            return backups(List.of(backups));
        }

        /**
         * @param databaseId The ID of the database to retrieve backups for.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Integer databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseType The type of the database to retrieve backups for. (`mysql`, `postgresql`)
         * 
         * @return builder
         * 
         */
        public Builder databaseType(String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        public Builder filters(@Nullable List<GetDatabaseBackupsFilter> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(GetDatabaseBackupsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param latest If true, only the latest backup will be returned.
         * 
         * * `filter` - (Optional) A set of filters used to select database backups that meet certain requirements.
         * 
         * @return builder
         * 
         */
        public Builder latest(@Nullable Boolean latest) {
            $.latest = latest;
            return this;
        }

        /**
         * @param order The order in which results should be returned. (`asc`, `desc`; default `asc`)
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable String order) {
            $.order = order;
            return this;
        }

        /**
         * @param orderBy The attribute to order the results by. (`created`)
         * 
         * @return builder
         * 
         */
        public Builder orderBy(@Nullable String orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        public GetDatabaseBackupsPlainArgs build() {
            if ($.databaseId == null) {
                throw new MissingRequiredPropertyException("GetDatabaseBackupsPlainArgs", "databaseId");
            }
            if ($.databaseType == null) {
                throw new MissingRequiredPropertyException("GetDatabaseBackupsPlainArgs", "databaseType");
            }
            return $;
        }
    }

}
