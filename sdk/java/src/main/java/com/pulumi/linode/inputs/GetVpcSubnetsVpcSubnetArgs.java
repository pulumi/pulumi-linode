// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.GetVpcSubnetsVpcSubnetLinodeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetVpcSubnetsVpcSubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetVpcSubnetsVpcSubnetArgs Empty = new GetVpcSubnetsVpcSubnetArgs();

    /**
     * The date and time when the VPC Subnet was created.
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return The date and time when the VPC Subnet was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * The unique id of the VPC subnet.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The unique id of the VPC subnet.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The IPv4 range of this subnet in CIDR format.
     * 
     */
    @Import(name="ipv4", required=true)
    private Output<String> ipv4;

    /**
     * @return The IPv4 range of this subnet in CIDR format.
     * 
     */
    public Output<String> ipv4() {
        return this.ipv4;
    }

    /**
     * The label of the VPC subnet.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The label of the VPC subnet.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * A list of Linode IDs that added to this subnet.
     * 
     */
    @Import(name="linodes", required=true)
    private Output<List<GetVpcSubnetsVpcSubnetLinodeArgs>> linodes;

    /**
     * @return A list of Linode IDs that added to this subnet.
     * 
     */
    public Output<List<GetVpcSubnetsVpcSubnetLinodeArgs>> linodes() {
        return this.linodes;
    }

    /**
     * The date and time when the VPC Subnet was last updated.
     * 
     */
    @Import(name="updated", required=true)
    private Output<String> updated;

    /**
     * @return The date and time when the VPC Subnet was last updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }

    private GetVpcSubnetsVpcSubnetArgs() {}

    private GetVpcSubnetsVpcSubnetArgs(GetVpcSubnetsVpcSubnetArgs $) {
        this.created = $.created;
        this.id = $.id;
        this.ipv4 = $.ipv4;
        this.label = $.label;
        this.linodes = $.linodes;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpcSubnetsVpcSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpcSubnetsVpcSubnetArgs $;

        public Builder() {
            $ = new GetVpcSubnetsVpcSubnetArgs();
        }

        public Builder(GetVpcSubnetsVpcSubnetArgs defaults) {
            $ = new GetVpcSubnetsVpcSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created The date and time when the VPC Subnet was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date and time when the VPC Subnet was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param id The unique id of the VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique id of the VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param ipv4 The IPv4 range of this subnet in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(Output<String> ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv4 The IPv4 range of this subnet in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(String ipv4) {
            return ipv4(Output.of(ipv4));
        }

        /**
         * @param label The label of the VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param linodes A list of Linode IDs that added to this subnet.
         * 
         * @return builder
         * 
         */
        public Builder linodes(Output<List<GetVpcSubnetsVpcSubnetLinodeArgs>> linodes) {
            $.linodes = linodes;
            return this;
        }

        /**
         * @param linodes A list of Linode IDs that added to this subnet.
         * 
         * @return builder
         * 
         */
        public Builder linodes(List<GetVpcSubnetsVpcSubnetLinodeArgs> linodes) {
            return linodes(Output.of(linodes));
        }

        /**
         * @param linodes A list of Linode IDs that added to this subnet.
         * 
         * @return builder
         * 
         */
        public Builder linodes(GetVpcSubnetsVpcSubnetLinodeArgs... linodes) {
            return linodes(List.of(linodes));
        }

        /**
         * @param updated The date and time when the VPC Subnet was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated The date and time when the VPC Subnet was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public GetVpcSubnetsVpcSubnetArgs build() {
            $.created = Objects.requireNonNull($.created, "expected parameter 'created' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.ipv4 = Objects.requireNonNull($.ipv4, "expected parameter 'ipv4' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.linodes = Objects.requireNonNull($.linodes, "expected parameter 'linodes' to be non-null");
            $.updated = Objects.requireNonNull($.updated, "expected parameter 'updated' to be non-null");
            return $;
        }
    }

}
