// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetNodeBalancerFirewallInbound extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeBalancerFirewallInbound Empty = new GetNodeBalancerFirewallInbound();

    /**
     * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
     * 
     */
    @Import(name="action", required=true)
    private String action;

    /**
     * @return Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
     * 
     */
    public String action() {
        return this.action;
    }

    /**
     * A list of IPv4 addresses or networks. Must be in IP/mask format.
     * 
     */
    @Import(name="ipv4s", required=true)
    private List<String> ipv4s;

    /**
     * @return A list of IPv4 addresses or networks. Must be in IP/mask format.
     * 
     */
    public List<String> ipv4s() {
        return this.ipv4s;
    }

    /**
     * A list of IPv6 addresses or networks. Must be in IP/mask format.
     * 
     */
    @Import(name="ipv6s", required=true)
    private List<String> ipv6s;

    /**
     * @return A list of IPv6 addresses or networks. Must be in IP/mask format.
     * 
     */
    public List<String> ipv6s() {
        return this.ipv6s;
    }

    /**
     * Used to identify this rule. For display purposes only.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return Used to identify this rule. For display purposes only.
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * A string representation of ports and/or port ranges (i.e. &#34;443&#34; or &#34;80-90, 91&#34;).
     * 
     */
    @Import(name="ports", required=true)
    private String ports;

    /**
     * @return A string representation of ports and/or port ranges (i.e. &#34;443&#34; or &#34;80-90, 91&#34;).
     * 
     */
    public String ports() {
        return this.ports;
    }

    /**
     * The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    private GetNodeBalancerFirewallInbound() {}

    private GetNodeBalancerFirewallInbound(GetNodeBalancerFirewallInbound $) {
        this.action = $.action;
        this.ipv4s = $.ipv4s;
        this.ipv6s = $.ipv6s;
        this.label = $.label;
        this.ports = $.ports;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeBalancerFirewallInbound defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeBalancerFirewallInbound $;

        public Builder() {
            $ = new GetNodeBalancerFirewallInbound();
        }

        public Builder(GetNodeBalancerFirewallInbound defaults) {
            $ = new GetNodeBalancerFirewallInbound(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            $.action = action;
            return this;
        }

        /**
         * @param ipv4s A list of IPv4 addresses or networks. Must be in IP/mask format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4s(List<String> ipv4s) {
            $.ipv4s = ipv4s;
            return this;
        }

        /**
         * @param ipv4s A list of IPv4 addresses or networks. Must be in IP/mask format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4s(String... ipv4s) {
            return ipv4s(List.of(ipv4s));
        }

        /**
         * @param ipv6s A list of IPv6 addresses or networks. Must be in IP/mask format.
         * 
         * @return builder
         * 
         */
        public Builder ipv6s(List<String> ipv6s) {
            $.ipv6s = ipv6s;
            return this;
        }

        /**
         * @param ipv6s A list of IPv6 addresses or networks. Must be in IP/mask format.
         * 
         * @return builder
         * 
         */
        public Builder ipv6s(String... ipv6s) {
            return ipv6s(List.of(ipv6s));
        }

        /**
         * @param label Used to identify this rule. For display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param ports A string representation of ports and/or port ranges (i.e. &#34;443&#34; or &#34;80-90, 91&#34;).
         * 
         * @return builder
         * 
         */
        public Builder ports(String ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param protocol The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        public GetNodeBalancerFirewallInbound build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallInbound", "action");
            }
            if ($.ipv4s == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallInbound", "ipv4s");
            }
            if ($.ipv6s == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallInbound", "ipv6s");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallInbound", "label");
            }
            if ($.ports == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallInbound", "ports");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallInbound", "protocol");
            }
            return $;
        }
    }

}
