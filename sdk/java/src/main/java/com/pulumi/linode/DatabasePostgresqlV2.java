// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.linode.DatabasePostgresqlV2Args;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.DatabasePostgresqlV2State;
import com.pulumi.linode.outputs.DatabasePostgresqlV2PendingUpdate;
import com.pulumi.linode.outputs.DatabasePostgresqlV2Timeouts;
import com.pulumi.linode.outputs.DatabasePostgresqlV2Updates;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instances).
 * 
 * Please keep in mind that Managed Databases can take up to half an hour to provision.
 * 
 * ## Example Usage
 * 
 * Creating a simple PostgreSQL database that does not allow connections:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabasePostgresqlV2;
 * import com.pulumi.linode.DatabasePostgresqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabasePostgresqlV2("foobar", DatabasePostgresqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("postgresql/16")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a simple PostgreSQL database that allows connections from all IPv4 addresses:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabasePostgresqlV2;
 * import com.pulumi.linode.DatabasePostgresqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabasePostgresqlV2("foobar", DatabasePostgresqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("postgresql/16")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .allowLists("0.0.0.0/0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a complex PostgreSQL database:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a forked PostgreSQL database:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabasePostgresqlV2;
 * import com.pulumi.linode.DatabasePostgresqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabasePostgresqlV2("foobar", DatabasePostgresqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("postgresql/16")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .forkSource(12345)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &gt; **_NOTE:_** The name of the default database in the returned database cluster is `defaultdb`.
 * 
 * ## pending_updates
 * 
 * The following arguments are exposed by each entry in the `pending_updates` attribute:
 * 
 * * `deadline` - The time when a mandatory update needs to be applied.
 * 
 * * `description` - A description of the update.
 * 
 * * `planned_for` - The date and time a maintenance update will be applied.
 * 
 * ## updates
 * 
 * The following arguments are supported in the `updates` specification block:
 * 
 * * `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)
 * 
 * * `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)
 * 
 * * `frequency` - (Required) The frequency at which maintenance occurs. (`weekly`)
 * 
 * * `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)
 * 
 * ## Import
 * 
 * Linode PostgreSQL Databases can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import linode:index/databasePostgresqlV2:DatabasePostgresqlV2 foobar 1234567
 * ```
 * 
 */
@ResourceType(type="linode:index/databasePostgresqlV2:DatabasePostgresqlV2")
public class DatabasePostgresqlV2 extends com.pulumi.resources.CustomResource {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    @Export(name="allowLists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowLists;

    /**
     * @return A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    public Output<List<String>> allowLists() {
        return this.allowLists;
    }
    /**
     * The base64-encoded SSL CA certificate for the Managed Database.
     * 
     */
    @Export(name="caCert", refs={String.class}, tree="[0]")
    private Output<String> caCert;

    /**
     * @return The base64-encoded SSL CA certificate for the Managed Database.
     * 
     */
    public Output<String> caCert() {
        return this.caCert;
    }
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    @Export(name="clusterSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> clusterSize;

    /**
     * @return The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    public Output<Integer> clusterSize() {
        return this.clusterSize;
    }
    /**
     * When this Managed Database was created.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return When this Managed Database was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Whether the Managed Databases is encrypted.
     * 
     */
    @Export(name="encrypted", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> encrypted;

    /**
     * @return Whether the Managed Databases is encrypted.
     * 
     */
    public Output<Boolean> encrypted() {
        return this.encrypted;
    }
    /**
     * The Managed Database engine. (e.g. `postgresql`)
     * 
     */
    @Export(name="engine", refs={String.class}, tree="[0]")
    private Output<String> engine;

    /**
     * @return The Managed Database engine. (e.g. `postgresql`)
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }
    /**
     * The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     * 
     */
    @Export(name="engineId", refs={String.class}, tree="[0]")
    private Output<String> engineId;

    /**
     * @return The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     * 
     */
    public Output<String> engineId() {
        return this.engineId;
    }
    /**
     * The database timestamp from which it was restored.
     * 
     */
    @Export(name="forkRestoreTime", refs={String.class}, tree="[0]")
    private Output<String> forkRestoreTime;

    /**
     * @return The database timestamp from which it was restored.
     * 
     */
    public Output<String> forkRestoreTime() {
        return this.forkRestoreTime;
    }
    /**
     * The ID of the database that was forked from.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Export(name="forkSource", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> forkSource;

    /**
     * @return The ID of the database that was forked from.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Output<Optional<Integer>> forkSource() {
        return Codegen.optional(this.forkSource);
    }
    /**
     * The primary host for the Managed Database.
     * 
     */
    @Export(name="hostPrimary", refs={String.class}, tree="[0]")
    private Output<String> hostPrimary;

    /**
     * @return The primary host for the Managed Database.
     * 
     */
    public Output<String> hostPrimary() {
        return this.hostPrimary;
    }
    /**
     * The secondary/private host for the managed database.
     * 
     */
    @Export(name="hostSecondary", refs={String.class}, tree="[0]")
    private Output<String> hostSecondary;

    /**
     * @return The secondary/private host for the managed database.
     * 
     */
    public Output<String> hostSecondary() {
        return this.hostSecondary;
    }
    /**
     * A unique, user-defined string referring to the Managed Database.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output<String> label;

    /**
     * @return A unique, user-defined string referring to the Managed Database.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * A mapping between IP addresses and strings designating them as primary or failover.
     * 
     */
    @Export(name="members", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> members;

    /**
     * @return A mapping between IP addresses and strings designating them as primary or failover.
     * 
     */
    public Output<Map<String,String>> members() {
        return this.members;
    }
    /**
     * The oldest time to which a database can be restored.
     * 
     */
    @Export(name="oldestRestoreTime", refs={String.class}, tree="[0]")
    private Output<String> oldestRestoreTime;

    /**
     * @return The oldest time to which a database can be restored.
     * 
     */
    public Output<String> oldestRestoreTime() {
        return this.oldestRestoreTime;
    }
    /**
     * A set of pending updates.
     * 
     */
    @Export(name="pendingUpdates", refs={List.class,DatabasePostgresqlV2PendingUpdate.class}, tree="[0,1]")
    private Output<List<DatabasePostgresqlV2PendingUpdate>> pendingUpdates;

    /**
     * @return A set of pending updates.
     * 
     */
    public Output<List<DatabasePostgresqlV2PendingUpdate>> pendingUpdates() {
        return this.pendingUpdates;
    }
    /**
     * The back-end platform for relational databases used by the service.
     * 
     */
    @Export(name="platform", refs={String.class}, tree="[0]")
    private Output<String> platform;

    /**
     * @return The back-end platform for relational databases used by the service.
     * 
     */
    public Output<String> platform() {
        return this.platform;
    }
    /**
     * The access port for this Managed Database.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return The access port for this Managed Database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * The region to use for the Managed Database.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region to use for the Managed Database.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The randomly-generated root password for the Managed Database instance.
     * 
     */
    @Export(name="rootPassword", refs={String.class}, tree="[0]")
    private Output<String> rootPassword;

    /**
     * @return The randomly-generated root password for the Managed Database instance.
     * 
     */
    public Output<String> rootPassword() {
        return this.rootPassword;
    }
    /**
     * The root username for the Managed Database instance.
     * 
     */
    @Export(name="rootUsername", refs={String.class}, tree="[0]")
    private Output<String> rootUsername;

    /**
     * @return The root username for the Managed Database instance.
     * 
     */
    public Output<String> rootUsername() {
        return this.rootUsername;
    }
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     */
    @Export(name="sslConnection", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sslConnection;

    /**
     * @return Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     */
    public Output<Boolean> sslConnection() {
        return this.sslConnection;
    }
    /**
     * The operating status of the Managed Database.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The operating status of the Managed Database.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Whether this Managed Database should be suspended.
     * 
     */
    @Export(name="suspended", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> suspended;

    /**
     * @return Whether this Managed Database should be suspended.
     * 
     */
    public Output<Boolean> suspended() {
        return this.suspended;
    }
    @Export(name="timeouts", refs={DatabasePostgresqlV2Timeouts.class}, tree="[0]")
    private Output</* @Nullable */ DatabasePostgresqlV2Timeouts> timeouts;

    public Output<Optional<DatabasePostgresqlV2Timeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     * 
     * ***
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The Linode Instance type used for the nodes of the Managed Database.
     * 
     * ***
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * When this Managed Database was last updated.
     * 
     */
    @Export(name="updated", refs={String.class}, tree="[0]")
    private Output<String> updated;

    /**
     * @return When this Managed Database was last updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }
    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Export(name="updates", refs={DatabasePostgresqlV2Updates.class}, tree="[0]")
    private Output<DatabasePostgresqlV2Updates> updates;

    /**
     * @return Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Output<DatabasePostgresqlV2Updates> updates() {
        return this.updates;
    }
    /**
     * The Managed Database engine version. (e.g. `13.2`)
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The Managed Database engine version. (e.g. `13.2`)
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabasePostgresqlV2(java.lang.String name) {
        this(name, DatabasePostgresqlV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabasePostgresqlV2(java.lang.String name, DatabasePostgresqlV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabasePostgresqlV2(java.lang.String name, DatabasePostgresqlV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/databasePostgresqlV2:DatabasePostgresqlV2", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabasePostgresqlV2(java.lang.String name, Output<java.lang.String> id, @Nullable DatabasePostgresqlV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/databasePostgresqlV2:DatabasePostgresqlV2", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabasePostgresqlV2Args makeArgs(DatabasePostgresqlV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabasePostgresqlV2Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "caCert",
                "rootPassword",
                "rootUsername"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabasePostgresqlV2 get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabasePostgresqlV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabasePostgresqlV2(name, id, state, options);
    }
}
