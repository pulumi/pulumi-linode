// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetLkeClusterControlPlane;
import com.pulumi.linode.outputs.GetLkeClusterPool;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLkeClusterResult {
    /**
     * @return The endpoints for the Kubernetes API server.
     * 
     */
    private List<String> apiEndpoints;
    private List<GetLkeClusterControlPlane> controlPlanes;
    /**
     * @return The Kubernetes Dashboard access URL for this cluster.
     * 
     */
    private String dashboardUrl;
    /**
     * @return The ID of the node.
     * 
     */
    private Integer id;
    /**
     * @return The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     * 
     */
    private String k8sVersion;
    /**
     * @return The base64 encoded kubeconfig for the Kubernetes cluster.
     * 
     */
    private String kubeconfig;
    private String label;
    /**
     * @return Node pools associated with this cluster.
     * 
     */
    private List<GetLkeClusterPool> pools;
    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     */
    private String region;
    /**
     * @return The status of the node. (`ready`, `not_ready`)
     * 
     */
    private String status;
    /**
     * @return The tags applied to the cluster.
     * 
     */
    private List<String> tags;

    private GetLkeClusterResult() {}
    /**
     * @return The endpoints for the Kubernetes API server.
     * 
     */
    public List<String> apiEndpoints() {
        return this.apiEndpoints;
    }
    public List<GetLkeClusterControlPlane> controlPlanes() {
        return this.controlPlanes;
    }
    /**
     * @return The Kubernetes Dashboard access URL for this cluster.
     * 
     */
    public String dashboardUrl() {
        return this.dashboardUrl;
    }
    /**
     * @return The ID of the node.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     * 
     */
    public String k8sVersion() {
        return this.k8sVersion;
    }
    /**
     * @return The base64 encoded kubeconfig for the Kubernetes cluster.
     * 
     */
    public String kubeconfig() {
        return this.kubeconfig;
    }
    public String label() {
        return this.label;
    }
    /**
     * @return Node pools associated with this cluster.
     * 
     */
    public List<GetLkeClusterPool> pools() {
        return this.pools;
    }
    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The status of the node. (`ready`, `not_ready`)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The tags applied to the cluster.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLkeClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> apiEndpoints;
        private List<GetLkeClusterControlPlane> controlPlanes;
        private String dashboardUrl;
        private Integer id;
        private String k8sVersion;
        private String kubeconfig;
        private String label;
        private List<GetLkeClusterPool> pools;
        private String region;
        private String status;
        private List<String> tags;
        public Builder() {}
        public Builder(GetLkeClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiEndpoints = defaults.apiEndpoints;
    	      this.controlPlanes = defaults.controlPlanes;
    	      this.dashboardUrl = defaults.dashboardUrl;
    	      this.id = defaults.id;
    	      this.k8sVersion = defaults.k8sVersion;
    	      this.kubeconfig = defaults.kubeconfig;
    	      this.label = defaults.label;
    	      this.pools = defaults.pools;
    	      this.region = defaults.region;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder apiEndpoints(List<String> apiEndpoints) {
            this.apiEndpoints = Objects.requireNonNull(apiEndpoints);
            return this;
        }
        public Builder apiEndpoints(String... apiEndpoints) {
            return apiEndpoints(List.of(apiEndpoints));
        }
        @CustomType.Setter
        public Builder controlPlanes(List<GetLkeClusterControlPlane> controlPlanes) {
            this.controlPlanes = Objects.requireNonNull(controlPlanes);
            return this;
        }
        public Builder controlPlanes(GetLkeClusterControlPlane... controlPlanes) {
            return controlPlanes(List.of(controlPlanes));
        }
        @CustomType.Setter
        public Builder dashboardUrl(String dashboardUrl) {
            this.dashboardUrl = Objects.requireNonNull(dashboardUrl);
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder k8sVersion(String k8sVersion) {
            this.k8sVersion = Objects.requireNonNull(k8sVersion);
            return this;
        }
        @CustomType.Setter
        public Builder kubeconfig(String kubeconfig) {
            this.kubeconfig = Objects.requireNonNull(kubeconfig);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder pools(List<GetLkeClusterPool> pools) {
            this.pools = Objects.requireNonNull(pools);
            return this;
        }
        public Builder pools(GetLkeClusterPool... pools) {
            return pools(List.of(pools));
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetLkeClusterResult build() {
            final var _resultValue = new GetLkeClusterResult();
            _resultValue.apiEndpoints = apiEndpoints;
            _resultValue.controlPlanes = controlPlanes;
            _resultValue.dashboardUrl = dashboardUrl;
            _resultValue.id = id;
            _resultValue.k8sVersion = k8sVersion;
            _resultValue.kubeconfig = kubeconfig;
            _resultValue.label = label;
            _resultValue.pools = pools;
            _resultValue.region = region;
            _resultValue.status = status;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
