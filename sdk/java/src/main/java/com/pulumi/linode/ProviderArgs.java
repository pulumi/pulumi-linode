// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The version of Linode API.
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    /**
     * @return The version of Linode API.
     * 
     */
    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * The path to the Linode config file to use. (default `~/.config/linode`)
     * 
     */
    @Import(name="configPath")
    private @Nullable Output<String> configPath;

    /**
     * @return The path to the Linode config file to use. (default `~/.config/linode`)
     * 
     */
    public Optional<Output<String>> configPath() {
        return Optional.ofNullable(this.configPath);
    }

    /**
     * The Linode config profile to use. (default `default`)
     * 
     */
    @Import(name="configProfile")
    private @Nullable Output<String> configProfile;

    /**
     * @return The Linode config profile to use. (default `default`)
     * 
     */
    public Optional<Output<String>> configProfile() {
        return Optional.ofNullable(this.configProfile);
    }

    /**
     * Disable the internal caching system that backs certain Linode API requests.
     * 
     */
    @Import(name="disableInternalCache", json=true)
    private @Nullable Output<Boolean> disableInternalCache;

    /**
     * @return Disable the internal caching system that backs certain Linode API requests.
     * 
     */
    public Optional<Output<Boolean>> disableInternalCache() {
        return Optional.ofNullable(this.disableInternalCache);
    }

    /**
     * The rate in milliseconds to poll for events.
     * 
     */
    @Import(name="eventPollMs", json=true)
    private @Nullable Output<Integer> eventPollMs;

    /**
     * @return The rate in milliseconds to poll for events.
     * 
     */
    public Optional<Output<Integer>> eventPollMs() {
        return Optional.ofNullable(this.eventPollMs);
    }

    /**
     * The rate in milliseconds to poll for LKE events.
     * 
     */
    @Import(name="lkeEventPollMs", json=true)
    private @Nullable Output<Integer> lkeEventPollMs;

    /**
     * @return The rate in milliseconds to poll for LKE events.
     * 
     */
    public Optional<Output<Integer>> lkeEventPollMs() {
        return Optional.ofNullable(this.lkeEventPollMs);
    }

    /**
     * The rate in milliseconds to poll for an LKE node to be ready.
     * 
     */
    @Import(name="lkeNodeReadyPollMs", json=true)
    private @Nullable Output<Integer> lkeNodeReadyPollMs;

    /**
     * @return The rate in milliseconds to poll for an LKE node to be ready.
     * 
     */
    public Optional<Output<Integer>> lkeNodeReadyPollMs() {
        return Optional.ofNullable(this.lkeNodeReadyPollMs);
    }

    /**
     * Maximum delay in milliseconds before retrying a request.
     * 
     */
    @Import(name="maxRetryDelayMs", json=true)
    private @Nullable Output<Integer> maxRetryDelayMs;

    /**
     * @return Maximum delay in milliseconds before retrying a request.
     * 
     */
    public Optional<Output<Integer>> maxRetryDelayMs() {
        return Optional.ofNullable(this.maxRetryDelayMs);
    }

    /**
     * Minimum delay in milliseconds before retrying a request.
     * 
     */
    @Import(name="minRetryDelayMs", json=true)
    private @Nullable Output<Integer> minRetryDelayMs;

    /**
     * @return Minimum delay in milliseconds before retrying a request.
     * 
     */
    public Optional<Output<Integer>> minRetryDelayMs() {
        return Optional.ofNullable(this.minRetryDelayMs);
    }

    /**
     * The access key to be used in linode_object_storage_bucket and linode_object_storage_object.
     * 
     */
    @Import(name="objAccessKey")
    private @Nullable Output<String> objAccessKey;

    /**
     * @return The access key to be used in linode_object_storage_bucket and linode_object_storage_object.
     * 
     */
    public Optional<Output<String>> objAccessKey() {
        return Optional.ofNullable(this.objAccessKey);
    }

    /**
     * The secret key to be used in linode_object_storage_bucket and linode_object_storage_object.
     * 
     */
    @Import(name="objSecretKey")
    private @Nullable Output<String> objSecretKey;

    /**
     * @return The secret key to be used in linode_object_storage_bucket and linode_object_storage_object.
     * 
     */
    public Optional<Output<String>> objSecretKey() {
        return Optional.ofNullable(this.objSecretKey);
    }

    /**
     * If true, temporary object keys will be created implicitly at apply-time for the linode_object_storage_object and
     * linode_object_sorage_bucket resource.
     * 
     */
    @Import(name="objUseTempKeys", json=true)
    private @Nullable Output<Boolean> objUseTempKeys;

    /**
     * @return If true, temporary object keys will be created implicitly at apply-time for the linode_object_storage_object and
     * linode_object_sorage_bucket resource.
     * 
     */
    public Optional<Output<Boolean>> objUseTempKeys() {
        return Optional.ofNullable(this.objUseTempKeys);
    }

    /**
     * If true, Linode Instances will not be rebooted on config and interface changes.
     * 
     */
    @Import(name="skipImplicitReboots", json=true)
    private @Nullable Output<Boolean> skipImplicitReboots;

    /**
     * @return If true, Linode Instances will not be rebooted on config and interface changes.
     * 
     */
    public Optional<Output<Boolean>> skipImplicitReboots() {
        return Optional.ofNullable(this.skipImplicitReboots);
    }

    /**
     * Skip waiting for a linode_instance resource to finish deleting.
     * 
     */
    @Import(name="skipInstanceDeletePoll", json=true)
    private @Nullable Output<Boolean> skipInstanceDeletePoll;

    /**
     * @return Skip waiting for a linode_instance resource to finish deleting.
     * 
     */
    public Optional<Output<Boolean>> skipInstanceDeletePoll() {
        return Optional.ofNullable(this.skipInstanceDeletePoll);
    }

    /**
     * Skip waiting for a linode_instance resource to be running.
     * 
     */
    @Import(name="skipInstanceReadyPoll", json=true)
    private @Nullable Output<Boolean> skipInstanceReadyPoll;

    /**
     * @return Skip waiting for a linode_instance resource to be running.
     * 
     */
    public Optional<Output<Boolean>> skipInstanceReadyPoll() {
        return Optional.ofNullable(this.skipInstanceReadyPoll);
    }

    /**
     * The token that allows you access to your Linode account
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The token that allows you access to your Linode account
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * An HTTP User-Agent Prefix to prepend in API requests.
     * 
     */
    @Import(name="uaPrefix")
    private @Nullable Output<String> uaPrefix;

    /**
     * @return An HTTP User-Agent Prefix to prepend in API requests.
     * 
     */
    public Optional<Output<String>> uaPrefix() {
        return Optional.ofNullable(this.uaPrefix);
    }

    /**
     * The HTTP(S) API address of the Linode API to use.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The HTTP(S) API address of the Linode API to use.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.apiVersion = $.apiVersion;
        this.configPath = $.configPath;
        this.configProfile = $.configProfile;
        this.disableInternalCache = $.disableInternalCache;
        this.eventPollMs = $.eventPollMs;
        this.lkeEventPollMs = $.lkeEventPollMs;
        this.lkeNodeReadyPollMs = $.lkeNodeReadyPollMs;
        this.maxRetryDelayMs = $.maxRetryDelayMs;
        this.minRetryDelayMs = $.minRetryDelayMs;
        this.objAccessKey = $.objAccessKey;
        this.objSecretKey = $.objSecretKey;
        this.objUseTempKeys = $.objUseTempKeys;
        this.skipImplicitReboots = $.skipImplicitReboots;
        this.skipInstanceDeletePoll = $.skipInstanceDeletePoll;
        this.skipInstanceReadyPoll = $.skipInstanceReadyPoll;
        this.token = $.token;
        this.uaPrefix = $.uaPrefix;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersion The version of Linode API.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param apiVersion The version of Linode API.
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        /**
         * @param configPath The path to the Linode config file to use. (default `~/.config/linode`)
         * 
         * @return builder
         * 
         */
        public Builder configPath(@Nullable Output<String> configPath) {
            $.configPath = configPath;
            return this;
        }

        /**
         * @param configPath The path to the Linode config file to use. (default `~/.config/linode`)
         * 
         * @return builder
         * 
         */
        public Builder configPath(String configPath) {
            return configPath(Output.of(configPath));
        }

        /**
         * @param configProfile The Linode config profile to use. (default `default`)
         * 
         * @return builder
         * 
         */
        public Builder configProfile(@Nullable Output<String> configProfile) {
            $.configProfile = configProfile;
            return this;
        }

        /**
         * @param configProfile The Linode config profile to use. (default `default`)
         * 
         * @return builder
         * 
         */
        public Builder configProfile(String configProfile) {
            return configProfile(Output.of(configProfile));
        }

        /**
         * @param disableInternalCache Disable the internal caching system that backs certain Linode API requests.
         * 
         * @return builder
         * 
         */
        public Builder disableInternalCache(@Nullable Output<Boolean> disableInternalCache) {
            $.disableInternalCache = disableInternalCache;
            return this;
        }

        /**
         * @param disableInternalCache Disable the internal caching system that backs certain Linode API requests.
         * 
         * @return builder
         * 
         */
        public Builder disableInternalCache(Boolean disableInternalCache) {
            return disableInternalCache(Output.of(disableInternalCache));
        }

        /**
         * @param eventPollMs The rate in milliseconds to poll for events.
         * 
         * @return builder
         * 
         */
        public Builder eventPollMs(@Nullable Output<Integer> eventPollMs) {
            $.eventPollMs = eventPollMs;
            return this;
        }

        /**
         * @param eventPollMs The rate in milliseconds to poll for events.
         * 
         * @return builder
         * 
         */
        public Builder eventPollMs(Integer eventPollMs) {
            return eventPollMs(Output.of(eventPollMs));
        }

        /**
         * @param lkeEventPollMs The rate in milliseconds to poll for LKE events.
         * 
         * @return builder
         * 
         */
        public Builder lkeEventPollMs(@Nullable Output<Integer> lkeEventPollMs) {
            $.lkeEventPollMs = lkeEventPollMs;
            return this;
        }

        /**
         * @param lkeEventPollMs The rate in milliseconds to poll for LKE events.
         * 
         * @return builder
         * 
         */
        public Builder lkeEventPollMs(Integer lkeEventPollMs) {
            return lkeEventPollMs(Output.of(lkeEventPollMs));
        }

        /**
         * @param lkeNodeReadyPollMs The rate in milliseconds to poll for an LKE node to be ready.
         * 
         * @return builder
         * 
         */
        public Builder lkeNodeReadyPollMs(@Nullable Output<Integer> lkeNodeReadyPollMs) {
            $.lkeNodeReadyPollMs = lkeNodeReadyPollMs;
            return this;
        }

        /**
         * @param lkeNodeReadyPollMs The rate in milliseconds to poll for an LKE node to be ready.
         * 
         * @return builder
         * 
         */
        public Builder lkeNodeReadyPollMs(Integer lkeNodeReadyPollMs) {
            return lkeNodeReadyPollMs(Output.of(lkeNodeReadyPollMs));
        }

        /**
         * @param maxRetryDelayMs Maximum delay in milliseconds before retrying a request.
         * 
         * @return builder
         * 
         */
        public Builder maxRetryDelayMs(@Nullable Output<Integer> maxRetryDelayMs) {
            $.maxRetryDelayMs = maxRetryDelayMs;
            return this;
        }

        /**
         * @param maxRetryDelayMs Maximum delay in milliseconds before retrying a request.
         * 
         * @return builder
         * 
         */
        public Builder maxRetryDelayMs(Integer maxRetryDelayMs) {
            return maxRetryDelayMs(Output.of(maxRetryDelayMs));
        }

        /**
         * @param minRetryDelayMs Minimum delay in milliseconds before retrying a request.
         * 
         * @return builder
         * 
         */
        public Builder minRetryDelayMs(@Nullable Output<Integer> minRetryDelayMs) {
            $.minRetryDelayMs = minRetryDelayMs;
            return this;
        }

        /**
         * @param minRetryDelayMs Minimum delay in milliseconds before retrying a request.
         * 
         * @return builder
         * 
         */
        public Builder minRetryDelayMs(Integer minRetryDelayMs) {
            return minRetryDelayMs(Output.of(minRetryDelayMs));
        }

        /**
         * @param objAccessKey The access key to be used in linode_object_storage_bucket and linode_object_storage_object.
         * 
         * @return builder
         * 
         */
        public Builder objAccessKey(@Nullable Output<String> objAccessKey) {
            $.objAccessKey = objAccessKey;
            return this;
        }

        /**
         * @param objAccessKey The access key to be used in linode_object_storage_bucket and linode_object_storage_object.
         * 
         * @return builder
         * 
         */
        public Builder objAccessKey(String objAccessKey) {
            return objAccessKey(Output.of(objAccessKey));
        }

        /**
         * @param objSecretKey The secret key to be used in linode_object_storage_bucket and linode_object_storage_object.
         * 
         * @return builder
         * 
         */
        public Builder objSecretKey(@Nullable Output<String> objSecretKey) {
            $.objSecretKey = objSecretKey;
            return this;
        }

        /**
         * @param objSecretKey The secret key to be used in linode_object_storage_bucket and linode_object_storage_object.
         * 
         * @return builder
         * 
         */
        public Builder objSecretKey(String objSecretKey) {
            return objSecretKey(Output.of(objSecretKey));
        }

        /**
         * @param objUseTempKeys If true, temporary object keys will be created implicitly at apply-time for the linode_object_storage_object and
         * linode_object_sorage_bucket resource.
         * 
         * @return builder
         * 
         */
        public Builder objUseTempKeys(@Nullable Output<Boolean> objUseTempKeys) {
            $.objUseTempKeys = objUseTempKeys;
            return this;
        }

        /**
         * @param objUseTempKeys If true, temporary object keys will be created implicitly at apply-time for the linode_object_storage_object and
         * linode_object_sorage_bucket resource.
         * 
         * @return builder
         * 
         */
        public Builder objUseTempKeys(Boolean objUseTempKeys) {
            return objUseTempKeys(Output.of(objUseTempKeys));
        }

        /**
         * @param skipImplicitReboots If true, Linode Instances will not be rebooted on config and interface changes.
         * 
         * @return builder
         * 
         */
        public Builder skipImplicitReboots(@Nullable Output<Boolean> skipImplicitReboots) {
            $.skipImplicitReboots = skipImplicitReboots;
            return this;
        }

        /**
         * @param skipImplicitReboots If true, Linode Instances will not be rebooted on config and interface changes.
         * 
         * @return builder
         * 
         */
        public Builder skipImplicitReboots(Boolean skipImplicitReboots) {
            return skipImplicitReboots(Output.of(skipImplicitReboots));
        }

        /**
         * @param skipInstanceDeletePoll Skip waiting for a linode_instance resource to finish deleting.
         * 
         * @return builder
         * 
         */
        public Builder skipInstanceDeletePoll(@Nullable Output<Boolean> skipInstanceDeletePoll) {
            $.skipInstanceDeletePoll = skipInstanceDeletePoll;
            return this;
        }

        /**
         * @param skipInstanceDeletePoll Skip waiting for a linode_instance resource to finish deleting.
         * 
         * @return builder
         * 
         */
        public Builder skipInstanceDeletePoll(Boolean skipInstanceDeletePoll) {
            return skipInstanceDeletePoll(Output.of(skipInstanceDeletePoll));
        }

        /**
         * @param skipInstanceReadyPoll Skip waiting for a linode_instance resource to be running.
         * 
         * @return builder
         * 
         */
        public Builder skipInstanceReadyPoll(@Nullable Output<Boolean> skipInstanceReadyPoll) {
            $.skipInstanceReadyPoll = skipInstanceReadyPoll;
            return this;
        }

        /**
         * @param skipInstanceReadyPoll Skip waiting for a linode_instance resource to be running.
         * 
         * @return builder
         * 
         */
        public Builder skipInstanceReadyPoll(Boolean skipInstanceReadyPoll) {
            return skipInstanceReadyPoll(Output.of(skipInstanceReadyPoll));
        }

        /**
         * @param token The token that allows you access to your Linode account
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token that allows you access to your Linode account
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param uaPrefix An HTTP User-Agent Prefix to prepend in API requests.
         * 
         * @return builder
         * 
         */
        public Builder uaPrefix(@Nullable Output<String> uaPrefix) {
            $.uaPrefix = uaPrefix;
            return this;
        }

        /**
         * @param uaPrefix An HTTP User-Agent Prefix to prepend in API requests.
         * 
         * @return builder
         * 
         */
        public Builder uaPrefix(String uaPrefix) {
            return uaPrefix(Output.of(uaPrefix));
        }

        /**
         * @param url The HTTP(S) API address of the Linode API to use.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The HTTP(S) API address of the Linode API to use.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ProviderArgs build() {
            $.apiVersion = Codegen.stringProp("apiVersion").output().arg($.apiVersion).env("LINODE_API_VERSION").getNullable();
            $.uaPrefix = Codegen.stringProp("uaPrefix").output().arg($.uaPrefix).env("LINODE_UA_PREFIX").getNullable();
            $.url = Codegen.stringProp("url").output().arg($.url).env("LINODE_URL").getNullable();
            return $;
        }
    }

}
