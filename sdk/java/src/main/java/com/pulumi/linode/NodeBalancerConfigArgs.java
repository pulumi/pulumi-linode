// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeBalancerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeBalancerConfigArgs Empty = new NodeBalancerConfigArgs();

    /**
     * What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)
     * 
     */
    @Import(name="check")
    private @Nullable Output<String> check;

    /**
     * @return The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)
     * 
     */
    public Optional<Output<String>> check() {
        return Optional.ofNullable(this.check);
    }

    /**
     * How many times to attempt a check before considering a backend to be down. (1-30)
     * 
     */
    @Import(name="checkAttempts")
    private @Nullable Output<Integer> checkAttempts;

    /**
     * @return How many times to attempt a check before considering a backend to be down. (1-30)
     * 
     */
    public Optional<Output<Integer>> checkAttempts() {
        return Optional.ofNullable(this.checkAttempts);
    }

    /**
     * This value must be present in the response body of the check in order for it to pass. If this value is not present in
     * the response body of a check request, the backend is considered to be down
     * 
     */
    @Import(name="checkBody")
    private @Nullable Output<String> checkBody;

    /**
     * @return This value must be present in the response body of the check in order for it to pass. If this value is not present in
     * the response body of a check request, the backend is considered to be down
     * 
     */
    public Optional<Output<String>> checkBody() {
        return Optional.ofNullable(this.checkBody);
    }

    /**
     * How often, in seconds, to check that backends are up and serving requests.
     * 
     */
    @Import(name="checkInterval")
    private @Nullable Output<Integer> checkInterval;

    /**
     * @return How often, in seconds, to check that backends are up and serving requests.
     * 
     */
    public Optional<Output<Integer>> checkInterval() {
        return Optional.ofNullable(this.checkInterval);
    }

    /**
     * If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
     * 
     */
    @Import(name="checkPassive")
    private @Nullable Output<Boolean> checkPassive;

    /**
     * @return If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
     * 
     */
    public Optional<Output<Boolean>> checkPassive() {
        return Optional.ofNullable(this.checkPassive);
    }

    /**
     * The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
     * 
     */
    @Import(name="checkPath")
    private @Nullable Output<String> checkPath;

    /**
     * @return The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
     * 
     */
    public Optional<Output<String>> checkPath() {
        return Optional.ofNullable(this.checkPath);
    }

    /**
     * How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
     * 
     */
    @Import(name="checkTimeout")
    private @Nullable Output<Integer> checkTimeout;

    /**
     * @return How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
     * 
     */
    public Optional<Output<Integer>> checkTimeout() {
        return Optional.ofNullable(this.checkTimeout);
    }

    /**
     * What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
     * 
     */
    @Import(name="cipherSuite")
    private @Nullable Output<String> cipherSuite;

    /**
     * @return What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
     * 
     */
    public Optional<Output<String>> cipherSuite() {
        return Optional.ofNullable(this.cipherSuite);
    }

    /**
     * The ID of the NodeBalancer to access.
     * 
     * ***
     * 
     */
    @Import(name="nodebalancerId", required=true)
    private Output<Integer> nodebalancerId;

    /**
     * @return The ID of the NodeBalancer to access.
     * 
     * ***
     * 
     */
    public Output<Integer> nodebalancerId() {
        return this.nodebalancerId;
    }

    /**
     * The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can&#39;t have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can&#39;t have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)
     * 
     */
    @Import(name="proxyProtocol")
    private @Nullable Output<String> proxyProtocol;

    /**
     * @return The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)
     * 
     */
    public Optional<Output<String>> proxyProtocol() {
        return Optional.ofNullable(this.proxyProtocol);
    }

    /**
     * The certificate this port is serving. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
     * 
     */
    @Import(name="sslCert")
    private @Nullable Output<String> sslCert;

    /**
     * @return The certificate this port is serving. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
     * 
     */
    public Optional<Output<String>> sslCert() {
        return Optional.ofNullable(this.sslCert);
    }

    /**
     * The private key corresponding to this port&#39;s certificate. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
     * 
     */
    @Import(name="sslKey")
    private @Nullable Output<String> sslKey;

    /**
     * @return The private key corresponding to this port&#39;s certificate. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
     * 
     */
    public Optional<Output<String>> sslKey() {
        return Optional.ofNullable(this.sslKey);
    }

    /**
     * Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)
     * 
     */
    @Import(name="stickiness")
    private @Nullable Output<String> stickiness;

    /**
     * @return Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)
     * 
     */
    public Optional<Output<String>> stickiness() {
        return Optional.ofNullable(this.stickiness);
    }

    private NodeBalancerConfigArgs() {}

    private NodeBalancerConfigArgs(NodeBalancerConfigArgs $) {
        this.algorithm = $.algorithm;
        this.check = $.check;
        this.checkAttempts = $.checkAttempts;
        this.checkBody = $.checkBody;
        this.checkInterval = $.checkInterval;
        this.checkPassive = $.checkPassive;
        this.checkPath = $.checkPath;
        this.checkTimeout = $.checkTimeout;
        this.cipherSuite = $.cipherSuite;
        this.nodebalancerId = $.nodebalancerId;
        this.port = $.port;
        this.protocol = $.protocol;
        this.proxyProtocol = $.proxyProtocol;
        this.sslCert = $.sslCert;
        this.sslKey = $.sslKey;
        this.stickiness = $.stickiness;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeBalancerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeBalancerConfigArgs $;

        public Builder() {
            $ = new NodeBalancerConfigArgs();
        }

        public Builder(NodeBalancerConfigArgs defaults) {
            $ = new NodeBalancerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param check The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)
         * 
         * @return builder
         * 
         */
        public Builder check(@Nullable Output<String> check) {
            $.check = check;
            return this;
        }

        /**
         * @param check The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)
         * 
         * @return builder
         * 
         */
        public Builder check(String check) {
            return check(Output.of(check));
        }

        /**
         * @param checkAttempts How many times to attempt a check before considering a backend to be down. (1-30)
         * 
         * @return builder
         * 
         */
        public Builder checkAttempts(@Nullable Output<Integer> checkAttempts) {
            $.checkAttempts = checkAttempts;
            return this;
        }

        /**
         * @param checkAttempts How many times to attempt a check before considering a backend to be down. (1-30)
         * 
         * @return builder
         * 
         */
        public Builder checkAttempts(Integer checkAttempts) {
            return checkAttempts(Output.of(checkAttempts));
        }

        /**
         * @param checkBody This value must be present in the response body of the check in order for it to pass. If this value is not present in
         * the response body of a check request, the backend is considered to be down
         * 
         * @return builder
         * 
         */
        public Builder checkBody(@Nullable Output<String> checkBody) {
            $.checkBody = checkBody;
            return this;
        }

        /**
         * @param checkBody This value must be present in the response body of the check in order for it to pass. If this value is not present in
         * the response body of a check request, the backend is considered to be down
         * 
         * @return builder
         * 
         */
        public Builder checkBody(String checkBody) {
            return checkBody(Output.of(checkBody));
        }

        /**
         * @param checkInterval How often, in seconds, to check that backends are up and serving requests.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(@Nullable Output<Integer> checkInterval) {
            $.checkInterval = checkInterval;
            return this;
        }

        /**
         * @param checkInterval How often, in seconds, to check that backends are up and serving requests.
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(Integer checkInterval) {
            return checkInterval(Output.of(checkInterval));
        }

        /**
         * @param checkPassive If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
         * 
         * @return builder
         * 
         */
        public Builder checkPassive(@Nullable Output<Boolean> checkPassive) {
            $.checkPassive = checkPassive;
            return this;
        }

        /**
         * @param checkPassive If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
         * 
         * @return builder
         * 
         */
        public Builder checkPassive(Boolean checkPassive) {
            return checkPassive(Output.of(checkPassive));
        }

        /**
         * @param checkPath The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
         * 
         * @return builder
         * 
         */
        public Builder checkPath(@Nullable Output<String> checkPath) {
            $.checkPath = checkPath;
            return this;
        }

        /**
         * @param checkPath The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
         * 
         * @return builder
         * 
         */
        public Builder checkPath(String checkPath) {
            return checkPath(Output.of(checkPath));
        }

        /**
         * @param checkTimeout How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
         * 
         * @return builder
         * 
         */
        public Builder checkTimeout(@Nullable Output<Integer> checkTimeout) {
            $.checkTimeout = checkTimeout;
            return this;
        }

        /**
         * @param checkTimeout How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
         * 
         * @return builder
         * 
         */
        public Builder checkTimeout(Integer checkTimeout) {
            return checkTimeout(Output.of(checkTimeout));
        }

        /**
         * @param cipherSuite What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
         * 
         * @return builder
         * 
         */
        public Builder cipherSuite(@Nullable Output<String> cipherSuite) {
            $.cipherSuite = cipherSuite;
            return this;
        }

        /**
         * @param cipherSuite What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
         * 
         * @return builder
         * 
         */
        public Builder cipherSuite(String cipherSuite) {
            return cipherSuite(Output.of(cipherSuite));
        }

        /**
         * @param nodebalancerId The ID of the NodeBalancer to access.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder nodebalancerId(Output<Integer> nodebalancerId) {
            $.nodebalancerId = nodebalancerId;
            return this;
        }

        /**
         * @param nodebalancerId The ID of the NodeBalancer to access.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder nodebalancerId(Integer nodebalancerId) {
            return nodebalancerId(Output.of(nodebalancerId));
        }

        /**
         * @param port The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can&#39;t have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can&#39;t have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyProtocol The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(@Nullable Output<String> proxyProtocol) {
            $.proxyProtocol = proxyProtocol;
            return this;
        }

        /**
         * @param proxyProtocol The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(String proxyProtocol) {
            return proxyProtocol(Output.of(proxyProtocol));
        }

        /**
         * @param sslCert The certificate this port is serving. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslCert(@Nullable Output<String> sslCert) {
            $.sslCert = sslCert;
            return this;
        }

        /**
         * @param sslCert The certificate this port is serving. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslCert(String sslCert) {
            return sslCert(Output.of(sslCert));
        }

        /**
         * @param sslKey The private key corresponding to this port&#39;s certificate. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslKey(@Nullable Output<String> sslKey) {
            $.sslKey = sslKey;
            return this;
        }

        /**
         * @param sslKey The private key corresponding to this port&#39;s certificate. This is not returned. If set, this field will come back as `&lt;REDACTED&gt;`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sslKey(String sslKey) {
            return sslKey(Output.of(sslKey));
        }

        /**
         * @param stickiness Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)
         * 
         * @return builder
         * 
         */
        public Builder stickiness(@Nullable Output<String> stickiness) {
            $.stickiness = stickiness;
            return this;
        }

        /**
         * @param stickiness Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)
         * 
         * @return builder
         * 
         */
        public Builder stickiness(String stickiness) {
            return stickiness(Output.of(stickiness));
        }

        public NodeBalancerConfigArgs build() {
            if ($.nodebalancerId == null) {
                throw new MissingRequiredPropertyException("NodeBalancerConfigArgs", "nodebalancerId");
            }
            return $;
        }
    }

}
