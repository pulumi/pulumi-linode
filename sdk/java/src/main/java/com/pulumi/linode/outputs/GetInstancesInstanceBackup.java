// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetInstancesInstanceBackupSchedule;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstanceBackup {
    /**
     * @return Whether this Backup is available for restoration.
     * 
     */
    private Boolean available;
    /**
     * @return If this Linode has the Backup service enabled.
     * 
     */
    private Boolean enabled;
    private List<GetInstancesInstanceBackupSchedule> schedules;

    private GetInstancesInstanceBackup() {}
    /**
     * @return Whether this Backup is available for restoration.
     * 
     */
    public Boolean available() {
        return this.available;
    }
    /**
     * @return If this Linode has the Backup service enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    public List<GetInstancesInstanceBackupSchedule> schedules() {
        return this.schedules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstanceBackup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean available;
        private Boolean enabled;
        private List<GetInstancesInstanceBackupSchedule> schedules;
        public Builder() {}
        public Builder(GetInstancesInstanceBackup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.available = defaults.available;
    	      this.enabled = defaults.enabled;
    	      this.schedules = defaults.schedules;
        }

        @CustomType.Setter
        public Builder available(Boolean available) {
            if (available == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceBackup", "available");
            }
            this.available = available;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceBackup", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder schedules(List<GetInstancesInstanceBackupSchedule> schedules) {
            if (schedules == null) {
              throw new MissingRequiredPropertyException("GetInstancesInstanceBackup", "schedules");
            }
            this.schedules = schedules;
            return this;
        }
        public Builder schedules(GetInstancesInstanceBackupSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        public GetInstancesInstanceBackup build() {
            final var _resultValue = new GetInstancesInstanceBackup();
            _resultValue.available = available;
            _resultValue.enabled = enabled;
            _resultValue.schedules = schedules;
            return _resultValue;
        }
    }
}
