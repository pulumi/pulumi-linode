// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetUsersUserDatabaseGrant;
import com.pulumi.linode.outputs.GetUsersUserDomainGrant;
import com.pulumi.linode.outputs.GetUsersUserFirewallGrant;
import com.pulumi.linode.outputs.GetUsersUserGlobalGrant;
import com.pulumi.linode.outputs.GetUsersUserImageGrant;
import com.pulumi.linode.outputs.GetUsersUserLinodeGrant;
import com.pulumi.linode.outputs.GetUsersUserLongviewGrant;
import com.pulumi.linode.outputs.GetUsersUserNodebalancerGrant;
import com.pulumi.linode.outputs.GetUsersUserStackscriptGrant;
import com.pulumi.linode.outputs.GetUsersUserVolumeGrant;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUsersUser {
    private List<GetUsersUserDatabaseGrant> databaseGrants;
    private List<GetUsersUserDomainGrant> domainGrants;
    /**
     * @return The email address for this User, for account management communications, and may be used for other communications as configured.
     * 
     */
    private String email;
    private List<GetUsersUserFirewallGrant> firewallGrants;
    private List<GetUsersUserGlobalGrant> globalGrants;
    /**
     * @return The ID of entity this grant applies to.
     * 
     */
    private String id;
    private List<GetUsersUserImageGrant> imageGrants;
    private List<GetUsersUserLinodeGrant> linodeGrants;
    private List<GetUsersUserLongviewGrant> longviewGrants;
    private List<GetUsersUserNodebalancerGrant> nodebalancerGrants;
    /**
     * @return The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
     * 
     */
    private String passwordCreated;
    /**
     * @return If true, this User must be granted access to perform actions or access entities on this Account.
     * 
     */
    private Boolean restricted;
    /**
     * @return A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     * 
     */
    private List<String> sshKeys;
    private List<GetUsersUserStackscriptGrant> stackscriptGrants;
    /**
     * @return A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
     * 
     */
    private Boolean tfaEnabled;
    /**
     * @return This User&#39;s username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
     * 
     */
    private String username;
    /**
     * @return The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
     * 
     */
    private String verifiedPhoneNumber;
    private List<GetUsersUserVolumeGrant> volumeGrants;

    private GetUsersUser() {}
    public List<GetUsersUserDatabaseGrant> databaseGrants() {
        return this.databaseGrants;
    }
    public List<GetUsersUserDomainGrant> domainGrants() {
        return this.domainGrants;
    }
    /**
     * @return The email address for this User, for account management communications, and may be used for other communications as configured.
     * 
     */
    public String email() {
        return this.email;
    }
    public List<GetUsersUserFirewallGrant> firewallGrants() {
        return this.firewallGrants;
    }
    public List<GetUsersUserGlobalGrant> globalGrants() {
        return this.globalGrants;
    }
    /**
     * @return The ID of entity this grant applies to.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetUsersUserImageGrant> imageGrants() {
        return this.imageGrants;
    }
    public List<GetUsersUserLinodeGrant> linodeGrants() {
        return this.linodeGrants;
    }
    public List<GetUsersUserLongviewGrant> longviewGrants() {
        return this.longviewGrants;
    }
    public List<GetUsersUserNodebalancerGrant> nodebalancerGrants() {
        return this.nodebalancerGrants;
    }
    /**
     * @return The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
     * 
     */
    public String passwordCreated() {
        return this.passwordCreated;
    }
    /**
     * @return If true, this User must be granted access to perform actions or access entities on this Account.
     * 
     */
    public Boolean restricted() {
        return this.restricted;
    }
    /**
     * @return A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     * 
     */
    public List<String> sshKeys() {
        return this.sshKeys;
    }
    public List<GetUsersUserStackscriptGrant> stackscriptGrants() {
        return this.stackscriptGrants;
    }
    /**
     * @return A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
     * 
     */
    public Boolean tfaEnabled() {
        return this.tfaEnabled;
    }
    /**
     * @return This User&#39;s username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
     * 
     */
    public String verifiedPhoneNumber() {
        return this.verifiedPhoneNumber;
    }
    public List<GetUsersUserVolumeGrant> volumeGrants() {
        return this.volumeGrants;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsersUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetUsersUserDatabaseGrant> databaseGrants;
        private List<GetUsersUserDomainGrant> domainGrants;
        private String email;
        private List<GetUsersUserFirewallGrant> firewallGrants;
        private List<GetUsersUserGlobalGrant> globalGrants;
        private String id;
        private List<GetUsersUserImageGrant> imageGrants;
        private List<GetUsersUserLinodeGrant> linodeGrants;
        private List<GetUsersUserLongviewGrant> longviewGrants;
        private List<GetUsersUserNodebalancerGrant> nodebalancerGrants;
        private String passwordCreated;
        private Boolean restricted;
        private List<String> sshKeys;
        private List<GetUsersUserStackscriptGrant> stackscriptGrants;
        private Boolean tfaEnabled;
        private String username;
        private String verifiedPhoneNumber;
        private List<GetUsersUserVolumeGrant> volumeGrants;
        public Builder() {}
        public Builder(GetUsersUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseGrants = defaults.databaseGrants;
    	      this.domainGrants = defaults.domainGrants;
    	      this.email = defaults.email;
    	      this.firewallGrants = defaults.firewallGrants;
    	      this.globalGrants = defaults.globalGrants;
    	      this.id = defaults.id;
    	      this.imageGrants = defaults.imageGrants;
    	      this.linodeGrants = defaults.linodeGrants;
    	      this.longviewGrants = defaults.longviewGrants;
    	      this.nodebalancerGrants = defaults.nodebalancerGrants;
    	      this.passwordCreated = defaults.passwordCreated;
    	      this.restricted = defaults.restricted;
    	      this.sshKeys = defaults.sshKeys;
    	      this.stackscriptGrants = defaults.stackscriptGrants;
    	      this.tfaEnabled = defaults.tfaEnabled;
    	      this.username = defaults.username;
    	      this.verifiedPhoneNumber = defaults.verifiedPhoneNumber;
    	      this.volumeGrants = defaults.volumeGrants;
        }

        @CustomType.Setter
        public Builder databaseGrants(List<GetUsersUserDatabaseGrant> databaseGrants) {
            this.databaseGrants = Objects.requireNonNull(databaseGrants);
            return this;
        }
        public Builder databaseGrants(GetUsersUserDatabaseGrant... databaseGrants) {
            return databaseGrants(List.of(databaseGrants));
        }
        @CustomType.Setter
        public Builder domainGrants(List<GetUsersUserDomainGrant> domainGrants) {
            this.domainGrants = Objects.requireNonNull(domainGrants);
            return this;
        }
        public Builder domainGrants(GetUsersUserDomainGrant... domainGrants) {
            return domainGrants(List.of(domainGrants));
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder firewallGrants(List<GetUsersUserFirewallGrant> firewallGrants) {
            this.firewallGrants = Objects.requireNonNull(firewallGrants);
            return this;
        }
        public Builder firewallGrants(GetUsersUserFirewallGrant... firewallGrants) {
            return firewallGrants(List.of(firewallGrants));
        }
        @CustomType.Setter
        public Builder globalGrants(List<GetUsersUserGlobalGrant> globalGrants) {
            this.globalGrants = Objects.requireNonNull(globalGrants);
            return this;
        }
        public Builder globalGrants(GetUsersUserGlobalGrant... globalGrants) {
            return globalGrants(List.of(globalGrants));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageGrants(List<GetUsersUserImageGrant> imageGrants) {
            this.imageGrants = Objects.requireNonNull(imageGrants);
            return this;
        }
        public Builder imageGrants(GetUsersUserImageGrant... imageGrants) {
            return imageGrants(List.of(imageGrants));
        }
        @CustomType.Setter
        public Builder linodeGrants(List<GetUsersUserLinodeGrant> linodeGrants) {
            this.linodeGrants = Objects.requireNonNull(linodeGrants);
            return this;
        }
        public Builder linodeGrants(GetUsersUserLinodeGrant... linodeGrants) {
            return linodeGrants(List.of(linodeGrants));
        }
        @CustomType.Setter
        public Builder longviewGrants(List<GetUsersUserLongviewGrant> longviewGrants) {
            this.longviewGrants = Objects.requireNonNull(longviewGrants);
            return this;
        }
        public Builder longviewGrants(GetUsersUserLongviewGrant... longviewGrants) {
            return longviewGrants(List.of(longviewGrants));
        }
        @CustomType.Setter
        public Builder nodebalancerGrants(List<GetUsersUserNodebalancerGrant> nodebalancerGrants) {
            this.nodebalancerGrants = Objects.requireNonNull(nodebalancerGrants);
            return this;
        }
        public Builder nodebalancerGrants(GetUsersUserNodebalancerGrant... nodebalancerGrants) {
            return nodebalancerGrants(List.of(nodebalancerGrants));
        }
        @CustomType.Setter
        public Builder passwordCreated(String passwordCreated) {
            this.passwordCreated = Objects.requireNonNull(passwordCreated);
            return this;
        }
        @CustomType.Setter
        public Builder restricted(Boolean restricted) {
            this.restricted = Objects.requireNonNull(restricted);
            return this;
        }
        @CustomType.Setter
        public Builder sshKeys(List<String> sshKeys) {
            this.sshKeys = Objects.requireNonNull(sshKeys);
            return this;
        }
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }
        @CustomType.Setter
        public Builder stackscriptGrants(List<GetUsersUserStackscriptGrant> stackscriptGrants) {
            this.stackscriptGrants = Objects.requireNonNull(stackscriptGrants);
            return this;
        }
        public Builder stackscriptGrants(GetUsersUserStackscriptGrant... stackscriptGrants) {
            return stackscriptGrants(List.of(stackscriptGrants));
        }
        @CustomType.Setter
        public Builder tfaEnabled(Boolean tfaEnabled) {
            this.tfaEnabled = Objects.requireNonNull(tfaEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder verifiedPhoneNumber(String verifiedPhoneNumber) {
            this.verifiedPhoneNumber = Objects.requireNonNull(verifiedPhoneNumber);
            return this;
        }
        @CustomType.Setter
        public Builder volumeGrants(List<GetUsersUserVolumeGrant> volumeGrants) {
            this.volumeGrants = Objects.requireNonNull(volumeGrants);
            return this;
        }
        public Builder volumeGrants(GetUsersUserVolumeGrant... volumeGrants) {
            return volumeGrants(List.of(volumeGrants));
        }
        public GetUsersUser build() {
            final var o = new GetUsersUser();
            o.databaseGrants = databaseGrants;
            o.domainGrants = domainGrants;
            o.email = email;
            o.firewallGrants = firewallGrants;
            o.globalGrants = globalGrants;
            o.id = id;
            o.imageGrants = imageGrants;
            o.linodeGrants = linodeGrants;
            o.longviewGrants = longviewGrants;
            o.nodebalancerGrants = nodebalancerGrants;
            o.passwordCreated = passwordCreated;
            o.restricted = restricted;
            o.sshKeys = sshKeys;
            o.stackscriptGrants = stackscriptGrants;
            o.tfaEnabled = tfaEnabled;
            o.username = username;
            o.verifiedPhoneNumber = verifiedPhoneNumber;
            o.volumeGrants = volumeGrants;
            return o;
        }
    }
}
