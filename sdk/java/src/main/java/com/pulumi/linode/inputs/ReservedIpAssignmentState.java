// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.ReservedIpAssignmentVpcNat11Args;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpAssignmentState Empty = new ReservedIpAssignmentState();

    /**
     * The resulting IPv4 address.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The resulting IPv4 address.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
     * `skip_implicit_reboots` provider argument.
     * 
     */
    @Import(name="applyImmediately")
    private @Nullable Output<Boolean> applyImmediately;

    /**
     * @return If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
     * `skip_implicit_reboots` provider argument.
     * 
     */
    public Optional<Output<Boolean>> applyImmediately() {
        return Optional.ofNullable(this.applyImmediately);
    }

    /**
     * The default gateway for this address
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return The default gateway for this address
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * The ID of the Linode to allocate an IPv4 address for.
     * 
     */
    @Import(name="linodeId")
    private @Nullable Output<Integer> linodeId;

    /**
     * @return The ID of the Linode to allocate an IPv4 address for.
     * 
     */
    public Optional<Output<Integer>> linodeId() {
        return Optional.ofNullable(this.linodeId);
    }

    /**
     * The number of bits set in the subnet mask.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<Integer> prefix;

    /**
     * @return The number of bits set in the subnet mask.
     * 
     */
    public Optional<Output<Integer>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Whether the IPv4 address is public or private.
     * 
     */
    @Import(name="public")
    private @Nullable Output<Boolean> public_;

    /**
     * @return Whether the IPv4 address is public or private.
     * 
     */
    public Optional<Output<Boolean>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * The reverse DNS assigned to this address.
     * 
     */
    @Import(name="rdns")
    private @Nullable Output<String> rdns;

    /**
     * @return The reverse DNS assigned to this address.
     * 
     */
    public Optional<Output<String>> rdns() {
        return Optional.ofNullable(this.rdns);
    }

    /**
     * The region this IP resides in.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region this IP resides in.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The reservation status of the IP address
     * 
     */
    @Import(name="reserved")
    private @Nullable Output<Boolean> reserved;

    /**
     * @return The reservation status of the IP address
     * 
     */
    public Optional<Output<Boolean>> reserved() {
        return Optional.ofNullable(this.reserved);
    }

    /**
     * The mask that separates host bits from network bits for this address.
     * 
     */
    @Import(name="subnetMask")
    private @Nullable Output<String> subnetMask;

    /**
     * @return The mask that separates host bits from network bits for this address.
     * 
     */
    public Optional<Output<String>> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }

    /**
     * The type of IP address.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of IP address.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
     * 
     */
    @Import(name="vpcNat11s")
    private @Nullable Output<List<ReservedIpAssignmentVpcNat11Args>> vpcNat11s;

    /**
     * @return Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
     * 
     */
    public Optional<Output<List<ReservedIpAssignmentVpcNat11Args>>> vpcNat11s() {
        return Optional.ofNullable(this.vpcNat11s);
    }

    private ReservedIpAssignmentState() {}

    private ReservedIpAssignmentState(ReservedIpAssignmentState $) {
        this.address = $.address;
        this.applyImmediately = $.applyImmediately;
        this.gateway = $.gateway;
        this.linodeId = $.linodeId;
        this.prefix = $.prefix;
        this.public_ = $.public_;
        this.rdns = $.rdns;
        this.region = $.region;
        this.reserved = $.reserved;
        this.subnetMask = $.subnetMask;
        this.type = $.type;
        this.vpcNat11s = $.vpcNat11s;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpAssignmentState $;

        public Builder() {
            $ = new ReservedIpAssignmentState();
        }

        public Builder(ReservedIpAssignmentState defaults) {
            $ = new ReservedIpAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The resulting IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The resulting IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param applyImmediately If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
         * `skip_implicit_reboots` provider argument.
         * 
         * @return builder
         * 
         */
        public Builder applyImmediately(@Nullable Output<Boolean> applyImmediately) {
            $.applyImmediately = applyImmediately;
            return this;
        }

        /**
         * @param applyImmediately If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
         * `skip_implicit_reboots` provider argument.
         * 
         * @return builder
         * 
         */
        public Builder applyImmediately(Boolean applyImmediately) {
            return applyImmediately(Output.of(applyImmediately));
        }

        /**
         * @param gateway The default gateway for this address
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway The default gateway for this address
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param linodeId The ID of the Linode to allocate an IPv4 address for.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(@Nullable Output<Integer> linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param linodeId The ID of the Linode to allocate an IPv4 address for.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            return linodeId(Output.of(linodeId));
        }

        /**
         * @param prefix The number of bits set in the subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<Integer> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The number of bits set in the subnet mask.
         * 
         * @return builder
         * 
         */
        public Builder prefix(Integer prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param public_ Whether the IPv4 address is public or private.
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<Boolean> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Whether the IPv4 address is public or private.
         * 
         * @return builder
         * 
         */
        public Builder public_(Boolean public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param rdns The reverse DNS assigned to this address.
         * 
         * @return builder
         * 
         */
        public Builder rdns(@Nullable Output<String> rdns) {
            $.rdns = rdns;
            return this;
        }

        /**
         * @param rdns The reverse DNS assigned to this address.
         * 
         * @return builder
         * 
         */
        public Builder rdns(String rdns) {
            return rdns(Output.of(rdns));
        }

        /**
         * @param region The region this IP resides in.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region this IP resides in.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param reserved The reservation status of the IP address
         * 
         * @return builder
         * 
         */
        public Builder reserved(@Nullable Output<Boolean> reserved) {
            $.reserved = reserved;
            return this;
        }

        /**
         * @param reserved The reservation status of the IP address
         * 
         * @return builder
         * 
         */
        public Builder reserved(Boolean reserved) {
            return reserved(Output.of(reserved));
        }

        /**
         * @param subnetMask The mask that separates host bits from network bits for this address.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(@Nullable Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask The mask that separates host bits from network bits for this address.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        /**
         * @param type The type of IP address.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of IP address.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpcNat11s Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcNat11s(@Nullable Output<List<ReservedIpAssignmentVpcNat11Args>> vpcNat11s) {
            $.vpcNat11s = vpcNat11s;
            return this;
        }

        /**
         * @param vpcNat11s Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcNat11s(List<ReservedIpAssignmentVpcNat11Args> vpcNat11s) {
            return vpcNat11s(Output.of(vpcNat11s));
        }

        /**
         * @param vpcNat11s Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcNat11s(ReservedIpAssignmentVpcNat11Args... vpcNat11s) {
            return vpcNat11s(List.of(vpcNat11s));
        }

        public ReservedIpAssignmentState build() {
            return $;
        }
    }

}
