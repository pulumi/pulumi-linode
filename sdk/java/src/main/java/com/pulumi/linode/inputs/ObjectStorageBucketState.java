// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.ObjectStorageBucketCertArgs;
import com.pulumi.linode.inputs.ObjectStorageBucketLifecycleRuleArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectStorageBucketState extends com.pulumi.resources.ResourceArgs {

    public static final ObjectStorageBucketState Empty = new ObjectStorageBucketState();

    /**
     * The access key to authenticate with.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The access key to authenticate with.
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
     * 
     */
    @Import(name="acl")
    private @Nullable Output<String> acl;

    /**
     * @return The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
     * 
     */
    public Optional<Output<String>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * The cert used by this Object Storage Bucket.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<ObjectStorageBucketCertArgs> cert;

    /**
     * @return The cert used by this Object Storage Bucket.
     * 
     */
    public Optional<Output<ObjectStorageBucketCertArgs>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * The cluster of the Linode Object Storage Bucket.
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return The cluster of the Linode Object Storage Bucket.
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * If true, the bucket will have CORS enabled for all origins.
     * 
     */
    @Import(name="corsEnabled")
    private @Nullable Output<Boolean> corsEnabled;

    /**
     * @return If true, the bucket will have CORS enabled for all origins.
     * 
     */
    public Optional<Output<Boolean>> corsEnabled() {
        return Optional.ofNullable(this.corsEnabled);
    }

    /**
     * The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made
     * public.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made
     * public.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The label of the Linode Object Storage Bucket.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label of the Linode Object Storage Bucket.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Lifecycle rules to be applied to the bucket.
     * 
     */
    @Import(name="lifecycleRules")
    private @Nullable Output<List<ObjectStorageBucketLifecycleRuleArgs>> lifecycleRules;

    /**
     * @return Lifecycle rules to be applied to the bucket.
     * 
     */
    public Optional<Output<List<ObjectStorageBucketLifecycleRuleArgs>>> lifecycleRules() {
        return Optional.ofNullable(this.lifecycleRules);
    }

    /**
     * The secret key to authenticate with.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return The secret key to authenticate with.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
     * 
     * * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
     * 
     * * `cert` - (Optional) The bucket&#39;s TLS/SSL certificate.
     * 
     */
    @Import(name="versioning")
    private @Nullable Output<Boolean> versioning;

    /**
     * @return Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
     * 
     * * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
     * 
     * * `cert` - (Optional) The bucket&#39;s TLS/SSL certificate.
     * 
     */
    public Optional<Output<Boolean>> versioning() {
        return Optional.ofNullable(this.versioning);
    }

    private ObjectStorageBucketState() {}

    private ObjectStorageBucketState(ObjectStorageBucketState $) {
        this.accessKey = $.accessKey;
        this.acl = $.acl;
        this.cert = $.cert;
        this.cluster = $.cluster;
        this.corsEnabled = $.corsEnabled;
        this.hostname = $.hostname;
        this.label = $.label;
        this.lifecycleRules = $.lifecycleRules;
        this.secretKey = $.secretKey;
        this.versioning = $.versioning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectStorageBucketState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectStorageBucketState $;

        public Builder() {
            $ = new ObjectStorageBucketState();
        }

        public Builder(ObjectStorageBucketState defaults) {
            $ = new ObjectStorageBucketState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The access key to authenticate with.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The access key to authenticate with.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param acl The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<String> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
         * 
         * @return builder
         * 
         */
        public Builder acl(String acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param cert The cert used by this Object Storage Bucket.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<ObjectStorageBucketCertArgs> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert The cert used by this Object Storage Bucket.
         * 
         * @return builder
         * 
         */
        public Builder cert(ObjectStorageBucketCertArgs cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param cluster The cluster of the Linode Object Storage Bucket.
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster The cluster of the Linode Object Storage Bucket.
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param corsEnabled If true, the bucket will have CORS enabled for all origins.
         * 
         * @return builder
         * 
         */
        public Builder corsEnabled(@Nullable Output<Boolean> corsEnabled) {
            $.corsEnabled = corsEnabled;
            return this;
        }

        /**
         * @param corsEnabled If true, the bucket will have CORS enabled for all origins.
         * 
         * @return builder
         * 
         */
        public Builder corsEnabled(Boolean corsEnabled) {
            return corsEnabled(Output.of(corsEnabled));
        }

        /**
         * @param hostname The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made
         * public.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made
         * public.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param label The label of the Linode Object Storage Bucket.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the Linode Object Storage Bucket.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param lifecycleRules Lifecycle rules to be applied to the bucket.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRules(@Nullable Output<List<ObjectStorageBucketLifecycleRuleArgs>> lifecycleRules) {
            $.lifecycleRules = lifecycleRules;
            return this;
        }

        /**
         * @param lifecycleRules Lifecycle rules to be applied to the bucket.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRules(List<ObjectStorageBucketLifecycleRuleArgs> lifecycleRules) {
            return lifecycleRules(Output.of(lifecycleRules));
        }

        /**
         * @param lifecycleRules Lifecycle rules to be applied to the bucket.
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRules(ObjectStorageBucketLifecycleRuleArgs... lifecycleRules) {
            return lifecycleRules(List.of(lifecycleRules));
        }

        /**
         * @param secretKey The secret key to authenticate with.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret key to authenticate with.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param versioning Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
         * 
         * * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
         * 
         * * `cert` - (Optional) The bucket&#39;s TLS/SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder versioning(@Nullable Output<Boolean> versioning) {
            $.versioning = versioning;
            return this;
        }

        /**
         * @param versioning Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
         * 
         * * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
         * 
         * * `cert` - (Optional) The bucket&#39;s TLS/SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder versioning(Boolean versioning) {
            return versioning(Output.of(versioning));
        }

        public ObjectStorageBucketState build() {
            return $;
        }
    }

}
