// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetInstancesInstanceAlerts;
import com.pulumi.linode.outputs.GetInstancesInstanceBackup;
import com.pulumi.linode.outputs.GetInstancesInstanceConfig;
import com.pulumi.linode.outputs.GetInstancesInstanceDisk;
import com.pulumi.linode.outputs.GetInstancesInstanceSpec;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancesInstance {
    private GetInstancesInstanceAlerts alerts;
    private List<GetInstancesInstanceBackup> backups;
    private String bootConfigLabel;
    private List<GetInstancesInstanceConfig> configs;
    private List<GetInstancesInstanceDisk> disks;
    /**
     * @return The display group of the Linode instance.
     * 
     */
    private String group;
    /**
     * @return Whether this Instance was created with user-data.
     * 
     */
    private Boolean hasUserData;
    private String hostUuid;
    /**
     * @return The ID of the disk in the Linode API.
     * 
     */
    private Integer id;
    /**
     * @return An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*
     * 
     */
    private String image;
    /**
     * @return A string containing the Linode&#39;s public IP address.
     * 
     */
    private String ipAddress;
    /**
     * @return This Linode&#39;s IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
     * 
     */
    private List<String> ipv4s;
    /**
     * @return This Linode&#39;s IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.
     * 
     */
    private String ipv6;
    /**
     * @return The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.
     * 
     */
    private String label;
    /**
     * @return This Linode&#39;s Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.
     * 
     */
    private String privateIpAddress;
    /**
     * @return This is the location where the Linode is deployed. Examples are `&#34;us-east&#34;`, `&#34;us-west&#34;`, `&#34;ap-south&#34;`, etc. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    private String region;
    private List<GetInstancesInstanceSpec> specs;
    /**
     * @return The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)
     * 
     */
    private String status;
    /**
     * @return When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
     * 
     */
    private Integer swapSize;
    /**
     * @return A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    private List<String> tags;
    /**
     * @return The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `&#34;g6-nanode-1&#34;`, `&#34;g6-standard-2&#34;`, `&#34;g6-highmem-16&#34;`, `&#34;g6-dedicated-16&#34;`, etc. See all types [here](https://api.linode.com/v4/linode/types).
     * 
     */
    private String type;
    /**
     * @return The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
     * 
     */
    private Boolean watchdogEnabled;

    private GetInstancesInstance() {}
    public GetInstancesInstanceAlerts alerts() {
        return this.alerts;
    }
    public List<GetInstancesInstanceBackup> backups() {
        return this.backups;
    }
    public String bootConfigLabel() {
        return this.bootConfigLabel;
    }
    public List<GetInstancesInstanceConfig> configs() {
        return this.configs;
    }
    public List<GetInstancesInstanceDisk> disks() {
        return this.disks;
    }
    /**
     * @return The display group of the Linode instance.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return Whether this Instance was created with user-data.
     * 
     */
    public Boolean hasUserData() {
        return this.hasUserData;
    }
    public String hostUuid() {
        return this.hostUuid;
    }
    /**
     * @return The ID of the disk in the Linode API.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return A string containing the Linode&#39;s public IP address.
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return This Linode&#39;s IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
     * 
     */
    public List<String> ipv4s() {
        return this.ipv4s;
    }
    /**
     * @return This Linode&#39;s IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.
     * 
     */
    public String ipv6() {
        return this.ipv6;
    }
    /**
     * @return The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return This Linode&#39;s Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return This is the location where the Linode is deployed. Examples are `&#34;us-east&#34;`, `&#34;us-west&#34;`, `&#34;ap-south&#34;`, etc. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public String region() {
        return this.region;
    }
    public List<GetInstancesInstanceSpec> specs() {
        return this.specs;
    }
    /**
     * @return The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
     * 
     */
    public Integer swapSize() {
        return this.swapSize;
    }
    /**
     * @return A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `&#34;g6-nanode-1&#34;`, `&#34;g6-standard-2&#34;`, `&#34;g6-highmem-16&#34;`, `&#34;g6-dedicated-16&#34;`, etc. See all types [here](https://api.linode.com/v4/linode/types).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
     * 
     */
    public Boolean watchdogEnabled() {
        return this.watchdogEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancesInstance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetInstancesInstanceAlerts alerts;
        private List<GetInstancesInstanceBackup> backups;
        private String bootConfigLabel;
        private List<GetInstancesInstanceConfig> configs;
        private List<GetInstancesInstanceDisk> disks;
        private String group;
        private Boolean hasUserData;
        private String hostUuid;
        private Integer id;
        private String image;
        private String ipAddress;
        private List<String> ipv4s;
        private String ipv6;
        private String label;
        private String privateIpAddress;
        private String region;
        private List<GetInstancesInstanceSpec> specs;
        private String status;
        private Integer swapSize;
        private List<String> tags;
        private String type;
        private Boolean watchdogEnabled;
        public Builder() {}
        public Builder(GetInstancesInstance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alerts = defaults.alerts;
    	      this.backups = defaults.backups;
    	      this.bootConfigLabel = defaults.bootConfigLabel;
    	      this.configs = defaults.configs;
    	      this.disks = defaults.disks;
    	      this.group = defaults.group;
    	      this.hasUserData = defaults.hasUserData;
    	      this.hostUuid = defaults.hostUuid;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipv4s = defaults.ipv4s;
    	      this.ipv6 = defaults.ipv6;
    	      this.label = defaults.label;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.region = defaults.region;
    	      this.specs = defaults.specs;
    	      this.status = defaults.status;
    	      this.swapSize = defaults.swapSize;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.watchdogEnabled = defaults.watchdogEnabled;
        }

        @CustomType.Setter
        public Builder alerts(GetInstancesInstanceAlerts alerts) {
            this.alerts = Objects.requireNonNull(alerts);
            return this;
        }
        @CustomType.Setter
        public Builder backups(List<GetInstancesInstanceBackup> backups) {
            this.backups = Objects.requireNonNull(backups);
            return this;
        }
        public Builder backups(GetInstancesInstanceBackup... backups) {
            return backups(List.of(backups));
        }
        @CustomType.Setter
        public Builder bootConfigLabel(String bootConfigLabel) {
            this.bootConfigLabel = Objects.requireNonNull(bootConfigLabel);
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<GetInstancesInstanceConfig> configs) {
            this.configs = Objects.requireNonNull(configs);
            return this;
        }
        public Builder configs(GetInstancesInstanceConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder disks(List<GetInstancesInstanceDisk> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(GetInstancesInstanceDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder group(String group) {
            this.group = Objects.requireNonNull(group);
            return this;
        }
        @CustomType.Setter
        public Builder hasUserData(Boolean hasUserData) {
            this.hasUserData = Objects.requireNonNull(hasUserData);
            return this;
        }
        @CustomType.Setter
        public Builder hostUuid(String hostUuid) {
            this.hostUuid = Objects.requireNonNull(hostUuid);
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Objects.requireNonNull(ipAddress);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4s(List<String> ipv4s) {
            this.ipv4s = Objects.requireNonNull(ipv4s);
            return this;
        }
        public Builder ipv4s(String... ipv4s) {
            return ipv4s(List.of(ipv4s));
        }
        @CustomType.Setter
        public Builder ipv6(String ipv6) {
            this.ipv6 = Objects.requireNonNull(ipv6);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder specs(List<GetInstancesInstanceSpec> specs) {
            this.specs = Objects.requireNonNull(specs);
            return this;
        }
        public Builder specs(GetInstancesInstanceSpec... specs) {
            return specs(List.of(specs));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder swapSize(Integer swapSize) {
            this.swapSize = Objects.requireNonNull(swapSize);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder watchdogEnabled(Boolean watchdogEnabled) {
            this.watchdogEnabled = Objects.requireNonNull(watchdogEnabled);
            return this;
        }
        public GetInstancesInstance build() {
            final var _resultValue = new GetInstancesInstance();
            _resultValue.alerts = alerts;
            _resultValue.backups = backups;
            _resultValue.bootConfigLabel = bootConfigLabel;
            _resultValue.configs = configs;
            _resultValue.disks = disks;
            _resultValue.group = group;
            _resultValue.hasUserData = hasUserData;
            _resultValue.hostUuid = hostUuid;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.ipAddress = ipAddress;
            _resultValue.ipv4s = ipv4s;
            _resultValue.ipv6 = ipv6;
            _resultValue.label = label;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.region = region;
            _resultValue.specs = specs;
            _resultValue.status = status;
            _resultValue.swapSize = swapSize;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.watchdogEnabled = watchdogEnabled;
            return _resultValue;
        }
    }
}
