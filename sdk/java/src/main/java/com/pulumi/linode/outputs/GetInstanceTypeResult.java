// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetInstanceTypeAddon;
import com.pulumi.linode.outputs.GetInstanceTypePrice;
import com.pulumi.linode.outputs.GetInstanceTypeRegionPrice;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceTypeResult {
    /**
     * @return The number of VPUs this Linode Type offers.
     * 
     */
    private Integer acceleratedDevices;
    private List<GetInstanceTypeAddon> addons;
    /**
     * @return The class of the Linode Type. See all classes [here](https://techdocs.akamai.com/linode-api/reference/get-linode-type).
     * 
     */
    private String class_;
    /**
     * @return The Disk size, in MB, of the Linode Type
     * 
     */
    private Integer disk;
    /**
     * @return The ID representing the Linode Type
     * 
     */
    private String id;
    /**
     * @return The Linode Type&#39;s label is for display purposes only
     * 
     */
    private String label;
    /**
     * @return The amount of RAM included in this Linode Type.
     * 
     */
    private Integer memory;
    /**
     * @return The Mbits outbound bandwidth allocation.
     * 
     */
    private Integer networkOut;
    private List<GetInstanceTypePrice> prices;
    private List<GetInstanceTypeRegionPrice> regionPrices;
    /**
     * @return The monthly outbound transfer amount, in MB.
     * 
     */
    private Integer transfer;
    /**
     * @return The number of VCPU cores this Linode Type offers.
     * 
     */
    private Integer vcpus;

    private GetInstanceTypeResult() {}
    /**
     * @return The number of VPUs this Linode Type offers.
     * 
     */
    public Integer acceleratedDevices() {
        return this.acceleratedDevices;
    }
    public List<GetInstanceTypeAddon> addons() {
        return this.addons;
    }
    /**
     * @return The class of the Linode Type. See all classes [here](https://techdocs.akamai.com/linode-api/reference/get-linode-type).
     * 
     */
    public String class_() {
        return this.class_;
    }
    /**
     * @return The Disk size, in MB, of the Linode Type
     * 
     */
    public Integer disk() {
        return this.disk;
    }
    /**
     * @return The ID representing the Linode Type
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The Linode Type&#39;s label is for display purposes only
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The amount of RAM included in this Linode Type.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return The Mbits outbound bandwidth allocation.
     * 
     */
    public Integer networkOut() {
        return this.networkOut;
    }
    public List<GetInstanceTypePrice> prices() {
        return this.prices;
    }
    public List<GetInstanceTypeRegionPrice> regionPrices() {
        return this.regionPrices;
    }
    /**
     * @return The monthly outbound transfer amount, in MB.
     * 
     */
    public Integer transfer() {
        return this.transfer;
    }
    /**
     * @return The number of VCPU cores this Linode Type offers.
     * 
     */
    public Integer vcpus() {
        return this.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer acceleratedDevices;
        private List<GetInstanceTypeAddon> addons;
        private String class_;
        private Integer disk;
        private String id;
        private String label;
        private Integer memory;
        private Integer networkOut;
        private List<GetInstanceTypePrice> prices;
        private List<GetInstanceTypeRegionPrice> regionPrices;
        private Integer transfer;
        private Integer vcpus;
        public Builder() {}
        public Builder(GetInstanceTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratedDevices = defaults.acceleratedDevices;
    	      this.addons = defaults.addons;
    	      this.class_ = defaults.class_;
    	      this.disk = defaults.disk;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.memory = defaults.memory;
    	      this.networkOut = defaults.networkOut;
    	      this.prices = defaults.prices;
    	      this.regionPrices = defaults.regionPrices;
    	      this.transfer = defaults.transfer;
    	      this.vcpus = defaults.vcpus;
        }

        @CustomType.Setter
        public Builder acceleratedDevices(Integer acceleratedDevices) {
            if (acceleratedDevices == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "acceleratedDevices");
            }
            this.acceleratedDevices = acceleratedDevices;
            return this;
        }
        @CustomType.Setter
        public Builder addons(List<GetInstanceTypeAddon> addons) {
            if (addons == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "addons");
            }
            this.addons = addons;
            return this;
        }
        public Builder addons(GetInstanceTypeAddon... addons) {
            return addons(List.of(addons));
        }
        @CustomType.Setter("class")
        public Builder class_(String class_) {
            if (class_ == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "class_");
            }
            this.class_ = class_;
            return this;
        }
        @CustomType.Setter
        public Builder disk(Integer disk) {
            if (disk == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "disk");
            }
            this.disk = disk;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder networkOut(Integer networkOut) {
            if (networkOut == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "networkOut");
            }
            this.networkOut = networkOut;
            return this;
        }
        @CustomType.Setter
        public Builder prices(List<GetInstanceTypePrice> prices) {
            if (prices == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "prices");
            }
            this.prices = prices;
            return this;
        }
        public Builder prices(GetInstanceTypePrice... prices) {
            return prices(List.of(prices));
        }
        @CustomType.Setter
        public Builder regionPrices(List<GetInstanceTypeRegionPrice> regionPrices) {
            if (regionPrices == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "regionPrices");
            }
            this.regionPrices = regionPrices;
            return this;
        }
        public Builder regionPrices(GetInstanceTypeRegionPrice... regionPrices) {
            return regionPrices(List.of(regionPrices));
        }
        @CustomType.Setter
        public Builder transfer(Integer transfer) {
            if (transfer == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "transfer");
            }
            this.transfer = transfer;
            return this;
        }
        @CustomType.Setter
        public Builder vcpus(Integer vcpus) {
            if (vcpus == null) {
              throw new MissingRequiredPropertyException("GetInstanceTypeResult", "vcpus");
            }
            this.vcpus = vcpus;
            return this;
        }
        public GetInstanceTypeResult build() {
            final var _resultValue = new GetInstanceTypeResult();
            _resultValue.acceleratedDevices = acceleratedDevices;
            _resultValue.addons = addons;
            _resultValue.class_ = class_;
            _resultValue.disk = disk;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.memory = memory;
            _resultValue.networkOut = networkOut;
            _resultValue.prices = prices;
            _resultValue.regionPrices = regionPrices;
            _resultValue.transfer = transfer;
            _resultValue.vcpus = vcpus;
            return _resultValue;
        }
    }
}
