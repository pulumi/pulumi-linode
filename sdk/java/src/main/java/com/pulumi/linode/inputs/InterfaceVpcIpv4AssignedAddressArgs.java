// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfaceVpcIpv4AssignedAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final InterfaceVpcIpv4AssignedAddressArgs Empty = new InterfaceVpcIpv4AssignedAddressArgs();

    /**
     * The assigned IPv4 address.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The assigned IPv4 address.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The assigned 1:1 NAT IPv4 address used to associate a public IPv4 address with the interface&#39;s VPC subnet IPv4 address.
     * 
     */
    @Import(name="nat11Address")
    private @Nullable Output<String> nat11Address;

    /**
     * @return The assigned 1:1 NAT IPv4 address used to associate a public IPv4 address with the interface&#39;s VPC subnet IPv4 address.
     * 
     */
    public Optional<Output<String>> nat11Address() {
        return Optional.ofNullable(this.nat11Address);
    }

    /**
     * Whether this address is the primary address for the interface.
     * 
     */
    @Import(name="primary")
    private @Nullable Output<Boolean> primary;

    /**
     * @return Whether this address is the primary address for the interface.
     * 
     */
    public Optional<Output<Boolean>> primary() {
        return Optional.ofNullable(this.primary);
    }

    private InterfaceVpcIpv4AssignedAddressArgs() {}

    private InterfaceVpcIpv4AssignedAddressArgs(InterfaceVpcIpv4AssignedAddressArgs $) {
        this.address = $.address;
        this.nat11Address = $.nat11Address;
        this.primary = $.primary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfaceVpcIpv4AssignedAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfaceVpcIpv4AssignedAddressArgs $;

        public Builder() {
            $ = new InterfaceVpcIpv4AssignedAddressArgs();
        }

        public Builder(InterfaceVpcIpv4AssignedAddressArgs defaults) {
            $ = new InterfaceVpcIpv4AssignedAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The assigned IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The assigned IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param nat11Address The assigned 1:1 NAT IPv4 address used to associate a public IPv4 address with the interface&#39;s VPC subnet IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder nat11Address(@Nullable Output<String> nat11Address) {
            $.nat11Address = nat11Address;
            return this;
        }

        /**
         * @param nat11Address The assigned 1:1 NAT IPv4 address used to associate a public IPv4 address with the interface&#39;s VPC subnet IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder nat11Address(String nat11Address) {
            return nat11Address(Output.of(nat11Address));
        }

        /**
         * @param primary Whether this address is the primary address for the interface.
         * 
         * @return builder
         * 
         */
        public Builder primary(@Nullable Output<Boolean> primary) {
            $.primary = primary;
            return this;
        }

        /**
         * @param primary Whether this address is the primary address for the interface.
         * 
         * @return builder
         * 
         */
        public Builder primary(Boolean primary) {
            return primary(Output.of(primary));
        }

        public InterfaceVpcIpv4AssignedAddressArgs build() {
            return $;
        }
    }

}
