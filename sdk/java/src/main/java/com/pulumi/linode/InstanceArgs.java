// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InstanceAlertsArgs;
import com.pulumi.linode.inputs.InstanceConfigArgs;
import com.pulumi.linode.inputs.InstanceDiskArgs;
import com.pulumi.linode.inputs.InstanceInterfaceArgs;
import com.pulumi.linode.inputs.InstanceMetadataArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Configuration options for alert triggers on this Linode.
     * 
     */
    @Import(name="alerts")
    private @Nullable Output<InstanceAlertsArgs> alerts;

    /**
     * @return Configuration options for alert triggers on this Linode.
     * 
     */
    public Optional<Output<InstanceAlertsArgs>> alerts() {
        return Optional.ofNullable(this.alerts);
    }

    /**
     * A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
     * 
     */
    @Import(name="authorizedKeys")
    private @Nullable Output<List<String>> authorizedKeys;

    /**
     * @return A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Output<List<String>>> authorizedKeys() {
        return Optional.ofNullable(this.authorizedKeys);
    }

    /**
     * A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
     * 
     */
    @Import(name="authorizedUsers")
    private @Nullable Output<List<String>> authorizedUsers;

    /**
     * @return A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Output<List<String>>> authorizedUsers() {
        return Optional.ofNullable(this.authorizedUsers);
    }

    /**
     * A Backup ID from another Linode&#39;s available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode&#39;s available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*
     * 
     */
    @Import(name="backupId")
    private @Nullable Output<Integer> backupId;

    /**
     * @return A Backup ID from another Linode&#39;s available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode&#39;s available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Output<Integer>> backupId() {
        return Optional.ofNullable(this.backupId);
    }

    /**
     * If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.
     * 
     */
    @Import(name="backupsEnabled")
    private @Nullable Output<Boolean> backupsEnabled;

    /**
     * @return If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.
     * 
     */
    public Optional<Output<Boolean>> backupsEnabled() {
        return Optional.ofNullable(this.backupsEnabled);
    }

    /**
     * The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*
     * 
     */
    @Import(name="bootConfigLabel")
    private @Nullable Output<String> bootConfigLabel;

    /**
     * @return The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*
     * 
     */
    public Optional<Output<String>> bootConfigLabel() {
        return Optional.ofNullable(this.bootConfigLabel);
    }

    /**
     * If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode&#39;s power status will not be managed by the Provider.
     * 
     * * `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.
     * 
     */
    @Import(name="booted")
    private @Nullable Output<Boolean> booted;

    /**
     * @return If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode&#39;s power status will not be managed by the Provider.
     * 
     * * `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.
     * 
     */
    public Optional<Output<Boolean>> booted() {
        return Optional.ofNullable(this.booted);
    }

    /**
     * Configuration profiles define the VM settings and boot behavior of the Linode Instance.
     * 
     * @deprecated
     * The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource.
     * 
     */
    @Deprecated /* The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource. */
    @Import(name="configs")
    private @Nullable Output<List<InstanceConfigArgs>> configs;

    /**
     * @return Configuration profiles define the VM settings and boot behavior of the Linode Instance.
     * 
     * @deprecated
     * The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource.
     * 
     */
    @Deprecated /* The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource. */
    public Optional<Output<List<InstanceConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * @deprecated
     * The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource.
     * 
     */
    @Deprecated /* The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource. */
    @Import(name="disks")
    private @Nullable Output<List<InstanceDiskArgs>> disks;

    /**
     * @deprecated
     * The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource.
     * 
     */
    @Deprecated /* The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource. */
    public Optional<Output<List<InstanceDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The display group of the Linode instance.
     * 
     */
    @Import(name="group")
    private @Nullable Output<String> group;

    /**
     * @return The display group of the Linode instance.
     * 
     */
    public Optional<Output<String>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces
     * must be declared in the config block.
     * 
     */
    @Import(name="interfaces")
    private @Nullable Output<List<InstanceInterfaceArgs>> interfaces;

    /**
     * @return An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces
     * must be declared in the config block.
     * 
     */
    public Optional<Output<List<InstanceInterfaceArgs>>> interfaces() {
        return Optional.ofNullable(this.interfaces);
    }

    /**
     * The Linode&#39;s label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The Linode&#39;s label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Various fields related to the Linode Metadata service.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<InstanceMetadataArgs>> metadatas;

    /**
     * @return Various fields related to the Linode Metadata service.
     * 
     */
    public Optional<Output<List<InstanceMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode&#39;s region. It can be enabled on an existing Linode but it can&#39;t be disabled.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<Boolean> privateIp;

    /**
     * @return If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode&#39;s region. It can be enabled on an existing Linode but it can&#39;t be disabled.
     * 
     */
    public Optional<Output<Boolean>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * This is the location where the Linode is deployed. Examples are `&#34;us-east&#34;`, `&#34;us-west&#34;`, `&#34;ap-south&#34;`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return This is the location where the Linode is deployed. Examples are `&#34;us-east&#34;`, `&#34;us-west&#34;`, `&#34;ap-south&#34;`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*
     * 
     * * `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0, the alert is disabled.
     * 
     * * `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
     * 
     * * `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
     * 
     * * `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we&#39;ll alert you. If this is set to 0 (zero), the alert is disabled.
     * 
     * * `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we&#39;ll send you an alert. If set to 0, this alert is disabled.
     * 
     */
    @Import(name="resizeDisk")
    private @Nullable Output<Boolean> resizeDisk;

    /**
     * @return If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*
     * 
     * * `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0, the alert is disabled.
     * 
     * * `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
     * 
     * * `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
     * 
     * * `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we&#39;ll alert you. If this is set to 0 (zero), the alert is disabled.
     * 
     * * `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we&#39;ll send you an alert. If set to 0, this alert is disabled.
     * 
     */
    public Optional<Output<Boolean>> resizeDisk() {
        return Optional.ofNullable(this.resizeDisk);
    }

    /**
     * The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in Pulumi state.*
     * 
     */
    @Import(name="rootPass")
    private @Nullable Output<String> rootPass;

    /**
     * @return The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in Pulumi state.*
     * 
     */
    public Optional<Output<String>> rootPass() {
        return Optional.ofNullable(this.rootPass);
    }

    /**
     * A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.
     * 
     */
    @Import(name="sharedIpv4s")
    private @Nullable Output<List<String>> sharedIpv4s;

    /**
     * @return A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.
     * 
     */
    public Optional<Output<List<String>>> sharedIpv4s() {
        return Optional.ofNullable(this.sharedIpv4s);
    }

    /**
     * An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if &#39;stackscript_id&#39; is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
     * 
     */
    @Import(name="stackscriptData")
    private @Nullable Output<Map<String,Object>> stackscriptData;

    /**
     * @return An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if &#39;stackscript_id&#39; is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Output<Map<String,Object>>> stackscriptData() {
        return Optional.ofNullable(this.stackscriptData);
    }

    /**
     * The StackScript to deploy to the newly created Linode. If provided, &#39;image&#39; must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
     * 
     */
    @Import(name="stackscriptId")
    private @Nullable Output<Integer> stackscriptId;

    /**
     * @return The StackScript to deploy to the newly created Linode. If provided, &#39;image&#39; must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
     * 
     */
    public Optional<Output<Integer>> stackscriptId() {
        return Optional.ofNullable(this.stackscriptId);
    }

    /**
     * When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
     * 
     */
    @Import(name="swapSize")
    private @Nullable Output<Integer> swapSize;

    /**
     * @return When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
     * 
     */
    public Optional<Output<Integer>> swapSize() {
        return Optional.ofNullable(this.swapSize);
    }

    /**
     * A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `&#34;g6-nanode-1&#34;`, `&#34;g6-standard-2&#34;`, `&#34;g6-highmem-16&#34;`, `&#34;g6-dedicated-16&#34;`, etc. See all types [here](https://api.linode.com/v4/linode/types).
     * 
     * ***
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `&#34;g6-nanode-1&#34;`, `&#34;g6-standard-2&#34;`, `&#34;g6-highmem-16&#34;`, `&#34;g6-dedicated-16&#34;`, etc. See all types [here](https://api.linode.com/v4/linode/types).
     * 
     * ***
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
     * 
     */
    @Import(name="watchdogEnabled")
    private @Nullable Output<Boolean> watchdogEnabled;

    /**
     * @return The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
     * 
     */
    public Optional<Output<Boolean>> watchdogEnabled() {
        return Optional.ofNullable(this.watchdogEnabled);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.alerts = $.alerts;
        this.authorizedKeys = $.authorizedKeys;
        this.authorizedUsers = $.authorizedUsers;
        this.backupId = $.backupId;
        this.backupsEnabled = $.backupsEnabled;
        this.bootConfigLabel = $.bootConfigLabel;
        this.booted = $.booted;
        this.configs = $.configs;
        this.disks = $.disks;
        this.group = $.group;
        this.image = $.image;
        this.interfaces = $.interfaces;
        this.label = $.label;
        this.metadatas = $.metadatas;
        this.privateIp = $.privateIp;
        this.region = $.region;
        this.resizeDisk = $.resizeDisk;
        this.rootPass = $.rootPass;
        this.sharedIpv4s = $.sharedIpv4s;
        this.stackscriptData = $.stackscriptData;
        this.stackscriptId = $.stackscriptId;
        this.swapSize = $.swapSize;
        this.tags = $.tags;
        this.type = $.type;
        this.watchdogEnabled = $.watchdogEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alerts Configuration options for alert triggers on this Linode.
         * 
         * @return builder
         * 
         */
        public Builder alerts(@Nullable Output<InstanceAlertsArgs> alerts) {
            $.alerts = alerts;
            return this;
        }

        /**
         * @param alerts Configuration options for alert triggers on this Linode.
         * 
         * @return builder
         * 
         */
        public Builder alerts(InstanceAlertsArgs alerts) {
            return alerts(Output.of(alerts));
        }

        /**
         * @param authorizedKeys A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeys(@Nullable Output<List<String>> authorizedKeys) {
            $.authorizedKeys = authorizedKeys;
            return this;
        }

        /**
         * @param authorizedKeys A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeys(List<String> authorizedKeys) {
            return authorizedKeys(Output.of(authorizedKeys));
        }

        /**
         * @param authorizedKeys A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder authorizedKeys(String... authorizedKeys) {
            return authorizedKeys(List.of(authorizedKeys));
        }

        /**
         * @param authorizedUsers A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(@Nullable Output<List<String>> authorizedUsers) {
            $.authorizedUsers = authorizedUsers;
            return this;
        }

        /**
         * @param authorizedUsers A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(List<String> authorizedUsers) {
            return authorizedUsers(Output.of(authorizedUsers));
        }

        /**
         * @param authorizedUsers A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user&#39;s `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder authorizedUsers(String... authorizedUsers) {
            return authorizedUsers(List.of(authorizedUsers));
        }

        /**
         * @param backupId A Backup ID from another Linode&#39;s available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode&#39;s available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder backupId(@Nullable Output<Integer> backupId) {
            $.backupId = backupId;
            return this;
        }

        /**
         * @param backupId A Backup ID from another Linode&#39;s available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode&#39;s available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder backupId(Integer backupId) {
            return backupId(Output.of(backupId));
        }

        /**
         * @param backupsEnabled If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.
         * 
         * @return builder
         * 
         */
        public Builder backupsEnabled(@Nullable Output<Boolean> backupsEnabled) {
            $.backupsEnabled = backupsEnabled;
            return this;
        }

        /**
         * @param backupsEnabled If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.
         * 
         * @return builder
         * 
         */
        public Builder backupsEnabled(Boolean backupsEnabled) {
            return backupsEnabled(Output.of(backupsEnabled));
        }

        /**
         * @param bootConfigLabel The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*
         * 
         * @return builder
         * 
         */
        public Builder bootConfigLabel(@Nullable Output<String> bootConfigLabel) {
            $.bootConfigLabel = bootConfigLabel;
            return this;
        }

        /**
         * @param bootConfigLabel The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*
         * 
         * @return builder
         * 
         */
        public Builder bootConfigLabel(String bootConfigLabel) {
            return bootConfigLabel(Output.of(bootConfigLabel));
        }

        /**
         * @param booted If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode&#39;s power status will not be managed by the Provider.
         * 
         * * `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.
         * 
         * @return builder
         * 
         */
        public Builder booted(@Nullable Output<Boolean> booted) {
            $.booted = booted;
            return this;
        }

        /**
         * @param booted If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode&#39;s power status will not be managed by the Provider.
         * 
         * * `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.
         * 
         * @return builder
         * 
         */
        public Builder booted(Boolean booted) {
            return booted(Output.of(booted));
        }

        /**
         * @param configs Configuration profiles define the VM settings and boot behavior of the Linode Instance.
         * 
         * @return builder
         * 
         * @deprecated
         * The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource.
         * 
         */
        @Deprecated /* The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource. */
        public Builder configs(@Nullable Output<List<InstanceConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs Configuration profiles define the VM settings and boot behavior of the Linode Instance.
         * 
         * @return builder
         * 
         * @deprecated
         * The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource.
         * 
         */
        @Deprecated /* The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource. */
        public Builder configs(List<InstanceConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param configs Configuration profiles define the VM settings and boot behavior of the Linode Instance.
         * 
         * @return builder
         * 
         * @deprecated
         * The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource.
         * 
         */
        @Deprecated /* The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode_instance_config resource. */
        public Builder configs(InstanceConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource.
         * 
         */
        @Deprecated /* The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource. */
        public Builder disks(@Nullable Output<List<InstanceDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource.
         * 
         */
        @Deprecated /* The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource. */
        public Builder disks(List<InstanceDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource.
         * 
         */
        @Deprecated /* The embedded disk block in linode_instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode_instance_disk resource. */
        public Builder disks(InstanceDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param group The display group of the Linode instance.
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The display group of the Linode instance.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param image An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param interfaces An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces
         * must be declared in the config block.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(@Nullable Output<List<InstanceInterfaceArgs>> interfaces) {
            $.interfaces = interfaces;
            return this;
        }

        /**
         * @param interfaces An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces
         * must be declared in the config block.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(List<InstanceInterfaceArgs> interfaces) {
            return interfaces(Output.of(interfaces));
        }

        /**
         * @param interfaces An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces
         * must be declared in the config block.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(InstanceInterfaceArgs... interfaces) {
            return interfaces(List.of(interfaces));
        }

        /**
         * @param label The Linode&#39;s label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The Linode&#39;s label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param metadatas Various fields related to the Linode Metadata service.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<InstanceMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Various fields related to the Linode Metadata service.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<InstanceMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Various fields related to the Linode Metadata service.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(InstanceMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param privateIp If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode&#39;s region. It can be enabled on an existing Linode but it can&#39;t be disabled.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<Boolean> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode&#39;s region. It can be enabled on an existing Linode but it can&#39;t be disabled.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(Boolean privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param region This is the location where the Linode is deployed. Examples are `&#34;us-east&#34;`, `&#34;us-west&#34;`, `&#34;ap-south&#34;`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region This is the location where the Linode is deployed. Examples are `&#34;us-east&#34;`, `&#34;us-west&#34;`, `&#34;ap-south&#34;`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resizeDisk If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*
         * 
         * * `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0, the alert is disabled.
         * 
         * * `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
         * 
         * * `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
         * 
         * * `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we&#39;ll alert you. If this is set to 0 (zero), the alert is disabled.
         * 
         * * `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we&#39;ll send you an alert. If set to 0, this alert is disabled.
         * 
         * @return builder
         * 
         */
        public Builder resizeDisk(@Nullable Output<Boolean> resizeDisk) {
            $.resizeDisk = resizeDisk;
            return this;
        }

        /**
         * @param resizeDisk If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*
         * 
         * * `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0, the alert is disabled.
         * 
         * * `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
         * 
         * * `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we&#39;ll send you an alert. If this is set to 0 (zero), the alert is disabled.
         * 
         * * `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we&#39;ll alert you. If this is set to 0 (zero), the alert is disabled.
         * 
         * * `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we&#39;ll send you an alert. If set to 0, this alert is disabled.
         * 
         * @return builder
         * 
         */
        public Builder resizeDisk(Boolean resizeDisk) {
            return resizeDisk(Output.of(resizeDisk));
        }

        /**
         * @param rootPass The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in Pulumi state.*
         * 
         * @return builder
         * 
         */
        public Builder rootPass(@Nullable Output<String> rootPass) {
            $.rootPass = rootPass;
            return this;
        }

        /**
         * @param rootPass The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in Pulumi state.*
         * 
         * @return builder
         * 
         */
        public Builder rootPass(String rootPass) {
            return rootPass(Output.of(rootPass));
        }

        /**
         * @param sharedIpv4s A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.
         * 
         * @return builder
         * 
         */
        public Builder sharedIpv4s(@Nullable Output<List<String>> sharedIpv4s) {
            $.sharedIpv4s = sharedIpv4s;
            return this;
        }

        /**
         * @param sharedIpv4s A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.
         * 
         * @return builder
         * 
         */
        public Builder sharedIpv4s(List<String> sharedIpv4s) {
            return sharedIpv4s(Output.of(sharedIpv4s));
        }

        /**
         * @param sharedIpv4s A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.
         * 
         * @return builder
         * 
         */
        public Builder sharedIpv4s(String... sharedIpv4s) {
            return sharedIpv4s(List.of(sharedIpv4s));
        }

        /**
         * @param stackscriptData An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if &#39;stackscript_id&#39; is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder stackscriptData(@Nullable Output<Map<String,Object>> stackscriptData) {
            $.stackscriptData = stackscriptData;
            return this;
        }

        /**
         * @param stackscriptData An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if &#39;stackscript_id&#39; is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder stackscriptData(Map<String,Object> stackscriptData) {
            return stackscriptData(Output.of(stackscriptData));
        }

        /**
         * @param stackscriptId The StackScript to deploy to the newly created Linode. If provided, &#39;image&#39; must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder stackscriptId(@Nullable Output<Integer> stackscriptId) {
            $.stackscriptId = stackscriptId;
            return this;
        }

        /**
         * @param stackscriptId The StackScript to deploy to the newly created Linode. If provided, &#39;image&#39; must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
         * 
         * @return builder
         * 
         */
        public Builder stackscriptId(Integer stackscriptId) {
            return stackscriptId(Output.of(stackscriptId));
        }

        /**
         * @param swapSize When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
         * 
         * @return builder
         * 
         */
        public Builder swapSize(@Nullable Output<Integer> swapSize) {
            $.swapSize = swapSize;
            return this;
        }

        /**
         * @param swapSize When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
         * 
         * @return builder
         * 
         */
        public Builder swapSize(Integer swapSize) {
            return swapSize(Output.of(swapSize));
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `&#34;g6-nanode-1&#34;`, `&#34;g6-standard-2&#34;`, `&#34;g6-highmem-16&#34;`, `&#34;g6-dedicated-16&#34;`, etc. See all types [here](https://api.linode.com/v4/linode/types).
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `&#34;g6-nanode-1&#34;`, `&#34;g6-standard-2&#34;`, `&#34;g6-highmem-16&#34;`, `&#34;g6-dedicated-16&#34;`, etc. See all types [here](https://api.linode.com/v4/linode/types).
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param watchdogEnabled The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
         * 
         * @return builder
         * 
         */
        public Builder watchdogEnabled(@Nullable Output<Boolean> watchdogEnabled) {
            $.watchdogEnabled = watchdogEnabled;
            return this;
        }

        /**
         * @param watchdogEnabled The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
         * 
         * @return builder
         * 
         */
        public Builder watchdogEnabled(Boolean watchdogEnabled) {
            return watchdogEnabled(Output.of(watchdogEnabled));
        }

        public InstanceArgs build() {
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
