// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodeBalancerVpc {
    /**
     * @return (Optional) A CIDR range for the VPC&#39;s IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
     * 
     */
    private @Nullable String ipv4Range;
    /**
     * @return (Required) The ID of a subnet to assign to this NodeBalancer.
     * 
     */
    private Integer subnetId;

    private NodeBalancerVpc() {}
    /**
     * @return (Optional) A CIDR range for the VPC&#39;s IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
     * 
     */
    public Optional<String> ipv4Range() {
        return Optional.ofNullable(this.ipv4Range);
    }
    /**
     * @return (Required) The ID of a subnet to assign to this NodeBalancer.
     * 
     */
    public Integer subnetId() {
        return this.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeBalancerVpc defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ipv4Range;
        private Integer subnetId;
        public Builder() {}
        public Builder(NodeBalancerVpc defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipv4Range = defaults.ipv4Range;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder ipv4Range(@Nullable String ipv4Range) {

            this.ipv4Range = ipv4Range;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(Integer subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("NodeBalancerVpc", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        public NodeBalancerVpc build() {
            final var _resultValue = new NodeBalancerVpc();
            _resultValue.ipv4Range = ipv4Range;
            _resultValue.subnetId = subnetId;
            return _resultValue;
        }
    }
}
