// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainsDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetDomainsDomainArgs Empty = new GetDomainsDomainArgs();

    /**
     * The list of IPs that may perform a zone transfer for this Domain.
     * 
     */
    @Import(name="axfrIps", required=true)
    private Output<List<String>> axfrIps;

    /**
     * @return The list of IPs that may perform a zone transfer for this Domain.
     * 
     */
    public Output<List<String>> axfrIps() {
        return this.axfrIps;
    }

    /**
     * A description for this Domain.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description for this Domain.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     */
    @Import(name="expireSec", required=true)
    private Output<Integer> expireSec;

    /**
     * @return The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     */
    public Output<Integer> expireSec() {
        return this.expireSec;
    }

    /**
     * The group this Domain belongs to.
     * 
     */
    @Import(name="group", required=true)
    private Output<String> group;

    /**
     * @return The group this Domain belongs to.
     * 
     */
    public Output<String> group() {
        return this.group;
    }

    /**
     * The unique ID of this Domain.
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The unique ID of this Domain.
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The IP addresses representing the master DNS for this Domain.
     * 
     */
    @Import(name="masterIps", required=true)
    private Output<List<String>> masterIps;

    /**
     * @return The IP addresses representing the master DNS for this Domain.
     * 
     */
    public Output<List<String>> masterIps() {
        return this.masterIps;
    }

    /**
     * The amount of time in seconds before this Domain should be refreshed.
     * 
     */
    @Import(name="refreshSec", required=true)
    private Output<Integer> refreshSec;

    /**
     * @return The amount of time in seconds before this Domain should be refreshed.
     * 
     */
    public Output<Integer> refreshSec() {
        return this.refreshSec;
    }

    /**
     * The interval, in seconds, at which a failed refresh should be retried.
     * 
     */
    @Import(name="retrySec", required=true)
    private Output<Integer> retrySec;

    /**
     * @return The interval, in seconds, at which a failed refresh should be retried.
     * 
     */
    public Output<Integer> retrySec() {
        return this.retrySec;
    }

    /**
     * Start of Authority email address.
     * 
     */
    @Import(name="soaEmail", required=true)
    private Output<String> soaEmail;

    /**
     * @return Start of Authority email address.
     * 
     */
    public Output<String> soaEmail() {
        return this.soaEmail;
    }

    /**
     * Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * An array of tags applied to this object.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return An array of tags applied to this object.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    /**
     * &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     */
    @Import(name="ttlSec", required=true)
    private Output<Integer> ttlSec;

    /**
     * @return &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     */
    public Output<Integer> ttlSec() {
        return this.ttlSec;
    }

    /**
     * If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GetDomainsDomainArgs() {}

    private GetDomainsDomainArgs(GetDomainsDomainArgs $) {
        this.axfrIps = $.axfrIps;
        this.description = $.description;
        this.domain = $.domain;
        this.expireSec = $.expireSec;
        this.group = $.group;
        this.id = $.id;
        this.masterIps = $.masterIps;
        this.refreshSec = $.refreshSec;
        this.retrySec = $.retrySec;
        this.soaEmail = $.soaEmail;
        this.status = $.status;
        this.tags = $.tags;
        this.ttlSec = $.ttlSec;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainsDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainsDomainArgs $;

        public Builder() {
            $ = new GetDomainsDomainArgs();
        }

        public Builder(GetDomainsDomainArgs defaults) {
            $ = new GetDomainsDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param axfrIps The list of IPs that may perform a zone transfer for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder axfrIps(Output<List<String>> axfrIps) {
            $.axfrIps = axfrIps;
            return this;
        }

        /**
         * @param axfrIps The list of IPs that may perform a zone transfer for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder axfrIps(List<String> axfrIps) {
            return axfrIps(Output.of(axfrIps));
        }

        /**
         * @param axfrIps The list of IPs that may perform a zone transfer for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder axfrIps(String... axfrIps) {
            return axfrIps(List.of(axfrIps));
        }

        /**
         * @param description A description for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param expireSec The amount of time in seconds that may pass before this Domain is no longer authoritative.
         * 
         * @return builder
         * 
         */
        public Builder expireSec(Output<Integer> expireSec) {
            $.expireSec = expireSec;
            return this;
        }

        /**
         * @param expireSec The amount of time in seconds that may pass before this Domain is no longer authoritative.
         * 
         * @return builder
         * 
         */
        public Builder expireSec(Integer expireSec) {
            return expireSec(Output.of(expireSec));
        }

        /**
         * @param group The group this Domain belongs to.
         * 
         * @return builder
         * 
         */
        public Builder group(Output<String> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group The group this Domain belongs to.
         * 
         * @return builder
         * 
         */
        public Builder group(String group) {
            return group(Output.of(group));
        }

        /**
         * @param id The unique ID of this Domain.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of this Domain.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param masterIps The IP addresses representing the master DNS for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder masterIps(Output<List<String>> masterIps) {
            $.masterIps = masterIps;
            return this;
        }

        /**
         * @param masterIps The IP addresses representing the master DNS for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder masterIps(List<String> masterIps) {
            return masterIps(Output.of(masterIps));
        }

        /**
         * @param masterIps The IP addresses representing the master DNS for this Domain.
         * 
         * @return builder
         * 
         */
        public Builder masterIps(String... masterIps) {
            return masterIps(List.of(masterIps));
        }

        /**
         * @param refreshSec The amount of time in seconds before this Domain should be refreshed.
         * 
         * @return builder
         * 
         */
        public Builder refreshSec(Output<Integer> refreshSec) {
            $.refreshSec = refreshSec;
            return this;
        }

        /**
         * @param refreshSec The amount of time in seconds before this Domain should be refreshed.
         * 
         * @return builder
         * 
         */
        public Builder refreshSec(Integer refreshSec) {
            return refreshSec(Output.of(refreshSec));
        }

        /**
         * @param retrySec The interval, in seconds, at which a failed refresh should be retried.
         * 
         * @return builder
         * 
         */
        public Builder retrySec(Output<Integer> retrySec) {
            $.retrySec = retrySec;
            return this;
        }

        /**
         * @param retrySec The interval, in seconds, at which a failed refresh should be retried.
         * 
         * @return builder
         * 
         */
        public Builder retrySec(Integer retrySec) {
            return retrySec(Output.of(retrySec));
        }

        /**
         * @param soaEmail Start of Authority email address.
         * 
         * @return builder
         * 
         */
        public Builder soaEmail(Output<String> soaEmail) {
            $.soaEmail = soaEmail;
            return this;
        }

        /**
         * @param soaEmail Start of Authority email address.
         * 
         * @return builder
         * 
         */
        public Builder soaEmail(String soaEmail) {
            return soaEmail(Output.of(soaEmail));
        }

        /**
         * @param status Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags An array of tags applied to this object.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to this object.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of tags applied to this object.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param ttlSec &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
         * 
         * @return builder
         * 
         */
        public Builder ttlSec(Output<Integer> ttlSec) {
            $.ttlSec = ttlSec;
            return this;
        }

        /**
         * @param ttlSec &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
         * 
         * @return builder
         * 
         */
        public Builder ttlSec(Integer ttlSec) {
            return ttlSec(Output.of(ttlSec));
        }

        /**
         * @param type If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetDomainsDomainArgs build() {
            if ($.axfrIps == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "axfrIps");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "description");
            }
            if ($.expireSec == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "expireSec");
            }
            if ($.group == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "group");
            }
            if ($.masterIps == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "masterIps");
            }
            if ($.refreshSec == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "refreshSec");
            }
            if ($.retrySec == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "retrySec");
            }
            if ($.soaEmail == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "soaEmail");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "status");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "tags");
            }
            if ($.ttlSec == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "ttlSec");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetDomainsDomainArgs", "type");
            }
            return $;
        }
    }

}
