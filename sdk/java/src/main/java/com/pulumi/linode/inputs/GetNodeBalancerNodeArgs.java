// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class GetNodeBalancerNodeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeBalancerNodeArgs Empty = new GetNodeBalancerNodeArgs();

    /**
     * The ID of the config that contains the Node.
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return The ID of the config that contains the Node.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * The node&#39;s ID.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The node&#39;s ID.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The ID of the NodeBalancer that contains the node.
     * 
     */
    @Import(name="nodebalancerId", required=true)
    private Output<Integer> nodebalancerId;

    /**
     * @return The ID of the NodeBalancer that contains the node.
     * 
     */
    public Output<Integer> nodebalancerId() {
        return this.nodebalancerId;
    }

    private GetNodeBalancerNodeArgs() {}

    private GetNodeBalancerNodeArgs(GetNodeBalancerNodeArgs $) {
        this.configId = $.configId;
        this.id = $.id;
        this.nodebalancerId = $.nodebalancerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeBalancerNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeBalancerNodeArgs $;

        public Builder() {
            $ = new GetNodeBalancerNodeArgs();
        }

        public Builder(GetNodeBalancerNodeArgs defaults) {
            $ = new GetNodeBalancerNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configId The ID of the config that contains the Node.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId The ID of the config that contains the Node.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param id The node&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The node&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param nodebalancerId The ID of the NodeBalancer that contains the node.
         * 
         * @return builder
         * 
         */
        public Builder nodebalancerId(Output<Integer> nodebalancerId) {
            $.nodebalancerId = nodebalancerId;
            return this;
        }

        /**
         * @param nodebalancerId The ID of the NodeBalancer that contains the node.
         * 
         * @return builder
         * 
         */
        public Builder nodebalancerId(Integer nodebalancerId) {
            return nodebalancerId(Output.of(nodebalancerId));
        }

        public GetNodeBalancerNodeArgs build() {
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerNodeArgs", "configId");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerNodeArgs", "id");
            }
            if ($.nodebalancerId == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerNodeArgs", "nodebalancerId");
            }
            return $;
        }
    }

}
