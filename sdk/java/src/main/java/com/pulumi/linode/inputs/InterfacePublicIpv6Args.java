// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InterfacePublicIpv6AssignedRangeArgs;
import com.pulumi.linode.inputs.InterfacePublicIpv6RangeArgs;
import com.pulumi.linode.inputs.InterfacePublicIpv6SharedArgs;
import com.pulumi.linode.inputs.InterfacePublicIpv6SlaacArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfacePublicIpv6Args extends com.pulumi.resources.ResourceArgs {

    public static final InterfacePublicIpv6Args Empty = new InterfacePublicIpv6Args();

    /**
     * Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
     * 
     */
    @Import(name="assignedRanges")
    private @Nullable Output<List<InterfacePublicIpv6AssignedRangeArgs>> assignedRanges;

    /**
     * @return Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
     * 
     */
    public Optional<Output<List<InterfacePublicIpv6AssignedRangeArgs>>> assignedRanges() {
        return Optional.ofNullable(this.assignedRanges);
    }

    /**
     * Configured IPv6 range in CIDR notation (2600:0db8::1/64) or prefix-only (/64). Each object in this list supports:
     * 
     */
    @Import(name="ranges")
    private @Nullable Output<List<InterfacePublicIpv6RangeArgs>> ranges;

    /**
     * @return Configured IPv6 range in CIDR notation (2600:0db8::1/64) or prefix-only (/64). Each object in this list supports:
     * 
     */
    public Optional<Output<List<InterfacePublicIpv6RangeArgs>>> ranges() {
        return Optional.ofNullable(this.ranges);
    }

    /**
     * (Computed) The IPv6 ranges assigned to this Linode interface that are also shared with another Linode. Each object in this set supports:
     * 
     */
    @Import(name="shareds")
    private @Nullable Output<List<InterfacePublicIpv6SharedArgs>> shareds;

    /**
     * @return (Computed) The IPv6 ranges assigned to this Linode interface that are also shared with another Linode. Each object in this set supports:
     * 
     */
    public Optional<Output<List<InterfacePublicIpv6SharedArgs>>> shareds() {
        return Optional.ofNullable(this.shareds);
    }

    /**
     * (Computed) The public SLAAC and subnet prefix settings for this public interface. Each object in this set supports:
     * 
     */
    @Import(name="slaacs")
    private @Nullable Output<List<InterfacePublicIpv6SlaacArgs>> slaacs;

    /**
     * @return (Computed) The public SLAAC and subnet prefix settings for this public interface. Each object in this set supports:
     * 
     */
    public Optional<Output<List<InterfacePublicIpv6SlaacArgs>>> slaacs() {
        return Optional.ofNullable(this.slaacs);
    }

    private InterfacePublicIpv6Args() {}

    private InterfacePublicIpv6Args(InterfacePublicIpv6Args $) {
        this.assignedRanges = $.assignedRanges;
        this.ranges = $.ranges;
        this.shareds = $.shareds;
        this.slaacs = $.slaacs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfacePublicIpv6Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfacePublicIpv6Args $;

        public Builder() {
            $ = new InterfacePublicIpv6Args();
        }

        public Builder(InterfacePublicIpv6Args defaults) {
            $ = new InterfacePublicIpv6Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(@Nullable Output<List<InterfacePublicIpv6AssignedRangeArgs>> assignedRanges) {
            $.assignedRanges = assignedRanges;
            return this;
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(List<InterfacePublicIpv6AssignedRangeArgs> assignedRanges) {
            return assignedRanges(Output.of(assignedRanges));
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(InterfacePublicIpv6AssignedRangeArgs... assignedRanges) {
            return assignedRanges(List.of(assignedRanges));
        }

        /**
         * @param ranges Configured IPv6 range in CIDR notation (2600:0db8::1/64) or prefix-only (/64). Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder ranges(@Nullable Output<List<InterfacePublicIpv6RangeArgs>> ranges) {
            $.ranges = ranges;
            return this;
        }

        /**
         * @param ranges Configured IPv6 range in CIDR notation (2600:0db8::1/64) or prefix-only (/64). Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder ranges(List<InterfacePublicIpv6RangeArgs> ranges) {
            return ranges(Output.of(ranges));
        }

        /**
         * @param ranges Configured IPv6 range in CIDR notation (2600:0db8::1/64) or prefix-only (/64). Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder ranges(InterfacePublicIpv6RangeArgs... ranges) {
            return ranges(List.of(ranges));
        }

        /**
         * @param shareds (Computed) The IPv6 ranges assigned to this Linode interface that are also shared with another Linode. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder shareds(@Nullable Output<List<InterfacePublicIpv6SharedArgs>> shareds) {
            $.shareds = shareds;
            return this;
        }

        /**
         * @param shareds (Computed) The IPv6 ranges assigned to this Linode interface that are also shared with another Linode. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder shareds(List<InterfacePublicIpv6SharedArgs> shareds) {
            return shareds(Output.of(shareds));
        }

        /**
         * @param shareds (Computed) The IPv6 ranges assigned to this Linode interface that are also shared with another Linode. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder shareds(InterfacePublicIpv6SharedArgs... shareds) {
            return shareds(List.of(shareds));
        }

        /**
         * @param slaacs (Computed) The public SLAAC and subnet prefix settings for this public interface. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder slaacs(@Nullable Output<List<InterfacePublicIpv6SlaacArgs>> slaacs) {
            $.slaacs = slaacs;
            return this;
        }

        /**
         * @param slaacs (Computed) The public SLAAC and subnet prefix settings for this public interface. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder slaacs(List<InterfacePublicIpv6SlaacArgs> slaacs) {
            return slaacs(Output.of(slaacs));
        }

        /**
         * @param slaacs (Computed) The public SLAAC and subnet prefix settings for this public interface. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder slaacs(InterfacePublicIpv6SlaacArgs... slaacs) {
            return slaacs(List.of(slaacs));
        }

        public InterfacePublicIpv6Args build() {
            return $;
        }
    }

}
