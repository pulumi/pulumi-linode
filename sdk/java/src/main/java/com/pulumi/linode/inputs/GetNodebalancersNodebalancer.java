// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetNodebalancersNodebalancerTransfer;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetNodebalancersNodebalancer extends com.pulumi.resources.InvokeArgs {

    public static final GetNodebalancersNodebalancer Empty = new GetNodebalancersNodebalancer();

    /**
     * Throttle connections per second (0-20)
     * 
     */
    @Import(name="clientConnThrottle", required=true)
    private Integer clientConnThrottle;

    /**
     * @return Throttle connections per second (0-20)
     * 
     */
    public Integer clientConnThrottle() {
        return this.clientConnThrottle;
    }

    /**
     * When this Linode NodeBalancer was created
     * 
     */
    @Import(name="created", required=true)
    private String created;

    /**
     * @return When this Linode NodeBalancer was created
     * 
     */
    public String created() {
        return this.created;
    }

    /**
     * This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
     * 
     */
    @Import(name="hostname", required=true)
    private String hostname;

    /**
     * @return This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
     * 
     */
    public String hostname() {
        return this.hostname;
    }

    /**
     * The Linode NodeBalancer&#39;s unique ID
     * 
     */
    @Import(name="id", required=true)
    private Integer id;

    /**
     * @return The Linode NodeBalancer&#39;s unique ID
     * 
     */
    public Integer id() {
        return this.id;
    }

    /**
     * The Public IPv4 Address of this NodeBalancer
     * 
     */
    @Import(name="ipv4", required=true)
    private String ipv4;

    /**
     * @return The Public IPv4 Address of this NodeBalancer
     * 
     */
    public String ipv4() {
        return this.ipv4;
    }

    /**
     * The Public IPv6 Address of this NodeBalancer
     * 
     */
    @Import(name="ipv6", required=true)
    private String ipv6;

    /**
     * @return The Public IPv6 Address of this NodeBalancer
     * 
     */
    public String ipv6() {
        return this.ipv6;
    }

    /**
     * The label of the Linode NodeBalancer
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return The label of the Linode NodeBalancer
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
     * 
     */
    public String region() {
        return this.region;
    }

    /**
     * A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    @Import(name="tags", required=true)
    private List<String> tags;

    /**
     * @return A list of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Information about the amount of transfer this NodeBalancer has had so far this month.
     * 
     */
    @Import(name="transfers", required=true)
    private List<GetNodebalancersNodebalancerTransfer> transfers;

    /**
     * @return Information about the amount of transfer this NodeBalancer has had so far this month.
     * 
     */
    public List<GetNodebalancersNodebalancerTransfer> transfers() {
        return this.transfers;
    }

    /**
     * When this Linode NodeBalancer was last updated
     * 
     */
    @Import(name="updated", required=true)
    private String updated;

    /**
     * @return When this Linode NodeBalancer was last updated
     * 
     */
    public String updated() {
        return this.updated;
    }

    private GetNodebalancersNodebalancer() {}

    private GetNodebalancersNodebalancer(GetNodebalancersNodebalancer $) {
        this.clientConnThrottle = $.clientConnThrottle;
        this.created = $.created;
        this.hostname = $.hostname;
        this.id = $.id;
        this.ipv4 = $.ipv4;
        this.ipv6 = $.ipv6;
        this.label = $.label;
        this.region = $.region;
        this.tags = $.tags;
        this.transfers = $.transfers;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodebalancersNodebalancer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodebalancersNodebalancer $;

        public Builder() {
            $ = new GetNodebalancersNodebalancer();
        }

        public Builder(GetNodebalancersNodebalancer defaults) {
            $ = new GetNodebalancersNodebalancer(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientConnThrottle Throttle connections per second (0-20)
         * 
         * @return builder
         * 
         */
        public Builder clientConnThrottle(Integer clientConnThrottle) {
            $.clientConnThrottle = clientConnThrottle;
            return this;
        }

        /**
         * @param created When this Linode NodeBalancer was created
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            $.created = created;
            return this;
        }

        /**
         * @param hostname This NodeBalancer&#39;s hostname, ending with .ip.linodeusercontent.com
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param id The Linode NodeBalancer&#39;s unique ID
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            $.id = id;
            return this;
        }

        /**
         * @param ipv4 The Public IPv4 Address of this NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder ipv4(String ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv6 The Public IPv6 Address of this NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder ipv6(String ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param label The label of the Linode NodeBalancer
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param region The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param transfers Information about the amount of transfer this NodeBalancer has had so far this month.
         * 
         * @return builder
         * 
         */
        public Builder transfers(List<GetNodebalancersNodebalancerTransfer> transfers) {
            $.transfers = transfers;
            return this;
        }

        /**
         * @param transfers Information about the amount of transfer this NodeBalancer has had so far this month.
         * 
         * @return builder
         * 
         */
        public Builder transfers(GetNodebalancersNodebalancerTransfer... transfers) {
            return transfers(List.of(transfers));
        }

        /**
         * @param updated When this Linode NodeBalancer was last updated
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            $.updated = updated;
            return this;
        }

        public GetNodebalancersNodebalancer build() {
            if ($.clientConnThrottle == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "clientConnThrottle");
            }
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "created");
            }
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "hostname");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "id");
            }
            if ($.ipv4 == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "ipv4");
            }
            if ($.ipv6 == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "ipv6");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "label");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "region");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "tags");
            }
            if ($.transfers == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "transfers");
            }
            if ($.updated == null) {
                throw new MissingRequiredPropertyException("GetNodebalancersNodebalancer", "updated");
            }
            return $;
        }
    }

}
