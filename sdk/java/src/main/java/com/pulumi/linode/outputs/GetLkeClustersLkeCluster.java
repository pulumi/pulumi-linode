// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetLkeClustersLkeClusterControlPlane;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLkeClustersLkeCluster {
    /**
     * @return Defines settings for the Kubernetes Control Plane.
     * 
     */
    private @Nullable GetLkeClustersLkeClusterControlPlane controlPlane;
    /**
     * @return When this Kubernetes cluster was created.
     * 
     */
    private String created;
    /**
     * @return The LKE Cluster&#39;s ID.
     * 
     */
    private Integer id;
    /**
     * @return The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     * 
     */
    private String k8sVersion;
    /**
     * @return The unique label for the cluster.
     * 
     */
    private String label;
    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     */
    private String region;
    /**
     * @return The status of the cluster.
     * 
     */
    private String status;
    /**
     * @return An array of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    private List<String> tags;
    /**
     * @return When this Kubernetes cluster was updated.
     * 
     */
    private String updated;

    private GetLkeClustersLkeCluster() {}
    /**
     * @return Defines settings for the Kubernetes Control Plane.
     * 
     */
    public Optional<GetLkeClustersLkeClusterControlPlane> controlPlane() {
        return Optional.ofNullable(this.controlPlane);
    }
    /**
     * @return When this Kubernetes cluster was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return The LKE Cluster&#39;s ID.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     * 
     */
    public String k8sVersion() {
        return this.k8sVersion;
    }
    /**
     * @return The unique label for the cluster.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The status of the cluster.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return An array of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return When this Kubernetes cluster was updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLkeClustersLkeCluster defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetLkeClustersLkeClusterControlPlane controlPlane;
        private String created;
        private Integer id;
        private String k8sVersion;
        private String label;
        private String region;
        private String status;
        private List<String> tags;
        private String updated;
        public Builder() {}
        public Builder(GetLkeClustersLkeCluster defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controlPlane = defaults.controlPlane;
    	      this.created = defaults.created;
    	      this.id = defaults.id;
    	      this.k8sVersion = defaults.k8sVersion;
    	      this.label = defaults.label;
    	      this.region = defaults.region;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updated = defaults.updated;
        }

        @CustomType.Setter
        public Builder controlPlane(@Nullable GetLkeClustersLkeClusterControlPlane controlPlane) {

            this.controlPlane = controlPlane;
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder k8sVersion(String k8sVersion) {
            if (k8sVersion == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "k8sVersion");
            }
            this.k8sVersion = k8sVersion;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetLkeClustersLkeCluster", "updated");
            }
            this.updated = updated;
            return this;
        }
        public GetLkeClustersLkeCluster build() {
            final var _resultValue = new GetLkeClustersLkeCluster();
            _resultValue.controlPlane = controlPlane;
            _resultValue.created = created;
            _resultValue.id = id;
            _resultValue.k8sVersion = k8sVersion;
            _resultValue.label = label;
            _resultValue.region = region;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updated = updated;
            return _resultValue;
        }
    }
}
