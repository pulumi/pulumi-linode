// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserGlobalGrant {
    /**
     * @return The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
     * 
     */
    private String accountAccess;
    /**
     * @return If true, this User may add Managed Databases.
     * 
     */
    private Boolean addDatabases;
    /**
     * @return If true, this User may add Domains.
     * 
     */
    private Boolean addDomains;
    /**
     * @return If true, this User may add Firewalls.
     * 
     */
    private Boolean addFirewalls;
    /**
     * @return If true, this User may add Images.
     * 
     */
    private Boolean addImages;
    /**
     * @return If true, this User may create Linodes.
     * 
     */
    private Boolean addLinodes;
    /**
     * @return If true, this User may create Longview clients and view the current plan.
     * 
     */
    private Boolean addLongview;
    /**
     * @return If true, this User may add NodeBalancers.
     * 
     */
    private Boolean addNodebalancers;
    private Boolean addStackscripts;
    /**
     * @return If true, this User may add Volumes.
     * 
     */
    private Boolean addVolumes;
    /**
     * @return If true, this User may cancel the entire Account.
     * 
     */
    private Boolean cancelAccount;
    /**
     * @return If true, this User may manage the Account’s Longview subscription.
     * 
     */
    private Boolean longviewSubscription;

    private GetUserGlobalGrant() {}
    /**
     * @return The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
     * 
     */
    public String accountAccess() {
        return this.accountAccess;
    }
    /**
     * @return If true, this User may add Managed Databases.
     * 
     */
    public Boolean addDatabases() {
        return this.addDatabases;
    }
    /**
     * @return If true, this User may add Domains.
     * 
     */
    public Boolean addDomains() {
        return this.addDomains;
    }
    /**
     * @return If true, this User may add Firewalls.
     * 
     */
    public Boolean addFirewalls() {
        return this.addFirewalls;
    }
    /**
     * @return If true, this User may add Images.
     * 
     */
    public Boolean addImages() {
        return this.addImages;
    }
    /**
     * @return If true, this User may create Linodes.
     * 
     */
    public Boolean addLinodes() {
        return this.addLinodes;
    }
    /**
     * @return If true, this User may create Longview clients and view the current plan.
     * 
     */
    public Boolean addLongview() {
        return this.addLongview;
    }
    /**
     * @return If true, this User may add NodeBalancers.
     * 
     */
    public Boolean addNodebalancers() {
        return this.addNodebalancers;
    }
    public Boolean addStackscripts() {
        return this.addStackscripts;
    }
    /**
     * @return If true, this User may add Volumes.
     * 
     */
    public Boolean addVolumes() {
        return this.addVolumes;
    }
    /**
     * @return If true, this User may cancel the entire Account.
     * 
     */
    public Boolean cancelAccount() {
        return this.cancelAccount;
    }
    /**
     * @return If true, this User may manage the Account’s Longview subscription.
     * 
     */
    public Boolean longviewSubscription() {
        return this.longviewSubscription;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserGlobalGrant defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountAccess;
        private Boolean addDatabases;
        private Boolean addDomains;
        private Boolean addFirewalls;
        private Boolean addImages;
        private Boolean addLinodes;
        private Boolean addLongview;
        private Boolean addNodebalancers;
        private Boolean addStackscripts;
        private Boolean addVolumes;
        private Boolean cancelAccount;
        private Boolean longviewSubscription;
        public Builder() {}
        public Builder(GetUserGlobalGrant defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAccess = defaults.accountAccess;
    	      this.addDatabases = defaults.addDatabases;
    	      this.addDomains = defaults.addDomains;
    	      this.addFirewalls = defaults.addFirewalls;
    	      this.addImages = defaults.addImages;
    	      this.addLinodes = defaults.addLinodes;
    	      this.addLongview = defaults.addLongview;
    	      this.addNodebalancers = defaults.addNodebalancers;
    	      this.addStackscripts = defaults.addStackscripts;
    	      this.addVolumes = defaults.addVolumes;
    	      this.cancelAccount = defaults.cancelAccount;
    	      this.longviewSubscription = defaults.longviewSubscription;
        }

        @CustomType.Setter
        public Builder accountAccess(String accountAccess) {
            if (accountAccess == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "accountAccess");
            }
            this.accountAccess = accountAccess;
            return this;
        }
        @CustomType.Setter
        public Builder addDatabases(Boolean addDatabases) {
            if (addDatabases == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addDatabases");
            }
            this.addDatabases = addDatabases;
            return this;
        }
        @CustomType.Setter
        public Builder addDomains(Boolean addDomains) {
            if (addDomains == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addDomains");
            }
            this.addDomains = addDomains;
            return this;
        }
        @CustomType.Setter
        public Builder addFirewalls(Boolean addFirewalls) {
            if (addFirewalls == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addFirewalls");
            }
            this.addFirewalls = addFirewalls;
            return this;
        }
        @CustomType.Setter
        public Builder addImages(Boolean addImages) {
            if (addImages == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addImages");
            }
            this.addImages = addImages;
            return this;
        }
        @CustomType.Setter
        public Builder addLinodes(Boolean addLinodes) {
            if (addLinodes == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addLinodes");
            }
            this.addLinodes = addLinodes;
            return this;
        }
        @CustomType.Setter
        public Builder addLongview(Boolean addLongview) {
            if (addLongview == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addLongview");
            }
            this.addLongview = addLongview;
            return this;
        }
        @CustomType.Setter
        public Builder addNodebalancers(Boolean addNodebalancers) {
            if (addNodebalancers == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addNodebalancers");
            }
            this.addNodebalancers = addNodebalancers;
            return this;
        }
        @CustomType.Setter
        public Builder addStackscripts(Boolean addStackscripts) {
            if (addStackscripts == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addStackscripts");
            }
            this.addStackscripts = addStackscripts;
            return this;
        }
        @CustomType.Setter
        public Builder addVolumes(Boolean addVolumes) {
            if (addVolumes == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "addVolumes");
            }
            this.addVolumes = addVolumes;
            return this;
        }
        @CustomType.Setter
        public Builder cancelAccount(Boolean cancelAccount) {
            if (cancelAccount == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "cancelAccount");
            }
            this.cancelAccount = cancelAccount;
            return this;
        }
        @CustomType.Setter
        public Builder longviewSubscription(Boolean longviewSubscription) {
            if (longviewSubscription == null) {
              throw new MissingRequiredPropertyException("GetUserGlobalGrant", "longviewSubscription");
            }
            this.longviewSubscription = longviewSubscription;
            return this;
        }
        public GetUserGlobalGrant build() {
            final var _resultValue = new GetUserGlobalGrant();
            _resultValue.accountAccess = accountAccess;
            _resultValue.addDatabases = addDatabases;
            _resultValue.addDomains = addDomains;
            _resultValue.addFirewalls = addFirewalls;
            _resultValue.addImages = addImages;
            _resultValue.addLinodes = addLinodes;
            _resultValue.addLongview = addLongview;
            _resultValue.addNodebalancers = addNodebalancers;
            _resultValue.addStackscripts = addStackscripts;
            _resultValue.addVolumes = addVolumes;
            _resultValue.cancelAccount = cancelAccount;
            _resultValue.longviewSubscription = longviewSubscription;
            return _resultValue;
        }
    }
}
