// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfigInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfigInterfaceArgs Empty = new InstanceConfigInterfaceArgs();

    /**
     * This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`)
     * 
     */
    @Import(name="ipamAddress")
    private @Nullable Output<String> ipamAddress;

    /**
     * @return This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`)
     * 
     */
    public Optional<Output<String>> ipamAddress() {
        return Optional.ofNullable(this.ipamAddress);
    }

    /**
     * The name of this interface.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The name of this interface.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The type of interface. (`public`, `vlan`)
     * 
     */
    @Import(name="purpose", required=true)
    private Output<String> purpose;

    /**
     * @return The type of interface. (`public`, `vlan`)
     * 
     */
    public Output<String> purpose() {
        return this.purpose;
    }

    private InstanceConfigInterfaceArgs() {}

    private InstanceConfigInterfaceArgs(InstanceConfigInterfaceArgs $) {
        this.ipamAddress = $.ipamAddress;
        this.label = $.label;
        this.purpose = $.purpose;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfigInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfigInterfaceArgs $;

        public Builder() {
            $ = new InstanceConfigInterfaceArgs();
        }

        public Builder(InstanceConfigInterfaceArgs defaults) {
            $ = new InstanceConfigInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipamAddress This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`)
         * 
         * @return builder
         * 
         */
        public Builder ipamAddress(@Nullable Output<String> ipamAddress) {
            $.ipamAddress = ipamAddress;
            return this;
        }

        /**
         * @param ipamAddress This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`)
         * 
         * @return builder
         * 
         */
        public Builder ipamAddress(String ipamAddress) {
            return ipamAddress(Output.of(ipamAddress));
        }

        /**
         * @param label The name of this interface.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The name of this interface.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param purpose The type of interface. (`public`, `vlan`)
         * 
         * @return builder
         * 
         */
        public Builder purpose(Output<String> purpose) {
            $.purpose = purpose;
            return this;
        }

        /**
         * @param purpose The type of interface. (`public`, `vlan`)
         * 
         * @return builder
         * 
         */
        public Builder purpose(String purpose) {
            return purpose(Output.of(purpose));
        }

        public InstanceConfigInterfaceArgs build() {
            $.purpose = Objects.requireNonNull($.purpose, "expected parameter 'purpose' to be non-null");
            return $;
        }
    }

}
