// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.LkeClusterPoolAutoscalerArgs;
import com.pulumi.linode.inputs.LkeClusterPoolNodeArgs;
import com.pulumi.linode.inputs.LkeClusterPoolTaintArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LkeClusterPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final LkeClusterPoolArgs Empty = new LkeClusterPoolArgs();

    /**
     * When specified, the number of nodes autoscales within the defined minimum and maximum values.
     * 
     */
    @Import(name="autoscaler")
    private @Nullable Output<LkeClusterPoolAutoscalerArgs> autoscaler;

    /**
     * @return When specified, the number of nodes autoscales within the defined minimum and maximum values.
     * 
     */
    public Optional<Output<LkeClusterPoolAutoscalerArgs>> autoscaler() {
        return Optional.ofNullable(this.autoscaler);
    }

    /**
     * The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
     * 
     */
    @Import(name="count")
    private @Nullable Output<Integer> count;

    /**
     * @return The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
     * 
     */
    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * The disk encryption policy for nodes in this pool.
     * 
     */
    @Import(name="diskEncryption")
    private @Nullable Output<String> diskEncryption;

    /**
     * @return The disk encryption policy for nodes in this pool.
     * 
     */
    public Optional<Output<String>> diskEncryption() {
        return Optional.ofNullable(this.diskEncryption);
    }

    /**
     * The ID of the node.
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The ID of the node.
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The k8s version of the nodes in this Node Pool. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     */
    @Import(name="k8sVersion")
    private @Nullable Output<String> k8sVersion;

    /**
     * @return The k8s version of the nodes in this Node Pool. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     */
    public Optional<Output<String>> k8sVersion() {
        return Optional.ofNullable(this.k8sVersion);
    }

    /**
     * A map of key/value pairs to apply to all nodes in the pool. Labels are used to identify and organize Kubernetes resources within your cluster.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A map of key/value pairs to apply to all nodes in the pool. Labels are used to identify and organize Kubernetes resources within your cluster.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The nodes in the node pool.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<LkeClusterPoolNodeArgs>> nodes;

    /**
     * @return The nodes in the node pool.
     * 
     */
    public Optional<Output<List<LkeClusterPoolNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * A set of tags applied to this node pool. Tags can be used to flag node pools as externally managed. See Externally Managed Node Pools for more details.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A set of tags applied to this node pool. Tags can be used to flag node pools as externally managed. See Externally Managed Node Pools for more details.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. See [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<LkeClusterPoolTaintArgs>> taints;

    /**
     * @return Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. See [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
     * 
     */
    public Optional<Output<List<LkeClusterPoolTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The strategy for updating the Node Pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     */
    @Import(name="updateStrategy")
    private @Nullable Output<String> updateStrategy;

    /**
     * @return The strategy for updating the Node Pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     */
    public Optional<Output<String>> updateStrategy() {
        return Optional.ofNullable(this.updateStrategy);
    }

    private LkeClusterPoolArgs() {}

    private LkeClusterPoolArgs(LkeClusterPoolArgs $) {
        this.autoscaler = $.autoscaler;
        this.count = $.count;
        this.diskEncryption = $.diskEncryption;
        this.id = $.id;
        this.k8sVersion = $.k8sVersion;
        this.labels = $.labels;
        this.nodes = $.nodes;
        this.tags = $.tags;
        this.taints = $.taints;
        this.type = $.type;
        this.updateStrategy = $.updateStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LkeClusterPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LkeClusterPoolArgs $;

        public Builder() {
            $ = new LkeClusterPoolArgs();
        }

        public Builder(LkeClusterPoolArgs defaults) {
            $ = new LkeClusterPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscaler When specified, the number of nodes autoscales within the defined minimum and maximum values.
         * 
         * @return builder
         * 
         */
        public Builder autoscaler(@Nullable Output<LkeClusterPoolAutoscalerArgs> autoscaler) {
            $.autoscaler = autoscaler;
            return this;
        }

        /**
         * @param autoscaler When specified, the number of nodes autoscales within the defined minimum and maximum values.
         * 
         * @return builder
         * 
         */
        public Builder autoscaler(LkeClusterPoolAutoscalerArgs autoscaler) {
            return autoscaler(Output.of(autoscaler));
        }

        /**
         * @param count The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param diskEncryption The disk encryption policy for nodes in this pool.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryption(@Nullable Output<String> diskEncryption) {
            $.diskEncryption = diskEncryption;
            return this;
        }

        /**
         * @param diskEncryption The disk encryption policy for nodes in this pool.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryption(String diskEncryption) {
            return diskEncryption(Output.of(diskEncryption));
        }

        /**
         * @param id The ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the node.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param k8sVersion The k8s version of the nodes in this Node Pool. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(@Nullable Output<String> k8sVersion) {
            $.k8sVersion = k8sVersion;
            return this;
        }

        /**
         * @param k8sVersion The k8s version of the nodes in this Node Pool. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(String k8sVersion) {
            return k8sVersion(Output.of(k8sVersion));
        }

        /**
         * @param labels A map of key/value pairs to apply to all nodes in the pool. Labels are used to identify and organize Kubernetes resources within your cluster.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A map of key/value pairs to apply to all nodes in the pool. Labels are used to identify and organize Kubernetes resources within your cluster.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param nodes The nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<LkeClusterPoolNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes The nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<LkeClusterPoolNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes The nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(LkeClusterPoolNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param tags A set of tags applied to this node pool. Tags can be used to flag node pools as externally managed. See Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of tags applied to this node pool. Tags can be used to flag node pools as externally managed. See Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A set of tags applied to this node pool. Tags can be used to flag node pools as externally managed. See Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param taints Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. See [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<LkeClusterPoolTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. See [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder taints(List<LkeClusterPoolTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. See [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder taints(LkeClusterPoolTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param type A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updateStrategy The strategy for updating the Node Pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(@Nullable Output<String> updateStrategy) {
            $.updateStrategy = updateStrategy;
            return this;
        }

        /**
         * @param updateStrategy The strategy for updating the Node Pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(String updateStrategy) {
            return updateStrategy(Output.of(updateStrategy));
        }

        public LkeClusterPoolArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("LkeClusterPoolArgs", "type");
            }
            return $;
        }
    }

}
