// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetNodeBalancerFirewallInboundArgs;
import com.pulumi.linode.inputs.GetNodeBalancerFirewallOutboundArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodeBalancerFirewallArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetNodeBalancerFirewallArgs Empty = new GetNodeBalancerFirewallArgs();

    /**
     * When this firewall was created.
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return When this firewall was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * The NodeBalancer&#39;s ID.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The NodeBalancer&#39;s ID.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
     * 
     */
    @Import(name="inboundPolicy", required=true)
    private Output<String> inboundPolicy;

    /**
     * @return The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
     * 
     */
    public Output<String> inboundPolicy() {
        return this.inboundPolicy;
    }

    /**
     * A set of firewall rules that specify what inbound network traffic is allowed.
     * 
     */
    @Import(name="inbounds")
    private @Nullable Output<List<GetNodeBalancerFirewallInboundArgs>> inbounds;

    /**
     * @return A set of firewall rules that specify what inbound network traffic is allowed.
     * 
     */
    public Optional<Output<List<GetNodeBalancerFirewallInboundArgs>>> inbounds() {
        return Optional.ofNullable(this.inbounds);
    }

    /**
     * Used to identify this rule. For display purposes only.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return Used to identify this rule. For display purposes only.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
     * 
     */
    @Import(name="outboundPolicy", required=true)
    private Output<String> outboundPolicy;

    /**
     * @return The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
     * 
     */
    public Output<String> outboundPolicy() {
        return this.outboundPolicy;
    }

    /**
     * A set of firewall rules that specify what outbound network traffic is allowed.
     * 
     */
    @Import(name="outbounds")
    private @Nullable Output<List<GetNodeBalancerFirewallOutboundArgs>> outbounds;

    /**
     * @return A set of firewall rules that specify what outbound network traffic is allowed.
     * 
     */
    public Optional<Output<List<GetNodeBalancerFirewallOutboundArgs>>> outbounds() {
        return Optional.ofNullable(this.outbounds);
    }

    /**
     * The status of the firewall. (`enabled`, `disabled`, `deleted`)
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return The status of the firewall. (`enabled`, `disabled`, `deleted`)
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * The tags applied to the firewall.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return The tags applied to the firewall.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    /**
     * When this firewall was last updated.
     * 
     */
    @Import(name="updated", required=true)
    private Output<String> updated;

    /**
     * @return When this firewall was last updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }

    private GetNodeBalancerFirewallArgs() {}

    private GetNodeBalancerFirewallArgs(GetNodeBalancerFirewallArgs $) {
        this.created = $.created;
        this.id = $.id;
        this.inboundPolicy = $.inboundPolicy;
        this.inbounds = $.inbounds;
        this.label = $.label;
        this.outboundPolicy = $.outboundPolicy;
        this.outbounds = $.outbounds;
        this.status = $.status;
        this.tags = $.tags;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeBalancerFirewallArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeBalancerFirewallArgs $;

        public Builder() {
            $ = new GetNodeBalancerFirewallArgs();
        }

        public Builder(GetNodeBalancerFirewallArgs defaults) {
            $ = new GetNodeBalancerFirewallArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created When this firewall was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When this firewall was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param id The NodeBalancer&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The NodeBalancer&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param inboundPolicy The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
         * 
         * @return builder
         * 
         */
        public Builder inboundPolicy(Output<String> inboundPolicy) {
            $.inboundPolicy = inboundPolicy;
            return this;
        }

        /**
         * @param inboundPolicy The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
         * 
         * @return builder
         * 
         */
        public Builder inboundPolicy(String inboundPolicy) {
            return inboundPolicy(Output.of(inboundPolicy));
        }

        /**
         * @param inbounds A set of firewall rules that specify what inbound network traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder inbounds(@Nullable Output<List<GetNodeBalancerFirewallInboundArgs>> inbounds) {
            $.inbounds = inbounds;
            return this;
        }

        /**
         * @param inbounds A set of firewall rules that specify what inbound network traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder inbounds(List<GetNodeBalancerFirewallInboundArgs> inbounds) {
            return inbounds(Output.of(inbounds));
        }

        /**
         * @param inbounds A set of firewall rules that specify what inbound network traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder inbounds(GetNodeBalancerFirewallInboundArgs... inbounds) {
            return inbounds(List.of(inbounds));
        }

        /**
         * @param label Used to identify this rule. For display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Used to identify this rule. For display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param outboundPolicy The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
         * 
         * @return builder
         * 
         */
        public Builder outboundPolicy(Output<String> outboundPolicy) {
            $.outboundPolicy = outboundPolicy;
            return this;
        }

        /**
         * @param outboundPolicy The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
         * 
         * @return builder
         * 
         */
        public Builder outboundPolicy(String outboundPolicy) {
            return outboundPolicy(Output.of(outboundPolicy));
        }

        /**
         * @param outbounds A set of firewall rules that specify what outbound network traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder outbounds(@Nullable Output<List<GetNodeBalancerFirewallOutboundArgs>> outbounds) {
            $.outbounds = outbounds;
            return this;
        }

        /**
         * @param outbounds A set of firewall rules that specify what outbound network traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder outbounds(List<GetNodeBalancerFirewallOutboundArgs> outbounds) {
            return outbounds(Output.of(outbounds));
        }

        /**
         * @param outbounds A set of firewall rules that specify what outbound network traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder outbounds(GetNodeBalancerFirewallOutboundArgs... outbounds) {
            return outbounds(List.of(outbounds));
        }

        /**
         * @param status The status of the firewall. (`enabled`, `disabled`, `deleted`)
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the firewall. (`enabled`, `disabled`, `deleted`)
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags The tags applied to the firewall.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags applied to the firewall.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags The tags applied to the firewall.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updated When this firewall was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated When this firewall was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public GetNodeBalancerFirewallArgs build() {
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "created");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "id");
            }
            if ($.inboundPolicy == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "inboundPolicy");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "label");
            }
            if ($.outboundPolicy == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "outboundPolicy");
            }
            if ($.status == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "status");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "tags");
            }
            if ($.updated == null) {
                throw new MissingRequiredPropertyException("GetNodeBalancerFirewallArgs", "updated");
            }
            return $;
        }
    }

}
