// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.linode.InterfaceArgs;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.InterfaceState;
import com.pulumi.linode.outputs.InterfaceDefaultRoute;
import com.pulumi.linode.outputs.InterfacePublic;
import com.pulumi.linode.outputs.InterfaceVlan;
import com.pulumi.linode.outputs.InterfaceVpc;
import java.lang.Integer;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Linode Interface resource that can be used to create, modify, and delete network interfaces for Linode instances. Interfaces allow you to configure public, VLAN, and VPC networking for your Linode instances.
 * 
 * This resource is specifically for Linode interfaces. If you are interested in deploying a Linode instance with a legacy config interface, please refer to the `linode.InstanceConfig` resource documentation for details.
 * 
 * This resource is designed to work with explicitly defined disk and config resources for the Linode instance. See the Complete Example with Linode section below for details.
 * 
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-linode-instance-interface).
 * 
 * ## Example Usage
 * 
 * ### Public Interface Example
 * 
 * The following example shows how to create a public interface with specific IPv4 and IPv6 configurations.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Interface;
 * import com.pulumi.linode.InterfaceArgs;
 * import com.pulumi.linode.inputs.InterfacePublicArgs;
 * import com.pulumi.linode.inputs.InterfacePublicIpv4Args;
 * import com.pulumi.linode.inputs.InterfacePublicIpv6Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var public_ = new Interface("public", InterfaceArgs.builder()
 *             .linodeId(my_instance.id())
 *             .public_(InterfacePublicArgs.builder()
 *                 .ipv4(InterfacePublicIpv4Args.builder()
 *                     .addresses(InterfacePublicIpv4AddressArgs.builder()
 *                         .address("auto")
 *                         .primary(true)
 *                         .build())
 *                     .build())
 *                 .ipv6(InterfacePublicIpv6Args.builder()
 *                     .ranges(InterfacePublicIpv6RangeArgs.builder()
 *                         .range("/64")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### IPv6-Only Public Interface Example
 * 
 * The following example shows how to create an IPv6-only public interface. Note that you must explicitly set `addresses = []` to prevent the automatic creation of an IPv4 address.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Interface;
 * import com.pulumi.linode.InterfaceArgs;
 * import com.pulumi.linode.inputs.InterfacePublicArgs;
 * import com.pulumi.linode.inputs.InterfacePublicIpv4Args;
 * import com.pulumi.linode.inputs.InterfacePublicIpv6Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var ipv6Only = new Interface("ipv6Only", InterfaceArgs.builder()
 *             .linodeId(my_instance.id())
 *             .public_(InterfacePublicArgs.builder()
 *                 .ipv4(InterfacePublicIpv4Args.builder()
 *                     .addresses()
 *                     .build())
 *                 .ipv6(InterfacePublicIpv6Args.builder()
 *                     .ranges(InterfacePublicIpv6RangeArgs.builder()
 *                         .range("/64")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### VPC Interface Example
 * 
 * The following example shows how to create a VPC interface with custom IPv4 configuration and 1:1 NAT.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Interface;
 * import com.pulumi.linode.InterfaceArgs;
 * import com.pulumi.linode.inputs.InterfaceVpcArgs;
 * import com.pulumi.linode.inputs.InterfaceVpcIpv4Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vpc = new Interface("vpc", InterfaceArgs.builder()
 *             .linodeId(my_instance.id())
 *             .vpc(InterfaceVpcArgs.builder()
 *                 .subnetId(240213)
 *                 .ipv4(InterfaceVpcIpv4Args.builder()
 *                     .addresses(InterfaceVpcIpv4AddressArgs.builder()
 *                         .address("auto")
 *                         .build())
 *                     .ranges(InterfaceVpcIpv4RangeArgs.builder()
 *                         .range("/32")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### VPC (IPv6) Interface Example
 * 
 * The following example shows how to create a public VPC interface with a custom IPv6 configuration.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Interface;
 * import com.pulumi.linode.InterfaceArgs;
 * import com.pulumi.linode.inputs.InterfaceVpcArgs;
 * import com.pulumi.linode.inputs.InterfaceVpcIpv6Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vpc = new Interface("vpc", InterfaceArgs.builder()
 *             .linodeId(my_instance.id())
 *             .vpc(InterfaceVpcArgs.builder()
 *                 .subnetId(12345)
 *                 .ipv6(InterfaceVpcIpv6Args.builder()
 *                     .isPublic(true)
 *                     .slaacs(InterfaceVpcIpv6SlaacArgs.builder()
 *                         .range("auto")
 *                         .build())
 *                     .ranges(InterfaceVpcIpv6RangeArgs.builder()
 *                         .range("auto")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### VLAN Interface Example
 * 
 * The following example shows how to create a VLAN interface.
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Interface;
 * import com.pulumi.linode.InterfaceArgs;
 * import com.pulumi.linode.inputs.InterfaceVlanArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vlan = new Interface("vlan", InterfaceArgs.builder()
 *             .linodeId(web.id())
 *             .vlan(InterfaceVlanArgs.builder()
 *                 .vlanLabel("web-vlan")
 *                 .ipamAddress("192.168.200.5/24")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Complete Example with Linode
 * 
 * ## Notes
 * 
 * * Each Linode instance can have up to 3 network interfaces.
 * * VLAN interfaces cannot be updated after creation and require recreation.
 * * VPC subnet IDs cannot be changed after interface creation.
 * * Firewall IDs are only supported for public and VPC interfaces, not for VLAN interfaces.
 * * When configuring multiple interfaces, use the `defaultRoute` setting to specify which interface should handle default routing.
 * 
 * ## Import
 * 
 * Interfaces can be imported using a Linode ID followed by an Interface ID, separated by a comma, e.g.
 * 
 * ```sh
 * $ pulumi import linode:index/interface:Interface example 12345,67890
 * ```
 * 
 */
@ResourceType(type="linode:index/interface:Interface")
public class Interface extends com.pulumi.resources.CustomResource {
    /**
     * Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
     * 
     */
    @Export(name="defaultRoute", refs={InterfaceDefaultRoute.class}, tree="[0]")
    private Output<InterfaceDefaultRoute> defaultRoute;

    /**
     * @return Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
     * 
     */
    public Output<InterfaceDefaultRoute> defaultRoute() {
        return this.defaultRoute;
    }
    /**
     * The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
     * 
     */
    @Export(name="firewallId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> firewallId;

    /**
     * @return The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
     * 
     */
    public Output<Optional<Integer>> firewallId() {
        return Codegen.optional(this.firewallId);
    }
    /**
     * The ID of the Linode to assign this interface to.
     * 
     */
    @Export(name="linodeId", refs={Integer.class}, tree="[0]")
    private Output<Integer> linodeId;

    /**
     * @return The ID of the Linode to assign this interface to.
     * 
     */
    public Output<Integer> linodeId() {
        return this.linodeId;
    }
    /**
     * Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    @Export(name="public", refs={InterfacePublic.class}, tree="[0]")
    private Output</* @Nullable */ InterfacePublic> public_;

    /**
     * @return Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    public Output<Optional<InterfacePublic>> public_() {
        return Codegen.optional(this.public_);
    }
    /**
     * Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    @Export(name="vlan", refs={InterfaceVlan.class}, tree="[0]")
    private Output</* @Nullable */ InterfaceVlan> vlan;

    /**
     * @return Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    public Output<Optional<InterfaceVlan>> vlan() {
        return Codegen.optional(this.vlan);
    }
    /**
     * Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    @Export(name="vpc", refs={InterfaceVpc.class}, tree="[0]")
    private Output</* @Nullable */ InterfaceVpc> vpc;

    /**
     * @return Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    public Output<Optional<InterfaceVpc>> vpc() {
        return Codegen.optional(this.vpc);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Interface(java.lang.String name) {
        this(name, InterfaceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Interface(java.lang.String name, InterfaceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Interface(java.lang.String name, InterfaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/interface:Interface", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Interface(java.lang.String name, Output<java.lang.String> id, @Nullable InterfaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/interface:Interface", name, state, makeResourceOptions(options, id), false);
    }

    private static InterfaceArgs makeArgs(InterfaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InterfaceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Interface get(java.lang.String name, Output<java.lang.String> id, @Nullable InterfaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Interface(name, id, state, options);
    }
}
