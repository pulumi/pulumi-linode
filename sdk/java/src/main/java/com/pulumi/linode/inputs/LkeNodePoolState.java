// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.LkeNodePoolAutoscalerArgs;
import com.pulumi.linode.inputs.LkeNodePoolNodeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LkeNodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final LkeNodePoolState Empty = new LkeNodePoolState();

    @Import(name="autoscaler")
    private @Nullable Output<LkeNodePoolAutoscalerArgs> autoscaler;

    public Optional<Output<LkeNodePoolAutoscalerArgs>> autoscaler() {
        return Optional.ofNullable(this.autoscaler);
    }

    /**
     * The ID of the cluster to associate this node pool with.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<Integer> clusterId;

    /**
     * @return The ID of the cluster to associate this node pool with.
     * 
     */
    public Optional<Output<Integer>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The number of nodes in the Node Pool.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The number of nodes in the Node Pool.
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * A list of nodes in the node pool.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<LkeNodePoolNodeArgs>> nodes;

    /**
     * @return A list of nodes in the node pool.
     * 
     */
    public Optional<Output<List<LkeNodePoolNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return An array of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of node pool.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of node pool.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private LkeNodePoolState() {}

    private LkeNodePoolState(LkeNodePoolState $) {
        this.autoscaler = $.autoscaler;
        this.clusterId = $.clusterId;
        this.nodeCount = $.nodeCount;
        this.nodes = $.nodes;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LkeNodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LkeNodePoolState $;

        public Builder() {
            $ = new LkeNodePoolState();
        }

        public Builder(LkeNodePoolState defaults) {
            $ = new LkeNodePoolState(Objects.requireNonNull(defaults));
        }

        public Builder autoscaler(@Nullable Output<LkeNodePoolAutoscalerArgs> autoscaler) {
            $.autoscaler = autoscaler;
            return this;
        }

        public Builder autoscaler(LkeNodePoolAutoscalerArgs autoscaler) {
            return autoscaler(Output.of(autoscaler));
        }

        /**
         * @param clusterId The ID of the cluster to associate this node pool with.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<Integer> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the cluster to associate this node pool with.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Integer clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param nodeCount The number of nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The number of nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodes A list of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<LkeNodePoolNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes A list of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<LkeNodePoolNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes A list of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(LkeNodePoolNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param tags An array of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type The type of node pool.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of node pool.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public LkeNodePoolState build() {
            return $;
        }
    }

}
