// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.LkeNodePoolAutoscalerArgs;
import com.pulumi.linode.inputs.LkeNodePoolNodeArgs;
import com.pulumi.linode.inputs.LkeNodePoolTaintArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LkeNodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final LkeNodePoolState Empty = new LkeNodePoolState();

    @Import(name="autoscaler")
    private @Nullable Output<LkeNodePoolAutoscalerArgs> autoscaler;

    public Optional<Output<LkeNodePoolAutoscalerArgs>> autoscaler() {
        return Optional.ofNullable(this.autoscaler);
    }

    /**
     * ID of the LKE Cluster where to create the current Node Pool.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<Integer> clusterId;

    /**
     * @return ID of the LKE Cluster where to create the current Node Pool.
     * 
     */
    public Optional<Output<Integer>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The disk encryption policy for nodes in this pool.
     * 
     */
    @Import(name="diskEncryption")
    private @Nullable Output<String> diskEncryption;

    /**
     * @return The disk encryption policy for nodes in this pool.
     * 
     */
    public Optional<Output<String>> diskEncryption() {
        return Optional.ofNullable(this.diskEncryption);
    }

    /**
     * The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     */
    @Import(name="k8sVersion")
    private @Nullable Output<String> k8sVersion;

    /**
     * @return The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     */
    public Optional<Output<String>> k8sVersion() {
        return Optional.ofNullable(this.k8sVersion);
    }

    /**
     * A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * A list of nodes in the node pool.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<LkeNodePoolNodeArgs>> nodes;

    /**
     * @return A list of nodes in the node pool.
     * 
     */
    public Optional<Output<List<LkeNodePoolNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
     * allowing them to repel certain pods.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<LkeNodePoolTaintArgs>> taints;

    /**
     * @return Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
     * allowing them to repel certain pods.
     * 
     */
    public Optional<Output<List<LkeNodePoolTaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     * * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
     * 
     * * `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
     * 
     */
    @Import(name="updateStrategy")
    private @Nullable Output<String> updateStrategy;

    /**
     * @return The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
     * 
     * * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
     * 
     * * `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
     * 
     */
    public Optional<Output<String>> updateStrategy() {
        return Optional.ofNullable(this.updateStrategy);
    }

    private LkeNodePoolState() {}

    private LkeNodePoolState(LkeNodePoolState $) {
        this.autoscaler = $.autoscaler;
        this.clusterId = $.clusterId;
        this.diskEncryption = $.diskEncryption;
        this.k8sVersion = $.k8sVersion;
        this.labels = $.labels;
        this.nodeCount = $.nodeCount;
        this.nodes = $.nodes;
        this.tags = $.tags;
        this.taints = $.taints;
        this.type = $.type;
        this.updateStrategy = $.updateStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LkeNodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LkeNodePoolState $;

        public Builder() {
            $ = new LkeNodePoolState();
        }

        public Builder(LkeNodePoolState defaults) {
            $ = new LkeNodePoolState(Objects.requireNonNull(defaults));
        }

        public Builder autoscaler(@Nullable Output<LkeNodePoolAutoscalerArgs> autoscaler) {
            $.autoscaler = autoscaler;
            return this;
        }

        public Builder autoscaler(LkeNodePoolAutoscalerArgs autoscaler) {
            return autoscaler(Output.of(autoscaler));
        }

        /**
         * @param clusterId ID of the LKE Cluster where to create the current Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<Integer> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId ID of the LKE Cluster where to create the current Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Integer clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param diskEncryption The disk encryption policy for nodes in this pool.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryption(@Nullable Output<String> diskEncryption) {
            $.diskEncryption = diskEncryption;
            return this;
        }

        /**
         * @param diskEncryption The disk encryption policy for nodes in this pool.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryption(String diskEncryption) {
            return diskEncryption(Output.of(diskEncryption));
        }

        /**
         * @param k8sVersion The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(@Nullable Output<String> k8sVersion) {
            $.k8sVersion = k8sVersion;
            return this;
        }

        /**
         * @param k8sVersion The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(String k8sVersion) {
            return k8sVersion(Output.of(k8sVersion));
        }

        /**
         * @param labels A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param nodeCount The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodes A list of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<LkeNodePoolNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes A list of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<LkeNodePoolNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes A list of nodes in the node pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(LkeNodePoolNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param tags An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param taints Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
         * allowing them to repel certain pods.
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<LkeNodePoolTaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
         * allowing them to repel certain pods.
         * 
         * @return builder
         * 
         */
        public Builder taints(List<LkeNodePoolTaintArgs> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
         * allowing them to repel certain pods.
         * 
         * @return builder
         * 
         */
        public Builder taints(LkeNodePoolTaintArgs... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param type A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updateStrategy The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
         * 
         * * `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(@Nullable Output<String> updateStrategy) {
            $.updateStrategy = updateStrategy;
            return this;
        }

        /**
         * @param updateStrategy The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.
         * 
         * * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
         * 
         * * `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(String updateStrategy) {
            return updateStrategy(Output.of(updateStrategy));
        }

        public LkeNodePoolState build() {
            return $;
        }
    }

}
