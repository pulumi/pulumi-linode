// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseMysqlV2PrivateNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseMysqlV2PrivateNetworkArgs Empty = new DatabaseMysqlV2PrivateNetworkArgs();

    /**
     * Set to `true` to allow clients outside of the VPC to connect to the database using a public IP address.
     * 
     */
    @Import(name="publicAccess")
    private @Nullable Output<Boolean> publicAccess;

    /**
     * @return Set to `true` to allow clients outside of the VPC to connect to the database using a public IP address.
     * 
     */
    public Optional<Output<Boolean>> publicAccess() {
        return Optional.ofNullable(this.publicAccess);
    }

    /**
     * The ID of the VPC subnet to restrict access to this database using.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<Integer> subnetId;

    /**
     * @return The ID of the VPC subnet to restrict access to this database using.
     * 
     */
    public Output<Integer> subnetId() {
        return this.subnetId;
    }

    /**
     * The ID of the virtual private cloud (VPC) to restrict access to this database using.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<Integer> vpcId;

    /**
     * @return The ID of the virtual private cloud (VPC) to restrict access to this database using.
     * 
     */
    public Output<Integer> vpcId() {
        return this.vpcId;
    }

    private DatabaseMysqlV2PrivateNetworkArgs() {}

    private DatabaseMysqlV2PrivateNetworkArgs(DatabaseMysqlV2PrivateNetworkArgs $) {
        this.publicAccess = $.publicAccess;
        this.subnetId = $.subnetId;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseMysqlV2PrivateNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseMysqlV2PrivateNetworkArgs $;

        public Builder() {
            $ = new DatabaseMysqlV2PrivateNetworkArgs();
        }

        public Builder(DatabaseMysqlV2PrivateNetworkArgs defaults) {
            $ = new DatabaseMysqlV2PrivateNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param publicAccess Set to `true` to allow clients outside of the VPC to connect to the database using a public IP address.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(@Nullable Output<Boolean> publicAccess) {
            $.publicAccess = publicAccess;
            return this;
        }

        /**
         * @param publicAccess Set to `true` to allow clients outside of the VPC to connect to the database using a public IP address.
         * 
         * @return builder
         * 
         */
        public Builder publicAccess(Boolean publicAccess) {
            return publicAccess(Output.of(publicAccess));
        }

        /**
         * @param subnetId The ID of the VPC subnet to restrict access to this database using.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<Integer> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the VPC subnet to restrict access to this database using.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Integer subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param vpcId The ID of the virtual private cloud (VPC) to restrict access to this database using.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<Integer> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the virtual private cloud (VPC) to restrict access to this database using.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Integer vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public DatabaseMysqlV2PrivateNetworkArgs build() {
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("DatabaseMysqlV2PrivateNetworkArgs", "subnetId");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("DatabaseMysqlV2PrivateNetworkArgs", "vpcId");
            }
            return $;
        }
    }

}
