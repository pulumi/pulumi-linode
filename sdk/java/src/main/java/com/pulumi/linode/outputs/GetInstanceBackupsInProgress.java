// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.outputs.GetInstanceBackupsInProgressDisk;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceBackupsInProgress {
    private Boolean available;
    /**
     * @return A list of the labels of the Configuration profiles that are part of the Backup.
     * 
     */
    private List<String> configs;
    /**
     * @return The date the Backup was taken.
     * 
     */
    private String created;
    private List<GetInstanceBackupsInProgressDisk> disks;
    /**
     * @return The date the Backup completed.
     * 
     */
    private String finished;
    /**
     * @return The unique ID of this Backup.
     * 
     */
    private Integer id;
    /**
     * @return The label of this disk.
     * 
     */
    private String label;
    /**
     * @return The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
     * 
     */
    private String status;
    /**
     * @return This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
     * 
     */
    private String type;
    /**
     * @return The date the Backup was most recently updated.
     * 
     */
    private String updated;

    private GetInstanceBackupsInProgress() {}
    public Boolean available() {
        return this.available;
    }
    /**
     * @return A list of the labels of the Configuration profiles that are part of the Backup.
     * 
     */
    public List<String> configs() {
        return this.configs;
    }
    /**
     * @return The date the Backup was taken.
     * 
     */
    public String created() {
        return this.created;
    }
    public List<GetInstanceBackupsInProgressDisk> disks() {
        return this.disks;
    }
    /**
     * @return The date the Backup completed.
     * 
     */
    public String finished() {
        return this.finished;
    }
    /**
     * @return The unique ID of this Backup.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The label of this disk.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The date the Backup was most recently updated.
     * 
     */
    public String updated() {
        return this.updated;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceBackupsInProgress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean available;
        private List<String> configs;
        private String created;
        private List<GetInstanceBackupsInProgressDisk> disks;
        private String finished;
        private Integer id;
        private String label;
        private String status;
        private String type;
        private String updated;
        public Builder() {}
        public Builder(GetInstanceBackupsInProgress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.available = defaults.available;
    	      this.configs = defaults.configs;
    	      this.created = defaults.created;
    	      this.disks = defaults.disks;
    	      this.finished = defaults.finished;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
    	      this.updated = defaults.updated;
        }

        @CustomType.Setter
        public Builder available(Boolean available) {
            if (available == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "available");
            }
            this.available = available;
            return this;
        }
        @CustomType.Setter
        public Builder configs(List<String> configs) {
            if (configs == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "configs");
            }
            this.configs = configs;
            return this;
        }
        public Builder configs(String... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder disks(List<GetInstanceBackupsInProgressDisk> disks) {
            if (disks == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "disks");
            }
            this.disks = disks;
            return this;
        }
        public Builder disks(GetInstanceBackupsInProgressDisk... disks) {
            return disks(List.of(disks));
        }
        @CustomType.Setter
        public Builder finished(String finished) {
            if (finished == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "finished");
            }
            this.finished = finished;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            if (label == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "label");
            }
            this.label = label;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updated(String updated) {
            if (updated == null) {
              throw new MissingRequiredPropertyException("GetInstanceBackupsInProgress", "updated");
            }
            this.updated = updated;
            return this;
        }
        public GetInstanceBackupsInProgress build() {
            final var _resultValue = new GetInstanceBackupsInProgress();
            _resultValue.available = available;
            _resultValue.configs = configs;
            _resultValue.created = created;
            _resultValue.disks = disks;
            _resultValue.finished = finished;
            _resultValue.id = id;
            _resultValue.label = label;
            _resultValue.status = status;
            _resultValue.type = type;
            _resultValue.updated = updated;
            return _resultValue;
        }
    }
}
