// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.PlacementGroupMemberArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PlacementGroupState extends com.pulumi.resources.ResourceArgs {

    public static final PlacementGroupState Empty = new PlacementGroupState();

    /**
     * Whether this Linode is currently compliant with the group&#39;s placement group type.
     * 
     */
    @Import(name="isCompliant")
    private @Nullable Output<Boolean> isCompliant;

    /**
     * @return Whether this Linode is currently compliant with the group&#39;s placement group type.
     * 
     */
    public Optional<Output<Boolean>> isCompliant() {
        return Optional.ofNullable(this.isCompliant);
    }

    /**
     * The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A set of Linodes currently assigned to this Placement Group.
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<PlacementGroupMemberArgs>> members;

    /**
     * @return A set of Linodes currently assigned to this Placement Group.
     * 
     */
    public Optional<Output<List<PlacementGroupMemberArgs>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * Whether Linodes must be able to become compliant during assignment. (Default `strict`)
     * 
     */
    @Import(name="placementGroupPolicy")
    private @Nullable Output<String> placementGroupPolicy;

    /**
     * @return Whether Linodes must be able to become compliant during assignment. (Default `strict`)
     * 
     */
    public Optional<Output<String>> placementGroupPolicy() {
        return Optional.ofNullable(this.placementGroupPolicy);
    }

    /**
     * The placement group type to use when placing Linodes in this group.
     * 
     */
    @Import(name="placementGroupType")
    private @Nullable Output<String> placementGroupType;

    /**
     * @return The placement group type to use when placing Linodes in this group.
     * 
     */
    public Optional<Output<String>> placementGroupType() {
        return Optional.ofNullable(this.placementGroupType);
    }

    /**
     * The region of the Placement Group.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the Placement Group.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private PlacementGroupState() {}

    private PlacementGroupState(PlacementGroupState $) {
        this.isCompliant = $.isCompliant;
        this.label = $.label;
        this.members = $.members;
        this.placementGroupPolicy = $.placementGroupPolicy;
        this.placementGroupType = $.placementGroupType;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PlacementGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PlacementGroupState $;

        public Builder() {
            $ = new PlacementGroupState();
        }

        public Builder(PlacementGroupState defaults) {
            $ = new PlacementGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param isCompliant Whether this Linode is currently compliant with the group&#39;s placement group type.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(@Nullable Output<Boolean> isCompliant) {
            $.isCompliant = isCompliant;
            return this;
        }

        /**
         * @param isCompliant Whether this Linode is currently compliant with the group&#39;s placement group type.
         * 
         * @return builder
         * 
         */
        public Builder isCompliant(Boolean isCompliant) {
            return isCompliant(Output.of(isCompliant));
        }

        /**
         * @param label The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param members A set of Linodes currently assigned to this Placement Group.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<PlacementGroupMemberArgs>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members A set of Linodes currently assigned to this Placement Group.
         * 
         * @return builder
         * 
         */
        public Builder members(List<PlacementGroupMemberArgs> members) {
            return members(Output.of(members));
        }

        /**
         * @param members A set of Linodes currently assigned to this Placement Group.
         * 
         * @return builder
         * 
         */
        public Builder members(PlacementGroupMemberArgs... members) {
            return members(List.of(members));
        }

        /**
         * @param placementGroupPolicy Whether Linodes must be able to become compliant during assignment. (Default `strict`)
         * 
         * @return builder
         * 
         */
        public Builder placementGroupPolicy(@Nullable Output<String> placementGroupPolicy) {
            $.placementGroupPolicy = placementGroupPolicy;
            return this;
        }

        /**
         * @param placementGroupPolicy Whether Linodes must be able to become compliant during assignment. (Default `strict`)
         * 
         * @return builder
         * 
         */
        public Builder placementGroupPolicy(String placementGroupPolicy) {
            return placementGroupPolicy(Output.of(placementGroupPolicy));
        }

        /**
         * @param placementGroupType The placement group type to use when placing Linodes in this group.
         * 
         * @return builder
         * 
         */
        public Builder placementGroupType(@Nullable Output<String> placementGroupType) {
            $.placementGroupType = placementGroupType;
            return this;
        }

        /**
         * @param placementGroupType The placement group type to use when placing Linodes in this group.
         * 
         * @return builder
         * 
         */
        public Builder placementGroupType(String placementGroupType) {
            return placementGroupType(Output.of(placementGroupType));
        }

        /**
         * @param region The region of the Placement Group.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the Placement Group.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public PlacementGroupState build() {
            return $;
        }
    }

}
