// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeBalancerVpcArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeBalancerVpcArgs Empty = new NodeBalancerVpcArgs();

    /**
     * (Optional) A CIDR range for the VPC&#39;s IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
     * 
     */
    @Import(name="ipv4Range")
    private @Nullable Output<String> ipv4Range;

    /**
     * @return (Optional) A CIDR range for the VPC&#39;s IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
     * 
     */
    public Optional<Output<String>> ipv4Range() {
        return Optional.ofNullable(this.ipv4Range);
    }

    /**
     * (Required) The ID of a subnet to assign to this NodeBalancer.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<Integer> subnetId;

    /**
     * @return (Required) The ID of a subnet to assign to this NodeBalancer.
     * 
     */
    public Output<Integer> subnetId() {
        return this.subnetId;
    }

    private NodeBalancerVpcArgs() {}

    private NodeBalancerVpcArgs(NodeBalancerVpcArgs $) {
        this.ipv4Range = $.ipv4Range;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeBalancerVpcArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeBalancerVpcArgs $;

        public Builder() {
            $ = new NodeBalancerVpcArgs();
        }

        public Builder(NodeBalancerVpcArgs defaults) {
            $ = new NodeBalancerVpcArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4Range (Optional) A CIDR range for the VPC&#39;s IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Range(@Nullable Output<String> ipv4Range) {
            $.ipv4Range = ipv4Range;
            return this;
        }

        /**
         * @param ipv4Range (Optional) A CIDR range for the VPC&#39;s IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Range(String ipv4Range) {
            return ipv4Range(Output.of(ipv4Range));
        }

        /**
         * @param subnetId (Required) The ID of a subnet to assign to this NodeBalancer.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<Integer> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId (Required) The ID of a subnet to assign to this NodeBalancer.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Integer subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public NodeBalancerVpcArgs build() {
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("NodeBalancerVpcArgs", "subnetId");
            }
            return $;
        }
    }

}
