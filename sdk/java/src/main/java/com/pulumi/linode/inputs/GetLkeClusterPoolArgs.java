// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetLkeClusterPoolAutoscalerArgs;
import com.pulumi.linode.inputs.GetLkeClusterPoolDiskArgs;
import com.pulumi.linode.inputs.GetLkeClusterPoolNodeArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLkeClusterPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetLkeClusterPoolArgs Empty = new GetLkeClusterPoolArgs();

    /**
     * The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
     * 
     */
    @Import(name="autoscalers")
    private @Nullable Output<List<GetLkeClusterPoolAutoscalerArgs>> autoscalers;

    /**
     * @return The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
     * 
     */
    public Optional<Output<List<GetLkeClusterPoolAutoscalerArgs>>> autoscalers() {
        return Optional.ofNullable(this.autoscalers);
    }

    /**
     * The number of nodes in the Node Pool.
     * 
     */
    @Import(name="count", required=true)
    private Output<Integer> count;

    /**
     * @return The number of nodes in the Node Pool.
     * 
     */
    public Output<Integer> count() {
        return this.count;
    }

    /**
     * This Node Pool’s custom disk layout.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<GetLkeClusterPoolDiskArgs>> disks;

    /**
     * @return This Node Pool’s custom disk layout.
     * 
     */
    public Optional<Output<List<GetLkeClusterPoolDiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The LKE Cluster&#39;s ID.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The LKE Cluster&#39;s ID.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * The nodes in the Node Pool.
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<GetLkeClusterPoolNodeArgs>> nodes;

    /**
     * @return The nodes in the Node Pool.
     * 
     */
    public Optional<Output<List<GetLkeClusterPoolNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return An array of tags applied to this object. Tags are for organizational purposes only.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    /**
     * This custom disk partition’s filesystem type.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return This custom disk partition’s filesystem type.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private GetLkeClusterPoolArgs() {}

    private GetLkeClusterPoolArgs(GetLkeClusterPoolArgs $) {
        this.autoscalers = $.autoscalers;
        this.count = $.count;
        this.disks = $.disks;
        this.id = $.id;
        this.nodes = $.nodes;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLkeClusterPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLkeClusterPoolArgs $;

        public Builder() {
            $ = new GetLkeClusterPoolArgs();
        }

        public Builder(GetLkeClusterPoolArgs defaults) {
            $ = new GetLkeClusterPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoscalers The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
         * 
         * @return builder
         * 
         */
        public Builder autoscalers(@Nullable Output<List<GetLkeClusterPoolAutoscalerArgs>> autoscalers) {
            $.autoscalers = autoscalers;
            return this;
        }

        /**
         * @param autoscalers The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
         * 
         * @return builder
         * 
         */
        public Builder autoscalers(List<GetLkeClusterPoolAutoscalerArgs> autoscalers) {
            return autoscalers(Output.of(autoscalers));
        }

        /**
         * @param autoscalers The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
         * 
         * @return builder
         * 
         */
        public Builder autoscalers(GetLkeClusterPoolAutoscalerArgs... autoscalers) {
            return autoscalers(List.of(autoscalers));
        }

        /**
         * @param count The number of nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder count(Output<Integer> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count The number of nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        /**
         * @param disks This Node Pool’s custom disk layout.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<GetLkeClusterPoolDiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks This Node Pool’s custom disk layout.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<GetLkeClusterPoolDiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks This Node Pool’s custom disk layout.
         * 
         * @return builder
         * 
         */
        public Builder disks(GetLkeClusterPoolDiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param id The LKE Cluster&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The LKE Cluster&#39;s ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param nodes The nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<GetLkeClusterPoolNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes The nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<GetLkeClusterPoolNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes The nodes in the Node Pool.
         * 
         * @return builder
         * 
         */
        public Builder nodes(GetLkeClusterPoolNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param tags An array of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of tags applied to this object. Tags are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type This custom disk partition’s filesystem type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type This custom disk partition’s filesystem type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetLkeClusterPoolArgs build() {
            if ($.count == null) {
                throw new MissingRequiredPropertyException("GetLkeClusterPoolArgs", "count");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetLkeClusterPoolArgs", "id");
            }
            if ($.tags == null) {
                throw new MissingRequiredPropertyException("GetLkeClusterPoolArgs", "tags");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("GetLkeClusterPoolArgs", "type");
            }
            return $;
        }
    }

}
