// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.RdnsTimeoutsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RdnsState extends com.pulumi.resources.ResourceArgs {

    public static final RdnsState Empty = new RdnsState();

    /**
     * The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The name of the RDNS address.
     * 
     */
    @Import(name="rdns")
    private @Nullable Output<String> rdns;

    /**
     * @return The name of the RDNS address.
     * 
     */
    public Optional<Output<String>> rdns() {
        return Optional.ofNullable(this.rdns);
    }

    @Import(name="timeouts")
    private @Nullable Output<RdnsTimeoutsArgs> timeouts;

    public Optional<Output<RdnsTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * If true, the RDNS assignment will be retried within the operation timeout period.
     * 
     */
    @Import(name="waitForAvailable")
    private @Nullable Output<Boolean> waitForAvailable;

    /**
     * @return If true, the RDNS assignment will be retried within the operation timeout period.
     * 
     */
    public Optional<Output<Boolean>> waitForAvailable() {
        return Optional.ofNullable(this.waitForAvailable);
    }

    private RdnsState() {}

    private RdnsState(RdnsState $) {
        this.address = $.address;
        this.rdns = $.rdns;
        this.timeouts = $.timeouts;
        this.waitForAvailable = $.waitForAvailable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RdnsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RdnsState $;

        public Builder() {
            $ = new RdnsState();
        }

        public Builder(RdnsState defaults) {
            $ = new RdnsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param rdns The name of the RDNS address.
         * 
         * @return builder
         * 
         */
        public Builder rdns(@Nullable Output<String> rdns) {
            $.rdns = rdns;
            return this;
        }

        /**
         * @param rdns The name of the RDNS address.
         * 
         * @return builder
         * 
         */
        public Builder rdns(String rdns) {
            return rdns(Output.of(rdns));
        }

        public Builder timeouts(@Nullable Output<RdnsTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(RdnsTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param waitForAvailable If true, the RDNS assignment will be retried within the operation timeout period.
         * 
         * @return builder
         * 
         */
        public Builder waitForAvailable(@Nullable Output<Boolean> waitForAvailable) {
            $.waitForAvailable = waitForAvailable;
            return this;
        }

        /**
         * @param waitForAvailable If true, the RDNS assignment will be retried within the operation timeout period.
         * 
         * @return builder
         * 
         */
        public Builder waitForAvailable(Boolean waitForAvailable) {
            return waitForAvailable(Output.of(waitForAvailable));
        }

        public RdnsState build() {
            return $;
        }
    }

}
