// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InterfaceVpcIpv4AddressArgs;
import com.pulumi.linode.inputs.InterfaceVpcIpv4AssignedAddressArgs;
import com.pulumi.linode.inputs.InterfaceVpcIpv4AssignedRangeArgs;
import com.pulumi.linode.inputs.InterfaceVpcIpv4RangeArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfaceVpcIpv4Args extends com.pulumi.resources.ResourceArgs {

    public static final InterfaceVpcIpv4Args Empty = new InterfaceVpcIpv4Args();

    /**
     * Specifies the IPv4 addresses to use in the VPC subnet. Each object in this list supports:
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<InterfaceVpcIpv4AddressArgs>> addresses;

    /**
     * @return Specifies the IPv4 addresses to use in the VPC subnet. Each object in this list supports:
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv4AddressArgs>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * (Computed) The IPv4 addresses assigned for use in the VPC subnet, calculated from the `addresses` input. Each object in this set supports:
     * 
     */
    @Import(name="assignedAddresses")
    private @Nullable Output<List<InterfaceVpcIpv4AssignedAddressArgs>> assignedAddresses;

    /**
     * @return (Computed) The IPv4 addresses assigned for use in the VPC subnet, calculated from the `addresses` input. Each object in this set supports:
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv4AssignedAddressArgs>>> assignedAddresses() {
        return Optional.ofNullable(this.assignedAddresses);
    }

    /**
     * Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
     * 
     */
    @Import(name="assignedRanges")
    private @Nullable Output<List<InterfaceVpcIpv4AssignedRangeArgs>> assignedRanges;

    /**
     * @return Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv4AssignedRangeArgs>>> assignedRanges() {
        return Optional.ofNullable(this.assignedRanges);
    }

    /**
     * IPv4 ranges in CIDR notation (1.2.3.4/24) or prefix-only format (/24). Each object in this list supports:
     * 
     */
    @Import(name="ranges")
    private @Nullable Output<List<InterfaceVpcIpv4RangeArgs>> ranges;

    /**
     * @return IPv4 ranges in CIDR notation (1.2.3.4/24) or prefix-only format (/24). Each object in this list supports:
     * 
     */
    public Optional<Output<List<InterfaceVpcIpv4RangeArgs>>> ranges() {
        return Optional.ofNullable(this.ranges);
    }

    private InterfaceVpcIpv4Args() {}

    private InterfaceVpcIpv4Args(InterfaceVpcIpv4Args $) {
        this.addresses = $.addresses;
        this.assignedAddresses = $.assignedAddresses;
        this.assignedRanges = $.assignedRanges;
        this.ranges = $.ranges;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfaceVpcIpv4Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfaceVpcIpv4Args $;

        public Builder() {
            $ = new InterfaceVpcIpv4Args();
        }

        public Builder(InterfaceVpcIpv4Args defaults) {
            $ = new InterfaceVpcIpv4Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses Specifies the IPv4 addresses to use in the VPC subnet. Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<InterfaceVpcIpv4AddressArgs>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses Specifies the IPv4 addresses to use in the VPC subnet. Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<InterfaceVpcIpv4AddressArgs> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses Specifies the IPv4 addresses to use in the VPC subnet. Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder addresses(InterfaceVpcIpv4AddressArgs... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param assignedAddresses (Computed) The IPv4 addresses assigned for use in the VPC subnet, calculated from the `addresses` input. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder assignedAddresses(@Nullable Output<List<InterfaceVpcIpv4AssignedAddressArgs>> assignedAddresses) {
            $.assignedAddresses = assignedAddresses;
            return this;
        }

        /**
         * @param assignedAddresses (Computed) The IPv4 addresses assigned for use in the VPC subnet, calculated from the `addresses` input. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder assignedAddresses(List<InterfaceVpcIpv4AssignedAddressArgs> assignedAddresses) {
            return assignedAddresses(Output.of(assignedAddresses));
        }

        /**
         * @param assignedAddresses (Computed) The IPv4 addresses assigned for use in the VPC subnet, calculated from the `addresses` input. Each object in this set supports:
         * 
         * @return builder
         * 
         */
        public Builder assignedAddresses(InterfaceVpcIpv4AssignedAddressArgs... assignedAddresses) {
            return assignedAddresses(List.of(assignedAddresses));
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(@Nullable Output<List<InterfaceVpcIpv4AssignedRangeArgs>> assignedRanges) {
            $.assignedRanges = assignedRanges;
            return this;
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(List<InterfaceVpcIpv4AssignedRangeArgs> assignedRanges) {
            return assignedRanges(Output.of(assignedRanges));
        }

        /**
         * @param assignedRanges Assigned additional IPv6 ranges to use in the VPC subnet, calculated from `ranges` input.
         * 
         * @return builder
         * 
         */
        public Builder assignedRanges(InterfaceVpcIpv4AssignedRangeArgs... assignedRanges) {
            return assignedRanges(List.of(assignedRanges));
        }

        /**
         * @param ranges IPv4 ranges in CIDR notation (1.2.3.4/24) or prefix-only format (/24). Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder ranges(@Nullable Output<List<InterfaceVpcIpv4RangeArgs>> ranges) {
            $.ranges = ranges;
            return this;
        }

        /**
         * @param ranges IPv4 ranges in CIDR notation (1.2.3.4/24) or prefix-only format (/24). Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder ranges(List<InterfaceVpcIpv4RangeArgs> ranges) {
            return ranges(Output.of(ranges));
        }

        /**
         * @param ranges IPv4 ranges in CIDR notation (1.2.3.4/24) or prefix-only format (/24). Each object in this list supports:
         * 
         * @return builder
         * 
         */
        public Builder ranges(InterfaceVpcIpv4RangeArgs... ranges) {
            return ranges(List.of(ranges));
        }

        public InterfaceVpcIpv4Args build() {
            return $;
        }
    }

}
