// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag {
    private String description;
    private Integer maximum;
    private Integer minimum;
    private Boolean requiresRestart;
    private String type;

    private GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag() {}
    public String description() {
        return this.description;
    }
    public Integer maximum() {
        return this.maximum;
    }
    public Integer minimum() {
        return this.minimum;
    }
    public Boolean requiresRestart() {
        return this.requiresRestart;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Integer maximum;
        private Integer minimum;
        private Boolean requiresRestart;
        private String type;
        public Builder() {}
        public Builder(GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.maximum = defaults.maximum;
    	      this.minimum = defaults.minimum;
    	      this.requiresRestart = defaults.requiresRestart;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder maximum(Integer maximum) {
            if (maximum == null) {
              throw new MissingRequiredPropertyException("GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag", "maximum");
            }
            this.maximum = maximum;
            return this;
        }
        @CustomType.Setter
        public Builder minimum(Integer minimum) {
            if (minimum == null) {
              throw new MissingRequiredPropertyException("GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag", "minimum");
            }
            this.minimum = minimum;
            return this;
        }
        @CustomType.Setter
        public Builder requiresRestart(Boolean requiresRestart) {
            if (requiresRestart == null) {
              throw new MissingRequiredPropertyException("GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag", "requiresRestart");
            }
            this.requiresRestart = requiresRestart;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag", "type");
            }
            this.type = type;
            return this;
        }
        public GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag build() {
            final var _resultValue = new GetDatabasePostgresqlConfigPglookoutMaxFailoverReplicationTimeLag();
            _resultValue.description = description;
            _resultValue.maximum = maximum;
            _resultValue.minimum = minimum;
            _resultValue.requiresRestart = requiresRestart;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
