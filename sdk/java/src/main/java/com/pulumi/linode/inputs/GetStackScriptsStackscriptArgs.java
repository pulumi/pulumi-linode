// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetStackScriptsStackscriptUserDefinedFieldArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetStackScriptsStackscriptArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetStackScriptsStackscriptArgs Empty = new GetStackScriptsStackscriptArgs();

    /**
     * The date this StackScript was created.
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return The date this StackScript was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * Count of currently active, deployed Linodes created from this StackScript.
     * 
     */
    @Import(name="deploymentsActive", required=true)
    private Output<Integer> deploymentsActive;

    /**
     * @return Count of currently active, deployed Linodes created from this StackScript.
     * 
     */
    public Output<Integer> deploymentsActive() {
        return this.deploymentsActive;
    }

    /**
     * The total number of times this StackScript has been deployed.
     * 
     */
    @Import(name="deploymentsTotal", required=true)
    private Output<Integer> deploymentsTotal;

    /**
     * @return The total number of times this StackScript has been deployed.
     * 
     */
    public Output<Integer> deploymentsTotal() {
        return this.deploymentsTotal;
    }

    /**
     * A description for the StackScript.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description for the StackScript.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The unique ID of the StackScript.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique ID of the StackScript.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     */
    @Import(name="images", required=true)
    private Output<List<String>> images;

    /**
     * @return An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     * 
     */
    public Output<List<String>> images() {
        return this.images;
    }

    /**
     * This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     */
    @Import(name="isPublic", required=true)
    private Output<Boolean> isPublic;

    /**
     * @return This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     * 
     */
    public Output<Boolean> isPublic() {
        return this.isPublic;
    }

    /**
     * A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     */
    @Import(name="revNote", required=true)
    private Output<String> revNote;

    /**
     * @return This field allows you to add notes for the set of revisions made to this StackScript.
     * 
     */
    public Output<String> revNote() {
        return this.revNote;
    }

    /**
     * The script to execute when provisioning a new Linode with this StackScript.
     * 
     */
    @Import(name="script", required=true)
    private Output<String> script;

    /**
     * @return The script to execute when provisioning a new Linode with this StackScript.
     * 
     */
    public Output<String> script() {
        return this.script;
    }

    /**
     * The date this StackScript was updated.
     * 
     */
    @Import(name="updated", required=true)
    private Output<String> updated;

    /**
     * @return The date this StackScript was updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }

    /**
     * This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     * 
     */
    @Import(name="userDefinedFields", required=true)
    private Output<List<GetStackScriptsStackscriptUserDefinedFieldArgs>> userDefinedFields;

    /**
     * @return This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     * 
     */
    public Output<List<GetStackScriptsStackscriptUserDefinedFieldArgs>> userDefinedFields() {
        return this.userDefinedFields;
    }

    /**
     * The Gravatar ID for the User who created the StackScript.
     * 
     */
    @Import(name="userGravatarId", required=true)
    private Output<String> userGravatarId;

    /**
     * @return The Gravatar ID for the User who created the StackScript.
     * 
     */
    public Output<String> userGravatarId() {
        return this.userGravatarId;
    }

    /**
     * The User who created the StackScript.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The User who created the StackScript.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private GetStackScriptsStackscriptArgs() {}

    private GetStackScriptsStackscriptArgs(GetStackScriptsStackscriptArgs $) {
        this.created = $.created;
        this.deploymentsActive = $.deploymentsActive;
        this.deploymentsTotal = $.deploymentsTotal;
        this.description = $.description;
        this.id = $.id;
        this.images = $.images;
        this.isPublic = $.isPublic;
        this.label = $.label;
        this.revNote = $.revNote;
        this.script = $.script;
        this.updated = $.updated;
        this.userDefinedFields = $.userDefinedFields;
        this.userGravatarId = $.userGravatarId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStackScriptsStackscriptArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStackScriptsStackscriptArgs $;

        public Builder() {
            $ = new GetStackScriptsStackscriptArgs();
        }

        public Builder(GetStackScriptsStackscriptArgs defaults) {
            $ = new GetStackScriptsStackscriptArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created The date this StackScript was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date this StackScript was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param deploymentsActive Count of currently active, deployed Linodes created from this StackScript.
         * 
         * @return builder
         * 
         */
        public Builder deploymentsActive(Output<Integer> deploymentsActive) {
            $.deploymentsActive = deploymentsActive;
            return this;
        }

        /**
         * @param deploymentsActive Count of currently active, deployed Linodes created from this StackScript.
         * 
         * @return builder
         * 
         */
        public Builder deploymentsActive(Integer deploymentsActive) {
            return deploymentsActive(Output.of(deploymentsActive));
        }

        /**
         * @param deploymentsTotal The total number of times this StackScript has been deployed.
         * 
         * @return builder
         * 
         */
        public Builder deploymentsTotal(Output<Integer> deploymentsTotal) {
            $.deploymentsTotal = deploymentsTotal;
            return this;
        }

        /**
         * @param deploymentsTotal The total number of times this StackScript has been deployed.
         * 
         * @return builder
         * 
         */
        public Builder deploymentsTotal(Integer deploymentsTotal) {
            return deploymentsTotal(Output.of(deploymentsTotal));
        }

        /**
         * @param description A description for the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id The unique ID of the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param images An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
         * 
         * @return builder
         * 
         */
        public Builder images(Output<List<String>> images) {
            $.images = images;
            return this;
        }

        /**
         * @param images An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
         * 
         * @return builder
         * 
         */
        public Builder images(List<String> images) {
            return images(Output.of(images));
        }

        /**
         * @param images An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
         * 
         * @return builder
         * 
         */
        public Builder images(String... images) {
            return images(List.of(images));
        }

        /**
         * @param isPublic This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        /**
         * @param isPublic This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
         * 
         * @return builder
         * 
         */
        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param label A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param revNote This field allows you to add notes for the set of revisions made to this StackScript.
         * 
         * @return builder
         * 
         */
        public Builder revNote(Output<String> revNote) {
            $.revNote = revNote;
            return this;
        }

        /**
         * @param revNote This field allows you to add notes for the set of revisions made to this StackScript.
         * 
         * @return builder
         * 
         */
        public Builder revNote(String revNote) {
            return revNote(Output.of(revNote));
        }

        /**
         * @param script The script to execute when provisioning a new Linode with this StackScript.
         * 
         * @return builder
         * 
         */
        public Builder script(Output<String> script) {
            $.script = script;
            return this;
        }

        /**
         * @param script The script to execute when provisioning a new Linode with this StackScript.
         * 
         * @return builder
         * 
         */
        public Builder script(String script) {
            return script(Output.of(script));
        }

        /**
         * @param updated The date this StackScript was updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated The date this StackScript was updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        /**
         * @param userDefinedFields This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
         * 
         * @return builder
         * 
         */
        public Builder userDefinedFields(Output<List<GetStackScriptsStackscriptUserDefinedFieldArgs>> userDefinedFields) {
            $.userDefinedFields = userDefinedFields;
            return this;
        }

        /**
         * @param userDefinedFields This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
         * 
         * @return builder
         * 
         */
        public Builder userDefinedFields(List<GetStackScriptsStackscriptUserDefinedFieldArgs> userDefinedFields) {
            return userDefinedFields(Output.of(userDefinedFields));
        }

        /**
         * @param userDefinedFields This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
         * 
         * @return builder
         * 
         */
        public Builder userDefinedFields(GetStackScriptsStackscriptUserDefinedFieldArgs... userDefinedFields) {
            return userDefinedFields(List.of(userDefinedFields));
        }

        /**
         * @param userGravatarId The Gravatar ID for the User who created the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder userGravatarId(Output<String> userGravatarId) {
            $.userGravatarId = userGravatarId;
            return this;
        }

        /**
         * @param userGravatarId The Gravatar ID for the User who created the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder userGravatarId(String userGravatarId) {
            return userGravatarId(Output.of(userGravatarId));
        }

        /**
         * @param username The User who created the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The User who created the StackScript.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GetStackScriptsStackscriptArgs build() {
            if ($.created == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "created");
            }
            if ($.deploymentsActive == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "deploymentsActive");
            }
            if ($.deploymentsTotal == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "deploymentsTotal");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "description");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "id");
            }
            if ($.images == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "images");
            }
            if ($.isPublic == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "isPublic");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "label");
            }
            if ($.revNote == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "revNote");
            }
            if ($.script == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "script");
            }
            if ($.updated == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "updated");
            }
            if ($.userDefinedFields == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "userDefinedFields");
            }
            if ($.userGravatarId == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "userGravatarId");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("GetStackScriptsStackscriptArgs", "username");
            }
            return $;
        }
    }

}
