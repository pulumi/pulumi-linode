// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InterfaceDefaultRouteArgs;
import com.pulumi.linode.inputs.InterfacePublicArgs;
import com.pulumi.linode.inputs.InterfaceVlanArgs;
import com.pulumi.linode.inputs.InterfaceVpcArgs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfaceState extends com.pulumi.resources.ResourceArgs {

    public static final InterfaceState Empty = new InterfaceState();

    /**
     * Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
     * 
     */
    @Import(name="defaultRoute")
    private @Nullable Output<InterfaceDefaultRouteArgs> defaultRoute;

    /**
     * @return Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
     * 
     */
    public Optional<Output<InterfaceDefaultRouteArgs>> defaultRoute() {
        return Optional.ofNullable(this.defaultRoute);
    }

    /**
     * The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
     * 
     */
    @Import(name="firewallId")
    private @Nullable Output<Integer> firewallId;

    /**
     * @return The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
     * 
     */
    public Optional<Output<Integer>> firewallId() {
        return Optional.ofNullable(this.firewallId);
    }

    /**
     * The ID of the Linode to assign this interface to.
     * 
     */
    @Import(name="linodeId")
    private @Nullable Output<Integer> linodeId;

    /**
     * @return The ID of the Linode to assign this interface to.
     * 
     */
    public Optional<Output<Integer>> linodeId() {
        return Optional.ofNullable(this.linodeId);
    }

    /**
     * Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    @Import(name="public")
    private @Nullable Output<InterfacePublicArgs> public_;

    /**
     * @return Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    public Optional<Output<InterfacePublicArgs>> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<InterfaceVlanArgs> vlan;

    /**
     * @return Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    public Optional<Output<InterfaceVlanArgs>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    /**
     * Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    @Import(name="vpc")
    private @Nullable Output<InterfaceVpcArgs> vpc;

    /**
     * @return Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
     * 
     */
    public Optional<Output<InterfaceVpcArgs>> vpc() {
        return Optional.ofNullable(this.vpc);
    }

    private InterfaceState() {}

    private InterfaceState(InterfaceState $) {
        this.defaultRoute = $.defaultRoute;
        this.firewallId = $.firewallId;
        this.linodeId = $.linodeId;
        this.public_ = $.public_;
        this.vlan = $.vlan;
        this.vpc = $.vpc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfaceState $;

        public Builder() {
            $ = new InterfaceState();
        }

        public Builder(InterfaceState defaults) {
            $ = new InterfaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultRoute Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
         * 
         * @return builder
         * 
         */
        public Builder defaultRoute(@Nullable Output<InterfaceDefaultRouteArgs> defaultRoute) {
            $.defaultRoute = defaultRoute;
            return this;
        }

        /**
         * @param defaultRoute Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
         * 
         * @return builder
         * 
         */
        public Builder defaultRoute(InterfaceDefaultRouteArgs defaultRoute) {
            return defaultRoute(Output.of(defaultRoute));
        }

        /**
         * @param firewallId The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
         * 
         * @return builder
         * 
         */
        public Builder firewallId(@Nullable Output<Integer> firewallId) {
            $.firewallId = firewallId;
            return this;
        }

        /**
         * @param firewallId The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
         * 
         * @return builder
         * 
         */
        public Builder firewallId(Integer firewallId) {
            return firewallId(Output.of(firewallId));
        }

        /**
         * @param linodeId The ID of the Linode to assign this interface to.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(@Nullable Output<Integer> linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param linodeId The ID of the Linode to assign this interface to.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            return linodeId(Output.of(linodeId));
        }

        /**
         * @param public_ Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder public_(@Nullable Output<InterfacePublicArgs> public_) {
            $.public_ = public_;
            return this;
        }

        /**
         * @param public_ Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder public_(InterfacePublicArgs public_) {
            return public_(Output.of(public_));
        }

        /**
         * @param vlan Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<InterfaceVlanArgs> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder vlan(InterfaceVlanArgs vlan) {
            return vlan(Output.of(vlan));
        }

        /**
         * @param vpc Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder vpc(@Nullable Output<InterfaceVpcArgs> vpc) {
            $.vpc = vpc;
            return this;
        }

        /**
         * @param vpc Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
         * 
         * @return builder
         * 
         */
        public Builder vpc(InterfaceVpcArgs vpc) {
            return vpc(Output.of(vpc));
        }

        public InterfaceState build() {
            return $;
        }
    }

}
