// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class GetRegionsRegionPlacementGroupLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetRegionsRegionPlacementGroupLimitArgs Empty = new GetRegionsRegionPlacementGroupLimitArgs();

    /**
     * The maximum number of Linodes allowed to be assigned to a placement group in this region.
     * 
     */
    @Import(name="maximumLinodesPerPg", required=true)
    private Output<Integer> maximumLinodesPerPg;

    /**
     * @return The maximum number of Linodes allowed to be assigned to a placement group in this region.
     * 
     */
    public Output<Integer> maximumLinodesPerPg() {
        return this.maximumLinodesPerPg;
    }

    /**
     * The maximum number of placement groups allowed for the current user in this region.
     * 
     */
    @Import(name="maximumPgsPerCustomer", required=true)
    private Output<Integer> maximumPgsPerCustomer;

    /**
     * @return The maximum number of placement groups allowed for the current user in this region.
     * 
     */
    public Output<Integer> maximumPgsPerCustomer() {
        return this.maximumPgsPerCustomer;
    }

    private GetRegionsRegionPlacementGroupLimitArgs() {}

    private GetRegionsRegionPlacementGroupLimitArgs(GetRegionsRegionPlacementGroupLimitArgs $) {
        this.maximumLinodesPerPg = $.maximumLinodesPerPg;
        this.maximumPgsPerCustomer = $.maximumPgsPerCustomer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegionsRegionPlacementGroupLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegionsRegionPlacementGroupLimitArgs $;

        public Builder() {
            $ = new GetRegionsRegionPlacementGroupLimitArgs();
        }

        public Builder(GetRegionsRegionPlacementGroupLimitArgs defaults) {
            $ = new GetRegionsRegionPlacementGroupLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumLinodesPerPg The maximum number of Linodes allowed to be assigned to a placement group in this region.
         * 
         * @return builder
         * 
         */
        public Builder maximumLinodesPerPg(Output<Integer> maximumLinodesPerPg) {
            $.maximumLinodesPerPg = maximumLinodesPerPg;
            return this;
        }

        /**
         * @param maximumLinodesPerPg The maximum number of Linodes allowed to be assigned to a placement group in this region.
         * 
         * @return builder
         * 
         */
        public Builder maximumLinodesPerPg(Integer maximumLinodesPerPg) {
            return maximumLinodesPerPg(Output.of(maximumLinodesPerPg));
        }

        /**
         * @param maximumPgsPerCustomer The maximum number of placement groups allowed for the current user in this region.
         * 
         * @return builder
         * 
         */
        public Builder maximumPgsPerCustomer(Output<Integer> maximumPgsPerCustomer) {
            $.maximumPgsPerCustomer = maximumPgsPerCustomer;
            return this;
        }

        /**
         * @param maximumPgsPerCustomer The maximum number of placement groups allowed for the current user in this region.
         * 
         * @return builder
         * 
         */
        public Builder maximumPgsPerCustomer(Integer maximumPgsPerCustomer) {
            return maximumPgsPerCustomer(Output.of(maximumPgsPerCustomer));
        }

        public GetRegionsRegionPlacementGroupLimitArgs build() {
            if ($.maximumLinodesPerPg == null) {
                throw new MissingRequiredPropertyException("GetRegionsRegionPlacementGroupLimitArgs", "maximumLinodesPerPg");
            }
            if ($.maximumPgsPerCustomer == null) {
                throw new MissingRequiredPropertyException("GetRegionsRegionPlacementGroupLimitArgs", "maximumPgsPerCustomer");
            }
            return $;
        }
    }

}
