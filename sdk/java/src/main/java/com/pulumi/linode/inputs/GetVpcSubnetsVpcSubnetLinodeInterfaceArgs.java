// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


public final class GetVpcSubnetsVpcSubnetLinodeInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetVpcSubnetsVpcSubnetLinodeInterfaceArgs Empty = new GetVpcSubnetsVpcSubnetLinodeInterfaceArgs();

    /**
     * Whether the Interface is actively in use.
     * 
     */
    @Import(name="active", required=true)
    private Output<Boolean> active;

    /**
     * @return Whether the Interface is actively in use.
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }

    /**
     * ID of Linode Config that the interface is associated with. `null` for a Linode Interface.
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return ID of Linode Config that the interface is associated with. `null` for a Linode Interface.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * ID of the interface.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return ID of the interface.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    private GetVpcSubnetsVpcSubnetLinodeInterfaceArgs() {}

    private GetVpcSubnetsVpcSubnetLinodeInterfaceArgs(GetVpcSubnetsVpcSubnetLinodeInterfaceArgs $) {
        this.active = $.active;
        this.configId = $.configId;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpcSubnetsVpcSubnetLinodeInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpcSubnetsVpcSubnetLinodeInterfaceArgs $;

        public Builder() {
            $ = new GetVpcSubnetsVpcSubnetLinodeInterfaceArgs();
        }

        public Builder(GetVpcSubnetsVpcSubnetLinodeInterfaceArgs defaults) {
            $ = new GetVpcSubnetsVpcSubnetLinodeInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param active Whether the Interface is actively in use.
         * 
         * @return builder
         * 
         */
        public Builder active(Output<Boolean> active) {
            $.active = active;
            return this;
        }

        /**
         * @param active Whether the Interface is actively in use.
         * 
         * @return builder
         * 
         */
        public Builder active(Boolean active) {
            return active(Output.of(active));
        }

        /**
         * @param configId ID of Linode Config that the interface is associated with. `null` for a Linode Interface.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId ID of Linode Config that the interface is associated with. `null` for a Linode Interface.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param id ID of the interface.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the interface.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        public GetVpcSubnetsVpcSubnetLinodeInterfaceArgs build() {
            if ($.active == null) {
                throw new MissingRequiredPropertyException("GetVpcSubnetsVpcSubnetLinodeInterfaceArgs", "active");
            }
            if ($.configId == null) {
                throw new MissingRequiredPropertyException("GetVpcSubnetsVpcSubnetLinodeInterfaceArgs", "configId");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetVpcSubnetsVpcSubnetLinodeInterfaceArgs", "id");
            }
            return $;
        }
    }

}
