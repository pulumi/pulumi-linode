// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDomainResult {
    /**
     * @return The list of IPs that may perform a zone transfer for this Domain.
     * 
     */
    private List<String> axfrIps;
    /**
     * @return A description for this Domain.
     * 
     */
    private String description;
    /**
     * @return The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     */
    private @Nullable String domain;
    /**
     * @return The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     */
    private Integer expireSec;
    /**
     * @return The group this Domain belongs to.
     * 
     */
    private String group;
    /**
     * @return The unique ID of this Domain.
     * 
     */
    private @Nullable Integer id;
    /**
     * @return The IP addresses representing the master DNS for this Domain.
     * 
     */
    private List<String> masterIps;
    /**
     * @return The amount of time in seconds before this Domain should be refreshed.
     * 
     */
    private Integer refreshSec;
    /**
     * @return The interval, in seconds, at which a failed refresh should be retried.
     * 
     */
    private Integer retrySec;
    /**
     * @return Start of Authority email address.
     * 
     */
    private String soaEmail;
    /**
     * @return Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     */
    private String status;
    /**
     * @return An array of tags applied to this object.
     * 
     */
    private List<String> tags;
    /**
     * @return &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     */
    private Integer ttlSec;
    /**
     * @return If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     */
    private String type;

    private GetDomainResult() {}
    /**
     * @return The list of IPs that may perform a zone transfer for this Domain.
     * 
     */
    public List<String> axfrIps() {
        return this.axfrIps;
    }
    /**
     * @return A description for this Domain.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return The amount of time in seconds that may pass before this Domain is no longer authoritative.
     * 
     */
    public Integer expireSec() {
        return this.expireSec;
    }
    /**
     * @return The group this Domain belongs to.
     * 
     */
    public String group() {
        return this.group;
    }
    /**
     * @return The unique ID of this Domain.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The IP addresses representing the master DNS for this Domain.
     * 
     */
    public List<String> masterIps() {
        return this.masterIps;
    }
    /**
     * @return The amount of time in seconds before this Domain should be refreshed.
     * 
     */
    public Integer refreshSec() {
        return this.refreshSec;
    }
    /**
     * @return The interval, in seconds, at which a failed refresh should be retried.
     * 
     */
    public Integer retrySec() {
        return this.retrySec;
    }
    /**
     * @return Start of Authority email address.
     * 
     */
    public String soaEmail() {
        return this.soaEmail;
    }
    /**
     * @return Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return An array of tags applied to this object.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return &#39;Time to Live&#39;-the amount of time in seconds that this Domain&#39;s records may be cached by resolvers or other domain servers.
     * 
     */
    public Integer ttlSec() {
        return this.ttlSec;
    }
    /**
     * @return If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> axfrIps;
        private String description;
        private @Nullable String domain;
        private Integer expireSec;
        private String group;
        private @Nullable Integer id;
        private List<String> masterIps;
        private Integer refreshSec;
        private Integer retrySec;
        private String soaEmail;
        private String status;
        private List<String> tags;
        private Integer ttlSec;
        private String type;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.axfrIps = defaults.axfrIps;
    	      this.description = defaults.description;
    	      this.domain = defaults.domain;
    	      this.expireSec = defaults.expireSec;
    	      this.group = defaults.group;
    	      this.id = defaults.id;
    	      this.masterIps = defaults.masterIps;
    	      this.refreshSec = defaults.refreshSec;
    	      this.retrySec = defaults.retrySec;
    	      this.soaEmail = defaults.soaEmail;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.ttlSec = defaults.ttlSec;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder axfrIps(List<String> axfrIps) {
            this.axfrIps = Objects.requireNonNull(axfrIps);
            return this;
        }
        public Builder axfrIps(String... axfrIps) {
            return axfrIps(List.of(axfrIps));
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder expireSec(Integer expireSec) {
            this.expireSec = Objects.requireNonNull(expireSec);
            return this;
        }
        @CustomType.Setter
        public Builder group(String group) {
            this.group = Objects.requireNonNull(group);
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable Integer id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder masterIps(List<String> masterIps) {
            this.masterIps = Objects.requireNonNull(masterIps);
            return this;
        }
        public Builder masterIps(String... masterIps) {
            return masterIps(List.of(masterIps));
        }
        @CustomType.Setter
        public Builder refreshSec(Integer refreshSec) {
            this.refreshSec = Objects.requireNonNull(refreshSec);
            return this;
        }
        @CustomType.Setter
        public Builder retrySec(Integer retrySec) {
            this.retrySec = Objects.requireNonNull(retrySec);
            return this;
        }
        @CustomType.Setter
        public Builder soaEmail(String soaEmail) {
            this.soaEmail = Objects.requireNonNull(soaEmail);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder ttlSec(Integer ttlSec) {
            this.ttlSec = Objects.requireNonNull(ttlSec);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDomainResult build() {
            final var _resultValue = new GetDomainResult();
            _resultValue.axfrIps = axfrIps;
            _resultValue.description = description;
            _resultValue.domain = domain;
            _resultValue.expireSec = expireSec;
            _resultValue.group = group;
            _resultValue.id = id;
            _resultValue.masterIps = masterIps;
            _resultValue.refreshSec = refreshSec;
            _resultValue.retrySec = retrySec;
            _resultValue.soaEmail = soaEmail;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.ttlSec = ttlSec;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
