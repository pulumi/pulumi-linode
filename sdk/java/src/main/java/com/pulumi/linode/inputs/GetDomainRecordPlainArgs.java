// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainRecordPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainRecordPlainArgs Empty = new GetDomainRecordPlainArgs();

    /**
     * The associated domain&#39;s unique ID.
     * 
     */
    @Import(name="domainId", required=true)
    private Integer domainId;

    /**
     * @return The associated domain&#39;s unique ID.
     * 
     */
    public Integer domainId() {
        return this.domainId;
    }

    /**
     * The unique ID of the Domain Record.
     * 
     */
    @Import(name="id")
    private @Nullable Integer id;

    /**
     * @return The unique ID of the Domain Record.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the Record.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the Record.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    private GetDomainRecordPlainArgs() {}

    private GetDomainRecordPlainArgs(GetDomainRecordPlainArgs $) {
        this.domainId = $.domainId;
        this.id = $.id;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainRecordPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainRecordPlainArgs $;

        public Builder() {
            $ = new GetDomainRecordPlainArgs();
        }

        public Builder(GetDomainRecordPlainArgs defaults) {
            $ = new GetDomainRecordPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainId The associated domain&#39;s unique ID.
         * 
         * @return builder
         * 
         */
        public Builder domainId(Integer domainId) {
            $.domainId = domainId;
            return this;
        }

        /**
         * @param id The unique ID of the Domain Record.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Integer id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The name of the Record.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public GetDomainRecordPlainArgs build() {
            if ($.domainId == null) {
                throw new MissingRequiredPropertyException("GetDomainRecordPlainArgs", "domainId");
            }
            return $;
        }
    }

}
