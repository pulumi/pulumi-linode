// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.linode.LkeClusterArgs;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.LkeClusterState;
import com.pulumi.linode.outputs.LkeClusterControlPlane;
import com.pulumi.linode.outputs.LkeClusterPool;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages an LKE cluster.
 * 
 * ## Example Usage
 * 
 * Creating a basic LKE cluster:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.LkeCluster;
 * import com.pulumi.linode.LkeClusterArgs;
 * import com.pulumi.linode.inputs.LkeClusterPoolArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_cluster = new LkeCluster(&#34;my-cluster&#34;, LkeClusterArgs.builder()        
 *             .k8sVersion(&#34;1.21&#34;)
 *             .label(&#34;my-cluster&#34;)
 *             .pools(LkeClusterPoolArgs.builder()
 *                 .count(3)
 *                 .type(&#34;g6-standard-2&#34;)
 *                 .build())
 *             .region(&#34;us-central&#34;)
 *             .tags(&#34;prod&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Creating an LKE cluster with autoscaler:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.LkeCluster;
 * import com.pulumi.linode.LkeClusterArgs;
 * import com.pulumi.linode.inputs.LkeClusterPoolArgs;
 * import com.pulumi.linode.inputs.LkeClusterPoolAutoscalerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_cluster = new LkeCluster(&#34;my-cluster&#34;, LkeClusterArgs.builder()        
 *             .label(&#34;my-cluster&#34;)
 *             .k8sVersion(&#34;1.21&#34;)
 *             .region(&#34;us-central&#34;)
 *             .tags(&#34;prod&#34;)
 *             .pools(LkeClusterPoolArgs.builder()
 *                 .type(&#34;g6-standard-2&#34;)
 *                 .count(3)
 *                 .autoscaler(LkeClusterPoolAutoscalerArgs.builder()
 *                     .min(3)
 *                     .max(10)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * LKE Clusters can be imported using the `id`, e.g.
 * 
 * ```sh
 *  $ pulumi import linode:index/lkeCluster:LkeCluster my_cluster 12345
 * ```
 * 
 */
@ResourceType(type="linode:index/lkeCluster:LkeCluster")
public class LkeCluster extends com.pulumi.resources.CustomResource {
    /**
     * The endpoints for the Kubernetes API server.
     * 
     */
    @Export(name="apiEndpoints", type=List.class, parameters={String.class})
    private Output<List<String>> apiEndpoints;

    /**
     * @return The endpoints for the Kubernetes API server.
     * 
     */
    public Output<List<String>> apiEndpoints() {
        return this.apiEndpoints;
    }
    /**
     * Defines settings for the Kubernetes Control Plane.
     * 
     */
    @Export(name="controlPlane", type=LkeClusterControlPlane.class, parameters={})
    private Output<LkeClusterControlPlane> controlPlane;

    /**
     * @return Defines settings for the Kubernetes Control Plane.
     * 
     */
    public Output<LkeClusterControlPlane> controlPlane() {
        return this.controlPlane;
    }
    /**
     * The Kubernetes Dashboard access URL for this cluster.
     * 
     */
    @Export(name="dashboardUrl", type=String.class, parameters={})
    private Output<String> dashboardUrl;

    /**
     * @return The Kubernetes Dashboard access URL for this cluster.
     * 
     */
    public Output<String> dashboardUrl() {
        return this.dashboardUrl;
    }
    /**
     * The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
     * 
     */
    @Export(name="k8sVersion", type=String.class, parameters={})
    private Output<String> k8sVersion;

    /**
     * @return The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
     * 
     */
    public Output<String> k8sVersion() {
        return this.k8sVersion;
    }
    /**
     * The base64 encoded kubeconfig for the Kubernetes cluster.
     * 
     */
    @Export(name="kubeconfig", type=String.class, parameters={})
    private Output<String> kubeconfig;

    /**
     * @return The base64 encoded kubeconfig for the Kubernetes cluster.
     * 
     */
    public Output<String> kubeconfig() {
        return this.kubeconfig;
    }
    /**
     * This Kubernetes cluster&#39;s unique label.
     * 
     */
    @Export(name="label", type=String.class, parameters={})
    private Output<String> label;

    /**
     * @return This Kubernetes cluster&#39;s unique label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * Additional nested attributes:
     * 
     */
    @Export(name="pools", type=List.class, parameters={LkeClusterPool.class})
    private Output<List<LkeClusterPool>> pools;

    /**
     * @return Additional nested attributes:
     * 
     */
    public Output<List<LkeClusterPool>> pools() {
        return this.pools;
    }
    /**
     * This Kubernetes cluster&#39;s location.
     * 
     */
    @Export(name="region", type=String.class, parameters={})
    private Output<String> region;

    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The status of the node. (`ready`, `not_ready`)
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The status of the node. (`ready`, `not_ready`)
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LkeCluster(String name) {
        this(name, LkeClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LkeCluster(String name, LkeClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LkeCluster(String name, LkeClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/lkeCluster:LkeCluster", name, args == null ? LkeClusterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LkeCluster(String name, Output<String> id, @Nullable LkeClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/lkeCluster:LkeCluster", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "kubeconfig"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LkeCluster get(String name, Output<String> id, @Nullable LkeClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LkeCluster(name, id, state, options);
    }
}
