// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class GetRegionsRegionPlacementGroupLimit extends com.pulumi.resources.InvokeArgs {

    public static final GetRegionsRegionPlacementGroupLimit Empty = new GetRegionsRegionPlacementGroupLimit();

    /**
     * The maximum number of Linodes allowed to be assigned to a placement group in this region.
     * 
     */
    @Import(name="maximumLinodesPerPg", required=true)
    private Integer maximumLinodesPerPg;

    /**
     * @return The maximum number of Linodes allowed to be assigned to a placement group in this region.
     * 
     */
    public Integer maximumLinodesPerPg() {
        return this.maximumLinodesPerPg;
    }

    /**
     * The maximum number of placement groups allowed for the current user in this region.
     * 
     */
    @Import(name="maximumPgsPerCustomer", required=true)
    private Integer maximumPgsPerCustomer;

    /**
     * @return The maximum number of placement groups allowed for the current user in this region.
     * 
     */
    public Integer maximumPgsPerCustomer() {
        return this.maximumPgsPerCustomer;
    }

    private GetRegionsRegionPlacementGroupLimit() {}

    private GetRegionsRegionPlacementGroupLimit(GetRegionsRegionPlacementGroupLimit $) {
        this.maximumLinodesPerPg = $.maximumLinodesPerPg;
        this.maximumPgsPerCustomer = $.maximumPgsPerCustomer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegionsRegionPlacementGroupLimit defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegionsRegionPlacementGroupLimit $;

        public Builder() {
            $ = new GetRegionsRegionPlacementGroupLimit();
        }

        public Builder(GetRegionsRegionPlacementGroupLimit defaults) {
            $ = new GetRegionsRegionPlacementGroupLimit(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumLinodesPerPg The maximum number of Linodes allowed to be assigned to a placement group in this region.
         * 
         * @return builder
         * 
         */
        public Builder maximumLinodesPerPg(Integer maximumLinodesPerPg) {
            $.maximumLinodesPerPg = maximumLinodesPerPg;
            return this;
        }

        /**
         * @param maximumPgsPerCustomer The maximum number of placement groups allowed for the current user in this region.
         * 
         * @return builder
         * 
         */
        public Builder maximumPgsPerCustomer(Integer maximumPgsPerCustomer) {
            $.maximumPgsPerCustomer = maximumPgsPerCustomer;
            return this;
        }

        public GetRegionsRegionPlacementGroupLimit build() {
            if ($.maximumLinodesPerPg == null) {
                throw new MissingRequiredPropertyException("GetRegionsRegionPlacementGroupLimit", "maximumLinodesPerPg");
            }
            if ($.maximumPgsPerCustomer == null) {
                throw new MissingRequiredPropertyException("GetRegionsRegionPlacementGroupLimit", "maximumPgsPerCustomer");
            }
            return $;
        }
    }

}
