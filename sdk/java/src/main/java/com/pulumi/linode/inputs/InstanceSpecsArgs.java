// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceSpecsArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceSpecsArgs Empty = new InstanceSpecsArgs();

    /**
     * The number of VPUs this Linode has access to.
     * 
     */
    @Import(name="acceleratedDevices")
    private @Nullable Output<Integer> acceleratedDevices;

    /**
     * @return The number of VPUs this Linode has access to.
     * 
     */
    public Optional<Output<Integer>> acceleratedDevices() {
        return Optional.ofNullable(this.acceleratedDevices);
    }

    /**
     * The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
     * 
     */
    @Import(name="disk")
    private @Nullable Output<Integer> disk;

    /**
     * @return The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
     * 
     */
    public Optional<Output<Integer>> disk() {
        return Optional.ofNullable(this.disk);
    }

    /**
     * The number of GPUs this Linode has access to.
     * 
     */
    @Import(name="gpus")
    private @Nullable Output<Integer> gpus;

    /**
     * @return The number of GPUs this Linode has access to.
     * 
     */
    public Optional<Output<Integer>> gpus() {
        return Optional.ofNullable(this.gpus);
    }

    /**
     * The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
     * 
     */
    @Import(name="memory")
    private @Nullable Output<Integer> memory;

    /**
     * @return The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
     * 
     */
    public Optional<Output<Integer>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The amount of network transfer this Linode is allotted each month.
     * 
     */
    @Import(name="transfer")
    private @Nullable Output<Integer> transfer;

    /**
     * @return The amount of network transfer this Linode is allotted each month.
     * 
     */
    public Optional<Output<Integer>> transfer() {
        return Optional.ofNullable(this.transfer);
    }

    /**
     * The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
     * 
     */
    @Import(name="vcpus")
    private @Nullable Output<Integer> vcpus;

    /**
     * @return The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
     * 
     */
    public Optional<Output<Integer>> vcpus() {
        return Optional.ofNullable(this.vcpus);
    }

    private InstanceSpecsArgs() {}

    private InstanceSpecsArgs(InstanceSpecsArgs $) {
        this.acceleratedDevices = $.acceleratedDevices;
        this.disk = $.disk;
        this.gpus = $.gpus;
        this.memory = $.memory;
        this.transfer = $.transfer;
        this.vcpus = $.vcpus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceSpecsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceSpecsArgs $;

        public Builder() {
            $ = new InstanceSpecsArgs();
        }

        public Builder(InstanceSpecsArgs defaults) {
            $ = new InstanceSpecsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceleratedDevices The number of VPUs this Linode has access to.
         * 
         * @return builder
         * 
         */
        public Builder acceleratedDevices(@Nullable Output<Integer> acceleratedDevices) {
            $.acceleratedDevices = acceleratedDevices;
            return this;
        }

        /**
         * @param acceleratedDevices The number of VPUs this Linode has access to.
         * 
         * @return builder
         * 
         */
        public Builder acceleratedDevices(Integer acceleratedDevices) {
            return acceleratedDevices(Output.of(acceleratedDevices));
        }

        /**
         * @param disk The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
         * 
         * @return builder
         * 
         */
        public Builder disk(@Nullable Output<Integer> disk) {
            $.disk = disk;
            return this;
        }

        /**
         * @param disk The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
         * 
         * @return builder
         * 
         */
        public Builder disk(Integer disk) {
            return disk(Output.of(disk));
        }

        /**
         * @param gpus The number of GPUs this Linode has access to.
         * 
         * @return builder
         * 
         */
        public Builder gpus(@Nullable Output<Integer> gpus) {
            $.gpus = gpus;
            return this;
        }

        /**
         * @param gpus The number of GPUs this Linode has access to.
         * 
         * @return builder
         * 
         */
        public Builder gpus(Integer gpus) {
            return gpus(Output.of(gpus));
        }

        /**
         * @param memory The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<Integer> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
         * 
         * @return builder
         * 
         */
        public Builder memory(Integer memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param transfer The amount of network transfer this Linode is allotted each month.
         * 
         * @return builder
         * 
         */
        public Builder transfer(@Nullable Output<Integer> transfer) {
            $.transfer = transfer;
            return this;
        }

        /**
         * @param transfer The amount of network transfer this Linode is allotted each month.
         * 
         * @return builder
         * 
         */
        public Builder transfer(Integer transfer) {
            return transfer(Output.of(transfer));
        }

        /**
         * @param vcpus The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
         * 
         * @return builder
         * 
         */
        public Builder vcpus(@Nullable Output<Integer> vcpus) {
            $.vcpus = vcpus;
            return this;
        }

        /**
         * @param vcpus The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
         * 
         * @return builder
         * 
         */
        public Builder vcpus(Integer vcpus) {
            return vcpus(Output.of(vcpus));
        }

        public InstanceSpecsArgs build() {
            return $;
        }
    }

}
