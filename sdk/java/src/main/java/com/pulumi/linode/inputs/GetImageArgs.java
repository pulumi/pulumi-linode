// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.GetImageReplicationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageArgs Empty = new GetImageArgs();

    /**
     * The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * A list of image replication regions and corresponding status.
     * 
     */
    @Import(name="replications")
    private @Nullable Output<List<GetImageReplicationArgs>> replications;

    /**
     * @return A list of image replication regions and corresponding status.
     * 
     */
    public Optional<Output<List<GetImageReplicationArgs>>> replications() {
        return Optional.ofNullable(this.replications);
    }

    private GetImageArgs() {}

    private GetImageArgs(GetImageArgs $) {
        this.id = $.id;
        this.replications = $.replications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageArgs $;

        public Builder() {
            $ = new GetImageArgs();
        }

        public Builder(GetImageArgs defaults) {
            $ = new GetImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param replications A list of image replication regions and corresponding status.
         * 
         * @return builder
         * 
         */
        public Builder replications(@Nullable Output<List<GetImageReplicationArgs>> replications) {
            $.replications = replications;
            return this;
        }

        /**
         * @param replications A list of image replication regions and corresponding status.
         * 
         * @return builder
         * 
         */
        public Builder replications(List<GetImageReplicationArgs> replications) {
            return replications(Output.of(replications));
        }

        /**
         * @param replications A list of image replication regions and corresponding status.
         * 
         * @return builder
         * 
         */
        public Builder replications(GetImageReplicationArgs... replications) {
            return replications(List.of(replications));
        }

        public GetImageArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetImageArgs", "id");
            }
            return $;
        }
    }

}
