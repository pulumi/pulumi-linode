// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.DatabasePostgresqlV2PendingUpdateArgs;
import com.pulumi.linode.inputs.DatabasePostgresqlV2TimeoutsArgs;
import com.pulumi.linode.inputs.DatabasePostgresqlV2UpdatesArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabasePostgresqlV2State extends com.pulumi.resources.ResourceArgs {

    public static final DatabasePostgresqlV2State Empty = new DatabasePostgresqlV2State();

    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    @Import(name="allowLists")
    private @Nullable Output<List<String>> allowLists;

    /**
     * @return A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    public Optional<Output<List<String>>> allowLists() {
        return Optional.ofNullable(this.allowLists);
    }

    /**
     * The base64-encoded SSL CA certificate for the Managed Database.
     * 
     */
    @Import(name="caCert")
    private @Nullable Output<String> caCert;

    /**
     * @return The base64-encoded SSL CA certificate for the Managed Database.
     * 
     */
    public Optional<Output<String>> caCert() {
        return Optional.ofNullable(this.caCert);
    }

    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    @Import(name="clusterSize")
    private @Nullable Output<Integer> clusterSize;

    /**
     * @return The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    public Optional<Output<Integer>> clusterSize() {
        return Optional.ofNullable(this.clusterSize);
    }

    /**
     * When this Managed Database was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return When this Managed Database was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Whether the Managed Databases is encrypted.
     * 
     */
    @Import(name="encrypted")
    private @Nullable Output<Boolean> encrypted;

    /**
     * @return Whether the Managed Databases is encrypted.
     * 
     */
    public Optional<Output<Boolean>> encrypted() {
        return Optional.ofNullable(this.encrypted);
    }

    /**
     * The Managed Database engine. (e.g. `postgresql`)
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The Managed Database engine. (e.g. `postgresql`)
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     * 
     */
    @Import(name="engineConfigPgAutovacuumAnalyzeScaleFactor")
    private @Nullable Output<Double> engineConfigPgAutovacuumAnalyzeScaleFactor;

    /**
     * @return Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     * 
     */
    public Optional<Output<Double>> engineConfigPgAutovacuumAnalyzeScaleFactor() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumAnalyzeScaleFactor);
    }

    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     * 
     */
    @Import(name="engineConfigPgAutovacuumAnalyzeThreshold")
    private @Nullable Output<Integer> engineConfigPgAutovacuumAnalyzeThreshold;

    /**
     * @return Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgAutovacuumAnalyzeThreshold() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumAnalyzeThreshold);
    }

    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     * 
     */
    @Import(name="engineConfigPgAutovacuumMaxWorkers")
    private @Nullable Output<Integer> engineConfigPgAutovacuumMaxWorkers;

    /**
     * @return Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgAutovacuumMaxWorkers() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumMaxWorkers);
    }

    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
     * 
     */
    @Import(name="engineConfigPgAutovacuumNaptime")
    private @Nullable Output<Integer> engineConfigPgAutovacuumNaptime;

    /**
     * @return Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
     * 
     */
    public Optional<Output<Integer>> engineConfigPgAutovacuumNaptime() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumNaptime);
    }

    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
     * 
     */
    @Import(name="engineConfigPgAutovacuumVacuumCostDelay")
    private @Nullable Output<Integer> engineConfigPgAutovacuumVacuumCostDelay;

    /**
     * @return Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
     * 
     */
    public Optional<Output<Integer>> engineConfigPgAutovacuumVacuumCostDelay() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumVacuumCostDelay);
    }

    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
     * 
     */
    @Import(name="engineConfigPgAutovacuumVacuumCostLimit")
    private @Nullable Output<Integer> engineConfigPgAutovacuumVacuumCostLimit;

    /**
     * @return Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgAutovacuumVacuumCostLimit() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumVacuumCostLimit);
    }

    /**
     * Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     * 
     */
    @Import(name="engineConfigPgAutovacuumVacuumScaleFactor")
    private @Nullable Output<Double> engineConfigPgAutovacuumVacuumScaleFactor;

    /**
     * @return Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     * 
     */
    public Optional<Output<Double>> engineConfigPgAutovacuumVacuumScaleFactor() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumVacuumScaleFactor);
    }

    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     * 
     */
    @Import(name="engineConfigPgAutovacuumVacuumThreshold")
    private @Nullable Output<Integer> engineConfigPgAutovacuumVacuumThreshold;

    /**
     * @return Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgAutovacuumVacuumThreshold() {
        return Optional.ofNullable(this.engineConfigPgAutovacuumVacuumThreshold);
    }

    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     * 
     */
    @Import(name="engineConfigPgBgwriterDelay")
    private @Nullable Output<Integer> engineConfigPgBgwriterDelay;

    /**
     * @return Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgBgwriterDelay() {
        return Optional.ofNullable(this.engineConfigPgBgwriterDelay);
    }

    /**
     * Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     * 
     */
    @Import(name="engineConfigPgBgwriterFlushAfter")
    private @Nullable Output<Integer> engineConfigPgBgwriterFlushAfter;

    /**
     * @return Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgBgwriterFlushAfter() {
        return Optional.ofNullable(this.engineConfigPgBgwriterFlushAfter);
    }

    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     * 
     */
    @Import(name="engineConfigPgBgwriterLruMaxpages")
    private @Nullable Output<Integer> engineConfigPgBgwriterLruMaxpages;

    /**
     * @return In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgBgwriterLruMaxpages() {
        return Optional.ofNullable(this.engineConfigPgBgwriterLruMaxpages);
    }

    /**
     * The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     * 
     */
    @Import(name="engineConfigPgBgwriterLruMultiplier")
    private @Nullable Output<Double> engineConfigPgBgwriterLruMultiplier;

    /**
     * @return The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     * 
     */
    public Optional<Output<Double>> engineConfigPgBgwriterLruMultiplier() {
        return Optional.ofNullable(this.engineConfigPgBgwriterLruMultiplier);
    }

    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     * 
     */
    @Import(name="engineConfigPgDeadlockTimeout")
    private @Nullable Output<Integer> engineConfigPgDeadlockTimeout;

    /**
     * @return This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgDeadlockTimeout() {
        return Optional.ofNullable(this.engineConfigPgDeadlockTimeout);
    }

    /**
     * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     * 
     */
    @Import(name="engineConfigPgDefaultToastCompression")
    private @Nullable Output<String> engineConfigPgDefaultToastCompression;

    /**
     * @return Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     * 
     */
    public Optional<Output<String>> engineConfigPgDefaultToastCompression() {
        return Optional.ofNullable(this.engineConfigPgDefaultToastCompression);
    }

    /**
     * Time out sessions with open transactions after this number of milliseconds.
     * 
     */
    @Import(name="engineConfigPgIdleInTransactionSessionTimeout")
    private @Nullable Output<Integer> engineConfigPgIdleInTransactionSessionTimeout;

    /**
     * @return Time out sessions with open transactions after this number of milliseconds.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgIdleInTransactionSessionTimeout() {
        return Optional.ofNullable(this.engineConfigPgIdleInTransactionSessionTimeout);
    }

    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     * 
     */
    @Import(name="engineConfigPgJit")
    private @Nullable Output<Boolean> engineConfigPgJit;

    /**
     * @return Controls system-wide use of Just-in-Time Compilation (JIT).
     * 
     */
    public Optional<Output<Boolean>> engineConfigPgJit() {
        return Optional.ofNullable(this.engineConfigPgJit);
    }

    /**
     * PostgreSQL maximum number of files that can be open per process.
     * 
     */
    @Import(name="engineConfigPgMaxFilesPerProcess")
    private @Nullable Output<Integer> engineConfigPgMaxFilesPerProcess;

    /**
     * @return PostgreSQL maximum number of files that can be open per process.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxFilesPerProcess() {
        return Optional.ofNullable(this.engineConfigPgMaxFilesPerProcess);
    }

    /**
     * PostgreSQL maximum locks per transaction.
     * 
     */
    @Import(name="engineConfigPgMaxLocksPerTransaction")
    private @Nullable Output<Integer> engineConfigPgMaxLocksPerTransaction;

    /**
     * @return PostgreSQL maximum locks per transaction.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxLocksPerTransaction() {
        return Optional.ofNullable(this.engineConfigPgMaxLocksPerTransaction);
    }

    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     * 
     */
    @Import(name="engineConfigPgMaxLogicalReplicationWorkers")
    private @Nullable Output<Integer> engineConfigPgMaxLogicalReplicationWorkers;

    /**
     * @return PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxLogicalReplicationWorkers() {
        return Optional.ofNullable(this.engineConfigPgMaxLogicalReplicationWorkers);
    }

    /**
     * Sets the maximum number of workers that the system can support for parallel queries.
     * 
     */
    @Import(name="engineConfigPgMaxParallelWorkers")
    private @Nullable Output<Integer> engineConfigPgMaxParallelWorkers;

    /**
     * @return Sets the maximum number of workers that the system can support for parallel queries.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxParallelWorkers() {
        return Optional.ofNullable(this.engineConfigPgMaxParallelWorkers);
    }

    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     * 
     */
    @Import(name="engineConfigPgMaxParallelWorkersPerGather")
    private @Nullable Output<Integer> engineConfigPgMaxParallelWorkersPerGather;

    /**
     * @return Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxParallelWorkersPerGather() {
        return Optional.ofNullable(this.engineConfigPgMaxParallelWorkersPerGather);
    }

    /**
     * PostgreSQL maximum predicate locks per transaction.
     * 
     */
    @Import(name="engineConfigPgMaxPredLocksPerTransaction")
    private @Nullable Output<Integer> engineConfigPgMaxPredLocksPerTransaction;

    /**
     * @return PostgreSQL maximum predicate locks per transaction.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxPredLocksPerTransaction() {
        return Optional.ofNullable(this.engineConfigPgMaxPredLocksPerTransaction);
    }

    /**
     * PostgreSQL maximum replication slots.
     * 
     */
    @Import(name="engineConfigPgMaxReplicationSlots")
    private @Nullable Output<Integer> engineConfigPgMaxReplicationSlots;

    /**
     * @return PostgreSQL maximum replication slots.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxReplicationSlots() {
        return Optional.ofNullable(this.engineConfigPgMaxReplicationSlots);
    }

    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     * 
     */
    @Import(name="engineConfigPgMaxSlotWalKeepSize")
    private @Nullable Output<Integer> engineConfigPgMaxSlotWalKeepSize;

    /**
     * @return PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxSlotWalKeepSize() {
        return Optional.ofNullable(this.engineConfigPgMaxSlotWalKeepSize);
    }

    /**
     * Maximum depth of the stack in bytes.
     * 
     */
    @Import(name="engineConfigPgMaxStackDepth")
    private @Nullable Output<Integer> engineConfigPgMaxStackDepth;

    /**
     * @return Maximum depth of the stack in bytes.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxStackDepth() {
        return Optional.ofNullable(this.engineConfigPgMaxStackDepth);
    }

    /**
     * Max standby archive delay in milliseconds.
     * 
     */
    @Import(name="engineConfigPgMaxStandbyArchiveDelay")
    private @Nullable Output<Integer> engineConfigPgMaxStandbyArchiveDelay;

    /**
     * @return Max standby archive delay in milliseconds.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxStandbyArchiveDelay() {
        return Optional.ofNullable(this.engineConfigPgMaxStandbyArchiveDelay);
    }

    /**
     * Max standby streaming delay in milliseconds.
     * 
     */
    @Import(name="engineConfigPgMaxStandbyStreamingDelay")
    private @Nullable Output<Integer> engineConfigPgMaxStandbyStreamingDelay;

    /**
     * @return Max standby streaming delay in milliseconds.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxStandbyStreamingDelay() {
        return Optional.ofNullable(this.engineConfigPgMaxStandbyStreamingDelay);
    }

    /**
     * PostgreSQL maximum WAL senders.
     * 
     */
    @Import(name="engineConfigPgMaxWalSenders")
    private @Nullable Output<Integer> engineConfigPgMaxWalSenders;

    /**
     * @return PostgreSQL maximum WAL senders.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxWalSenders() {
        return Optional.ofNullable(this.engineConfigPgMaxWalSenders);
    }

    /**
     * Sets the maximum number of background processes that the system can support.
     * 
     */
    @Import(name="engineConfigPgMaxWorkerProcesses")
    private @Nullable Output<Integer> engineConfigPgMaxWorkerProcesses;

    /**
     * @return Sets the maximum number of background processes that the system can support.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgMaxWorkerProcesses() {
        return Optional.ofNullable(this.engineConfigPgMaxWorkerProcesses);
    }

    /**
     * Chooses the algorithm for encrypting passwords. (default `md5`)
     * 
     */
    @Import(name="engineConfigPgPasswordEncryption")
    private @Nullable Output<String> engineConfigPgPasswordEncryption;

    /**
     * @return Chooses the algorithm for encrypting passwords. (default `md5`)
     * 
     */
    public Optional<Output<String>> engineConfigPgPasswordEncryption() {
        return Optional.ofNullable(this.engineConfigPgPasswordEncryption);
    }

    /**
     * Sets the time interval to run pg_partman&#39;s scheduled tasks.
     * 
     */
    @Import(name="engineConfigPgPgPartmanBgwInterval")
    private @Nullable Output<Integer> engineConfigPgPgPartmanBgwInterval;

    /**
     * @return Sets the time interval to run pg_partman&#39;s scheduled tasks.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgPgPartmanBgwInterval() {
        return Optional.ofNullable(this.engineConfigPgPgPartmanBgwInterval);
    }

    /**
     * Controls which role to use for pg_partman&#39;s scheduled background tasks.
     * 
     */
    @Import(name="engineConfigPgPgPartmanBgwRole")
    private @Nullable Output<String> engineConfigPgPgPartmanBgwRole;

    /**
     * @return Controls which role to use for pg_partman&#39;s scheduled background tasks.
     * 
     */
    public Optional<Output<String>> engineConfigPgPgPartmanBgwRole() {
        return Optional.ofNullable(this.engineConfigPgPgPartmanBgwRole);
    }

    /**
     * Enables or disables query plan monitoring.
     * 
     */
    @Import(name="engineConfigPgPgStatMonitorPgsmEnableQueryPlan")
    private @Nullable Output<Boolean> engineConfigPgPgStatMonitorPgsmEnableQueryPlan;

    /**
     * @return Enables or disables query plan monitoring.
     * 
     */
    public Optional<Output<Boolean>> engineConfigPgPgStatMonitorPgsmEnableQueryPlan() {
        return Optional.ofNullable(this.engineConfigPgPgStatMonitorPgsmEnableQueryPlan);
    }

    /**
     * Sets the maximum number of buckets.
     * 
     */
    @Import(name="engineConfigPgPgStatMonitorPgsmMaxBuckets")
    private @Nullable Output<Integer> engineConfigPgPgStatMonitorPgsmMaxBuckets;

    /**
     * @return Sets the maximum number of buckets.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgPgStatMonitorPgsmMaxBuckets() {
        return Optional.ofNullable(this.engineConfigPgPgStatMonitorPgsmMaxBuckets);
    }

    /**
     * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     * 
     */
    @Import(name="engineConfigPgPgStatStatementsTrack")
    private @Nullable Output<String> engineConfigPgPgStatStatementsTrack;

    /**
     * @return Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     * 
     */
    public Optional<Output<String>> engineConfigPgPgStatStatementsTrack() {
        return Optional.ofNullable(this.engineConfigPgPgStatStatementsTrack);
    }

    /**
     * Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pg_stat_statements results for utility commands are unreliable. (default `false`)
     * 
     */
    @Import(name="engineConfigPgStatMonitorEnable")
    private @Nullable Output<Boolean> engineConfigPgStatMonitorEnable;

    /**
     * @return Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pg_stat_statements results for utility commands are unreliable. (default `false`)
     * 
     */
    public Optional<Output<Boolean>> engineConfigPgStatMonitorEnable() {
        return Optional.ofNullable(this.engineConfigPgStatMonitorEnable);
    }

    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited.
     * 
     */
    @Import(name="engineConfigPgTempFileLimit")
    private @Nullable Output<Integer> engineConfigPgTempFileLimit;

    /**
     * @return PostgreSQL temporary file limit in KiB, -1 for unlimited.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgTempFileLimit() {
        return Optional.ofNullable(this.engineConfigPgTempFileLimit);
    }

    /**
     * PostgreSQL service timezone.
     * 
     */
    @Import(name="engineConfigPgTimezone")
    private @Nullable Output<String> engineConfigPgTimezone;

    /**
     * @return PostgreSQL service timezone.
     * 
     */
    public Optional<Output<String>> engineConfigPgTimezone() {
        return Optional.ofNullable(this.engineConfigPgTimezone);
    }

    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session.
     * 
     */
    @Import(name="engineConfigPgTrackActivityQuerySize")
    private @Nullable Output<Integer> engineConfigPgTrackActivityQuerySize;

    /**
     * @return Specifies the number of bytes reserved to track the currently executing command for each active session.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgTrackActivityQuerySize() {
        return Optional.ofNullable(this.engineConfigPgTrackActivityQuerySize);
    }

    /**
     * Record commit time of transactions.
     * 
     */
    @Import(name="engineConfigPgTrackCommitTimestamp")
    private @Nullable Output<String> engineConfigPgTrackCommitTimestamp;

    /**
     * @return Record commit time of transactions.
     * 
     */
    public Optional<Output<String>> engineConfigPgTrackCommitTimestamp() {
        return Optional.ofNullable(this.engineConfigPgTrackCommitTimestamp);
    }

    /**
     * Enables tracking of function call counts and time used.
     * 
     */
    @Import(name="engineConfigPgTrackFunctions")
    private @Nullable Output<String> engineConfigPgTrackFunctions;

    /**
     * @return Enables tracking of function call counts and time used.
     * 
     */
    public Optional<Output<String>> engineConfigPgTrackFunctions() {
        return Optional.ofNullable(this.engineConfigPgTrackFunctions);
    }

    /**
     * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     * 
     */
    @Import(name="engineConfigPgTrackIoTiming")
    private @Nullable Output<String> engineConfigPgTrackIoTiming;

    /**
     * @return Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     * 
     */
    public Optional<Output<String>> engineConfigPgTrackIoTiming() {
        return Optional.ofNullable(this.engineConfigPgTrackIoTiming);
    }

    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     * 
     */
    @Import(name="engineConfigPgWalSenderTimeout")
    private @Nullable Output<Integer> engineConfigPgWalSenderTimeout;

    /**
     * @return Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgWalSenderTimeout() {
        return Optional.ofNullable(this.engineConfigPgWalSenderTimeout);
    }

    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     * 
     */
    @Import(name="engineConfigPgWalWriterDelay")
    private @Nullable Output<Integer> engineConfigPgWalWriterDelay;

    /**
     * @return WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     * 
     */
    public Optional<Output<Integer>> engineConfigPgWalWriterDelay() {
        return Optional.ofNullable(this.engineConfigPgWalWriterDelay);
    }

    /**
     * Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
     * 
     */
    @Import(name="engineConfigPglookoutMaxFailoverReplicationTimeLag")
    private @Nullable Output<Integer> engineConfigPglookoutMaxFailoverReplicationTimeLag;

    /**
     * @return Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
     * 
     */
    public Optional<Output<Integer>> engineConfigPglookoutMaxFailoverReplicationTimeLag() {
        return Optional.ofNullable(this.engineConfigPglookoutMaxFailoverReplicationTimeLag);
    }

    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     * 
     */
    @Import(name="engineConfigSharedBuffersPercentage")
    private @Nullable Output<Double> engineConfigSharedBuffersPercentage;

    /**
     * @return Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
     * 
     */
    public Optional<Output<Double>> engineConfigSharedBuffersPercentage() {
        return Optional.ofNullable(this.engineConfigSharedBuffersPercentage);
    }

    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     * 
     */
    @Import(name="engineConfigWorkMem")
    private @Nullable Output<Integer> engineConfigWorkMem;

    /**
     * @return Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     * 
     */
    public Optional<Output<Integer>> engineConfigWorkMem() {
        return Optional.ofNullable(this.engineConfigWorkMem);
    }

    /**
     * The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     * 
     */
    @Import(name="engineId")
    private @Nullable Output<String> engineId;

    /**
     * @return The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     * 
     */
    public Optional<Output<String>> engineId() {
        return Optional.ofNullable(this.engineId);
    }

    /**
     * The database timestamp from which it was restored.
     * 
     */
    @Import(name="forkRestoreTime")
    private @Nullable Output<String> forkRestoreTime;

    /**
     * @return The database timestamp from which it was restored.
     * 
     */
    public Optional<Output<String>> forkRestoreTime() {
        return Optional.ofNullable(this.forkRestoreTime);
    }

    /**
     * The ID of the database that was forked from.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Import(name="forkSource")
    private @Nullable Output<Integer> forkSource;

    /**
     * @return The ID of the database that was forked from.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Optional<Output<Integer>> forkSource() {
        return Optional.ofNullable(this.forkSource);
    }

    /**
     * The primary host for the Managed Database.
     * 
     */
    @Import(name="hostPrimary")
    private @Nullable Output<String> hostPrimary;

    /**
     * @return The primary host for the Managed Database.
     * 
     */
    public Optional<Output<String>> hostPrimary() {
        return Optional.ofNullable(this.hostPrimary);
    }

    /**
     * The secondary/private host for the managed database.
     * 
     */
    @Import(name="hostSecondary")
    private @Nullable Output<String> hostSecondary;

    /**
     * @return The secondary/private host for the managed database.
     * 
     */
    public Optional<Output<String>> hostSecondary() {
        return Optional.ofNullable(this.hostSecondary);
    }

    /**
     * A unique, user-defined string referring to the Managed Database.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return A unique, user-defined string referring to the Managed Database.
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * A mapping between IP addresses and strings designating them as primary or failover.
     * 
     */
    @Import(name="members")
    private @Nullable Output<Map<String,String>> members;

    /**
     * @return A mapping between IP addresses and strings designating them as primary or failover.
     * 
     */
    public Optional<Output<Map<String,String>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * The oldest time to which a database can be restored.
     * 
     */
    @Import(name="oldestRestoreTime")
    private @Nullable Output<String> oldestRestoreTime;

    /**
     * @return The oldest time to which a database can be restored.
     * 
     */
    public Optional<Output<String>> oldestRestoreTime() {
        return Optional.ofNullable(this.oldestRestoreTime);
    }

    /**
     * A set of pending updates.
     * 
     */
    @Import(name="pendingUpdates")
    private @Nullable Output<List<DatabasePostgresqlV2PendingUpdateArgs>> pendingUpdates;

    /**
     * @return A set of pending updates.
     * 
     */
    public Optional<Output<List<DatabasePostgresqlV2PendingUpdateArgs>>> pendingUpdates() {
        return Optional.ofNullable(this.pendingUpdates);
    }

    /**
     * The back-end platform for relational databases used by the service.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return The back-end platform for relational databases used by the service.
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The access port for this Managed Database.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The access port for this Managed Database.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The region to use for the Managed Database.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region to use for the Managed Database.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The randomly-generated root password for the Managed Database instance.
     * 
     */
    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    /**
     * @return The randomly-generated root password for the Managed Database instance.
     * 
     */
    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    /**
     * The root username for the Managed Database instance.
     * 
     */
    @Import(name="rootUsername")
    private @Nullable Output<String> rootUsername;

    /**
     * @return The root username for the Managed Database instance.
     * 
     */
    public Optional<Output<String>> rootUsername() {
        return Optional.ofNullable(this.rootUsername);
    }

    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     */
    @Import(name="sslConnection")
    private @Nullable Output<Boolean> sslConnection;

    /**
     * @return Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     */
    public Optional<Output<Boolean>> sslConnection() {
        return Optional.ofNullable(this.sslConnection);
    }

    /**
     * The operating status of the Managed Database.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The operating status of the Managed Database.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Whether this Managed Database should be suspended.
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return Whether this Managed Database should be suspended.
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    @Import(name="timeouts")
    private @Nullable Output<DatabasePostgresqlV2TimeoutsArgs> timeouts;

    public Optional<Output<DatabasePostgresqlV2TimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     * 
     * ***
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The Linode Instance type used for the nodes of the Managed Database.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * When this Managed Database was last updated.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return When this Managed Database was last updated.
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Import(name="updates")
    private @Nullable Output<DatabasePostgresqlV2UpdatesArgs> updates;

    /**
     * @return Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Optional<Output<DatabasePostgresqlV2UpdatesArgs>> updates() {
        return Optional.ofNullable(this.updates);
    }

    /**
     * The Managed Database engine version. (e.g. `13.2`)
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The Managed Database engine version. (e.g. `13.2`)
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatabasePostgresqlV2State() {}

    private DatabasePostgresqlV2State(DatabasePostgresqlV2State $) {
        this.allowLists = $.allowLists;
        this.caCert = $.caCert;
        this.clusterSize = $.clusterSize;
        this.created = $.created;
        this.encrypted = $.encrypted;
        this.engine = $.engine;
        this.engineConfigPgAutovacuumAnalyzeScaleFactor = $.engineConfigPgAutovacuumAnalyzeScaleFactor;
        this.engineConfigPgAutovacuumAnalyzeThreshold = $.engineConfigPgAutovacuumAnalyzeThreshold;
        this.engineConfigPgAutovacuumMaxWorkers = $.engineConfigPgAutovacuumMaxWorkers;
        this.engineConfigPgAutovacuumNaptime = $.engineConfigPgAutovacuumNaptime;
        this.engineConfigPgAutovacuumVacuumCostDelay = $.engineConfigPgAutovacuumVacuumCostDelay;
        this.engineConfigPgAutovacuumVacuumCostLimit = $.engineConfigPgAutovacuumVacuumCostLimit;
        this.engineConfigPgAutovacuumVacuumScaleFactor = $.engineConfigPgAutovacuumVacuumScaleFactor;
        this.engineConfigPgAutovacuumVacuumThreshold = $.engineConfigPgAutovacuumVacuumThreshold;
        this.engineConfigPgBgwriterDelay = $.engineConfigPgBgwriterDelay;
        this.engineConfigPgBgwriterFlushAfter = $.engineConfigPgBgwriterFlushAfter;
        this.engineConfigPgBgwriterLruMaxpages = $.engineConfigPgBgwriterLruMaxpages;
        this.engineConfigPgBgwriterLruMultiplier = $.engineConfigPgBgwriterLruMultiplier;
        this.engineConfigPgDeadlockTimeout = $.engineConfigPgDeadlockTimeout;
        this.engineConfigPgDefaultToastCompression = $.engineConfigPgDefaultToastCompression;
        this.engineConfigPgIdleInTransactionSessionTimeout = $.engineConfigPgIdleInTransactionSessionTimeout;
        this.engineConfigPgJit = $.engineConfigPgJit;
        this.engineConfigPgMaxFilesPerProcess = $.engineConfigPgMaxFilesPerProcess;
        this.engineConfigPgMaxLocksPerTransaction = $.engineConfigPgMaxLocksPerTransaction;
        this.engineConfigPgMaxLogicalReplicationWorkers = $.engineConfigPgMaxLogicalReplicationWorkers;
        this.engineConfigPgMaxParallelWorkers = $.engineConfigPgMaxParallelWorkers;
        this.engineConfigPgMaxParallelWorkersPerGather = $.engineConfigPgMaxParallelWorkersPerGather;
        this.engineConfigPgMaxPredLocksPerTransaction = $.engineConfigPgMaxPredLocksPerTransaction;
        this.engineConfigPgMaxReplicationSlots = $.engineConfigPgMaxReplicationSlots;
        this.engineConfigPgMaxSlotWalKeepSize = $.engineConfigPgMaxSlotWalKeepSize;
        this.engineConfigPgMaxStackDepth = $.engineConfigPgMaxStackDepth;
        this.engineConfigPgMaxStandbyArchiveDelay = $.engineConfigPgMaxStandbyArchiveDelay;
        this.engineConfigPgMaxStandbyStreamingDelay = $.engineConfigPgMaxStandbyStreamingDelay;
        this.engineConfigPgMaxWalSenders = $.engineConfigPgMaxWalSenders;
        this.engineConfigPgMaxWorkerProcesses = $.engineConfigPgMaxWorkerProcesses;
        this.engineConfigPgPasswordEncryption = $.engineConfigPgPasswordEncryption;
        this.engineConfigPgPgPartmanBgwInterval = $.engineConfigPgPgPartmanBgwInterval;
        this.engineConfigPgPgPartmanBgwRole = $.engineConfigPgPgPartmanBgwRole;
        this.engineConfigPgPgStatMonitorPgsmEnableQueryPlan = $.engineConfigPgPgStatMonitorPgsmEnableQueryPlan;
        this.engineConfigPgPgStatMonitorPgsmMaxBuckets = $.engineConfigPgPgStatMonitorPgsmMaxBuckets;
        this.engineConfigPgPgStatStatementsTrack = $.engineConfigPgPgStatStatementsTrack;
        this.engineConfigPgStatMonitorEnable = $.engineConfigPgStatMonitorEnable;
        this.engineConfigPgTempFileLimit = $.engineConfigPgTempFileLimit;
        this.engineConfigPgTimezone = $.engineConfigPgTimezone;
        this.engineConfigPgTrackActivityQuerySize = $.engineConfigPgTrackActivityQuerySize;
        this.engineConfigPgTrackCommitTimestamp = $.engineConfigPgTrackCommitTimestamp;
        this.engineConfigPgTrackFunctions = $.engineConfigPgTrackFunctions;
        this.engineConfigPgTrackIoTiming = $.engineConfigPgTrackIoTiming;
        this.engineConfigPgWalSenderTimeout = $.engineConfigPgWalSenderTimeout;
        this.engineConfigPgWalWriterDelay = $.engineConfigPgWalWriterDelay;
        this.engineConfigPglookoutMaxFailoverReplicationTimeLag = $.engineConfigPglookoutMaxFailoverReplicationTimeLag;
        this.engineConfigSharedBuffersPercentage = $.engineConfigSharedBuffersPercentage;
        this.engineConfigWorkMem = $.engineConfigWorkMem;
        this.engineId = $.engineId;
        this.forkRestoreTime = $.forkRestoreTime;
        this.forkSource = $.forkSource;
        this.hostPrimary = $.hostPrimary;
        this.hostSecondary = $.hostSecondary;
        this.label = $.label;
        this.members = $.members;
        this.oldestRestoreTime = $.oldestRestoreTime;
        this.pendingUpdates = $.pendingUpdates;
        this.platform = $.platform;
        this.port = $.port;
        this.region = $.region;
        this.rootPassword = $.rootPassword;
        this.rootUsername = $.rootUsername;
        this.sslConnection = $.sslConnection;
        this.status = $.status;
        this.suspended = $.suspended;
        this.timeouts = $.timeouts;
        this.type = $.type;
        this.updated = $.updated;
        this.updates = $.updates;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabasePostgresqlV2State defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabasePostgresqlV2State $;

        public Builder() {
            $ = new DatabasePostgresqlV2State();
        }

        public Builder(DatabasePostgresqlV2State defaults) {
            $ = new DatabasePostgresqlV2State(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(@Nullable Output<List<String>> allowLists) {
            $.allowLists = allowLists;
            return this;
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(List<String> allowLists) {
            return allowLists(Output.of(allowLists));
        }

        /**
         * @param allowLists A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
         * 
         * @return builder
         * 
         */
        public Builder allowLists(String... allowLists) {
            return allowLists(List.of(allowLists));
        }

        /**
         * @param caCert The base64-encoded SSL CA certificate for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder caCert(@Nullable Output<String> caCert) {
            $.caCert = caCert;
            return this;
        }

        /**
         * @param caCert The base64-encoded SSL CA certificate for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder caCert(String caCert) {
            return caCert(Output.of(caCert));
        }

        /**
         * @param clusterSize The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(@Nullable Output<Integer> clusterSize) {
            $.clusterSize = clusterSize;
            return this;
        }

        /**
         * @param clusterSize The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(Integer clusterSize) {
            return clusterSize(Output.of(clusterSize));
        }

        /**
         * @param created When this Managed Database was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When this Managed Database was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param encrypted Whether the Managed Databases is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param encrypted Whether the Managed Databases is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            return encrypted(Output.of(encrypted));
        }

        /**
         * @param engine The Managed Database engine. (e.g. `postgresql`)
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The Managed Database engine. (e.g. `postgresql`)
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param engineConfigPgAutovacuumAnalyzeScaleFactor Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumAnalyzeScaleFactor(@Nullable Output<Double> engineConfigPgAutovacuumAnalyzeScaleFactor) {
            $.engineConfigPgAutovacuumAnalyzeScaleFactor = engineConfigPgAutovacuumAnalyzeScaleFactor;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumAnalyzeScaleFactor Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumAnalyzeScaleFactor(Double engineConfigPgAutovacuumAnalyzeScaleFactor) {
            return engineConfigPgAutovacuumAnalyzeScaleFactor(Output.of(engineConfigPgAutovacuumAnalyzeScaleFactor));
        }

        /**
         * @param engineConfigPgAutovacuumAnalyzeThreshold Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumAnalyzeThreshold(@Nullable Output<Integer> engineConfigPgAutovacuumAnalyzeThreshold) {
            $.engineConfigPgAutovacuumAnalyzeThreshold = engineConfigPgAutovacuumAnalyzeThreshold;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumAnalyzeThreshold Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumAnalyzeThreshold(Integer engineConfigPgAutovacuumAnalyzeThreshold) {
            return engineConfigPgAutovacuumAnalyzeThreshold(Output.of(engineConfigPgAutovacuumAnalyzeThreshold));
        }

        /**
         * @param engineConfigPgAutovacuumMaxWorkers Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumMaxWorkers(@Nullable Output<Integer> engineConfigPgAutovacuumMaxWorkers) {
            $.engineConfigPgAutovacuumMaxWorkers = engineConfigPgAutovacuumMaxWorkers;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumMaxWorkers Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumMaxWorkers(Integer engineConfigPgAutovacuumMaxWorkers) {
            return engineConfigPgAutovacuumMaxWorkers(Output.of(engineConfigPgAutovacuumMaxWorkers));
        }

        /**
         * @param engineConfigPgAutovacuumNaptime Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumNaptime(@Nullable Output<Integer> engineConfigPgAutovacuumNaptime) {
            $.engineConfigPgAutovacuumNaptime = engineConfigPgAutovacuumNaptime;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumNaptime Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumNaptime(Integer engineConfigPgAutovacuumNaptime) {
            return engineConfigPgAutovacuumNaptime(Output.of(engineConfigPgAutovacuumNaptime));
        }

        /**
         * @param engineConfigPgAutovacuumVacuumCostDelay Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumCostDelay(@Nullable Output<Integer> engineConfigPgAutovacuumVacuumCostDelay) {
            $.engineConfigPgAutovacuumVacuumCostDelay = engineConfigPgAutovacuumVacuumCostDelay;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumVacuumCostDelay Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumCostDelay(Integer engineConfigPgAutovacuumVacuumCostDelay) {
            return engineConfigPgAutovacuumVacuumCostDelay(Output.of(engineConfigPgAutovacuumVacuumCostDelay));
        }

        /**
         * @param engineConfigPgAutovacuumVacuumCostLimit Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumCostLimit(@Nullable Output<Integer> engineConfigPgAutovacuumVacuumCostLimit) {
            $.engineConfigPgAutovacuumVacuumCostLimit = engineConfigPgAutovacuumVacuumCostLimit;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumVacuumCostLimit Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumCostLimit(Integer engineConfigPgAutovacuumVacuumCostLimit) {
            return engineConfigPgAutovacuumVacuumCostLimit(Output.of(engineConfigPgAutovacuumVacuumCostLimit));
        }

        /**
         * @param engineConfigPgAutovacuumVacuumScaleFactor Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumScaleFactor(@Nullable Output<Double> engineConfigPgAutovacuumVacuumScaleFactor) {
            $.engineConfigPgAutovacuumVacuumScaleFactor = engineConfigPgAutovacuumVacuumScaleFactor;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumVacuumScaleFactor Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumScaleFactor(Double engineConfigPgAutovacuumVacuumScaleFactor) {
            return engineConfigPgAutovacuumVacuumScaleFactor(Output.of(engineConfigPgAutovacuumVacuumScaleFactor));
        }

        /**
         * @param engineConfigPgAutovacuumVacuumThreshold Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumThreshold(@Nullable Output<Integer> engineConfigPgAutovacuumVacuumThreshold) {
            $.engineConfigPgAutovacuumVacuumThreshold = engineConfigPgAutovacuumVacuumThreshold;
            return this;
        }

        /**
         * @param engineConfigPgAutovacuumVacuumThreshold Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgAutovacuumVacuumThreshold(Integer engineConfigPgAutovacuumVacuumThreshold) {
            return engineConfigPgAutovacuumVacuumThreshold(Output.of(engineConfigPgAutovacuumVacuumThreshold));
        }

        /**
         * @param engineConfigPgBgwriterDelay Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterDelay(@Nullable Output<Integer> engineConfigPgBgwriterDelay) {
            $.engineConfigPgBgwriterDelay = engineConfigPgBgwriterDelay;
            return this;
        }

        /**
         * @param engineConfigPgBgwriterDelay Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterDelay(Integer engineConfigPgBgwriterDelay) {
            return engineConfigPgBgwriterDelay(Output.of(engineConfigPgBgwriterDelay));
        }

        /**
         * @param engineConfigPgBgwriterFlushAfter Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterFlushAfter(@Nullable Output<Integer> engineConfigPgBgwriterFlushAfter) {
            $.engineConfigPgBgwriterFlushAfter = engineConfigPgBgwriterFlushAfter;
            return this;
        }

        /**
         * @param engineConfigPgBgwriterFlushAfter Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterFlushAfter(Integer engineConfigPgBgwriterFlushAfter) {
            return engineConfigPgBgwriterFlushAfter(Output.of(engineConfigPgBgwriterFlushAfter));
        }

        /**
         * @param engineConfigPgBgwriterLruMaxpages In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterLruMaxpages(@Nullable Output<Integer> engineConfigPgBgwriterLruMaxpages) {
            $.engineConfigPgBgwriterLruMaxpages = engineConfigPgBgwriterLruMaxpages;
            return this;
        }

        /**
         * @param engineConfigPgBgwriterLruMaxpages In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterLruMaxpages(Integer engineConfigPgBgwriterLruMaxpages) {
            return engineConfigPgBgwriterLruMaxpages(Output.of(engineConfigPgBgwriterLruMaxpages));
        }

        /**
         * @param engineConfigPgBgwriterLruMultiplier The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterLruMultiplier(@Nullable Output<Double> engineConfigPgBgwriterLruMultiplier) {
            $.engineConfigPgBgwriterLruMultiplier = engineConfigPgBgwriterLruMultiplier;
            return this;
        }

        /**
         * @param engineConfigPgBgwriterLruMultiplier The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgBgwriterLruMultiplier(Double engineConfigPgBgwriterLruMultiplier) {
            return engineConfigPgBgwriterLruMultiplier(Output.of(engineConfigPgBgwriterLruMultiplier));
        }

        /**
         * @param engineConfigPgDeadlockTimeout This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgDeadlockTimeout(@Nullable Output<Integer> engineConfigPgDeadlockTimeout) {
            $.engineConfigPgDeadlockTimeout = engineConfigPgDeadlockTimeout;
            return this;
        }

        /**
         * @param engineConfigPgDeadlockTimeout This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgDeadlockTimeout(Integer engineConfigPgDeadlockTimeout) {
            return engineConfigPgDeadlockTimeout(Output.of(engineConfigPgDeadlockTimeout));
        }

        /**
         * @param engineConfigPgDefaultToastCompression Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgDefaultToastCompression(@Nullable Output<String> engineConfigPgDefaultToastCompression) {
            $.engineConfigPgDefaultToastCompression = engineConfigPgDefaultToastCompression;
            return this;
        }

        /**
         * @param engineConfigPgDefaultToastCompression Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgDefaultToastCompression(String engineConfigPgDefaultToastCompression) {
            return engineConfigPgDefaultToastCompression(Output.of(engineConfigPgDefaultToastCompression));
        }

        /**
         * @param engineConfigPgIdleInTransactionSessionTimeout Time out sessions with open transactions after this number of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgIdleInTransactionSessionTimeout(@Nullable Output<Integer> engineConfigPgIdleInTransactionSessionTimeout) {
            $.engineConfigPgIdleInTransactionSessionTimeout = engineConfigPgIdleInTransactionSessionTimeout;
            return this;
        }

        /**
         * @param engineConfigPgIdleInTransactionSessionTimeout Time out sessions with open transactions after this number of milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgIdleInTransactionSessionTimeout(Integer engineConfigPgIdleInTransactionSessionTimeout) {
            return engineConfigPgIdleInTransactionSessionTimeout(Output.of(engineConfigPgIdleInTransactionSessionTimeout));
        }

        /**
         * @param engineConfigPgJit Controls system-wide use of Just-in-Time Compilation (JIT).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgJit(@Nullable Output<Boolean> engineConfigPgJit) {
            $.engineConfigPgJit = engineConfigPgJit;
            return this;
        }

        /**
         * @param engineConfigPgJit Controls system-wide use of Just-in-Time Compilation (JIT).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgJit(Boolean engineConfigPgJit) {
            return engineConfigPgJit(Output.of(engineConfigPgJit));
        }

        /**
         * @param engineConfigPgMaxFilesPerProcess PostgreSQL maximum number of files that can be open per process.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxFilesPerProcess(@Nullable Output<Integer> engineConfigPgMaxFilesPerProcess) {
            $.engineConfigPgMaxFilesPerProcess = engineConfigPgMaxFilesPerProcess;
            return this;
        }

        /**
         * @param engineConfigPgMaxFilesPerProcess PostgreSQL maximum number of files that can be open per process.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxFilesPerProcess(Integer engineConfigPgMaxFilesPerProcess) {
            return engineConfigPgMaxFilesPerProcess(Output.of(engineConfigPgMaxFilesPerProcess));
        }

        /**
         * @param engineConfigPgMaxLocksPerTransaction PostgreSQL maximum locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxLocksPerTransaction(@Nullable Output<Integer> engineConfigPgMaxLocksPerTransaction) {
            $.engineConfigPgMaxLocksPerTransaction = engineConfigPgMaxLocksPerTransaction;
            return this;
        }

        /**
         * @param engineConfigPgMaxLocksPerTransaction PostgreSQL maximum locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxLocksPerTransaction(Integer engineConfigPgMaxLocksPerTransaction) {
            return engineConfigPgMaxLocksPerTransaction(Output.of(engineConfigPgMaxLocksPerTransaction));
        }

        /**
         * @param engineConfigPgMaxLogicalReplicationWorkers PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxLogicalReplicationWorkers(@Nullable Output<Integer> engineConfigPgMaxLogicalReplicationWorkers) {
            $.engineConfigPgMaxLogicalReplicationWorkers = engineConfigPgMaxLogicalReplicationWorkers;
            return this;
        }

        /**
         * @param engineConfigPgMaxLogicalReplicationWorkers PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxLogicalReplicationWorkers(Integer engineConfigPgMaxLogicalReplicationWorkers) {
            return engineConfigPgMaxLogicalReplicationWorkers(Output.of(engineConfigPgMaxLogicalReplicationWorkers));
        }

        /**
         * @param engineConfigPgMaxParallelWorkers Sets the maximum number of workers that the system can support for parallel queries.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxParallelWorkers(@Nullable Output<Integer> engineConfigPgMaxParallelWorkers) {
            $.engineConfigPgMaxParallelWorkers = engineConfigPgMaxParallelWorkers;
            return this;
        }

        /**
         * @param engineConfigPgMaxParallelWorkers Sets the maximum number of workers that the system can support for parallel queries.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxParallelWorkers(Integer engineConfigPgMaxParallelWorkers) {
            return engineConfigPgMaxParallelWorkers(Output.of(engineConfigPgMaxParallelWorkers));
        }

        /**
         * @param engineConfigPgMaxParallelWorkersPerGather Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxParallelWorkersPerGather(@Nullable Output<Integer> engineConfigPgMaxParallelWorkersPerGather) {
            $.engineConfigPgMaxParallelWorkersPerGather = engineConfigPgMaxParallelWorkersPerGather;
            return this;
        }

        /**
         * @param engineConfigPgMaxParallelWorkersPerGather Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxParallelWorkersPerGather(Integer engineConfigPgMaxParallelWorkersPerGather) {
            return engineConfigPgMaxParallelWorkersPerGather(Output.of(engineConfigPgMaxParallelWorkersPerGather));
        }

        /**
         * @param engineConfigPgMaxPredLocksPerTransaction PostgreSQL maximum predicate locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxPredLocksPerTransaction(@Nullable Output<Integer> engineConfigPgMaxPredLocksPerTransaction) {
            $.engineConfigPgMaxPredLocksPerTransaction = engineConfigPgMaxPredLocksPerTransaction;
            return this;
        }

        /**
         * @param engineConfigPgMaxPredLocksPerTransaction PostgreSQL maximum predicate locks per transaction.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxPredLocksPerTransaction(Integer engineConfigPgMaxPredLocksPerTransaction) {
            return engineConfigPgMaxPredLocksPerTransaction(Output.of(engineConfigPgMaxPredLocksPerTransaction));
        }

        /**
         * @param engineConfigPgMaxReplicationSlots PostgreSQL maximum replication slots.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxReplicationSlots(@Nullable Output<Integer> engineConfigPgMaxReplicationSlots) {
            $.engineConfigPgMaxReplicationSlots = engineConfigPgMaxReplicationSlots;
            return this;
        }

        /**
         * @param engineConfigPgMaxReplicationSlots PostgreSQL maximum replication slots.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxReplicationSlots(Integer engineConfigPgMaxReplicationSlots) {
            return engineConfigPgMaxReplicationSlots(Output.of(engineConfigPgMaxReplicationSlots));
        }

        /**
         * @param engineConfigPgMaxSlotWalKeepSize PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxSlotWalKeepSize(@Nullable Output<Integer> engineConfigPgMaxSlotWalKeepSize) {
            $.engineConfigPgMaxSlotWalKeepSize = engineConfigPgMaxSlotWalKeepSize;
            return this;
        }

        /**
         * @param engineConfigPgMaxSlotWalKeepSize PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxSlotWalKeepSize(Integer engineConfigPgMaxSlotWalKeepSize) {
            return engineConfigPgMaxSlotWalKeepSize(Output.of(engineConfigPgMaxSlotWalKeepSize));
        }

        /**
         * @param engineConfigPgMaxStackDepth Maximum depth of the stack in bytes.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxStackDepth(@Nullable Output<Integer> engineConfigPgMaxStackDepth) {
            $.engineConfigPgMaxStackDepth = engineConfigPgMaxStackDepth;
            return this;
        }

        /**
         * @param engineConfigPgMaxStackDepth Maximum depth of the stack in bytes.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxStackDepth(Integer engineConfigPgMaxStackDepth) {
            return engineConfigPgMaxStackDepth(Output.of(engineConfigPgMaxStackDepth));
        }

        /**
         * @param engineConfigPgMaxStandbyArchiveDelay Max standby archive delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxStandbyArchiveDelay(@Nullable Output<Integer> engineConfigPgMaxStandbyArchiveDelay) {
            $.engineConfigPgMaxStandbyArchiveDelay = engineConfigPgMaxStandbyArchiveDelay;
            return this;
        }

        /**
         * @param engineConfigPgMaxStandbyArchiveDelay Max standby archive delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxStandbyArchiveDelay(Integer engineConfigPgMaxStandbyArchiveDelay) {
            return engineConfigPgMaxStandbyArchiveDelay(Output.of(engineConfigPgMaxStandbyArchiveDelay));
        }

        /**
         * @param engineConfigPgMaxStandbyStreamingDelay Max standby streaming delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxStandbyStreamingDelay(@Nullable Output<Integer> engineConfigPgMaxStandbyStreamingDelay) {
            $.engineConfigPgMaxStandbyStreamingDelay = engineConfigPgMaxStandbyStreamingDelay;
            return this;
        }

        /**
         * @param engineConfigPgMaxStandbyStreamingDelay Max standby streaming delay in milliseconds.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxStandbyStreamingDelay(Integer engineConfigPgMaxStandbyStreamingDelay) {
            return engineConfigPgMaxStandbyStreamingDelay(Output.of(engineConfigPgMaxStandbyStreamingDelay));
        }

        /**
         * @param engineConfigPgMaxWalSenders PostgreSQL maximum WAL senders.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxWalSenders(@Nullable Output<Integer> engineConfigPgMaxWalSenders) {
            $.engineConfigPgMaxWalSenders = engineConfigPgMaxWalSenders;
            return this;
        }

        /**
         * @param engineConfigPgMaxWalSenders PostgreSQL maximum WAL senders.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxWalSenders(Integer engineConfigPgMaxWalSenders) {
            return engineConfigPgMaxWalSenders(Output.of(engineConfigPgMaxWalSenders));
        }

        /**
         * @param engineConfigPgMaxWorkerProcesses Sets the maximum number of background processes that the system can support.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxWorkerProcesses(@Nullable Output<Integer> engineConfigPgMaxWorkerProcesses) {
            $.engineConfigPgMaxWorkerProcesses = engineConfigPgMaxWorkerProcesses;
            return this;
        }

        /**
         * @param engineConfigPgMaxWorkerProcesses Sets the maximum number of background processes that the system can support.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgMaxWorkerProcesses(Integer engineConfigPgMaxWorkerProcesses) {
            return engineConfigPgMaxWorkerProcesses(Output.of(engineConfigPgMaxWorkerProcesses));
        }

        /**
         * @param engineConfigPgPasswordEncryption Chooses the algorithm for encrypting passwords. (default `md5`)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPasswordEncryption(@Nullable Output<String> engineConfigPgPasswordEncryption) {
            $.engineConfigPgPasswordEncryption = engineConfigPgPasswordEncryption;
            return this;
        }

        /**
         * @param engineConfigPgPasswordEncryption Chooses the algorithm for encrypting passwords. (default `md5`)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPasswordEncryption(String engineConfigPgPasswordEncryption) {
            return engineConfigPgPasswordEncryption(Output.of(engineConfigPgPasswordEncryption));
        }

        /**
         * @param engineConfigPgPgPartmanBgwInterval Sets the time interval to run pg_partman&#39;s scheduled tasks.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgPartmanBgwInterval(@Nullable Output<Integer> engineConfigPgPgPartmanBgwInterval) {
            $.engineConfigPgPgPartmanBgwInterval = engineConfigPgPgPartmanBgwInterval;
            return this;
        }

        /**
         * @param engineConfigPgPgPartmanBgwInterval Sets the time interval to run pg_partman&#39;s scheduled tasks.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgPartmanBgwInterval(Integer engineConfigPgPgPartmanBgwInterval) {
            return engineConfigPgPgPartmanBgwInterval(Output.of(engineConfigPgPgPartmanBgwInterval));
        }

        /**
         * @param engineConfigPgPgPartmanBgwRole Controls which role to use for pg_partman&#39;s scheduled background tasks.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgPartmanBgwRole(@Nullable Output<String> engineConfigPgPgPartmanBgwRole) {
            $.engineConfigPgPgPartmanBgwRole = engineConfigPgPgPartmanBgwRole;
            return this;
        }

        /**
         * @param engineConfigPgPgPartmanBgwRole Controls which role to use for pg_partman&#39;s scheduled background tasks.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgPartmanBgwRole(String engineConfigPgPgPartmanBgwRole) {
            return engineConfigPgPgPartmanBgwRole(Output.of(engineConfigPgPgPartmanBgwRole));
        }

        /**
         * @param engineConfigPgPgStatMonitorPgsmEnableQueryPlan Enables or disables query plan monitoring.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgStatMonitorPgsmEnableQueryPlan(@Nullable Output<Boolean> engineConfigPgPgStatMonitorPgsmEnableQueryPlan) {
            $.engineConfigPgPgStatMonitorPgsmEnableQueryPlan = engineConfigPgPgStatMonitorPgsmEnableQueryPlan;
            return this;
        }

        /**
         * @param engineConfigPgPgStatMonitorPgsmEnableQueryPlan Enables or disables query plan monitoring.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgStatMonitorPgsmEnableQueryPlan(Boolean engineConfigPgPgStatMonitorPgsmEnableQueryPlan) {
            return engineConfigPgPgStatMonitorPgsmEnableQueryPlan(Output.of(engineConfigPgPgStatMonitorPgsmEnableQueryPlan));
        }

        /**
         * @param engineConfigPgPgStatMonitorPgsmMaxBuckets Sets the maximum number of buckets.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgStatMonitorPgsmMaxBuckets(@Nullable Output<Integer> engineConfigPgPgStatMonitorPgsmMaxBuckets) {
            $.engineConfigPgPgStatMonitorPgsmMaxBuckets = engineConfigPgPgStatMonitorPgsmMaxBuckets;
            return this;
        }

        /**
         * @param engineConfigPgPgStatMonitorPgsmMaxBuckets Sets the maximum number of buckets.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgStatMonitorPgsmMaxBuckets(Integer engineConfigPgPgStatMonitorPgsmMaxBuckets) {
            return engineConfigPgPgStatMonitorPgsmMaxBuckets(Output.of(engineConfigPgPgStatMonitorPgsmMaxBuckets));
        }

        /**
         * @param engineConfigPgPgStatStatementsTrack Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgStatStatementsTrack(@Nullable Output<String> engineConfigPgPgStatStatementsTrack) {
            $.engineConfigPgPgStatStatementsTrack = engineConfigPgPgStatStatementsTrack;
            return this;
        }

        /**
         * @param engineConfigPgPgStatStatementsTrack Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgPgStatStatementsTrack(String engineConfigPgPgStatStatementsTrack) {
            return engineConfigPgPgStatStatementsTrack(Output.of(engineConfigPgPgStatStatementsTrack));
        }

        /**
         * @param engineConfigPgStatMonitorEnable Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pg_stat_statements results for utility commands are unreliable. (default `false`)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgStatMonitorEnable(@Nullable Output<Boolean> engineConfigPgStatMonitorEnable) {
            $.engineConfigPgStatMonitorEnable = engineConfigPgStatMonitorEnable;
            return this;
        }

        /**
         * @param engineConfigPgStatMonitorEnable Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pg_stat_statements results for utility commands are unreliable. (default `false`)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgStatMonitorEnable(Boolean engineConfigPgStatMonitorEnable) {
            return engineConfigPgStatMonitorEnable(Output.of(engineConfigPgStatMonitorEnable));
        }

        /**
         * @param engineConfigPgTempFileLimit PostgreSQL temporary file limit in KiB, -1 for unlimited.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTempFileLimit(@Nullable Output<Integer> engineConfigPgTempFileLimit) {
            $.engineConfigPgTempFileLimit = engineConfigPgTempFileLimit;
            return this;
        }

        /**
         * @param engineConfigPgTempFileLimit PostgreSQL temporary file limit in KiB, -1 for unlimited.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTempFileLimit(Integer engineConfigPgTempFileLimit) {
            return engineConfigPgTempFileLimit(Output.of(engineConfigPgTempFileLimit));
        }

        /**
         * @param engineConfigPgTimezone PostgreSQL service timezone.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTimezone(@Nullable Output<String> engineConfigPgTimezone) {
            $.engineConfigPgTimezone = engineConfigPgTimezone;
            return this;
        }

        /**
         * @param engineConfigPgTimezone PostgreSQL service timezone.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTimezone(String engineConfigPgTimezone) {
            return engineConfigPgTimezone(Output.of(engineConfigPgTimezone));
        }

        /**
         * @param engineConfigPgTrackActivityQuerySize Specifies the number of bytes reserved to track the currently executing command for each active session.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackActivityQuerySize(@Nullable Output<Integer> engineConfigPgTrackActivityQuerySize) {
            $.engineConfigPgTrackActivityQuerySize = engineConfigPgTrackActivityQuerySize;
            return this;
        }

        /**
         * @param engineConfigPgTrackActivityQuerySize Specifies the number of bytes reserved to track the currently executing command for each active session.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackActivityQuerySize(Integer engineConfigPgTrackActivityQuerySize) {
            return engineConfigPgTrackActivityQuerySize(Output.of(engineConfigPgTrackActivityQuerySize));
        }

        /**
         * @param engineConfigPgTrackCommitTimestamp Record commit time of transactions.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackCommitTimestamp(@Nullable Output<String> engineConfigPgTrackCommitTimestamp) {
            $.engineConfigPgTrackCommitTimestamp = engineConfigPgTrackCommitTimestamp;
            return this;
        }

        /**
         * @param engineConfigPgTrackCommitTimestamp Record commit time of transactions.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackCommitTimestamp(String engineConfigPgTrackCommitTimestamp) {
            return engineConfigPgTrackCommitTimestamp(Output.of(engineConfigPgTrackCommitTimestamp));
        }

        /**
         * @param engineConfigPgTrackFunctions Enables tracking of function call counts and time used.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackFunctions(@Nullable Output<String> engineConfigPgTrackFunctions) {
            $.engineConfigPgTrackFunctions = engineConfigPgTrackFunctions;
            return this;
        }

        /**
         * @param engineConfigPgTrackFunctions Enables tracking of function call counts and time used.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackFunctions(String engineConfigPgTrackFunctions) {
            return engineConfigPgTrackFunctions(Output.of(engineConfigPgTrackFunctions));
        }

        /**
         * @param engineConfigPgTrackIoTiming Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackIoTiming(@Nullable Output<String> engineConfigPgTrackIoTiming) {
            $.engineConfigPgTrackIoTiming = engineConfigPgTrackIoTiming;
            return this;
        }

        /**
         * @param engineConfigPgTrackIoTiming Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgTrackIoTiming(String engineConfigPgTrackIoTiming) {
            return engineConfigPgTrackIoTiming(Output.of(engineConfigPgTrackIoTiming));
        }

        /**
         * @param engineConfigPgWalSenderTimeout Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgWalSenderTimeout(@Nullable Output<Integer> engineConfigPgWalSenderTimeout) {
            $.engineConfigPgWalSenderTimeout = engineConfigPgWalSenderTimeout;
            return this;
        }

        /**
         * @param engineConfigPgWalSenderTimeout Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgWalSenderTimeout(Integer engineConfigPgWalSenderTimeout) {
            return engineConfigPgWalSenderTimeout(Output.of(engineConfigPgWalSenderTimeout));
        }

        /**
         * @param engineConfigPgWalWriterDelay WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgWalWriterDelay(@Nullable Output<Integer> engineConfigPgWalWriterDelay) {
            $.engineConfigPgWalWriterDelay = engineConfigPgWalWriterDelay;
            return this;
        }

        /**
         * @param engineConfigPgWalWriterDelay WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPgWalWriterDelay(Integer engineConfigPgWalWriterDelay) {
            return engineConfigPgWalWriterDelay(Output.of(engineConfigPgWalWriterDelay));
        }

        /**
         * @param engineConfigPglookoutMaxFailoverReplicationTimeLag Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPglookoutMaxFailoverReplicationTimeLag(@Nullable Output<Integer> engineConfigPglookoutMaxFailoverReplicationTimeLag) {
            $.engineConfigPglookoutMaxFailoverReplicationTimeLag = engineConfigPglookoutMaxFailoverReplicationTimeLag;
            return this;
        }

        /**
         * @param engineConfigPglookoutMaxFailoverReplicationTimeLag Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
         * 
         * @return builder
         * 
         */
        public Builder engineConfigPglookoutMaxFailoverReplicationTimeLag(Integer engineConfigPglookoutMaxFailoverReplicationTimeLag) {
            return engineConfigPglookoutMaxFailoverReplicationTimeLag(Output.of(engineConfigPglookoutMaxFailoverReplicationTimeLag));
        }

        /**
         * @param engineConfigSharedBuffersPercentage Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigSharedBuffersPercentage(@Nullable Output<Double> engineConfigSharedBuffersPercentage) {
            $.engineConfigSharedBuffersPercentage = engineConfigSharedBuffersPercentage;
            return this;
        }

        /**
         * @param engineConfigSharedBuffersPercentage Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
         * 
         * @return builder
         * 
         */
        public Builder engineConfigSharedBuffersPercentage(Double engineConfigSharedBuffersPercentage) {
            return engineConfigSharedBuffersPercentage(Output.of(engineConfigSharedBuffersPercentage));
        }

        /**
         * @param engineConfigWorkMem Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigWorkMem(@Nullable Output<Integer> engineConfigWorkMem) {
            $.engineConfigWorkMem = engineConfigWorkMem;
            return this;
        }

        /**
         * @param engineConfigWorkMem Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
         * 
         * @return builder
         * 
         */
        public Builder engineConfigWorkMem(Integer engineConfigWorkMem) {
            return engineConfigWorkMem(Output.of(engineConfigWorkMem));
        }

        /**
         * @param engineId The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
         * 
         * @return builder
         * 
         */
        public Builder engineId(@Nullable Output<String> engineId) {
            $.engineId = engineId;
            return this;
        }

        /**
         * @param engineId The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
         * 
         * @return builder
         * 
         */
        public Builder engineId(String engineId) {
            return engineId(Output.of(engineId));
        }

        /**
         * @param forkRestoreTime The database timestamp from which it was restored.
         * 
         * @return builder
         * 
         */
        public Builder forkRestoreTime(@Nullable Output<String> forkRestoreTime) {
            $.forkRestoreTime = forkRestoreTime;
            return this;
        }

        /**
         * @param forkRestoreTime The database timestamp from which it was restored.
         * 
         * @return builder
         * 
         */
        public Builder forkRestoreTime(String forkRestoreTime) {
            return forkRestoreTime(Output.of(forkRestoreTime));
        }

        /**
         * @param forkSource The ID of the database that was forked from.
         * 
         * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder forkSource(@Nullable Output<Integer> forkSource) {
            $.forkSource = forkSource;
            return this;
        }

        /**
         * @param forkSource The ID of the database that was forked from.
         * 
         * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder forkSource(Integer forkSource) {
            return forkSource(Output.of(forkSource));
        }

        /**
         * @param hostPrimary The primary host for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder hostPrimary(@Nullable Output<String> hostPrimary) {
            $.hostPrimary = hostPrimary;
            return this;
        }

        /**
         * @param hostPrimary The primary host for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder hostPrimary(String hostPrimary) {
            return hostPrimary(Output.of(hostPrimary));
        }

        /**
         * @param hostSecondary The secondary/private host for the managed database.
         * 
         * @return builder
         * 
         */
        public Builder hostSecondary(@Nullable Output<String> hostSecondary) {
            $.hostSecondary = hostSecondary;
            return this;
        }

        /**
         * @param hostSecondary The secondary/private host for the managed database.
         * 
         * @return builder
         * 
         */
        public Builder hostSecondary(String hostSecondary) {
            return hostSecondary(Output.of(hostSecondary));
        }

        /**
         * @param label A unique, user-defined string referring to the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label A unique, user-defined string referring to the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param members A mapping between IP addresses and strings designating them as primary or failover.
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<Map<String,String>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members A mapping between IP addresses and strings designating them as primary or failover.
         * 
         * @return builder
         * 
         */
        public Builder members(Map<String,String> members) {
            return members(Output.of(members));
        }

        /**
         * @param oldestRestoreTime The oldest time to which a database can be restored.
         * 
         * @return builder
         * 
         */
        public Builder oldestRestoreTime(@Nullable Output<String> oldestRestoreTime) {
            $.oldestRestoreTime = oldestRestoreTime;
            return this;
        }

        /**
         * @param oldestRestoreTime The oldest time to which a database can be restored.
         * 
         * @return builder
         * 
         */
        public Builder oldestRestoreTime(String oldestRestoreTime) {
            return oldestRestoreTime(Output.of(oldestRestoreTime));
        }

        /**
         * @param pendingUpdates A set of pending updates.
         * 
         * @return builder
         * 
         */
        public Builder pendingUpdates(@Nullable Output<List<DatabasePostgresqlV2PendingUpdateArgs>> pendingUpdates) {
            $.pendingUpdates = pendingUpdates;
            return this;
        }

        /**
         * @param pendingUpdates A set of pending updates.
         * 
         * @return builder
         * 
         */
        public Builder pendingUpdates(List<DatabasePostgresqlV2PendingUpdateArgs> pendingUpdates) {
            return pendingUpdates(Output.of(pendingUpdates));
        }

        /**
         * @param pendingUpdates A set of pending updates.
         * 
         * @return builder
         * 
         */
        public Builder pendingUpdates(DatabasePostgresqlV2PendingUpdateArgs... pendingUpdates) {
            return pendingUpdates(List.of(pendingUpdates));
        }

        /**
         * @param platform The back-end platform for relational databases used by the service.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The back-end platform for relational databases used by the service.
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param port The access port for this Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The access port for this Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param region The region to use for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region to use for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param rootPassword The randomly-generated root password for the Managed Database instance.
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        /**
         * @param rootPassword The randomly-generated root password for the Managed Database instance.
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        /**
         * @param rootUsername The root username for the Managed Database instance.
         * 
         * @return builder
         * 
         */
        public Builder rootUsername(@Nullable Output<String> rootUsername) {
            $.rootUsername = rootUsername;
            return this;
        }

        /**
         * @param rootUsername The root username for the Managed Database instance.
         * 
         * @return builder
         * 
         */
        public Builder rootUsername(String rootUsername) {
            return rootUsername(Output.of(rootUsername));
        }

        /**
         * @param sslConnection Whether to require SSL credentials to establish a connection to the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder sslConnection(@Nullable Output<Boolean> sslConnection) {
            $.sslConnection = sslConnection;
            return this;
        }

        /**
         * @param sslConnection Whether to require SSL credentials to establish a connection to the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder sslConnection(Boolean sslConnection) {
            return sslConnection(Output.of(sslConnection));
        }

        /**
         * @param status The operating status of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The operating status of the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param suspended Whether this Managed Database should be suspended.
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended Whether this Managed Database should be suspended.
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        public Builder timeouts(@Nullable Output<DatabasePostgresqlV2TimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(DatabasePostgresqlV2TimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        /**
         * @param type The Linode Instance type used for the nodes of the Managed Database.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Linode Instance type used for the nodes of the Managed Database.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updated When this Managed Database was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated When this Managed Database was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        /**
         * @param updates Configuration settings for automated patch update maintenance for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder updates(@Nullable Output<DatabasePostgresqlV2UpdatesArgs> updates) {
            $.updates = updates;
            return this;
        }

        /**
         * @param updates Configuration settings for automated patch update maintenance for the Managed Database.
         * 
         * @return builder
         * 
         */
        public Builder updates(DatabasePostgresqlV2UpdatesArgs updates) {
            return updates(Output.of(updates));
        }

        /**
         * @param version The Managed Database engine version. (e.g. `13.2`)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The Managed Database engine version. (e.g. `13.2`)
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DatabasePostgresqlV2State build() {
            return $;
        }
    }

}
