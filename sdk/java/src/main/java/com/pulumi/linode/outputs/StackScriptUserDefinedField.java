// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class StackScriptUserDefinedField {
    /**
     * @return The default value. If not specified, this value will be used.
     * 
     */
    private String default_;
    /**
     * @return An example value for the field.
     * 
     */
    private String example;
    /**
     * @return The StackScript&#39;s label is for display purposes only.
     * 
     */
    private String label;
    /**
     * @return A list of acceptable values for the field in any quantity, combination or order.
     * 
     */
    private String manyOf;
    /**
     * @return The name of the field.
     * 
     */
    private String name;
    /**
     * @return A list of acceptable single values for the field.
     * 
     */
    private String oneOf;

    private StackScriptUserDefinedField() {}
    /**
     * @return The default value. If not specified, this value will be used.
     * 
     */
    public String default_() {
        return this.default_;
    }
    /**
     * @return An example value for the field.
     * 
     */
    public String example() {
        return this.example;
    }
    /**
     * @return The StackScript&#39;s label is for display purposes only.
     * 
     */
    public String label() {
        return this.label;
    }
    /**
     * @return A list of acceptable values for the field in any quantity, combination or order.
     * 
     */
    public String manyOf() {
        return this.manyOf;
    }
    /**
     * @return The name of the field.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of acceptable single values for the field.
     * 
     */
    public String oneOf() {
        return this.oneOf;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StackScriptUserDefinedField defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String default_;
        private String example;
        private String label;
        private String manyOf;
        private String name;
        private String oneOf;
        public Builder() {}
        public Builder(StackScriptUserDefinedField defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.default_ = defaults.default_;
    	      this.example = defaults.example;
    	      this.label = defaults.label;
    	      this.manyOf = defaults.manyOf;
    	      this.name = defaults.name;
    	      this.oneOf = defaults.oneOf;
        }

        @CustomType.Setter("default")
        public Builder default_(String default_) {
            this.default_ = Objects.requireNonNull(default_);
            return this;
        }
        @CustomType.Setter
        public Builder example(String example) {
            this.example = Objects.requireNonNull(example);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder manyOf(String manyOf) {
            this.manyOf = Objects.requireNonNull(manyOf);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder oneOf(String oneOf) {
            this.oneOf = Objects.requireNonNull(oneOf);
            return this;
        }
        public StackScriptUserDefinedField build() {
            final var o = new StackScriptUserDefinedField();
            o.default_ = default_;
            o.example = example;
            o.label = label;
            o.manyOf = manyOf;
            o.name = name;
            o.oneOf = oneOf;
            return o;
        }
    }
}
