// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAccountLoginsLogin {
    /**
     * @return When the login was initiated.
     * 
     */
    private String datetime;
    /**
     * @return The unique ID of this login object.
     * 
     */
    private Integer id;
    /**
     * @return The remote IP address that requested the login.
     * 
     */
    private String ip;
    /**
     * @return True if the User that was logged into was a restricted User, false otherwise.
     * 
     */
    private Boolean restricted;
    /**
     * @return Whether the login attempt succeeded or failed.
     * 
     */
    private String status;
    /**
     * @return The username of the User that was logged into.
     * 
     */
    private String username;

    private GetAccountLoginsLogin() {}
    /**
     * @return When the login was initiated.
     * 
     */
    public String datetime() {
        return this.datetime;
    }
    /**
     * @return The unique ID of this login object.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The remote IP address that requested the login.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return True if the User that was logged into was a restricted User, false otherwise.
     * 
     */
    public Boolean restricted() {
        return this.restricted;
    }
    /**
     * @return Whether the login attempt succeeded or failed.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The username of the User that was logged into.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountLoginsLogin defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String datetime;
        private Integer id;
        private String ip;
        private Boolean restricted;
        private String status;
        private String username;
        public Builder() {}
        public Builder(GetAccountLoginsLogin defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datetime = defaults.datetime;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.restricted = defaults.restricted;
    	      this.status = defaults.status;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder datetime(String datetime) {
            if (datetime == null) {
              throw new MissingRequiredPropertyException("GetAccountLoginsLogin", "datetime");
            }
            this.datetime = datetime;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccountLoginsLogin", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetAccountLoginsLogin", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder restricted(Boolean restricted) {
            if (restricted == null) {
              throw new MissingRequiredPropertyException("GetAccountLoginsLogin", "restricted");
            }
            this.restricted = restricted;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAccountLoginsLogin", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetAccountLoginsLogin", "username");
            }
            this.username = username;
            return this;
        }
        public GetAccountLoginsLogin build() {
            final var _resultValue = new GetAccountLoginsLogin();
            _resultValue.datetime = datetime;
            _resultValue.id = id;
            _resultValue.ip = ip;
            _resultValue.restricted = restricted;
            _resultValue.status = status;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
