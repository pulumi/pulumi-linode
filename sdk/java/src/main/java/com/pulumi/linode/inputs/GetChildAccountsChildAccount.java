// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetChildAccountsChildAccount extends com.pulumi.resources.InvokeArgs {

    public static final GetChildAccountsChildAccount Empty = new GetChildAccountsChildAccount();

    /**
     * When this account was first activated
     * 
     */
    @Import(name="activeSince", required=true)
    private String activeSince;

    /**
     * @return When this account was first activated
     * 
     */
    public String activeSince() {
        return this.activeSince;
    }

    /**
     * First line of this Account&#39;s billing address.
     * 
     */
    @Import(name="address1", required=true)
    private String address1;

    /**
     * @return First line of this Account&#39;s billing address.
     * 
     */
    public String address1() {
        return this.address1;
    }

    /**
     * Second line of this Account&#39;s billing address.
     * 
     */
    @Import(name="address2", required=true)
    private String address2;

    /**
     * @return Second line of this Account&#39;s billing address.
     * 
     */
    public String address2() {
        return this.address2;
    }

    /**
     * This Account&#39;s balance, in US dollars.
     * 
     */
    @Import(name="balance", required=true)
    private Double balance;

    /**
     * @return This Account&#39;s balance, in US dollars.
     * 
     */
    public Double balance() {
        return this.balance;
    }

    /**
     * A set containing all the capabilities of this Account.
     * 
     */
    @Import(name="capabilities", required=true)
    private List<String> capabilities;

    /**
     * @return A set containing all the capabilities of this Account.
     * 
     */
    public List<String> capabilities() {
        return this.capabilities;
    }

    /**
     * The city for this Account&#39;s billing address.
     * 
     */
    @Import(name="city", required=true)
    private String city;

    /**
     * @return The city for this Account&#39;s billing address.
     * 
     */
    public String city() {
        return this.city;
    }

    /**
     * The company name associated with this Account.
     * 
     */
    @Import(name="company", required=true)
    private String company;

    /**
     * @return The company name associated with this Account.
     * 
     */
    public String company() {
        return this.company;
    }

    /**
     * The two-letter country code of this Account&#39;s billing address.
     * 
     */
    @Import(name="country", required=true)
    private String country;

    /**
     * @return The two-letter country code of this Account&#39;s billing address.
     * 
     */
    public String country() {
        return this.country;
    }

    /**
     * The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     */
    @Import(name="email", required=true)
    private String email;

    /**
     * @return The email address for this Account, for account management communications, and may be used for other communications as configured.
     * 
     */
    public String email() {
        return this.email;
    }

    /**
     * The unique ID of this Account.
     * 
     */
    @Import(name="euuid", required=true)
    private String euuid;

    /**
     * @return The unique ID of this Account.
     * 
     */
    public String euuid() {
        return this.euuid;
    }

    /**
     * The first name of the person associated with this Account.
     * 
     */
    @Import(name="firstName", required=true)
    private String firstName;

    /**
     * @return The first name of the person associated with this Account.
     * 
     */
    public String firstName() {
        return this.firstName;
    }

    /**
     * The Email of the Account.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The Email of the Account.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The last name of the person associated with this Account.
     * 
     */
    @Import(name="lastName", required=true)
    private String lastName;

    /**
     * @return The last name of the person associated with this Account.
     * 
     */
    public String lastName() {
        return this.lastName;
    }

    /**
     * The phone number associated with this Account.
     * 
     */
    @Import(name="phone", required=true)
    private String phone;

    /**
     * @return The phone number associated with this Account.
     * 
     */
    public String phone() {
        return this.phone;
    }

    /**
     * If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * The zip code of this Account&#39;s billing address.
     * 
     */
    @Import(name="zip", required=true)
    private String zip;

    /**
     * @return The zip code of this Account&#39;s billing address.
     * 
     */
    public String zip() {
        return this.zip;
    }

    private GetChildAccountsChildAccount() {}

    private GetChildAccountsChildAccount(GetChildAccountsChildAccount $) {
        this.activeSince = $.activeSince;
        this.address1 = $.address1;
        this.address2 = $.address2;
        this.balance = $.balance;
        this.capabilities = $.capabilities;
        this.city = $.city;
        this.company = $.company;
        this.country = $.country;
        this.email = $.email;
        this.euuid = $.euuid;
        this.firstName = $.firstName;
        this.id = $.id;
        this.lastName = $.lastName;
        this.phone = $.phone;
        this.state = $.state;
        this.zip = $.zip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetChildAccountsChildAccount defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetChildAccountsChildAccount $;

        public Builder() {
            $ = new GetChildAccountsChildAccount();
        }

        public Builder(GetChildAccountsChildAccount defaults) {
            $ = new GetChildAccountsChildAccount(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeSince When this account was first activated
         * 
         * @return builder
         * 
         */
        public Builder activeSince(String activeSince) {
            $.activeSince = activeSince;
            return this;
        }

        /**
         * @param address1 First line of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder address1(String address1) {
            $.address1 = address1;
            return this;
        }

        /**
         * @param address2 Second line of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder address2(String address2) {
            $.address2 = address2;
            return this;
        }

        /**
         * @param balance This Account&#39;s balance, in US dollars.
         * 
         * @return builder
         * 
         */
        public Builder balance(Double balance) {
            $.balance = balance;
            return this;
        }

        /**
         * @param capabilities A set containing all the capabilities of this Account.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities A set containing all the capabilities of this Account.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param city The city for this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder city(String city) {
            $.city = city;
            return this;
        }

        /**
         * @param company The company name associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder company(String company) {
            $.company = company;
            return this;
        }

        /**
         * @param country The two-letter country code of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            $.country = country;
            return this;
        }

        /**
         * @param email The email address for this Account, for account management communications, and may be used for other communications as configured.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            $.email = email;
            return this;
        }

        /**
         * @param euuid The unique ID of this Account.
         * 
         * @return builder
         * 
         */
        public Builder euuid(String euuid) {
            $.euuid = euuid;
            return this;
        }

        /**
         * @param firstName The first name of the person associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param id The Email of the Account.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param lastName The last name of the person associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param phone The phone number associated with this Account.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param state If billing address is in the United States, this is the State portion of the Account&#39;s billing address. If the address is outside the US, this is the Province associated with the Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param zip The zip code of this Account&#39;s billing address.
         * 
         * @return builder
         * 
         */
        public Builder zip(String zip) {
            $.zip = zip;
            return this;
        }

        public GetChildAccountsChildAccount build() {
            if ($.activeSince == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "activeSince");
            }
            if ($.address1 == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "address1");
            }
            if ($.address2 == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "address2");
            }
            if ($.balance == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "balance");
            }
            if ($.capabilities == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "capabilities");
            }
            if ($.city == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "city");
            }
            if ($.company == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "company");
            }
            if ($.country == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "country");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "email");
            }
            if ($.euuid == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "euuid");
            }
            if ($.firstName == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "firstName");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "id");
            }
            if ($.lastName == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "lastName");
            }
            if ($.phone == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "phone");
            }
            if ($.state == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "state");
            }
            if ($.zip == null) {
                throw new MissingRequiredPropertyException("GetChildAccountsChildAccount", "zip");
            }
            return $;
        }
    }

}
