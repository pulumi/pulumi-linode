// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.linode.DatabaseMysqlV2Args;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.DatabaseMysqlV2State;
import com.pulumi.linode.outputs.DatabaseMysqlV2PendingUpdate;
import com.pulumi.linode.outputs.DatabaseMysqlV2Timeouts;
import com.pulumi.linode.outputs.DatabaseMysqlV2Updates;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instances).
 * 
 * Please keep in mind that Managed Databases can take up to half an hour to provision.
 * 
 * ## Example Usage
 * 
 * Creating a simple MySQL database that does not allow connections:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabaseMysqlV2;
 * import com.pulumi.linode.DatabaseMysqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabaseMysqlV2("foobar", DatabaseMysqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("mysql/8")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a simple MySQL database that allows connections from all IPv4 addresses:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabaseMysqlV2;
 * import com.pulumi.linode.DatabaseMysqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabaseMysqlV2("foobar", DatabaseMysqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("mysql/8")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .allowLists("0.0.0.0/0")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a complex MySQL database:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a MySQL database with engine config fields specified:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabaseMysqlV2;
 * import com.pulumi.linode.DatabaseMysqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabaseMysqlV2("foobar", DatabaseMysqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("mysql/8")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .engineConfigBinlogRetentionPeriod(3600)
 *             .engineConfigMysqlConnectTimeout(10)
 *             .engineConfigMysqlDefaultTimeZone("+00:00")
 *             .engineConfigMysqlGroupConcatMaxLen(4096.0)
 *             .engineConfigMysqlInformationSchemaStatsExpiry(3600)
 *             .engineConfigMysqlInnodbChangeBufferMaxSize(25)
 *             .engineConfigMysqlInnodbFlushNeighbors(0)
 *             .engineConfigMysqlInnodbFtMinTokenSize(7)
 *             .engineConfigMysqlInnodbFtServerStopwordTable("mysql/innodb_ft_default_stopword")
 *             .engineConfigMysqlInnodbLockWaitTimeout(300)
 *             .engineConfigMysqlInnodbLogBufferSize(16777216)
 *             .engineConfigMysqlInnodbOnlineAlterLogMaxSize(268435456)
 *             .engineConfigMysqlInnodbReadIoThreads(4)
 *             .engineConfigMysqlInnodbRollbackOnTimeout(true)
 *             .engineConfigMysqlInnodbThreadConcurrency(8)
 *             .engineConfigMysqlInnodbWriteIoThreads(4)
 *             .engineConfigMysqlInteractiveTimeout(300)
 *             .engineConfigMysqlInternalTmpMemStorageEngine("TempTable")
 *             .engineConfigMysqlMaxAllowedPacket(67108864)
 *             .engineConfigMysqlMaxHeapTableSize(16777216)
 *             .engineConfigMysqlNetBufferLength(16384)
 *             .engineConfigMysqlNetReadTimeout(30)
 *             .engineConfigMysqlNetWriteTimeout(30)
 *             .engineConfigMysqlSortBufferSize(262144)
 *             .engineConfigMysqlSqlMode("TRADITIONAL,ANSI")
 *             .engineConfigMysqlSqlRequirePrimaryKey(false)
 *             .engineConfigMysqlTmpTableSize(16777216)
 *             .engineConfigMysqlWaitTimeout(28800)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating a forked MySQL database:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.DatabaseMysqlV2;
 * import com.pulumi.linode.DatabaseMysqlV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobar = new DatabaseMysqlV2("foobar", DatabaseMysqlV2Args.builder()
 *             .label("mydatabase")
 *             .engineId("mysql/8")
 *             .region("us-mia")
 *             .type("g6-nanode-1")
 *             .forkSource(12345)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &gt; **_NOTE:_** The name of the default database in the returned database cluster is `defaultdb`.
 * 
 * ## pending_updates
 * 
 * The following arguments are exposed by each entry in the `pending_updates` attribute:
 * 
 * * `deadline` - The time when a mandatory update needs to be applied.
 * 
 * * `description` - A description of the update.
 * 
 * * `planned_for` - The date and time a maintenance update will be applied.
 * 
 * ## updates
 * 
 * The following arguments are supported in the `updates` specification block:
 * 
 * * `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)
 * 
 * * `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)
 * 
 * * `frequency` - (Required) The frequency at which maintenance occurs. (`weekly`)
 * 
 * * `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)
 * 
 * ## Import
 * 
 * Linode MySQL Databases can be imported using the `id`, e.g.
 * 
 * ```sh
 * $ pulumi import linode:index/databaseMysqlV2:DatabaseMysqlV2 foobar 1234567
 * ```
 * 
 */
@ResourceType(type="linode:index/databaseMysqlV2:DatabaseMysqlV2")
public class DatabaseMysqlV2 extends com.pulumi.resources.CustomResource {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    @Export(name="allowLists", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowLists;

    /**
     * @return A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     * 
     */
    public Output<List<String>> allowLists() {
        return this.allowLists;
    }
    /**
     * The base64-encoded SSL CA certificate for the Managed Database.
     * 
     */
    @Export(name="caCert", refs={String.class}, tree="[0]")
    private Output<String> caCert;

    /**
     * @return The base64-encoded SSL CA certificate for the Managed Database.
     * 
     */
    public Output<String> caCert() {
        return this.caCert;
    }
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    @Export(name="clusterSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> clusterSize;

    /**
     * @return The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     * 
     */
    public Output<Integer> clusterSize() {
        return this.clusterSize;
    }
    /**
     * When this Managed Database was created.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return When this Managed Database was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Whether the Managed Databases is encrypted.
     * 
     */
    @Export(name="encrypted", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> encrypted;

    /**
     * @return Whether the Managed Databases is encrypted.
     * 
     */
    public Output<Boolean> encrypted() {
        return this.encrypted;
    }
    /**
     * The Managed Database engine. (e.g. `mysql`)
     * 
     */
    @Export(name="engine", refs={String.class}, tree="[0]")
    private Output<String> engine;

    /**
     * @return The Managed Database engine. (e.g. `mysql`)
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }
    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     * 
     */
    @Export(name="engineConfigBinlogRetentionPeriod", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigBinlogRetentionPeriod;

    /**
     * @return The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     * 
     */
    public Output<Integer> engineConfigBinlogRetentionPeriod() {
        return this.engineConfigBinlogRetentionPeriod;
    }
    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with &#34;Bad handshake&#34;.
     * 
     */
    @Export(name="engineConfigMysqlConnectTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlConnectTimeout;

    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with &#34;Bad handshake&#34;.
     * 
     */
    public Output<Integer> engineConfigMysqlConnectTimeout() {
        return this.engineConfigMysqlConnectTimeout;
    }
    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
     * 
     */
    @Export(name="engineConfigMysqlDefaultTimeZone", refs={String.class}, tree="[0]")
    private Output<String> engineConfigMysqlDefaultTimeZone;

    /**
     * @return Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
     * 
     */
    public Output<String> engineConfigMysqlDefaultTimeZone() {
        return this.engineConfigMysqlDefaultTimeZone;
    }
    /**
     * The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
     * 
     */
    @Export(name="engineConfigMysqlGroupConcatMaxLen", refs={Double.class}, tree="[0]")
    private Output<Double> engineConfigMysqlGroupConcatMaxLen;

    /**
     * @return The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
     * 
     */
    public Output<Double> engineConfigMysqlGroupConcatMaxLen() {
        return this.engineConfigMysqlGroupConcatMaxLen;
    }
    /**
     * The time, in seconds, before cached statistics expire.
     * 
     */
    @Export(name="engineConfigMysqlInformationSchemaStatsExpiry", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInformationSchemaStatsExpiry;

    /**
     * @return The time, in seconds, before cached statistics expire.
     * 
     */
    public Output<Integer> engineConfigMysqlInformationSchemaStatsExpiry() {
        return this.engineConfigMysqlInformationSchemaStatsExpiry;
    }
    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
     * 
     */
    @Export(name="engineConfigMysqlInnodbChangeBufferMaxSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbChangeBufferMaxSize;

    /**
     * @return Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbChangeBufferMaxSize() {
        return this.engineConfigMysqlInnodbChangeBufferMaxSize;
    }
    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
     * 
     */
    @Export(name="engineConfigMysqlInnodbFlushNeighbors", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbFlushNeighbors;

    /**
     * @return Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbFlushNeighbors() {
        return this.engineConfigMysqlInnodbFlushNeighbors;
    }
    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Export(name="engineConfigMysqlInnodbFtMinTokenSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbFtMinTokenSize;

    /**
     * @return Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbFtMinTokenSize() {
        return this.engineConfigMysqlInnodbFtMinTokenSize;
    }
    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
     * 
     */
    @Export(name="engineConfigMysqlInnodbFtServerStopwordTable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> engineConfigMysqlInnodbFtServerStopwordTable;

    /**
     * @return This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
     * 
     */
    public Output<Optional<String>> engineConfigMysqlInnodbFtServerStopwordTable() {
        return Codegen.optional(this.engineConfigMysqlInnodbFtServerStopwordTable);
    }
    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     * 
     */
    @Export(name="engineConfigMysqlInnodbLockWaitTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbLockWaitTimeout;

    /**
     * @return The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbLockWaitTimeout() {
        return this.engineConfigMysqlInnodbLockWaitTimeout;
    }
    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * 
     */
    @Export(name="engineConfigMysqlInnodbLogBufferSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbLogBufferSize;

    /**
     * @return The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbLogBufferSize() {
        return this.engineConfigMysqlInnodbLogBufferSize;
    }
    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    @Export(name="engineConfigMysqlInnodbOnlineAlterLogMaxSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbOnlineAlterLogMaxSize;

    /**
     * @return The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbOnlineAlterLogMaxSize() {
        return this.engineConfigMysqlInnodbOnlineAlterLogMaxSize;
    }
    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Export(name="engineConfigMysqlInnodbReadIoThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbReadIoThreads;

    /**
     * @return The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbReadIoThreads() {
        return this.engineConfigMysqlInnodbReadIoThreads;
    }
    /**
     * When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Export(name="engineConfigMysqlInnodbRollbackOnTimeout", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> engineConfigMysqlInnodbRollbackOnTimeout;

    /**
     * @return When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Output<Boolean> engineConfigMysqlInnodbRollbackOnTimeout() {
        return this.engineConfigMysqlInnodbRollbackOnTimeout;
    }
    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
     * 
     */
    @Export(name="engineConfigMysqlInnodbThreadConcurrency", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbThreadConcurrency;

    /**
     * @return Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbThreadConcurrency() {
        return this.engineConfigMysqlInnodbThreadConcurrency;
    }
    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Export(name="engineConfigMysqlInnodbWriteIoThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInnodbWriteIoThreads;

    /**
     * @return The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Output<Integer> engineConfigMysqlInnodbWriteIoThreads() {
        return this.engineConfigMysqlInnodbWriteIoThreads;
    }
    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    @Export(name="engineConfigMysqlInteractiveTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlInteractiveTimeout;

    /**
     * @return The number of seconds the server waits for activity on an interactive connection before closing it.
     * 
     */
    public Output<Integer> engineConfigMysqlInteractiveTimeout() {
        return this.engineConfigMysqlInteractiveTimeout;
    }
    /**
     * The storage engine for in-memory internal temporary tables.
     * 
     */
    @Export(name="engineConfigMysqlInternalTmpMemStorageEngine", refs={String.class}, tree="[0]")
    private Output<String> engineConfigMysqlInternalTmpMemStorageEngine;

    /**
     * @return The storage engine for in-memory internal temporary tables.
     * 
     */
    public Output<String> engineConfigMysqlInternalTmpMemStorageEngine() {
        return this.engineConfigMysqlInternalTmpMemStorageEngine;
    }
    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
     * 
     */
    @Export(name="engineConfigMysqlMaxAllowedPacket", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlMaxAllowedPacket;

    /**
     * @return Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
     * 
     */
    public Output<Integer> engineConfigMysqlMaxAllowedPacket() {
        return this.engineConfigMysqlMaxAllowedPacket;
    }
    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
     * 
     */
    @Export(name="engineConfigMysqlMaxHeapTableSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlMaxHeapTableSize;

    /**
     * @return Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
     * 
     */
    public Output<Integer> engineConfigMysqlMaxHeapTableSize() {
        return this.engineConfigMysqlMaxHeapTableSize;
    }
    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    @Export(name="engineConfigMysqlNetBufferLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlNetBufferLength;

    /**
     * @return Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     * 
     */
    public Output<Integer> engineConfigMysqlNetBufferLength() {
        return this.engineConfigMysqlNetBufferLength;
    }
    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    @Export(name="engineConfigMysqlNetReadTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlNetReadTimeout;

    /**
     * @return The number of seconds to wait for more data from a connection before aborting the read.
     * 
     */
    public Output<Integer> engineConfigMysqlNetReadTimeout() {
        return this.engineConfigMysqlNetReadTimeout;
    }
    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    @Export(name="engineConfigMysqlNetWriteTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlNetWriteTimeout;

    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    public Output<Integer> engineConfigMysqlNetWriteTimeout() {
        return this.engineConfigMysqlNetWriteTimeout;
    }
    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
     * 
     */
    @Export(name="engineConfigMysqlSortBufferSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlSortBufferSize;

    /**
     * @return Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
     * 
     */
    public Output<Integer> engineConfigMysqlSortBufferSize() {
        return this.engineConfigMysqlSortBufferSize;
    }
    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
     * 
     */
    @Export(name="engineConfigMysqlSqlMode", refs={String.class}, tree="[0]")
    private Output<String> engineConfigMysqlSqlMode;

    /**
     * @return Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
     * 
     */
    public Output<String> engineConfigMysqlSqlMode() {
        return this.engineConfigMysqlSqlMode;
    }
    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
     * 
     */
    @Export(name="engineConfigMysqlSqlRequirePrimaryKey", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> engineConfigMysqlSqlRequirePrimaryKey;

    /**
     * @return Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
     * 
     */
    public Output<Boolean> engineConfigMysqlSqlRequirePrimaryKey() {
        return this.engineConfigMysqlSqlRequirePrimaryKey;
    }
    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
     * 
     */
    @Export(name="engineConfigMysqlTmpTableSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlTmpTableSize;

    /**
     * @return Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
     * 
     */
    public Output<Integer> engineConfigMysqlTmpTableSize() {
        return this.engineConfigMysqlTmpTableSize;
    }
    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    @Export(name="engineConfigMysqlWaitTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> engineConfigMysqlWaitTimeout;

    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    public Output<Integer> engineConfigMysqlWaitTimeout() {
        return this.engineConfigMysqlWaitTimeout;
    }
    /**
     * The Managed Database engine in engine/version format. (e.g. `mysql`)
     * 
     */
    @Export(name="engineId", refs={String.class}, tree="[0]")
    private Output<String> engineId;

    /**
     * @return The Managed Database engine in engine/version format. (e.g. `mysql`)
     * 
     */
    public Output<String> engineId() {
        return this.engineId;
    }
    /**
     * The database timestamp from which it was restored.
     * 
     */
    @Export(name="forkRestoreTime", refs={String.class}, tree="[0]")
    private Output<String> forkRestoreTime;

    /**
     * @return The database timestamp from which it was restored.
     * 
     */
    public Output<String> forkRestoreTime() {
        return this.forkRestoreTime;
    }
    /**
     * The ID of the database that was forked from.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Export(name="forkSource", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> forkSource;

    /**
     * @return The ID of the database that was forked from.
     * 
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Output<Optional<Integer>> forkSource() {
        return Codegen.optional(this.forkSource);
    }
    /**
     * The primary host for the Managed Database.
     * 
     */
    @Export(name="hostPrimary", refs={String.class}, tree="[0]")
    private Output<String> hostPrimary;

    /**
     * @return The primary host for the Managed Database.
     * 
     */
    public Output<String> hostPrimary() {
        return this.hostPrimary;
    }
    /**
     * The secondary/private host for the managed database.
     * 
     */
    @Export(name="hostSecondary", refs={String.class}, tree="[0]")
    private Output<String> hostSecondary;

    /**
     * @return The secondary/private host for the managed database.
     * 
     */
    public Output<String> hostSecondary() {
        return this.hostSecondary;
    }
    /**
     * A unique, user-defined string referring to the Managed Database.
     * 
     */
    @Export(name="label", refs={String.class}, tree="[0]")
    private Output<String> label;

    /**
     * @return A unique, user-defined string referring to the Managed Database.
     * 
     */
    public Output<String> label() {
        return this.label;
    }
    /**
     * A mapping between IP addresses and strings designating them as primary or failover.
     * 
     */
    @Export(name="members", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> members;

    /**
     * @return A mapping between IP addresses and strings designating them as primary or failover.
     * 
     */
    public Output<Map<String,String>> members() {
        return this.members;
    }
    /**
     * The oldest time to which a database can be restored.
     * 
     */
    @Export(name="oldestRestoreTime", refs={String.class}, tree="[0]")
    private Output<String> oldestRestoreTime;

    /**
     * @return The oldest time to which a database can be restored.
     * 
     */
    public Output<String> oldestRestoreTime() {
        return this.oldestRestoreTime;
    }
    /**
     * A set of pending updates.
     * 
     */
    @Export(name="pendingUpdates", refs={List.class,DatabaseMysqlV2PendingUpdate.class}, tree="[0,1]")
    private Output<List<DatabaseMysqlV2PendingUpdate>> pendingUpdates;

    /**
     * @return A set of pending updates.
     * 
     */
    public Output<List<DatabaseMysqlV2PendingUpdate>> pendingUpdates() {
        return this.pendingUpdates;
    }
    /**
     * The back-end platform for relational databases used by the service.
     * 
     */
    @Export(name="platform", refs={String.class}, tree="[0]")
    private Output<String> platform;

    /**
     * @return The back-end platform for relational databases used by the service.
     * 
     */
    public Output<String> platform() {
        return this.platform;
    }
    /**
     * The access port for this Managed Database.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return The access port for this Managed Database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * The region to use for the Managed Database.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region to use for the Managed Database.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The randomly-generated root password for the Managed Database instance.
     * 
     */
    @Export(name="rootPassword", refs={String.class}, tree="[0]")
    private Output<String> rootPassword;

    /**
     * @return The randomly-generated root password for the Managed Database instance.
     * 
     */
    public Output<String> rootPassword() {
        return this.rootPassword;
    }
    /**
     * The root username for the Managed Database instance.
     * 
     */
    @Export(name="rootUsername", refs={String.class}, tree="[0]")
    private Output<String> rootUsername;

    /**
     * @return The root username for the Managed Database instance.
     * 
     */
    public Output<String> rootUsername() {
        return this.rootUsername;
    }
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     */
    @Export(name="sslConnection", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> sslConnection;

    /**
     * @return Whether to require SSL credentials to establish a connection to the Managed Database.
     * 
     */
    public Output<Boolean> sslConnection() {
        return this.sslConnection;
    }
    /**
     * The operating status of the Managed Database.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The operating status of the Managed Database.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Whether this Managed Database should be suspended.
     * 
     */
    @Export(name="suspended", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> suspended;

    /**
     * @return Whether this Managed Database should be suspended.
     * 
     */
    public Output<Boolean> suspended() {
        return this.suspended;
    }
    @Export(name="timeouts", refs={DatabaseMysqlV2Timeouts.class}, tree="[0]")
    private Output</* @Nullable */ DatabaseMysqlV2Timeouts> timeouts;

    public Output<Optional<DatabaseMysqlV2Timeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     * 
     * ***
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The Linode Instance type used for the nodes of the Managed Database.
     * 
     * ***
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * When this Managed Database was last updated.
     * 
     */
    @Export(name="updated", refs={String.class}, tree="[0]")
    private Output<String> updated;

    /**
     * @return When this Managed Database was last updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }
    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    @Export(name="updates", refs={DatabaseMysqlV2Updates.class}, tree="[0]")
    private Output<DatabaseMysqlV2Updates> updates;

    /**
     * @return Configuration settings for automated patch update maintenance for the Managed Database.
     * 
     */
    public Output<DatabaseMysqlV2Updates> updates() {
        return this.updates;
    }
    /**
     * The Managed Database engine version. (e.g. `13.2`)
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The Managed Database engine version. (e.g. `13.2`)
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseMysqlV2(java.lang.String name) {
        this(name, DatabaseMysqlV2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseMysqlV2(java.lang.String name, DatabaseMysqlV2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseMysqlV2(java.lang.String name, DatabaseMysqlV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabaseMysqlV2(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseMysqlV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseMysqlV2Args makeArgs(DatabaseMysqlV2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseMysqlV2Args.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "caCert",
                "rootPassword",
                "rootUsername"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseMysqlV2 get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseMysqlV2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseMysqlV2(name, id, state, options);
    }
}
