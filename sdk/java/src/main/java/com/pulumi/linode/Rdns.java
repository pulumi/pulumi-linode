// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.linode.RdnsArgs;
import com.pulumi.linode.Utilities;
import com.pulumi.linode.inputs.RdnsState;
import com.pulumi.linode.outputs.RdnsTimeouts;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Linode RDNS resource.  This can be used to create and modify RDNS records.
 * 
 * Linode RDNS names must have a matching address value in an A or AAAA record.  This A or AAAA name must be resolvable at the time the RDNS resource is being associated.
 * 
 * For more information, see the [Linode APIv4 docs](https://developers.linode.com/api/v4/networking-ips-address/#put) and the [Configure your Linode for Reverse DNS](https://www.linode.com/docs/networking/dns/configure-your-linode-for-reverse-dns-classic-manager/) guide.
 * 
 * ## Example Usage
 * 
 * The following example shows how one might use this resource to configure an RDNS address for an IP address.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Instance;
 * import com.pulumi.linode.InstanceArgs;
 * import com.pulumi.linode.Rdns;
 * import com.pulumi.linode.RdnsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var fooInstance = new Instance("fooInstance", InstanceArgs.builder()        
 *             .image("linode/alpine3.19")
 *             .region("ca-east")
 *             .type("g6-dedicated-2")
 *             .build());
 * 
 *         var foo = new Rdns("foo", RdnsArgs.builder()        
 *             .address(fooInstance.ipAddress())
 *             .rdns(fooInstance.ipAddress().applyValue(ipAddress -> String.format("%s.nip.io", ipAddress)))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * The following example shows how one might use this resource to configure RDNS for multiple IP addresses.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.linode.Instance;
 * import com.pulumi.linode.InstanceArgs;
 * import com.pulumi.linode.Rdns;
 * import com.pulumi.linode.RdnsArgs;
 * import com.pulumi.codegen.internal.KeyedValue;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         for (var i = 0; i < 3; i++) {
 *             new Instance("myInstance-" + i, InstanceArgs.builder()            
 *                 .label(String.format("simple_instance-%s", range.value() + 1))
 *                 .image("linode/ubuntu22.04")
 *                 .region("us-central")
 *                 .type("g6-standard-1")
 *                 .rootPass("terr4form-test")
 *                 .build());
 * 
 *         
 * }
 *         for (var i = 0; i < myInstance.length(); i++) {
 *             new Rdns("myRdns-" + i, RdnsArgs.builder()            
 *                 .address(myInstance[range.value()].ipAddress())
 *                 .rdns(myInstance[range.value()].ipAddress().applyValue(ipAddress -> String.format("%s.nip.io", ipAddress)))
 *                 .build());
 * 
 *         
 * }
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Linodes RDNS resources can be imported using the address as the `id`.
 * 
 * ```sh
 * $ pulumi import linode:index/rdns:Rdns foo 123.123.123.123
 * ```
 * 
 */
@ResourceType(type="linode:index/rdns:Rdns")
public class Rdns extends com.pulumi.resources.CustomResource {
    /**
     * The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.
     * 
     */
    @Export(name="address", refs={String.class}, tree="[0]")
    private Output<String> address;

    /**
     * @return The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.
     * 
     */
    public Output<String> address() {
        return this.address;
    }
    /**
     * The name of the RDNS address.
     * 
     */
    @Export(name="rdns", refs={String.class}, tree="[0]")
    private Output<String> rdns;

    /**
     * @return The name of the RDNS address.
     * 
     */
    public Output<String> rdns() {
        return this.rdns;
    }
    @Export(name="timeouts", refs={RdnsTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ RdnsTimeouts> timeouts;

    public Output<Optional<RdnsTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }
    /**
     * If true, the RDNS assignment will be retried within the operation timeout period.
     * 
     */
    @Export(name="waitForAvailable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> waitForAvailable;

    /**
     * @return If true, the RDNS assignment will be retried within the operation timeout period.
     * 
     */
    public Output<Boolean> waitForAvailable() {
        return this.waitForAvailable;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Rdns(String name) {
        this(name, RdnsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Rdns(String name, RdnsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Rdns(String name, RdnsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/rdns:Rdns", name, args == null ? RdnsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Rdns(String name, Output<String> id, @Nullable RdnsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("linode:index/rdns:Rdns", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Rdns get(String name, Output<String> id, @Nullable RdnsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Rdns(name, id, state, options);
    }
}
