// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;


public final class GetNodebalancersNodebalancerTransfer extends com.pulumi.resources.InvokeArgs {

    public static final GetNodebalancersNodebalancerTransfer Empty = new GetNodebalancersNodebalancerTransfer();

    /**
     * The total transfer, in MB, used by this NodeBalancer for the current month
     * 
     */
    @Import(name="in", required=true)
    private Double in;

    /**
     * @return The total transfer, in MB, used by this NodeBalancer for the current month
     * 
     */
    public Double in() {
        return this.in;
    }

    /**
     * The total inbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    @Import(name="out", required=true)
    private Double out;

    /**
     * @return The total inbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    public Double out() {
        return this.out;
    }

    /**
     * The total outbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    @Import(name="total", required=true)
    private Double total;

    /**
     * @return The total outbound transfer, in MB, used for this NodeBalancer for the current month
     * 
     */
    public Double total() {
        return this.total;
    }

    private GetNodebalancersNodebalancerTransfer() {}

    private GetNodebalancersNodebalancerTransfer(GetNodebalancersNodebalancerTransfer $) {
        this.in = $.in;
        this.out = $.out;
        this.total = $.total;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodebalancersNodebalancerTransfer defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodebalancersNodebalancerTransfer $;

        public Builder() {
            $ = new GetNodebalancersNodebalancerTransfer();
        }

        public Builder(GetNodebalancersNodebalancerTransfer defaults) {
            $ = new GetNodebalancersNodebalancerTransfer(Objects.requireNonNull(defaults));
        }

        /**
         * @param in The total transfer, in MB, used by this NodeBalancer for the current month
         * 
         * @return builder
         * 
         */
        public Builder in(Double in) {
            $.in = in;
            return this;
        }

        /**
         * @param out The total inbound transfer, in MB, used for this NodeBalancer for the current month
         * 
         * @return builder
         * 
         */
        public Builder out(Double out) {
            $.out = out;
            return this;
        }

        /**
         * @param total The total outbound transfer, in MB, used for this NodeBalancer for the current month
         * 
         * @return builder
         * 
         */
        public Builder total(Double total) {
            $.total = total;
            return this;
        }

        public GetNodebalancersNodebalancerTransfer build() {
            $.in = Objects.requireNonNull($.in, "expected parameter 'in' to be non-null");
            $.out = Objects.requireNonNull($.out, "expected parameter 'out' to be non-null");
            $.total = Objects.requireNonNull($.total, "expected parameter 'total' to be non-null");
            return $;
        }
    }

}
