// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.VpcSubnetIpv6Args;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcSubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcSubnetArgs Empty = new VpcSubnetArgs();

    /**
     * The IPv4 range of this subnet in CIDR format.
     * 
     * * `ipv6` - (Optional) A list of IPv6 ranges under this VPC subnet. NOTE: IPv6 VPCs may not currently be available to all users.
     * 
     */
    @Import(name="ipv4")
    private @Nullable Output<String> ipv4;

    /**
     * @return The IPv4 range of this subnet in CIDR format.
     * 
     * * `ipv6` - (Optional) A list of IPv6 ranges under this VPC subnet. NOTE: IPv6 VPCs may not currently be available to all users.
     * 
     */
    public Optional<Output<String>> ipv4() {
        return Optional.ofNullable(this.ipv4);
    }

    /**
     * The IPv6 ranges of this subnet.
     * 
     */
    @Import(name="ipv6s")
    private @Nullable Output<List<VpcSubnetIpv6Args>> ipv6s;

    /**
     * @return The IPv6 ranges of this subnet.
     * 
     */
    public Optional<Output<List<VpcSubnetIpv6Args>>> ipv6s() {
        return Optional.ofNullable(this.ipv6s);
    }

    /**
     * The label of the VPC. Only contains ASCII letters, digits and dashes.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return The label of the VPC. Only contains ASCII letters, digits and dashes.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * The id of the parent VPC for this VPC subnet.
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<Integer> vpcId;

    /**
     * @return The id of the parent VPC for this VPC subnet.
     * 
     */
    public Output<Integer> vpcId() {
        return this.vpcId;
    }

    private VpcSubnetArgs() {}

    private VpcSubnetArgs(VpcSubnetArgs $) {
        this.ipv4 = $.ipv4;
        this.ipv6s = $.ipv6s;
        this.label = $.label;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcSubnetArgs $;

        public Builder() {
            $ = new VpcSubnetArgs();
        }

        public Builder(VpcSubnetArgs defaults) {
            $ = new VpcSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4 The IPv4 range of this subnet in CIDR format.
         * 
         * * `ipv6` - (Optional) A list of IPv6 ranges under this VPC subnet. NOTE: IPv6 VPCs may not currently be available to all users.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(@Nullable Output<String> ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv4 The IPv4 range of this subnet in CIDR format.
         * 
         * * `ipv6` - (Optional) A list of IPv6 ranges under this VPC subnet. NOTE: IPv6 VPCs may not currently be available to all users.
         * 
         * @return builder
         * 
         */
        public Builder ipv4(String ipv4) {
            return ipv4(Output.of(ipv4));
        }

        /**
         * @param ipv6s The IPv6 ranges of this subnet.
         * 
         * @return builder
         * 
         */
        public Builder ipv6s(@Nullable Output<List<VpcSubnetIpv6Args>> ipv6s) {
            $.ipv6s = ipv6s;
            return this;
        }

        /**
         * @param ipv6s The IPv6 ranges of this subnet.
         * 
         * @return builder
         * 
         */
        public Builder ipv6s(List<VpcSubnetIpv6Args> ipv6s) {
            return ipv6s(Output.of(ipv6s));
        }

        /**
         * @param ipv6s The IPv6 ranges of this subnet.
         * 
         * @return builder
         * 
         */
        public Builder ipv6s(VpcSubnetIpv6Args... ipv6s) {
            return ipv6s(List.of(ipv6s));
        }

        /**
         * @param label The label of the VPC. Only contains ASCII letters, digits and dashes.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label The label of the VPC. Only contains ASCII letters, digits and dashes.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param vpcId The id of the parent VPC for this VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<Integer> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The id of the parent VPC for this VPC subnet.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Integer vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public VpcSubnetArgs build() {
            if ($.label == null) {
                throw new MissingRequiredPropertyException("VpcSubnetArgs", "label");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("VpcSubnetArgs", "vpcId");
            }
            return $;
        }
    }

}
