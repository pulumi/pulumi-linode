// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.linode.inputs.LkeClusterControlPlaneArgs;
import com.pulumi.linode.inputs.LkeClusterPoolArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LkeClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final LkeClusterArgs Empty = new LkeClusterArgs();

    /**
     * Enables the App Platform Layer
     * 
     */
    @Import(name="aplEnabled")
    private @Nullable Output<Boolean> aplEnabled;

    /**
     * @return Enables the App Platform Layer
     * 
     */
    public Optional<Output<Boolean>> aplEnabled() {
        return Optional.ofNullable(this.aplEnabled);
    }

    /**
     * Defines settings for the Kubernetes Control Plane.
     * 
     */
    @Import(name="controlPlane")
    private @Nullable Output<LkeClusterControlPlaneArgs> controlPlane;

    /**
     * @return Defines settings for the Kubernetes Control Plane.
     * 
     */
    public Optional<Output<LkeClusterControlPlaneArgs>> controlPlane() {
        return Optional.ofNullable(this.controlPlane);
    }

    /**
     * A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.
     * 
     */
    @Import(name="externalPoolTags")
    private @Nullable Output<List<String>> externalPoolTags;

    /**
     * @return A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.
     * 
     */
    public Optional<Output<List<String>>> externalPoolTags() {
        return Optional.ofNullable(this.externalPoolTags);
    }

    /**
     * The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
     * 
     */
    @Import(name="k8sVersion", required=true)
    private Output<String> k8sVersion;

    /**
     * @return The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
     * 
     */
    public Output<String> k8sVersion() {
        return this.k8sVersion;
    }

    /**
     * This Kubernetes cluster&#39;s unique label.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return This Kubernetes cluster&#39;s unique label.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * Additional nested attributes:
     * 
     */
    @Import(name="pools", required=true)
    private Output<List<LkeClusterPoolArgs>> pools;

    /**
     * @return Additional nested attributes:
     * 
     */
    public Output<List<LkeClusterPoolArgs>> pools() {
        return this.pools;
    }

    /**
     * This Kubernetes cluster&#39;s location.
     * 
     * * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
     * 
     * * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return This Kubernetes cluster&#39;s location.
     * 
     * * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
     * 
     * * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The networking stack type of the Kubernetes cluster.
     * 
     */
    @Import(name="stackType")
    private @Nullable Output<String> stackType;

    /**
     * @return The networking stack type of the Kubernetes cluster.
     * 
     */
    public Optional<Output<String>> stackType() {
        return Optional.ofNullable(this.stackType);
    }

    /**
     * The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled). (**Note: v4beta only and may not currently be available to all users.**)
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<Integer> subnetId;

    /**
     * @return The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled). (**Note: v4beta only and may not currently be available to all users.**)
     * 
     */
    public Optional<Output<Integer>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * The ID of the VPC to use for the Kubernetes cluster.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<Integer> vpcId;

    /**
     * @return The ID of the VPC to use for the Kubernetes cluster.
     * 
     */
    public Optional<Output<Integer>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private LkeClusterArgs() {}

    private LkeClusterArgs(LkeClusterArgs $) {
        this.aplEnabled = $.aplEnabled;
        this.controlPlane = $.controlPlane;
        this.externalPoolTags = $.externalPoolTags;
        this.k8sVersion = $.k8sVersion;
        this.label = $.label;
        this.pools = $.pools;
        this.region = $.region;
        this.stackType = $.stackType;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.tier = $.tier;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LkeClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LkeClusterArgs $;

        public Builder() {
            $ = new LkeClusterArgs();
        }

        public Builder(LkeClusterArgs defaults) {
            $ = new LkeClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aplEnabled Enables the App Platform Layer
         * 
         * @return builder
         * 
         */
        public Builder aplEnabled(@Nullable Output<Boolean> aplEnabled) {
            $.aplEnabled = aplEnabled;
            return this;
        }

        /**
         * @param aplEnabled Enables the App Platform Layer
         * 
         * @return builder
         * 
         */
        public Builder aplEnabled(Boolean aplEnabled) {
            return aplEnabled(Output.of(aplEnabled));
        }

        /**
         * @param controlPlane Defines settings for the Kubernetes Control Plane.
         * 
         * @return builder
         * 
         */
        public Builder controlPlane(@Nullable Output<LkeClusterControlPlaneArgs> controlPlane) {
            $.controlPlane = controlPlane;
            return this;
        }

        /**
         * @param controlPlane Defines settings for the Kubernetes Control Plane.
         * 
         * @return builder
         * 
         */
        public Builder controlPlane(LkeClusterControlPlaneArgs controlPlane) {
            return controlPlane(Output.of(controlPlane));
        }

        /**
         * @param externalPoolTags A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder externalPoolTags(@Nullable Output<List<String>> externalPoolTags) {
            $.externalPoolTags = externalPoolTags;
            return this;
        }

        /**
         * @param externalPoolTags A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder externalPoolTags(List<String> externalPoolTags) {
            return externalPoolTags(Output.of(externalPoolTags));
        }

        /**
         * @param externalPoolTags A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.
         * 
         * @return builder
         * 
         */
        public Builder externalPoolTags(String... externalPoolTags) {
            return externalPoolTags(List.of(externalPoolTags));
        }

        /**
         * @param k8sVersion The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(Output<String> k8sVersion) {
            $.k8sVersion = k8sVersion;
            return this;
        }

        /**
         * @param k8sVersion The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
         * 
         * @return builder
         * 
         */
        public Builder k8sVersion(String k8sVersion) {
            return k8sVersion(Output.of(k8sVersion));
        }

        /**
         * @param label This Kubernetes cluster&#39;s unique label.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label This Kubernetes cluster&#39;s unique label.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param pools Additional nested attributes:
         * 
         * @return builder
         * 
         */
        public Builder pools(Output<List<LkeClusterPoolArgs>> pools) {
            $.pools = pools;
            return this;
        }

        /**
         * @param pools Additional nested attributes:
         * 
         * @return builder
         * 
         */
        public Builder pools(List<LkeClusterPoolArgs> pools) {
            return pools(Output.of(pools));
        }

        /**
         * @param pools Additional nested attributes:
         * 
         * @return builder
         * 
         */
        public Builder pools(LkeClusterPoolArgs... pools) {
            return pools(List.of(pools));
        }

        /**
         * @param region This Kubernetes cluster&#39;s location.
         * 
         * * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
         * 
         * * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region This Kubernetes cluster&#39;s location.
         * 
         * * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
         * 
         * * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param stackType The networking stack type of the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder stackType(@Nullable Output<String> stackType) {
            $.stackType = stackType;
            return this;
        }

        /**
         * @param stackType The networking stack type of the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder stackType(String stackType) {
            return stackType(Output.of(stackType));
        }

        /**
         * @param subnetId The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled). (**Note: v4beta only and may not currently be available to all users.**)
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<Integer> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the VPC subnet to use for the Kubernetes cluster. This subnet must be dual stack (IPv4 and IPv6 should both be enabled). (**Note: v4beta only and may not currently be available to all users.**)
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Integer subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tier The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param vpcId The ID of the VPC to use for the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<Integer> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId The ID of the VPC to use for the Kubernetes cluster.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Integer vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public LkeClusterArgs build() {
            if ($.k8sVersion == null) {
                throw new MissingRequiredPropertyException("LkeClusterArgs", "k8sVersion");
            }
            if ($.label == null) {
                throw new MissingRequiredPropertyException("LkeClusterArgs", "label");
            }
            if ($.pools == null) {
                throw new MissingRequiredPropertyException("LkeClusterArgs", "pools");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("LkeClusterArgs", "region");
            }
            return $;
        }
    }

}
