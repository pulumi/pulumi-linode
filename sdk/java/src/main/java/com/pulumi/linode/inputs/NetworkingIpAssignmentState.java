// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.NetworkingIpAssignmentAssignmentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkingIpAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkingIpAssignmentState Empty = new NetworkingIpAssignmentState();

    /**
     * A list of IP/Linode assignments to apply.
     * 
     */
    @Import(name="assignments")
    private @Nullable Output<List<NetworkingIpAssignmentAssignmentArgs>> assignments;

    /**
     * @return A list of IP/Linode assignments to apply.
     * 
     */
    public Optional<Output<List<NetworkingIpAssignmentAssignmentArgs>>> assignments() {
        return Optional.ofNullable(this.assignments);
    }

    /**
     * The region where the IP addresses will be assigned.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region where the IP addresses will be assigned.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private NetworkingIpAssignmentState() {}

    private NetworkingIpAssignmentState(NetworkingIpAssignmentState $) {
        this.assignments = $.assignments;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkingIpAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkingIpAssignmentState $;

        public Builder() {
            $ = new NetworkingIpAssignmentState();
        }

        public Builder(NetworkingIpAssignmentState defaults) {
            $ = new NetworkingIpAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignments A list of IP/Linode assignments to apply.
         * 
         * @return builder
         * 
         */
        public Builder assignments(@Nullable Output<List<NetworkingIpAssignmentAssignmentArgs>> assignments) {
            $.assignments = assignments;
            return this;
        }

        /**
         * @param assignments A list of IP/Linode assignments to apply.
         * 
         * @return builder
         * 
         */
        public Builder assignments(List<NetworkingIpAssignmentAssignmentArgs> assignments) {
            return assignments(Output.of(assignments));
        }

        /**
         * @param assignments A list of IP/Linode assignments to apply.
         * 
         * @return builder
         * 
         */
        public Builder assignments(NetworkingIpAssignmentAssignmentArgs... assignments) {
            return assignments(List.of(assignments));
        }

        /**
         * @param region The region where the IP addresses will be assigned.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region where the IP addresses will be assigned.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public NetworkingIpAssignmentState build() {
            return $;
        }
    }

}
