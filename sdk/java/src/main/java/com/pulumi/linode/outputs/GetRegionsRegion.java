// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.linode.outputs.GetRegionsRegionResolver;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetRegionsRegion {
    /**
     * @return A list of capabilities of this region.
     * 
     */
    private List<String> capabilities;
    /**
     * @return The country the region resides in.
     * 
     */
    private String country;
    private String id;
    /**
     * @return Detailed location information for this Region, including city, state or region, and country.
     * 
     */
    private String label;
    private @Nullable List<GetRegionsRegionResolver> resolvers;
    /**
     * @return This region’s current operational status (ok or outage).
     * 
     */
    private String status;

    private GetRegionsRegion() {}
    /**
     * @return A list of capabilities of this region.
     * 
     */
    public List<String> capabilities() {
        return this.capabilities;
    }
    /**
     * @return The country the region resides in.
     * 
     */
    public String country() {
        return this.country;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Detailed location information for this Region, including city, state or region, and country.
     * 
     */
    public String label() {
        return this.label;
    }
    public List<GetRegionsRegionResolver> resolvers() {
        return this.resolvers == null ? List.of() : this.resolvers;
    }
    /**
     * @return This region’s current operational status (ok or outage).
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionsRegion defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> capabilities;
        private String country;
        private String id;
        private String label;
        private @Nullable List<GetRegionsRegionResolver> resolvers;
        private String status;
        public Builder() {}
        public Builder(GetRegionsRegion defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.country = defaults.country;
    	      this.id = defaults.id;
    	      this.label = defaults.label;
    	      this.resolvers = defaults.resolvers;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder capabilities(List<String> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }
        @CustomType.Setter
        public Builder country(String country) {
            this.country = Objects.requireNonNull(country);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        @CustomType.Setter
        public Builder resolvers(@Nullable List<GetRegionsRegionResolver> resolvers) {
            this.resolvers = resolvers;
            return this;
        }
        public Builder resolvers(GetRegionsRegionResolver... resolvers) {
            return resolvers(List.of(resolvers));
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetRegionsRegion build() {
            final var o = new GetRegionsRegion();
            o.capabilities = capabilities;
            o.country = country;
            o.id = id;
            o.label = label;
            o.resolvers = resolvers;
            o.status = status;
            return o;
        }
    }
}
