// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode;

import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("linode");
/**
 * The version of Linode API.
 * 
 */
    public Optional<String> apiVersion() {
        return Codegen.stringProp("apiVersion").config(config).env("LINODE_API_VERSION").get();
    }
/**
 * The path to the Linode config file to use. (default `~/.config/linode`)
 * 
 */
    public Optional<String> configPath() {
        return Codegen.stringProp("configPath").config(config).get();
    }
/**
 * The Linode config profile to use. (default `default`)
 * 
 */
    public Optional<String> configProfile() {
        return Codegen.stringProp("configProfile").config(config).get();
    }
/**
 * Disable the internal caching system that backs certain Linode API requests.
 * 
 */
    public Optional<Boolean> disableInternalCache() {
        return Codegen.booleanProp("disableInternalCache").config(config).get();
    }
/**
 * The rate in milliseconds to poll for events.
 * 
 */
    public Optional<Integer> eventPollMs() {
        return Codegen.integerProp("eventPollMs").config(config).get();
    }
/**
 * The rate in milliseconds to poll for LKE events.
 * 
 */
    public Optional<Integer> lkeEventPollMs() {
        return Codegen.integerProp("lkeEventPollMs").config(config).get();
    }
/**
 * The rate in milliseconds to poll for an LKE node to be ready.
 * 
 */
    public Optional<Integer> lkeNodeReadyPollMs() {
        return Codegen.integerProp("lkeNodeReadyPollMs").config(config).get();
    }
/**
 * Maximum delay in milliseconds before retrying a request.
 * 
 */
    public Optional<Integer> maxRetryDelayMs() {
        return Codegen.integerProp("maxRetryDelayMs").config(config).get();
    }
/**
 * Minimum delay in milliseconds before retrying a request.
 * 
 */
    public Optional<Integer> minRetryDelayMs() {
        return Codegen.integerProp("minRetryDelayMs").config(config).get();
    }
/**
 * The access key to be used in linode.ObjectStorageBucket and linode_object_storage_object.
 * 
 */
    public Optional<String> objAccessKey() {
        return Codegen.stringProp("objAccessKey").config(config).get();
    }
/**
 * If true, when deleting a linode.ObjectStorageBucket any objects and versions will be force deleted.
 * 
 */
    public Optional<Boolean> objBucketForceDelete() {
        return Codegen.booleanProp("objBucketForceDelete").config(config).get();
    }
/**
 * The secret key to be used in linode.ObjectStorageBucket and linode_object_storage_object.
 * 
 */
    public Optional<String> objSecretKey() {
        return Codegen.stringProp("objSecretKey").config(config).get();
    }
/**
 * If true, temporary object keys will be created implicitly at apply-time for the linode.ObjectStorageObject and
 * linode_object_sorage_bucket resource.
 * 
 */
    public Optional<Boolean> objUseTempKeys() {
        return Codegen.booleanProp("objUseTempKeys").config(config).get();
    }
/**
 * If true, Linode Instances will not be rebooted on config and interface changes.
 * 
 */
    public Optional<Boolean> skipImplicitReboots() {
        return Codegen.booleanProp("skipImplicitReboots").config(config).get();
    }
/**
 * Skip waiting for a linode.Instance resource to finish deleting.
 * 
 */
    public Optional<Boolean> skipInstanceDeletePoll() {
        return Codegen.booleanProp("skipInstanceDeletePoll").config(config).get();
    }
/**
 * Skip waiting for a linode.Instance resource to be running.
 * 
 */
    public Optional<Boolean> skipInstanceReadyPoll() {
        return Codegen.booleanProp("skipInstanceReadyPoll").config(config).get();
    }
/**
 * The token that allows you access to your Linode account
 * 
 */
    public Optional<String> token() {
        return Codegen.stringProp("token").config(config).get();
    }
/**
 * An HTTP User-Agent Prefix to prepend in API requests.
 * 
 */
    public Optional<String> uaPrefix() {
        return Codegen.stringProp("uaPrefix").config(config).env("LINODE_UA_PREFIX").get();
    }
/**
 * The HTTP(S) API address of the Linode API to use.
 * 
 */
    public Optional<String> url() {
        return Codegen.stringProp("url").config(config).env("LINODE_URL").get();
    }
}
