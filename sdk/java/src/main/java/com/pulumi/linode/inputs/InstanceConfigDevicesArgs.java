// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdaArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdbArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdcArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSddArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdeArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdfArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdgArgs;
import com.pulumi.linode.inputs.InstanceConfigDevicesSdhArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceConfigDevicesArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceConfigDevicesArgs Empty = new InstanceConfigDevicesArgs();

    /**
     * ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `&#34;fullvirt&#34;` `virt_mode`.
     * 
     */
    @Import(name="sda")
    private @Nullable Output<InstanceConfigDevicesSdaArgs> sda;

    /**
     * @return ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `&#34;fullvirt&#34;` `virt_mode`.
     * 
     */
    public Optional<Output<InstanceConfigDevicesSdaArgs>> sda() {
        return Optional.ofNullable(this.sda);
    }

    @Import(name="sdb")
    private @Nullable Output<InstanceConfigDevicesSdbArgs> sdb;

    public Optional<Output<InstanceConfigDevicesSdbArgs>> sdb() {
        return Optional.ofNullable(this.sdb);
    }

    @Import(name="sdc")
    private @Nullable Output<InstanceConfigDevicesSdcArgs> sdc;

    public Optional<Output<InstanceConfigDevicesSdcArgs>> sdc() {
        return Optional.ofNullable(this.sdc);
    }

    @Import(name="sdd")
    private @Nullable Output<InstanceConfigDevicesSddArgs> sdd;

    public Optional<Output<InstanceConfigDevicesSddArgs>> sdd() {
        return Optional.ofNullable(this.sdd);
    }

    @Import(name="sde")
    private @Nullable Output<InstanceConfigDevicesSdeArgs> sde;

    public Optional<Output<InstanceConfigDevicesSdeArgs>> sde() {
        return Optional.ofNullable(this.sde);
    }

    @Import(name="sdf")
    private @Nullable Output<InstanceConfigDevicesSdfArgs> sdf;

    public Optional<Output<InstanceConfigDevicesSdfArgs>> sdf() {
        return Optional.ofNullable(this.sdf);
    }

    @Import(name="sdg")
    private @Nullable Output<InstanceConfigDevicesSdgArgs> sdg;

    public Optional<Output<InstanceConfigDevicesSdgArgs>> sdg() {
        return Optional.ofNullable(this.sdg);
    }

    @Import(name="sdh")
    private @Nullable Output<InstanceConfigDevicesSdhArgs> sdh;

    public Optional<Output<InstanceConfigDevicesSdhArgs>> sdh() {
        return Optional.ofNullable(this.sdh);
    }

    private InstanceConfigDevicesArgs() {}

    private InstanceConfigDevicesArgs(InstanceConfigDevicesArgs $) {
        this.sda = $.sda;
        this.sdb = $.sdb;
        this.sdc = $.sdc;
        this.sdd = $.sdd;
        this.sde = $.sde;
        this.sdf = $.sdf;
        this.sdg = $.sdg;
        this.sdh = $.sdh;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceConfigDevicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceConfigDevicesArgs $;

        public Builder() {
            $ = new InstanceConfigDevicesArgs();
        }

        public Builder(InstanceConfigDevicesArgs defaults) {
            $ = new InstanceConfigDevicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sda ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `&#34;fullvirt&#34;` `virt_mode`.
         * 
         * @return builder
         * 
         */
        public Builder sda(@Nullable Output<InstanceConfigDevicesSdaArgs> sda) {
            $.sda = sda;
            return this;
        }

        /**
         * @param sda ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `&#34;fullvirt&#34;` `virt_mode`.
         * 
         * @return builder
         * 
         */
        public Builder sda(InstanceConfigDevicesSdaArgs sda) {
            return sda(Output.of(sda));
        }

        public Builder sdb(@Nullable Output<InstanceConfigDevicesSdbArgs> sdb) {
            $.sdb = sdb;
            return this;
        }

        public Builder sdb(InstanceConfigDevicesSdbArgs sdb) {
            return sdb(Output.of(sdb));
        }

        public Builder sdc(@Nullable Output<InstanceConfigDevicesSdcArgs> sdc) {
            $.sdc = sdc;
            return this;
        }

        public Builder sdc(InstanceConfigDevicesSdcArgs sdc) {
            return sdc(Output.of(sdc));
        }

        public Builder sdd(@Nullable Output<InstanceConfigDevicesSddArgs> sdd) {
            $.sdd = sdd;
            return this;
        }

        public Builder sdd(InstanceConfigDevicesSddArgs sdd) {
            return sdd(Output.of(sdd));
        }

        public Builder sde(@Nullable Output<InstanceConfigDevicesSdeArgs> sde) {
            $.sde = sde;
            return this;
        }

        public Builder sde(InstanceConfigDevicesSdeArgs sde) {
            return sde(Output.of(sde));
        }

        public Builder sdf(@Nullable Output<InstanceConfigDevicesSdfArgs> sdf) {
            $.sdf = sdf;
            return this;
        }

        public Builder sdf(InstanceConfigDevicesSdfArgs sdf) {
            return sdf(Output.of(sdf));
        }

        public Builder sdg(@Nullable Output<InstanceConfigDevicesSdgArgs> sdg) {
            $.sdg = sdg;
            return this;
        }

        public Builder sdg(InstanceConfigDevicesSdgArgs sdg) {
            return sdg(Output.of(sdg));
        }

        public Builder sdh(@Nullable Output<InstanceConfigDevicesSdhArgs> sdh) {
            $.sdh = sdh;
            return this;
        }

        public Builder sdh(InstanceConfigDevicesSdhArgs sdh) {
            return sdh(Output.of(sdh));
        }

        public InstanceConfigDevicesArgs build() {
            return $;
        }
    }

}
