// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.linode.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetVolumesVolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetVolumesVolumeArgs Empty = new GetVolumesVolumeArgs();

    /**
     * When this Volume was created.
     * 
     */
    @Import(name="created", required=true)
    private Output<String> created;

    /**
     * @return When this Volume was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }

    /**
     * The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     * 
     */
    @Import(name="filesystemPath", required=true)
    private Output<String> filesystemPath;

    /**
     * @return The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     * 
     */
    public Output<String> filesystemPath() {
        return this.filesystemPath;
    }

    /**
     * The unique ID of this Volume.
     * 
     */
    @Import(name="id", required=true)
    private Output<Integer> id;

    /**
     * @return The unique ID of this Volume.
     * 
     */
    public Output<Integer> id() {
        return this.id;
    }

    /**
     * This Volume&#39;s label is for display purposes only.
     * 
     */
    @Import(name="label", required=true)
    private Output<String> label;

    /**
     * @return This Volume&#39;s label is for display purposes only.
     * 
     */
    public Output<String> label() {
        return this.label;
    }

    /**
     * If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
     * 
     */
    @Import(name="linodeId", required=true)
    private Output<Integer> linodeId;

    /**
     * @return If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
     * 
     */
    public Output<Integer> linodeId() {
        return this.linodeId;
    }

    /**
     * The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The Volume&#39;s size, in GiB.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return The Volume&#39;s size, in GiB.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
     * 
     */
    @Import(name="status", required=true)
    private Output<String> status;

    /**
     * @return The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
     * 
     */
    public Output<String> status() {
        return this.status;
    }

    /**
     * An array of tags applied to this object.
     * 
     */
    @Import(name="tags", required=true)
    private Output<List<String>> tags;

    /**
     * @return An array of tags applied to this object.
     * 
     */
    public Output<List<String>> tags() {
        return this.tags;
    }

    /**
     * When this Volume was last updated.
     * 
     */
    @Import(name="updated", required=true)
    private Output<String> updated;

    /**
     * @return When this Volume was last updated.
     * 
     */
    public Output<String> updated() {
        return this.updated;
    }

    private GetVolumesVolumeArgs() {}

    private GetVolumesVolumeArgs(GetVolumesVolumeArgs $) {
        this.created = $.created;
        this.filesystemPath = $.filesystemPath;
        this.id = $.id;
        this.label = $.label;
        this.linodeId = $.linodeId;
        this.region = $.region;
        this.size = $.size;
        this.status = $.status;
        this.tags = $.tags;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVolumesVolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVolumesVolumeArgs $;

        public Builder() {
            $ = new GetVolumesVolumeArgs();
        }

        public Builder(GetVolumesVolumeArgs defaults) {
            $ = new GetVolumesVolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param created When this Volume was created.
         * 
         * @return builder
         * 
         */
        public Builder created(Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created When this Volume was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param filesystemPath The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
         * 
         * @return builder
         * 
         */
        public Builder filesystemPath(Output<String> filesystemPath) {
            $.filesystemPath = filesystemPath;
            return this;
        }

        /**
         * @param filesystemPath The full filesystem path for the Volume based on the Volume&#39;s label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
         * 
         * @return builder
         * 
         */
        public Builder filesystemPath(String filesystemPath) {
            return filesystemPath(Output.of(filesystemPath));
        }

        /**
         * @param id The unique ID of this Volume.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of this Volume.
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param label This Volume&#39;s label is for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label This Volume&#39;s label is for display purposes only.
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param linodeId If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Output<Integer> linodeId) {
            $.linodeId = linodeId;
            return this;
        }

        /**
         * @param linodeId If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
         * 
         * @return builder
         * 
         */
        public Builder linodeId(Integer linodeId) {
            return linodeId(Output.of(linodeId));
        }

        /**
         * @param region The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param size The Volume&#39;s size, in GiB.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The Volume&#39;s size, in GiB.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param status The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
         * 
         * @return builder
         * 
         */
        public Builder status(Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param tags An array of tags applied to this object.
         * 
         * @return builder
         * 
         */
        public Builder tags(Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags An array of tags applied to this object.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags An array of tags applied to this object.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updated When this Volume was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated When this Volume was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public GetVolumesVolumeArgs build() {
            $.created = Objects.requireNonNull($.created, "expected parameter 'created' to be non-null");
            $.filesystemPath = Objects.requireNonNull($.filesystemPath, "expected parameter 'filesystemPath' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.linodeId = Objects.requireNonNull($.linodeId, "expected parameter 'linodeId' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            $.updated = Objects.requireNonNull($.updated, "expected parameter 'updated' to be non-null");
            return $;
        }
    }

}
