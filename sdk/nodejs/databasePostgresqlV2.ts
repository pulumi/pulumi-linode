// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instances).
 *
 * Please keep in mind that Managed Databases can take up to half an hour to provision.
 *
 * ## Example Usage
 *
 * Creating a simple PostgreSQL database that does not allow connections:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabasePostgresqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "postgresql/16",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 * });
 * ```
 *
 * Creating a simple PostgreSQL database that allows connections from all IPv4 addresses:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabasePostgresqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "postgresql/16",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 *     allowLists: ["0.0.0.0/0"],
 * });
 * ```
 *
 * Creating a complex PostgreSQL database:
 *
 * Creating a PostgreSQL database with engine config fields specified:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabasePostgresqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "postgresql/16",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 *     engineConfigPgAutovacuumAnalyzeScaleFactor: 0.1,
 *     engineConfigPgAutovacuumAnalyzeThreshold: 50,
 *     engineConfigPgAutovacuumMaxWorkers: 3,
 *     engineConfigPgAutovacuumNaptime: 100,
 *     engineConfigPgAutovacuumVacuumCostDelay: 20,
 *     engineConfigPgAutovacuumVacuumCostLimit: 200,
 *     engineConfigPgAutovacuumVacuumScaleFactor: 0.2,
 *     engineConfigPgAutovacuumVacuumThreshold: 100,
 *     engineConfigPgBgwriterDelay: 1000,
 *     engineConfigPgBgwriterFlushAfter: 512,
 *     engineConfigPgBgwriterLruMaxpages: 100,
 *     engineConfigPgBgwriterLruMultiplier: 2,
 *     engineConfigPgDeadlockTimeout: 1000,
 *     engineConfigPgDefaultToastCompression: "pglz",
 *     engineConfigPgIdleInTransactionSessionTimeout: 60000,
 *     engineConfigPgJit: true,
 *     engineConfigPgMaxFilesPerProcess: 1000,
 *     engineConfigPgMaxLocksPerTransaction: 64,
 *     engineConfigPgMaxLogicalReplicationWorkers: 4,
 *     engineConfigPgMaxParallelWorkers: 8,
 *     engineConfigPgMaxParallelWorkersPerGather: 2,
 *     engineConfigPgMaxPredLocksPerTransaction: 128,
 *     engineConfigPgMaxReplicationSlots: 8,
 *     engineConfigPgMaxSlotWalKeepSize: 128,
 *     engineConfigPgMaxStackDepth: 2097152,
 *     engineConfigPgMaxStandbyArchiveDelay: 60000,
 *     engineConfigPgMaxStandbyStreamingDelay: 60000,
 *     engineConfigPgMaxWalSenders: 20,
 *     engineConfigPgMaxWorkerProcesses: 8,
 *     engineConfigPgPasswordEncryption: "scram-sha-256",
 *     engineConfigPgPgPartmanBgwInterval: 3600,
 *     engineConfigPgPgPartmanBgwRole: "myrolename",
 *     engineConfigPgPgStatMonitorPgsmEnableQueryPlan: true,
 *     engineConfigPgPgStatMonitorPgsmMaxBuckets: 5,
 *     engineConfigPgPgStatStatementsTrack: "all",
 *     engineConfigPgTempFileLimit: 100,
 *     engineConfigPgTimezone: "Europe/Helsinki",
 *     engineConfigPgTrackActivityQuerySize: 2048,
 *     engineConfigPgTrackCommitTimestamp: "on",
 *     engineConfigPgTrackFunctions: "all",
 *     engineConfigPgTrackIoTiming: "on",
 *     engineConfigPgWalSenderTimeout: 60000,
 *     engineConfigPgWalWriterDelay: 200,
 *     engineConfigPgStatMonitorEnable: true,
 *     engineConfigPglookoutMaxFailoverReplicationTimeLag: 10000,
 *     engineConfigSharedBuffersPercentage: 25,
 *     engineConfigWorkMem: 400,
 * });
 * ```
 *
 * Creating a forked PostgreSQL database:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const foobar = new linode.DatabasePostgresqlV2("foobar", {
 *     label: "mydatabase",
 *     engineId: "postgresql/16",
 *     region: "us-mia",
 *     type: "g6-nanode-1",
 *     forkSource: 12345,
 * });
 * ```
 *
 * Creating a PostgreSQL database hidden behind a VPC:
 *
 * > **_NOTE:_** The name of the default database in the returned database cluster is `defaultdb`.
 *
 * ## pendingUpdates
 *
 * The following arguments are exposed by each entry in the `pendingUpdates` attribute:
 *
 * * `deadline` - The time when a mandatory update needs to be applied.
 *
 * * `description` - A description of the update.
 *
 * * `plannedFor` - The date and time a maintenance update will be applied.
 *
 * ## updates
 *
 * The following arguments are supported in the `updates` specification block:
 *
 * * `dayOfWeek` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)
 *
 * * `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)
 *
 * * `frequency` - (Required) The frequency at which maintenance occurs. (`weekly`)
 *
 * * `hourOfDay` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)
 *
 * ## privateNetwork
 *
 * The following arguments are supported in the `privateNetwork` specification block:
 *
 * * `vpcId` - (Required) The ID of the virtual private cloud (VPC) to restrict access to this database using.
 *
 * * `subnetId` - (Required) The ID of the VPC subnet to restrict access to this database using.
 *
 * * `publicAccess` - (Optional) Set to `true` to allow clients outside the VPC to connect to the database using a public IP address. (Default `false`)
 *
 * ## Import
 *
 * Linode PostgreSQL Databases can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/databasePostgresqlV2:DatabasePostgresqlV2 foobar 1234567
 * ```
 */
export class DatabasePostgresqlV2 extends pulumi.CustomResource {
    /**
     * Get an existing DatabasePostgresqlV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabasePostgresqlV2State, opts?: pulumi.CustomResourceOptions): DatabasePostgresqlV2 {
        return new DatabasePostgresqlV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/databasePostgresqlV2:DatabasePostgresqlV2';

    /**
     * Returns true if the given object is an instance of DatabasePostgresqlV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasePostgresqlV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasePostgresqlV2.__pulumiType;
    }

    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     */
    declare public readonly allowLists: pulumi.Output<string[]>;
    /**
     * The base64-encoded SSL CA certificate for the Managed Database.
     */
    declare public /*out*/ readonly caCert: pulumi.Output<string>;
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     */
    declare public readonly clusterSize: pulumi.Output<number>;
    /**
     * When this Managed Database was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Whether the Managed Databases is encrypted.
     */
    declare public /*out*/ readonly encrypted: pulumi.Output<boolean>;
    /**
     * The Managed Database engine. (e.g. `postgresql`)
     */
    declare public /*out*/ readonly engine: pulumi.Output<string>;
    /**
     * Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     */
    declare public readonly engineConfigPgAutovacuumAnalyzeScaleFactor: pulumi.Output<number>;
    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     */
    declare public readonly engineConfigPgAutovacuumAnalyzeThreshold: pulumi.Output<number>;
    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     */
    declare public readonly engineConfigPgAutovacuumMaxWorkers: pulumi.Output<number>;
    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
     */
    declare public readonly engineConfigPgAutovacuumNaptime: pulumi.Output<number>;
    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
     */
    declare public readonly engineConfigPgAutovacuumVacuumCostDelay: pulumi.Output<number>;
    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
     */
    declare public readonly engineConfigPgAutovacuumVacuumCostLimit: pulumi.Output<number>;
    /**
     * Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     */
    declare public readonly engineConfigPgAutovacuumVacuumScaleFactor: pulumi.Output<number>;
    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     */
    declare public readonly engineConfigPgAutovacuumVacuumThreshold: pulumi.Output<number>;
    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    declare public readonly engineConfigPgBgwriterDelay: pulumi.Output<number>;
    /**
     * Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    declare public readonly engineConfigPgBgwriterFlushAfter: pulumi.Output<number>;
    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    declare public readonly engineConfigPgBgwriterLruMaxpages: pulumi.Output<number>;
    /**
     * The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    declare public readonly engineConfigPgBgwriterLruMultiplier: pulumi.Output<number>;
    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     */
    declare public readonly engineConfigPgDeadlockTimeout: pulumi.Output<number>;
    /**
     * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     */
    declare public readonly engineConfigPgDefaultToastCompression: pulumi.Output<string>;
    /**
     * Time out sessions with open transactions after this number of milliseconds.
     */
    declare public readonly engineConfigPgIdleInTransactionSessionTimeout: pulumi.Output<number>;
    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     */
    declare public readonly engineConfigPgJit: pulumi.Output<boolean>;
    /**
     * PostgreSQL maximum number of files that can be open per process.
     */
    declare public readonly engineConfigPgMaxFilesPerProcess: pulumi.Output<number>;
    /**
     * PostgreSQL maximum locks per transaction.
     */
    declare public readonly engineConfigPgMaxLocksPerTransaction: pulumi.Output<number>;
    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     */
    declare public readonly engineConfigPgMaxLogicalReplicationWorkers: pulumi.Output<number>;
    /**
     * Sets the maximum number of workers that the system can support for parallel queries.
     */
    declare public readonly engineConfigPgMaxParallelWorkers: pulumi.Output<number>;
    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     */
    declare public readonly engineConfigPgMaxParallelWorkersPerGather: pulumi.Output<number>;
    /**
     * PostgreSQL maximum predicate locks per transaction.
     */
    declare public readonly engineConfigPgMaxPredLocksPerTransaction: pulumi.Output<number>;
    /**
     * PostgreSQL maximum replication slots.
     */
    declare public readonly engineConfigPgMaxReplicationSlots: pulumi.Output<number>;
    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
     */
    declare public readonly engineConfigPgMaxSlotWalKeepSize: pulumi.Output<number>;
    /**
     * Maximum depth of the stack in bytes.
     */
    declare public readonly engineConfigPgMaxStackDepth: pulumi.Output<number>;
    /**
     * Max standby archive delay in milliseconds.
     */
    declare public readonly engineConfigPgMaxStandbyArchiveDelay: pulumi.Output<number>;
    /**
     * Max standby streaming delay in milliseconds.
     */
    declare public readonly engineConfigPgMaxStandbyStreamingDelay: pulumi.Output<number>;
    /**
     * PostgreSQL maximum WAL senders.
     */
    declare public readonly engineConfigPgMaxWalSenders: pulumi.Output<number>;
    /**
     * Sets the maximum number of background processes that the system can support.
     */
    declare public readonly engineConfigPgMaxWorkerProcesses: pulumi.Output<number>;
    /**
     * Chooses the algorithm for encrypting passwords. (default `md5`)
     */
    declare public readonly engineConfigPgPasswordEncryption: pulumi.Output<string>;
    /**
     * Sets the time interval to run pg_partman's scheduled tasks.
     */
    declare public readonly engineConfigPgPgPartmanBgwInterval: pulumi.Output<number>;
    /**
     * Controls which role to use for pg_partman's scheduled background tasks.
     */
    declare public readonly engineConfigPgPgPartmanBgwRole: pulumi.Output<string>;
    /**
     * Enables or disables query plan monitoring.
     */
    declare public readonly engineConfigPgPgStatMonitorPgsmEnableQueryPlan: pulumi.Output<boolean>;
    /**
     * Sets the maximum number of buckets.
     */
    declare public readonly engineConfigPgPgStatMonitorPgsmMaxBuckets: pulumi.Output<number>;
    /**
     * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     */
    declare public readonly engineConfigPgPgStatStatementsTrack: pulumi.Output<string>;
    /**
     * Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
     */
    declare public readonly engineConfigPgStatMonitorEnable: pulumi.Output<boolean>;
    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited.
     */
    declare public readonly engineConfigPgTempFileLimit: pulumi.Output<number>;
    /**
     * PostgreSQL service timezone.
     */
    declare public readonly engineConfigPgTimezone: pulumi.Output<string>;
    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session.
     */
    declare public readonly engineConfigPgTrackActivityQuerySize: pulumi.Output<number>;
    /**
     * Record commit time of transactions.
     */
    declare public readonly engineConfigPgTrackCommitTimestamp: pulumi.Output<string>;
    /**
     * Enables tracking of function call counts and time used.
     */
    declare public readonly engineConfigPgTrackFunctions: pulumi.Output<string>;
    /**
     * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     */
    declare public readonly engineConfigPgTrackIoTiming: pulumi.Output<string>;
    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    declare public readonly engineConfigPgWalSenderTimeout: pulumi.Output<number>;
    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     */
    declare public readonly engineConfigPgWalWriterDelay: pulumi.Output<number>;
    /**
     * Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
     */
    declare public readonly engineConfigPglookoutMaxFailoverReplicationTimeLag: pulumi.Output<number>;
    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
     */
    declare public readonly engineConfigSharedBuffersPercentage: pulumi.Output<number>;
    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    declare public readonly engineConfigWorkMem: pulumi.Output<number>;
    /**
     * The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     */
    declare public readonly engineId: pulumi.Output<string>;
    /**
     * The database timestamp from which it was restored.
     */
    declare public readonly forkRestoreTime: pulumi.Output<string>;
    /**
     * The ID of the database that was forked from.
     *
     * * `privateNetwork` - (Optional) Restricts access to this database using a virtual private cloud (VPC) that you've configured in the region where the database will live.
     *
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     */
    declare public readonly forkSource: pulumi.Output<number | undefined>;
    /**
     * The primary host for the Managed Database.
     */
    declare public /*out*/ readonly hostPrimary: pulumi.Output<string>;
    /**
     * The secondary/private host for the managed database.
     */
    declare public /*out*/ readonly hostSecondary: pulumi.Output<string>;
    /**
     * A unique, user-defined string referring to the Managed Database.
     */
    declare public readonly label: pulumi.Output<string>;
    /**
     * A mapping between IP addresses and strings designating them as primary or failover.
     */
    declare public /*out*/ readonly members: pulumi.Output<{[key: string]: string}>;
    /**
     * The oldest time to which a database can be restored.
     */
    declare public /*out*/ readonly oldestRestoreTime: pulumi.Output<string>;
    /**
     * A set of pending updates.
     */
    declare public /*out*/ readonly pendingUpdates: pulumi.Output<outputs.DatabasePostgresqlV2PendingUpdate[]>;
    /**
     * The back-end platform for relational databases used by the service.
     */
    declare public /*out*/ readonly platform: pulumi.Output<string>;
    /**
     * The access port for this Managed Database.
     */
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * Restricts access to this database using a virtual private cloud (VPC) that you've configured in the region where the database will live.
     */
    declare public readonly privateNetwork: pulumi.Output<outputs.DatabasePostgresqlV2PrivateNetwork | undefined>;
    /**
     * The region to use for the Managed Database.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The randomly-generated root password for the Managed Database instance.
     */
    declare public /*out*/ readonly rootPassword: pulumi.Output<string>;
    /**
     * The root username for the Managed Database instance.
     */
    declare public /*out*/ readonly rootUsername: pulumi.Output<string>;
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     */
    declare public /*out*/ readonly sslConnection: pulumi.Output<boolean>;
    /**
     * The operating status of the Managed Database.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Whether this Managed Database should be suspended.
     */
    declare public readonly suspended: pulumi.Output<boolean>;
    declare public readonly timeouts: pulumi.Output<outputs.DatabasePostgresqlV2Timeouts | undefined>;
    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     *
     * - - -
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * When this Managed Database was last updated.
     */
    declare public /*out*/ readonly updated: pulumi.Output<string>;
    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     */
    declare public readonly updates: pulumi.Output<outputs.DatabasePostgresqlV2Updates>;
    /**
     * The Managed Database engine version. (e.g. `13.2`)
     */
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a DatabasePostgresqlV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasePostgresqlV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabasePostgresqlV2Args | DatabasePostgresqlV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabasePostgresqlV2State | undefined;
            resourceInputs["allowLists"] = state?.allowLists;
            resourceInputs["caCert"] = state?.caCert;
            resourceInputs["clusterSize"] = state?.clusterSize;
            resourceInputs["created"] = state?.created;
            resourceInputs["encrypted"] = state?.encrypted;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineConfigPgAutovacuumAnalyzeScaleFactor"] = state?.engineConfigPgAutovacuumAnalyzeScaleFactor;
            resourceInputs["engineConfigPgAutovacuumAnalyzeThreshold"] = state?.engineConfigPgAutovacuumAnalyzeThreshold;
            resourceInputs["engineConfigPgAutovacuumMaxWorkers"] = state?.engineConfigPgAutovacuumMaxWorkers;
            resourceInputs["engineConfigPgAutovacuumNaptime"] = state?.engineConfigPgAutovacuumNaptime;
            resourceInputs["engineConfigPgAutovacuumVacuumCostDelay"] = state?.engineConfigPgAutovacuumVacuumCostDelay;
            resourceInputs["engineConfigPgAutovacuumVacuumCostLimit"] = state?.engineConfigPgAutovacuumVacuumCostLimit;
            resourceInputs["engineConfigPgAutovacuumVacuumScaleFactor"] = state?.engineConfigPgAutovacuumVacuumScaleFactor;
            resourceInputs["engineConfigPgAutovacuumVacuumThreshold"] = state?.engineConfigPgAutovacuumVacuumThreshold;
            resourceInputs["engineConfigPgBgwriterDelay"] = state?.engineConfigPgBgwriterDelay;
            resourceInputs["engineConfigPgBgwriterFlushAfter"] = state?.engineConfigPgBgwriterFlushAfter;
            resourceInputs["engineConfigPgBgwriterLruMaxpages"] = state?.engineConfigPgBgwriterLruMaxpages;
            resourceInputs["engineConfigPgBgwriterLruMultiplier"] = state?.engineConfigPgBgwriterLruMultiplier;
            resourceInputs["engineConfigPgDeadlockTimeout"] = state?.engineConfigPgDeadlockTimeout;
            resourceInputs["engineConfigPgDefaultToastCompression"] = state?.engineConfigPgDefaultToastCompression;
            resourceInputs["engineConfigPgIdleInTransactionSessionTimeout"] = state?.engineConfigPgIdleInTransactionSessionTimeout;
            resourceInputs["engineConfigPgJit"] = state?.engineConfigPgJit;
            resourceInputs["engineConfigPgMaxFilesPerProcess"] = state?.engineConfigPgMaxFilesPerProcess;
            resourceInputs["engineConfigPgMaxLocksPerTransaction"] = state?.engineConfigPgMaxLocksPerTransaction;
            resourceInputs["engineConfigPgMaxLogicalReplicationWorkers"] = state?.engineConfigPgMaxLogicalReplicationWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkers"] = state?.engineConfigPgMaxParallelWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkersPerGather"] = state?.engineConfigPgMaxParallelWorkersPerGather;
            resourceInputs["engineConfigPgMaxPredLocksPerTransaction"] = state?.engineConfigPgMaxPredLocksPerTransaction;
            resourceInputs["engineConfigPgMaxReplicationSlots"] = state?.engineConfigPgMaxReplicationSlots;
            resourceInputs["engineConfigPgMaxSlotWalKeepSize"] = state?.engineConfigPgMaxSlotWalKeepSize;
            resourceInputs["engineConfigPgMaxStackDepth"] = state?.engineConfigPgMaxStackDepth;
            resourceInputs["engineConfigPgMaxStandbyArchiveDelay"] = state?.engineConfigPgMaxStandbyArchiveDelay;
            resourceInputs["engineConfigPgMaxStandbyStreamingDelay"] = state?.engineConfigPgMaxStandbyStreamingDelay;
            resourceInputs["engineConfigPgMaxWalSenders"] = state?.engineConfigPgMaxWalSenders;
            resourceInputs["engineConfigPgMaxWorkerProcesses"] = state?.engineConfigPgMaxWorkerProcesses;
            resourceInputs["engineConfigPgPasswordEncryption"] = state?.engineConfigPgPasswordEncryption;
            resourceInputs["engineConfigPgPgPartmanBgwInterval"] = state?.engineConfigPgPgPartmanBgwInterval;
            resourceInputs["engineConfigPgPgPartmanBgwRole"] = state?.engineConfigPgPgPartmanBgwRole;
            resourceInputs["engineConfigPgPgStatMonitorPgsmEnableQueryPlan"] = state?.engineConfigPgPgStatMonitorPgsmEnableQueryPlan;
            resourceInputs["engineConfigPgPgStatMonitorPgsmMaxBuckets"] = state?.engineConfigPgPgStatMonitorPgsmMaxBuckets;
            resourceInputs["engineConfigPgPgStatStatementsTrack"] = state?.engineConfigPgPgStatStatementsTrack;
            resourceInputs["engineConfigPgStatMonitorEnable"] = state?.engineConfigPgStatMonitorEnable;
            resourceInputs["engineConfigPgTempFileLimit"] = state?.engineConfigPgTempFileLimit;
            resourceInputs["engineConfigPgTimezone"] = state?.engineConfigPgTimezone;
            resourceInputs["engineConfigPgTrackActivityQuerySize"] = state?.engineConfigPgTrackActivityQuerySize;
            resourceInputs["engineConfigPgTrackCommitTimestamp"] = state?.engineConfigPgTrackCommitTimestamp;
            resourceInputs["engineConfigPgTrackFunctions"] = state?.engineConfigPgTrackFunctions;
            resourceInputs["engineConfigPgTrackIoTiming"] = state?.engineConfigPgTrackIoTiming;
            resourceInputs["engineConfigPgWalSenderTimeout"] = state?.engineConfigPgWalSenderTimeout;
            resourceInputs["engineConfigPgWalWriterDelay"] = state?.engineConfigPgWalWriterDelay;
            resourceInputs["engineConfigPglookoutMaxFailoverReplicationTimeLag"] = state?.engineConfigPglookoutMaxFailoverReplicationTimeLag;
            resourceInputs["engineConfigSharedBuffersPercentage"] = state?.engineConfigSharedBuffersPercentage;
            resourceInputs["engineConfigWorkMem"] = state?.engineConfigWorkMem;
            resourceInputs["engineId"] = state?.engineId;
            resourceInputs["forkRestoreTime"] = state?.forkRestoreTime;
            resourceInputs["forkSource"] = state?.forkSource;
            resourceInputs["hostPrimary"] = state?.hostPrimary;
            resourceInputs["hostSecondary"] = state?.hostSecondary;
            resourceInputs["label"] = state?.label;
            resourceInputs["members"] = state?.members;
            resourceInputs["oldestRestoreTime"] = state?.oldestRestoreTime;
            resourceInputs["pendingUpdates"] = state?.pendingUpdates;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["port"] = state?.port;
            resourceInputs["privateNetwork"] = state?.privateNetwork;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootPassword"] = state?.rootPassword;
            resourceInputs["rootUsername"] = state?.rootUsername;
            resourceInputs["sslConnection"] = state?.sslConnection;
            resourceInputs["status"] = state?.status;
            resourceInputs["suspended"] = state?.suspended;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["updated"] = state?.updated;
            resourceInputs["updates"] = state?.updates;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as DatabasePostgresqlV2Args | undefined;
            if (args?.engineId === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if (args?.label === undefined && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowLists"] = args?.allowLists;
            resourceInputs["clusterSize"] = args?.clusterSize;
            resourceInputs["engineConfigPgAutovacuumAnalyzeScaleFactor"] = args?.engineConfigPgAutovacuumAnalyzeScaleFactor;
            resourceInputs["engineConfigPgAutovacuumAnalyzeThreshold"] = args?.engineConfigPgAutovacuumAnalyzeThreshold;
            resourceInputs["engineConfigPgAutovacuumMaxWorkers"] = args?.engineConfigPgAutovacuumMaxWorkers;
            resourceInputs["engineConfigPgAutovacuumNaptime"] = args?.engineConfigPgAutovacuumNaptime;
            resourceInputs["engineConfigPgAutovacuumVacuumCostDelay"] = args?.engineConfigPgAutovacuumVacuumCostDelay;
            resourceInputs["engineConfigPgAutovacuumVacuumCostLimit"] = args?.engineConfigPgAutovacuumVacuumCostLimit;
            resourceInputs["engineConfigPgAutovacuumVacuumScaleFactor"] = args?.engineConfigPgAutovacuumVacuumScaleFactor;
            resourceInputs["engineConfigPgAutovacuumVacuumThreshold"] = args?.engineConfigPgAutovacuumVacuumThreshold;
            resourceInputs["engineConfigPgBgwriterDelay"] = args?.engineConfigPgBgwriterDelay;
            resourceInputs["engineConfigPgBgwriterFlushAfter"] = args?.engineConfigPgBgwriterFlushAfter;
            resourceInputs["engineConfigPgBgwriterLruMaxpages"] = args?.engineConfigPgBgwriterLruMaxpages;
            resourceInputs["engineConfigPgBgwriterLruMultiplier"] = args?.engineConfigPgBgwriterLruMultiplier;
            resourceInputs["engineConfigPgDeadlockTimeout"] = args?.engineConfigPgDeadlockTimeout;
            resourceInputs["engineConfigPgDefaultToastCompression"] = args?.engineConfigPgDefaultToastCompression;
            resourceInputs["engineConfigPgIdleInTransactionSessionTimeout"] = args?.engineConfigPgIdleInTransactionSessionTimeout;
            resourceInputs["engineConfigPgJit"] = args?.engineConfigPgJit;
            resourceInputs["engineConfigPgMaxFilesPerProcess"] = args?.engineConfigPgMaxFilesPerProcess;
            resourceInputs["engineConfigPgMaxLocksPerTransaction"] = args?.engineConfigPgMaxLocksPerTransaction;
            resourceInputs["engineConfigPgMaxLogicalReplicationWorkers"] = args?.engineConfigPgMaxLogicalReplicationWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkers"] = args?.engineConfigPgMaxParallelWorkers;
            resourceInputs["engineConfigPgMaxParallelWorkersPerGather"] = args?.engineConfigPgMaxParallelWorkersPerGather;
            resourceInputs["engineConfigPgMaxPredLocksPerTransaction"] = args?.engineConfigPgMaxPredLocksPerTransaction;
            resourceInputs["engineConfigPgMaxReplicationSlots"] = args?.engineConfigPgMaxReplicationSlots;
            resourceInputs["engineConfigPgMaxSlotWalKeepSize"] = args?.engineConfigPgMaxSlotWalKeepSize;
            resourceInputs["engineConfigPgMaxStackDepth"] = args?.engineConfigPgMaxStackDepth;
            resourceInputs["engineConfigPgMaxStandbyArchiveDelay"] = args?.engineConfigPgMaxStandbyArchiveDelay;
            resourceInputs["engineConfigPgMaxStandbyStreamingDelay"] = args?.engineConfigPgMaxStandbyStreamingDelay;
            resourceInputs["engineConfigPgMaxWalSenders"] = args?.engineConfigPgMaxWalSenders;
            resourceInputs["engineConfigPgMaxWorkerProcesses"] = args?.engineConfigPgMaxWorkerProcesses;
            resourceInputs["engineConfigPgPasswordEncryption"] = args?.engineConfigPgPasswordEncryption;
            resourceInputs["engineConfigPgPgPartmanBgwInterval"] = args?.engineConfigPgPgPartmanBgwInterval;
            resourceInputs["engineConfigPgPgPartmanBgwRole"] = args?.engineConfigPgPgPartmanBgwRole;
            resourceInputs["engineConfigPgPgStatMonitorPgsmEnableQueryPlan"] = args?.engineConfigPgPgStatMonitorPgsmEnableQueryPlan;
            resourceInputs["engineConfigPgPgStatMonitorPgsmMaxBuckets"] = args?.engineConfigPgPgStatMonitorPgsmMaxBuckets;
            resourceInputs["engineConfigPgPgStatStatementsTrack"] = args?.engineConfigPgPgStatStatementsTrack;
            resourceInputs["engineConfigPgStatMonitorEnable"] = args?.engineConfigPgStatMonitorEnable;
            resourceInputs["engineConfigPgTempFileLimit"] = args?.engineConfigPgTempFileLimit;
            resourceInputs["engineConfigPgTimezone"] = args?.engineConfigPgTimezone;
            resourceInputs["engineConfigPgTrackActivityQuerySize"] = args?.engineConfigPgTrackActivityQuerySize;
            resourceInputs["engineConfigPgTrackCommitTimestamp"] = args?.engineConfigPgTrackCommitTimestamp;
            resourceInputs["engineConfigPgTrackFunctions"] = args?.engineConfigPgTrackFunctions;
            resourceInputs["engineConfigPgTrackIoTiming"] = args?.engineConfigPgTrackIoTiming;
            resourceInputs["engineConfigPgWalSenderTimeout"] = args?.engineConfigPgWalSenderTimeout;
            resourceInputs["engineConfigPgWalWriterDelay"] = args?.engineConfigPgWalWriterDelay;
            resourceInputs["engineConfigPglookoutMaxFailoverReplicationTimeLag"] = args?.engineConfigPglookoutMaxFailoverReplicationTimeLag;
            resourceInputs["engineConfigSharedBuffersPercentage"] = args?.engineConfigSharedBuffersPercentage;
            resourceInputs["engineConfigWorkMem"] = args?.engineConfigWorkMem;
            resourceInputs["engineId"] = args?.engineId;
            resourceInputs["forkRestoreTime"] = args?.forkRestoreTime;
            resourceInputs["forkSource"] = args?.forkSource;
            resourceInputs["label"] = args?.label;
            resourceInputs["privateNetwork"] = args?.privateNetwork;
            resourceInputs["region"] = args?.region;
            resourceInputs["suspended"] = args?.suspended;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["updates"] = args?.updates;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["hostPrimary"] = undefined /*out*/;
            resourceInputs["hostSecondary"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
            resourceInputs["oldestRestoreTime"] = undefined /*out*/;
            resourceInputs["pendingUpdates"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["rootPassword"] = undefined /*out*/;
            resourceInputs["rootUsername"] = undefined /*out*/;
            resourceInputs["sslConnection"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert", "rootPassword", "rootUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabasePostgresqlV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabasePostgresqlV2 resources.
 */
export interface DatabasePostgresqlV2State {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The base64-encoded SSL CA certificate for the Managed Database.
     */
    caCert?: pulumi.Input<string>;
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     */
    clusterSize?: pulumi.Input<number>;
    /**
     * When this Managed Database was created.
     */
    created?: pulumi.Input<string>;
    /**
     * Whether the Managed Databases is encrypted.
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The Managed Database engine. (e.g. `postgresql`)
     */
    engine?: pulumi.Input<string>;
    /**
     * Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     */
    engineConfigPgAutovacuumAnalyzeScaleFactor?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     */
    engineConfigPgAutovacuumAnalyzeThreshold?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     */
    engineConfigPgAutovacuumMaxWorkers?: pulumi.Input<number>;
    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
     */
    engineConfigPgAutovacuumNaptime?: pulumi.Input<number>;
    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
     */
    engineConfigPgAutovacuumVacuumCostDelay?: pulumi.Input<number>;
    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
     */
    engineConfigPgAutovacuumVacuumCostLimit?: pulumi.Input<number>;
    /**
     * Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     */
    engineConfigPgAutovacuumVacuumScaleFactor?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     */
    engineConfigPgAutovacuumVacuumThreshold?: pulumi.Input<number>;
    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    engineConfigPgBgwriterDelay?: pulumi.Input<number>;
    /**
     * Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    engineConfigPgBgwriterFlushAfter?: pulumi.Input<number>;
    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    engineConfigPgBgwriterLruMaxpages?: pulumi.Input<number>;
    /**
     * The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    engineConfigPgBgwriterLruMultiplier?: pulumi.Input<number>;
    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     */
    engineConfigPgDeadlockTimeout?: pulumi.Input<number>;
    /**
     * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     */
    engineConfigPgDefaultToastCompression?: pulumi.Input<string>;
    /**
     * Time out sessions with open transactions after this number of milliseconds.
     */
    engineConfigPgIdleInTransactionSessionTimeout?: pulumi.Input<number>;
    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     */
    engineConfigPgJit?: pulumi.Input<boolean>;
    /**
     * PostgreSQL maximum number of files that can be open per process.
     */
    engineConfigPgMaxFilesPerProcess?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum locks per transaction.
     */
    engineConfigPgMaxLocksPerTransaction?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     */
    engineConfigPgMaxLogicalReplicationWorkers?: pulumi.Input<number>;
    /**
     * Sets the maximum number of workers that the system can support for parallel queries.
     */
    engineConfigPgMaxParallelWorkers?: pulumi.Input<number>;
    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     */
    engineConfigPgMaxParallelWorkersPerGather?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum predicate locks per transaction.
     */
    engineConfigPgMaxPredLocksPerTransaction?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum replication slots.
     */
    engineConfigPgMaxReplicationSlots?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
     */
    engineConfigPgMaxSlotWalKeepSize?: pulumi.Input<number>;
    /**
     * Maximum depth of the stack in bytes.
     */
    engineConfigPgMaxStackDepth?: pulumi.Input<number>;
    /**
     * Max standby archive delay in milliseconds.
     */
    engineConfigPgMaxStandbyArchiveDelay?: pulumi.Input<number>;
    /**
     * Max standby streaming delay in milliseconds.
     */
    engineConfigPgMaxStandbyStreamingDelay?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum WAL senders.
     */
    engineConfigPgMaxWalSenders?: pulumi.Input<number>;
    /**
     * Sets the maximum number of background processes that the system can support.
     */
    engineConfigPgMaxWorkerProcesses?: pulumi.Input<number>;
    /**
     * Chooses the algorithm for encrypting passwords. (default `md5`)
     */
    engineConfigPgPasswordEncryption?: pulumi.Input<string>;
    /**
     * Sets the time interval to run pg_partman's scheduled tasks.
     */
    engineConfigPgPgPartmanBgwInterval?: pulumi.Input<number>;
    /**
     * Controls which role to use for pg_partman's scheduled background tasks.
     */
    engineConfigPgPgPartmanBgwRole?: pulumi.Input<string>;
    /**
     * Enables or disables query plan monitoring.
     */
    engineConfigPgPgStatMonitorPgsmEnableQueryPlan?: pulumi.Input<boolean>;
    /**
     * Sets the maximum number of buckets.
     */
    engineConfigPgPgStatMonitorPgsmMaxBuckets?: pulumi.Input<number>;
    /**
     * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     */
    engineConfigPgPgStatStatementsTrack?: pulumi.Input<string>;
    /**
     * Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
     */
    engineConfigPgStatMonitorEnable?: pulumi.Input<boolean>;
    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited.
     */
    engineConfigPgTempFileLimit?: pulumi.Input<number>;
    /**
     * PostgreSQL service timezone.
     */
    engineConfigPgTimezone?: pulumi.Input<string>;
    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session.
     */
    engineConfigPgTrackActivityQuerySize?: pulumi.Input<number>;
    /**
     * Record commit time of transactions.
     */
    engineConfigPgTrackCommitTimestamp?: pulumi.Input<string>;
    /**
     * Enables tracking of function call counts and time used.
     */
    engineConfigPgTrackFunctions?: pulumi.Input<string>;
    /**
     * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     */
    engineConfigPgTrackIoTiming?: pulumi.Input<string>;
    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    engineConfigPgWalSenderTimeout?: pulumi.Input<number>;
    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     */
    engineConfigPgWalWriterDelay?: pulumi.Input<number>;
    /**
     * Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
     */
    engineConfigPglookoutMaxFailoverReplicationTimeLag?: pulumi.Input<number>;
    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
     */
    engineConfigSharedBuffersPercentage?: pulumi.Input<number>;
    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    engineConfigWorkMem?: pulumi.Input<number>;
    /**
     * The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     */
    engineId?: pulumi.Input<string>;
    /**
     * The database timestamp from which it was restored.
     */
    forkRestoreTime?: pulumi.Input<string>;
    /**
     * The ID of the database that was forked from.
     *
     * * `privateNetwork` - (Optional) Restricts access to this database using a virtual private cloud (VPC) that you've configured in the region where the database will live.
     *
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     */
    forkSource?: pulumi.Input<number>;
    /**
     * The primary host for the Managed Database.
     */
    hostPrimary?: pulumi.Input<string>;
    /**
     * The secondary/private host for the managed database.
     */
    hostSecondary?: pulumi.Input<string>;
    /**
     * A unique, user-defined string referring to the Managed Database.
     */
    label?: pulumi.Input<string>;
    /**
     * A mapping between IP addresses and strings designating them as primary or failover.
     */
    members?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The oldest time to which a database can be restored.
     */
    oldestRestoreTime?: pulumi.Input<string>;
    /**
     * A set of pending updates.
     */
    pendingUpdates?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlV2PendingUpdate>[]>;
    /**
     * The back-end platform for relational databases used by the service.
     */
    platform?: pulumi.Input<string>;
    /**
     * The access port for this Managed Database.
     */
    port?: pulumi.Input<number>;
    /**
     * Restricts access to this database using a virtual private cloud (VPC) that you've configured in the region where the database will live.
     */
    privateNetwork?: pulumi.Input<inputs.DatabasePostgresqlV2PrivateNetwork>;
    /**
     * The region to use for the Managed Database.
     */
    region?: pulumi.Input<string>;
    /**
     * The randomly-generated root password for the Managed Database instance.
     */
    rootPassword?: pulumi.Input<string>;
    /**
     * The root username for the Managed Database instance.
     */
    rootUsername?: pulumi.Input<string>;
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     */
    sslConnection?: pulumi.Input<boolean>;
    /**
     * The operating status of the Managed Database.
     */
    status?: pulumi.Input<string>;
    /**
     * Whether this Managed Database should be suspended.
     */
    suspended?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DatabasePostgresqlV2Timeouts>;
    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     *
     * - - -
     */
    type?: pulumi.Input<string>;
    /**
     * When this Managed Database was last updated.
     */
    updated?: pulumi.Input<string>;
    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     */
    updates?: pulumi.Input<inputs.DatabasePostgresqlV2Updates>;
    /**
     * The Managed Database engine version. (e.g. `13.2`)
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabasePostgresqlV2 resource.
 */
export interface DatabasePostgresqlV2Args {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     */
    clusterSize?: pulumi.Input<number>;
    /**
     * Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
     */
    engineConfigPgAutovacuumAnalyzeScaleFactor?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
     */
    engineConfigPgAutovacuumAnalyzeThreshold?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
     */
    engineConfigPgAutovacuumMaxWorkers?: pulumi.Input<number>;
    /**
     * Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
     */
    engineConfigPgAutovacuumNaptime?: pulumi.Input<number>;
    /**
     * Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
     */
    engineConfigPgAutovacuumVacuumCostDelay?: pulumi.Input<number>;
    /**
     * Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
     */
    engineConfigPgAutovacuumVacuumCostLimit?: pulumi.Input<number>;
    /**
     * Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
     */
    engineConfigPgAutovacuumVacuumScaleFactor?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
     */
    engineConfigPgAutovacuumVacuumThreshold?: pulumi.Input<number>;
    /**
     * Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
     */
    engineConfigPgBgwriterDelay?: pulumi.Input<number>;
    /**
     * Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
     */
    engineConfigPgBgwriterFlushAfter?: pulumi.Input<number>;
    /**
     * In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
     */
    engineConfigPgBgwriterLruMaxpages?: pulumi.Input<number>;
    /**
     * The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
     */
    engineConfigPgBgwriterLruMultiplier?: pulumi.Input<number>;
    /**
     * This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
     */
    engineConfigPgDeadlockTimeout?: pulumi.Input<number>;
    /**
     * Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
     */
    engineConfigPgDefaultToastCompression?: pulumi.Input<string>;
    /**
     * Time out sessions with open transactions after this number of milliseconds.
     */
    engineConfigPgIdleInTransactionSessionTimeout?: pulumi.Input<number>;
    /**
     * Controls system-wide use of Just-in-Time Compilation (JIT).
     */
    engineConfigPgJit?: pulumi.Input<boolean>;
    /**
     * PostgreSQL maximum number of files that can be open per process.
     */
    engineConfigPgMaxFilesPerProcess?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum locks per transaction.
     */
    engineConfigPgMaxLocksPerTransaction?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
     */
    engineConfigPgMaxLogicalReplicationWorkers?: pulumi.Input<number>;
    /**
     * Sets the maximum number of workers that the system can support for parallel queries.
     */
    engineConfigPgMaxParallelWorkers?: pulumi.Input<number>;
    /**
     * Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
     */
    engineConfigPgMaxParallelWorkersPerGather?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum predicate locks per transaction.
     */
    engineConfigPgMaxPredLocksPerTransaction?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum replication slots.
     */
    engineConfigPgMaxReplicationSlots?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
     */
    engineConfigPgMaxSlotWalKeepSize?: pulumi.Input<number>;
    /**
     * Maximum depth of the stack in bytes.
     */
    engineConfigPgMaxStackDepth?: pulumi.Input<number>;
    /**
     * Max standby archive delay in milliseconds.
     */
    engineConfigPgMaxStandbyArchiveDelay?: pulumi.Input<number>;
    /**
     * Max standby streaming delay in milliseconds.
     */
    engineConfigPgMaxStandbyStreamingDelay?: pulumi.Input<number>;
    /**
     * PostgreSQL maximum WAL senders.
     */
    engineConfigPgMaxWalSenders?: pulumi.Input<number>;
    /**
     * Sets the maximum number of background processes that the system can support.
     */
    engineConfigPgMaxWorkerProcesses?: pulumi.Input<number>;
    /**
     * Chooses the algorithm for encrypting passwords. (default `md5`)
     */
    engineConfigPgPasswordEncryption?: pulumi.Input<string>;
    /**
     * Sets the time interval to run pg_partman's scheduled tasks.
     */
    engineConfigPgPgPartmanBgwInterval?: pulumi.Input<number>;
    /**
     * Controls which role to use for pg_partman's scheduled background tasks.
     */
    engineConfigPgPgPartmanBgwRole?: pulumi.Input<string>;
    /**
     * Enables or disables query plan monitoring.
     */
    engineConfigPgPgStatMonitorPgsmEnableQueryPlan?: pulumi.Input<boolean>;
    /**
     * Sets the maximum number of buckets.
     */
    engineConfigPgPgStatMonitorPgsmMaxBuckets?: pulumi.Input<number>;
    /**
     * Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
     */
    engineConfigPgPgStatStatementsTrack?: pulumi.Input<string>;
    /**
     * Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
     */
    engineConfigPgStatMonitorEnable?: pulumi.Input<boolean>;
    /**
     * PostgreSQL temporary file limit in KiB, -1 for unlimited.
     */
    engineConfigPgTempFileLimit?: pulumi.Input<number>;
    /**
     * PostgreSQL service timezone.
     */
    engineConfigPgTimezone?: pulumi.Input<string>;
    /**
     * Specifies the number of bytes reserved to track the currently executing command for each active session.
     */
    engineConfigPgTrackActivityQuerySize?: pulumi.Input<number>;
    /**
     * Record commit time of transactions.
     */
    engineConfigPgTrackCommitTimestamp?: pulumi.Input<string>;
    /**
     * Enables tracking of function call counts and time used.
     */
    engineConfigPgTrackFunctions?: pulumi.Input<string>;
    /**
     * Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
     */
    engineConfigPgTrackIoTiming?: pulumi.Input<string>;
    /**
     * Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
     */
    engineConfigPgWalSenderTimeout?: pulumi.Input<number>;
    /**
     * WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
     */
    engineConfigPgWalWriterDelay?: pulumi.Input<number>;
    /**
     * Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
     */
    engineConfigPglookoutMaxFailoverReplicationTimeLag?: pulumi.Input<number>;
    /**
     * Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
     */
    engineConfigSharedBuffersPercentage?: pulumi.Input<number>;
    /**
     * Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
     */
    engineConfigWorkMem?: pulumi.Input<number>;
    /**
     * The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
     */
    engineId: pulumi.Input<string>;
    /**
     * The database timestamp from which it was restored.
     */
    forkRestoreTime?: pulumi.Input<string>;
    /**
     * The ID of the database that was forked from.
     *
     * * `privateNetwork` - (Optional) Restricts access to this database using a virtual private cloud (VPC) that you've configured in the region where the database will live.
     *
     * * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
     */
    forkSource?: pulumi.Input<number>;
    /**
     * A unique, user-defined string referring to the Managed Database.
     */
    label: pulumi.Input<string>;
    /**
     * Restricts access to this database using a virtual private cloud (VPC) that you've configured in the region where the database will live.
     */
    privateNetwork?: pulumi.Input<inputs.DatabasePostgresqlV2PrivateNetwork>;
    /**
     * The region to use for the Managed Database.
     */
    region: pulumi.Input<string>;
    /**
     * Whether this Managed Database should be suspended.
     */
    suspended?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DatabasePostgresqlV2Timeouts>;
    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     *
     * - - -
     */
    type: pulumi.Input<string>;
    /**
     * Configuration settings for automated patch update maintenance for the Managed Database.
     */
    updates?: pulumi.Input<inputs.DatabasePostgresqlV2Updates>;
}
