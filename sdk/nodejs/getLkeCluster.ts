// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides details about an LKE Cluster.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_cluster = linode.getLkeCluster({
 *     id: 123,
 * });
 * ```
 */
export function getLkeCluster(args: GetLkeClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetLkeClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getLkeCluster:getLkeCluster", {
        "controlPlanes": args.controlPlanes,
        "id": args.id,
        "pools": args.pools,
    }, opts);
}

/**
 * A collection of arguments for invoking getLkeCluster.
 */
export interface GetLkeClusterArgs {
    /**
     * The settings for the Kubernetes Control Plane.
     */
    controlPlanes?: inputs.GetLkeClusterControlPlane[];
    /**
     * The LKE Cluster's ID.
     */
    id: number;
    /**
     * Node pools associated with this cluster.
     */
    pools?: inputs.GetLkeClusterPool[];
}

/**
 * A collection of values returned by getLkeCluster.
 */
export interface GetLkeClusterResult {
    /**
     * The endpoints for the Kubernetes API server.
     */
    readonly apiEndpoints: string[];
    /**
     * Enables the App Platform Layer
     */
    readonly aplEnabled: boolean;
    /**
     * The settings for the Kubernetes Control Plane.
     */
    readonly controlPlanes?: outputs.GetLkeClusterControlPlane[];
    /**
     * When this Kubernetes cluster was created.
     */
    readonly created: string;
    /**
     * The Kubernetes Dashboard access URL for this cluster. LKE Enterprise does not have a dashboard URL.
     */
    readonly dashboardUrl: string;
    /**
     * The ID of the node.
     */
    readonly id: number;
    /**
     * The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
     */
    readonly k8sVersion: string;
    /**
     * The base64 encoded kubeconfig for the Kubernetes cluster.
     */
    readonly kubeconfig: string;
    /**
     * The unique label for the cluster.
     */
    readonly label: string;
    /**
     * Node pools associated with this cluster.
     */
    readonly pools?: outputs.GetLkeClusterPool[];
    /**
     * This Kubernetes cluster's location.
     */
    readonly region: string;
    /**
     * The status of the node. (`ready`, `notReady`)
     */
    readonly status: string;
    /**
     * An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
     */
    readonly tags: string[];
    /**
     * The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
     */
    readonly tier: string;
    /**
     * When this Kubernetes cluster was updated.
     */
    readonly updated: string;
}
/**
 * Provides details about an LKE Cluster.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_cluster = linode.getLkeCluster({
 *     id: 123,
 * });
 * ```
 */
export function getLkeClusterOutput(args: GetLkeClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLkeClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getLkeCluster:getLkeCluster", {
        "controlPlanes": args.controlPlanes,
        "id": args.id,
        "pools": args.pools,
    }, opts);
}

/**
 * A collection of arguments for invoking getLkeCluster.
 */
export interface GetLkeClusterOutputArgs {
    /**
     * The settings for the Kubernetes Control Plane.
     */
    controlPlanes?: pulumi.Input<pulumi.Input<inputs.GetLkeClusterControlPlaneArgs>[]>;
    /**
     * The LKE Cluster's ID.
     */
    id: pulumi.Input<number>;
    /**
     * Node pools associated with this cluster.
     */
    pools?: pulumi.Input<pulumi.Input<inputs.GetLkeClusterPoolArgs>[]>;
}
