// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about a list of Linode VPC IPs that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
 *
 * Provides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to list VPC IPs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered-ips = linode.getVpcIps({
 *     filters: [{
 *         name: "address",
 *         values: ["10.0.0.0"],
 *     }],
 * });
 * export const vpcIps = filtered_ips.then(filtered_ips => filtered_ips.vpcIps);
 * ```
 *
 * One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const specific-vpc-ips = linode.getVpcIps({
 *     vpcId: 123,
 * });
 * export const vpcIps = specific_vpc_ips.then(specific_vpc_ips => specific_vpc_ips.vpcIps);
 * ```
 *
 * ## Filterable Fields
 *
 * * `active`
 *
 * * `configId`
 *
 * * `linodeId`
 *
 * * `region`
 *
 * * `vpcId`
 */
export function getVpcIps(args?: GetVpcIpsArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcIpsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getVpcIps:getVpcIps", {
        "filters": args.filters,
        "vpcId": args.vpcId,
        "vpcIps": args.vpcIps,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcIps.
 */
export interface GetVpcIpsArgs {
    filters?: inputs.GetVpcIpsFilter[];
    /**
     * The id of the parent VPC for the list of VPC IPs.
     *
     * * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
     */
    vpcId?: number;
    vpcIps?: inputs.GetVpcIpsVpcIp[];
}

/**
 * A collection of values returned by getVpcIps.
 */
export interface GetVpcIpsResult {
    readonly filters?: outputs.GetVpcIpsFilter[];
    readonly id: string;
    /**
     * The unique globally general API entity identifier for the VPC.
     */
    readonly vpcId?: number;
    readonly vpcIps?: outputs.GetVpcIpsVpcIp[];
}
/**
 * Provides information about a list of Linode VPC IPs that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
 *
 * Provides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to list VPC IPs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filtered-ips = linode.getVpcIps({
 *     filters: [{
 *         name: "address",
 *         values: ["10.0.0.0"],
 *     }],
 * });
 * export const vpcIps = filtered_ips.then(filtered_ips => filtered_ips.vpcIps);
 * ```
 *
 * One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const specific-vpc-ips = linode.getVpcIps({
 *     vpcId: 123,
 * });
 * export const vpcIps = specific_vpc_ips.then(specific_vpc_ips => specific_vpc_ips.vpcIps);
 * ```
 *
 * ## Filterable Fields
 *
 * * `active`
 *
 * * `configId`
 *
 * * `linodeId`
 *
 * * `region`
 *
 * * `vpcId`
 */
export function getVpcIpsOutput(args?: GetVpcIpsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcIpsResult> {
    return pulumi.output(args).apply((a: any) => getVpcIps(a, opts))
}

/**
 * A collection of arguments for invoking getVpcIps.
 */
export interface GetVpcIpsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetVpcIpsFilterArgs>[]>;
    /**
     * The id of the parent VPC for the list of VPC IPs.
     *
     * * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
     */
    vpcId?: pulumi.Input<number>;
    vpcIps?: pulumi.Input<pulumi.Input<inputs.GetVpcIpsVpcIpArgs>[]>;
}
