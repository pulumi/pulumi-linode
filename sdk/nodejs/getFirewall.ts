// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides details about a Linode Firewall.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_firewall = pulumi.output(linode.getFirewall({
 *     id: 123,
 * }));
 * ```
 */
export function getFirewall(args: GetFirewallArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("linode:index/getFirewall:getFirewall", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getFirewall.
 */
export interface GetFirewallArgs {
    /**
     * The Firewall's ID.
     */
    id: number;
}

/**
 * A collection of values returned by getFirewall.
 */
export interface GetFirewallResult {
    readonly devices: outputs.GetFirewallDevice[];
    /**
     * If true, the firewall is inactive.
     */
    readonly disabled: boolean;
    /**
     * The ID of the Firewall Device.
     */
    readonly id: number;
    /**
     * The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
     */
    readonly inboundPolicy: string;
    readonly inbounds: outputs.GetFirewallInbound[];
    /**
     * The label of the underlying entity this device references.
     */
    readonly label: string;
    /**
     * The IDs of Linodes to apply this firewall to.
     */
    readonly linodes: number[];
    /**
     * The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
     */
    readonly outboundPolicy: string;
    readonly outbounds: outputs.GetFirewallOutbound[];
    /**
     * The status of the firewall. (`enabled`, `disabled`, `deleted`)
     */
    readonly status: string;
    /**
     * The tags applied to the firewall.
     */
    readonly tags: string[];
}

export function getFirewallOutput(args: GetFirewallOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirewallResult> {
    return pulumi.output(args).apply(a => getFirewall(a, opts))
}

/**
 * A collection of arguments for invoking getFirewall.
 */
export interface GetFirewallOutputArgs {
    /**
     * The Firewall's ID.
     */
    id: pulumi.Input<number>;
}
