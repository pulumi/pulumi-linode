// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Linode Placement Group.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-placement-group).
 *
 * ## Example Usage
 *
 * Create a Placement Group with the local anti-affinity policy:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const test = new linode.PlacementGroup("test", {
 *     label: "my-placement-group",
 *     region: "us-mia",
 *     placementGroupType: "anti_affinity:local",
 * });
 * ```
 *
 * ## Import
 *
 * Placement Groups be imported using their unique `id`, e.g.
 *
 * ```sh
 * $ pulumi import linode:index/placementGroup:PlacementGroup mygroup 1234567
 * ```
 */
export class PlacementGroup extends pulumi.CustomResource {
    /**
     * Get an existing PlacementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlacementGroupState, opts?: pulumi.CustomResourceOptions): PlacementGroup {
        return new PlacementGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/placementGroup:PlacementGroup';

    /**
     * Returns true if the given object is an instance of PlacementGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlacementGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlacementGroup.__pulumiType;
    }

    /**
     * Whether this Linode is currently compliant with the group's placement group type.
     */
    public /*out*/ readonly isCompliant!: pulumi.Output<boolean>;
    /**
     * The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * A set of Linodes currently assigned to this Placement Group.
     */
    public /*out*/ readonly members!: pulumi.Output<outputs.PlacementGroupMember[]>;
    /**
     * Whether Linodes must be able to become compliant during assignment. (Default `strict`)
     */
    public readonly placementGroupPolicy!: pulumi.Output<string>;
    /**
     * The placement group type to use when placing Linodes in this group.
     */
    public readonly placementGroupType!: pulumi.Output<string>;
    /**
     * The region of the Placement Group.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a PlacementGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlacementGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlacementGroupArgs | PlacementGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlacementGroupState | undefined;
            resourceInputs["isCompliant"] = state ? state.isCompliant : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["placementGroupPolicy"] = state ? state.placementGroupPolicy : undefined;
            resourceInputs["placementGroupType"] = state ? state.placementGroupType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as PlacementGroupArgs | undefined;
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.placementGroupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'placementGroupType'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["placementGroupPolicy"] = args ? args.placementGroupPolicy : undefined;
            resourceInputs["placementGroupType"] = args ? args.placementGroupType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["isCompliant"] = undefined /*out*/;
            resourceInputs["members"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlacementGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PlacementGroup resources.
 */
export interface PlacementGroupState {
    /**
     * Whether this Linode is currently compliant with the group's placement group type.
     */
    isCompliant?: pulumi.Input<boolean>;
    /**
     * The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
     */
    label?: pulumi.Input<string>;
    /**
     * A set of Linodes currently assigned to this Placement Group.
     */
    members?: pulumi.Input<pulumi.Input<inputs.PlacementGroupMember>[]>;
    /**
     * Whether Linodes must be able to become compliant during assignment. (Default `strict`)
     */
    placementGroupPolicy?: pulumi.Input<string>;
    /**
     * The placement group type to use when placing Linodes in this group.
     */
    placementGroupType?: pulumi.Input<string>;
    /**
     * The region of the Placement Group.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlacementGroup resource.
 */
export interface PlacementGroupArgs {
    /**
     * The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
     */
    label: pulumi.Input<string>;
    /**
     * Whether Linodes must be able to become compliant during assignment. (Default `strict`)
     */
    placementGroupPolicy?: pulumi.Input<string>;
    /**
     * The placement group type to use when placing Linodes in this group.
     */
    placementGroupType: pulumi.Input<string>;
    /**
     * The region of the Placement Group.
     */
    region: pulumi.Input<string>;
}
