// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about Linode NodeBalancer Configs that match a set of filters.
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to access information about a list of NodeBalancer Configs.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filterNbConfigs = linode.getNodebalancerConfigs({
 *     nodebalancerId: 12345,
 *     filters: [{
 *         name: "port",
 *         values: ["80"],
 *     }],
 * });
 * export const nodebalancerConfigId = filterNbConfigs.then(filterNbConfigs => filterNbConfigs.nodebalancerConfigs?.[0]?.id);
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Filterable Fields
 *
 * * `algorithm`
 *
 * * `check`
 *
 * * `nodebalancerId`
 *
 * * `port`
 *
 * * `protocol`
 *
 * * `proxyProtocol`
 *
 * * `stickiness`
 *
 * * `checkPath`
 *
 * * `checkBody`
 *
 * * `checkPassive`
 *
 * * `cipherSuite`
 *
 * * `sslCommonname`
 */
export function getNodebalancerConfigs(args: GetNodebalancerConfigsArgs, opts?: pulumi.InvokeOptions): Promise<GetNodebalancerConfigsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getNodebalancerConfigs:getNodebalancerConfigs", {
        "filters": args.filters,
        "nodebalancerConfigs": args.nodebalancerConfigs,
        "nodebalancerId": args.nodebalancerId,
        "order": args.order,
        "orderBy": args.orderBy,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodebalancerConfigs.
 */
export interface GetNodebalancerConfigsArgs {
    filters?: inputs.GetNodebalancerConfigsFilter[];
    nodebalancerConfigs?: inputs.GetNodebalancerConfigsNodebalancerConfig[];
    /**
     * The ID of the NodeBalancer to access.
     *
     * * `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.
     */
    nodebalancerId: number;
    /**
     * The order in which results should be returned. (`asc`, `desc`; default `asc`)
     */
    order?: string;
    /**
     * The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
     */
    orderBy?: string;
}

/**
 * A collection of values returned by getNodebalancerConfigs.
 */
export interface GetNodebalancerConfigsResult {
    readonly filters?: outputs.GetNodebalancerConfigsFilter[];
    /**
     * The config's ID.
     */
    readonly id: string;
    readonly nodebalancerConfigs?: outputs.GetNodebalancerConfigsNodebalancerConfig[];
    /**
     * The ID of the NodeBalancer that contains the config.
     */
    readonly nodebalancerId: number;
    readonly order?: string;
    readonly orderBy?: string;
}
/**
 * Provides information about Linode NodeBalancer Configs that match a set of filters.
 *
 * ## Example Usage
 *
 * The following example shows how one might use this data source to access information about a list of NodeBalancer Configs.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const filterNbConfigs = linode.getNodebalancerConfigs({
 *     nodebalancerId: 12345,
 *     filters: [{
 *         name: "port",
 *         values: ["80"],
 *     }],
 * });
 * export const nodebalancerConfigId = filterNbConfigs.then(filterNbConfigs => filterNbConfigs.nodebalancerConfigs?.[0]?.id);
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Filterable Fields
 *
 * * `algorithm`
 *
 * * `check`
 *
 * * `nodebalancerId`
 *
 * * `port`
 *
 * * `protocol`
 *
 * * `proxyProtocol`
 *
 * * `stickiness`
 *
 * * `checkPath`
 *
 * * `checkBody`
 *
 * * `checkPassive`
 *
 * * `cipherSuite`
 *
 * * `sslCommonname`
 */
export function getNodebalancerConfigsOutput(args: GetNodebalancerConfigsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNodebalancerConfigsResult> {
    return pulumi.output(args).apply((a: any) => getNodebalancerConfigs(a, opts))
}

/**
 * A collection of arguments for invoking getNodebalancerConfigs.
 */
export interface GetNodebalancerConfigsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetNodebalancerConfigsFilterArgs>[]>;
    nodebalancerConfigs?: pulumi.Input<pulumi.Input<inputs.GetNodebalancerConfigsNodebalancerConfigArgs>[]>;
    /**
     * The ID of the NodeBalancer to access.
     *
     * * `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.
     */
    nodebalancerId: pulumi.Input<number>;
    /**
     * The order in which results should be returned. (`asc`, `desc`; default `asc`)
     */
    order?: pulumi.Input<string>;
    /**
     * The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
     */
    orderBy?: pulumi.Input<string>;
}
