// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about a Linode MySQL Database.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance).
 *
 * ## Example Usage
 *
 * Get information about a MySQL database:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_db = linode.getDatabaseMysqlV2({
 *     id: "12345",
 * });
 * ```
 *
 * ## pendingUpdates
 *
 * The following arguments are exposed by each entry in the `pendingUpdates` attribute:
 *
 * * `deadline` - The time when a mandatory update needs to be applied.
 *
 * * `description` - A description of the update.
 *
 * * `plannedFor` - The date and time a maintenance update will be applied.
 *
 * ## updates
 *
 * The following arguments are supported in the `updates` specification block:
 *
 * * `dayOfWeek` - The day to perform maintenance. (`monday`, `tuesday`, ...)
 *
 * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
 *
 * * `frequency` - The frequency at which maintenance occurs. (`weekly`)
 *
 * * `hourOfDay` - The hour to begin maintenance based in UTC time. (`0`..`23`)
 */
export function getDatabaseMysqlV2(args: GetDatabaseMysqlV2Args, opts?: pulumi.InvokeOptions): Promise<GetDatabaseMysqlV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getDatabaseMysqlV2:getDatabaseMysqlV2", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseMysqlV2.
 */
export interface GetDatabaseMysqlV2Args {
    /**
     * The ID of the MySQL database.
     */
    id: string;
}

/**
 * A collection of values returned by getDatabaseMysqlV2.
 */
export interface GetDatabaseMysqlV2Result {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
     */
    readonly allowLists: string[];
    /**
     * The base64-encoded SSL CA certificate for the Managed Database.
     */
    readonly caCert: string;
    /**
     * The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
     */
    readonly clusterSize: number;
    /**
     * When this Managed Database was created.
     */
    readonly created: string;
    /**
     * Whether the Managed Databases is encrypted.
     */
    readonly encrypted: boolean;
    /**
     * The Managed Database engine. (e.g. `mysql`)
     */
    readonly engine: string;
    /**
     * The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     */
    readonly engineConfigBinlogRetentionPeriod: number;
    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
     */
    readonly engineConfigMysqlConnectTimeout: number;
    /**
     * Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
     */
    readonly engineConfigMysqlDefaultTimeZone: string;
    /**
     * The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
     */
    readonly engineConfigMysqlGroupConcatMaxLen: number;
    /**
     * The time, in seconds, before cached statistics expire.
     */
    readonly engineConfigMysqlInformationSchemaStatsExpiry: number;
    /**
     * Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
     */
    readonly engineConfigMysqlInnodbChangeBufferMaxSize: number;
    /**
     * Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
     */
    readonly engineConfigMysqlInnodbFlushNeighbors: number;
    /**
     * Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
     */
    readonly engineConfigMysqlInnodbFtMinTokenSize: number;
    /**
     * This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
     */
    readonly engineConfigMysqlInnodbFtServerStopwordTable: string;
    /**
     * The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
     */
    readonly engineConfigMysqlInnodbLockWaitTimeout: number;
    /**
     * The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
     */
    readonly engineConfigMysqlInnodbLogBufferSize: number;
    /**
     * The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
     */
    readonly engineConfigMysqlInnodbOnlineAlterLogMaxSize: number;
    /**
     * The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    readonly engineConfigMysqlInnodbReadIoThreads: number;
    /**
     * When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
     */
    readonly engineConfigMysqlInnodbRollbackOnTimeout: boolean;
    /**
     * Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
     */
    readonly engineConfigMysqlInnodbThreadConcurrency: number;
    /**
     * The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
     */
    readonly engineConfigMysqlInnodbWriteIoThreads: number;
    /**
     * The number of seconds the server waits for activity on an interactive connection before closing it.
     */
    readonly engineConfigMysqlInteractiveTimeout: number;
    /**
     * The storage engine for in-memory internal temporary tables.
     */
    readonly engineConfigMysqlInternalTmpMemStorageEngine: string;
    /**
     * Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
     */
    readonly engineConfigMysqlMaxAllowedPacket: number;
    /**
     * Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
     */
    readonly engineConfigMysqlMaxHeapTableSize: number;
    /**
     * Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
     */
    readonly engineConfigMysqlNetBufferLength: number;
    /**
     * The number of seconds to wait for more data from a connection before aborting the read.
     */
    readonly engineConfigMysqlNetReadTimeout: number;
    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     */
    readonly engineConfigMysqlNetWriteTimeout: number;
    /**
     * Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
     */
    readonly engineConfigMysqlSortBufferSize: number;
    /**
     * Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
     */
    readonly engineConfigMysqlSqlMode: string;
    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     */
    readonly engineConfigMysqlSqlRequirePrimaryKey: boolean;
    /**
     * Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
     */
    readonly engineConfigMysqlTmpTableSize: number;
    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     */
    readonly engineConfigMysqlWaitTimeout: number;
    /**
     * The Managed Database engine in engine/version format. (e.g. `mysql`)
     */
    readonly engineId: string;
    /**
     * The database timestamp from which it was restored.
     */
    readonly forkRestoreTime: string;
    /**
     * The ID of the database that was forked from.
     */
    readonly forkSource: number;
    /**
     * The primary host for the Managed Database.
     */
    readonly hostPrimary: string;
    /**
     * The secondary/private host for the managed database.
     */
    readonly hostSecondary: string;
    readonly id: string;
    /**
     * A unique, user-defined string referring to the Managed Database.
     */
    readonly label: string;
    readonly members: {[key: string]: string};
    readonly oldestRestoreTime: string;
    readonly pendingUpdates: outputs.GetDatabaseMysqlV2PendingUpdate[];
    /**
     * The back-end platform for relational databases used by the service.
     */
    readonly platform: string;
    /**
     * The access port for this Managed Database.
     */
    readonly port: number;
    /**
     * The region to use for the Managed Database.
     */
    readonly region: string;
    /**
     * The randomly-generated root password for the Managed Database instance.
     */
    readonly rootPassword: string;
    /**
     * The root username for the Managed Database instance.
     */
    readonly rootUsername: string;
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     */
    readonly sslConnection: boolean;
    /**
     * The operating status of the Managed Database.
     */
    readonly status: string;
    /**
     * Whether this Managed Database is suspended.
     */
    readonly suspended: boolean;
    /**
     * The Linode Instance type used for the nodes of the Managed Database.
     */
    readonly type: string;
    /**
     * When this Managed Database was last updated.
     */
    readonly updated: string;
    readonly updates: outputs.GetDatabaseMysqlV2Updates;
    /**
     * The Managed Database engine version. (e.g. `13.2`)
     */
    readonly version: string;
}
/**
 * Provides information about a Linode MySQL Database.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance).
 *
 * ## Example Usage
 *
 * Get information about a MySQL database:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_db = linode.getDatabaseMysqlV2({
 *     id: "12345",
 * });
 * ```
 *
 * ## pendingUpdates
 *
 * The following arguments are exposed by each entry in the `pendingUpdates` attribute:
 *
 * * `deadline` - The time when a mandatory update needs to be applied.
 *
 * * `description` - A description of the update.
 *
 * * `plannedFor` - The date and time a maintenance update will be applied.
 *
 * ## updates
 *
 * The following arguments are supported in the `updates` specification block:
 *
 * * `dayOfWeek` - The day to perform maintenance. (`monday`, `tuesday`, ...)
 *
 * * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
 *
 * * `frequency` - The frequency at which maintenance occurs. (`weekly`)
 *
 * * `hourOfDay` - The hour to begin maintenance based in UTC time. (`0`..`23`)
 */
export function getDatabaseMysqlV2Output(args: GetDatabaseMysqlV2OutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDatabaseMysqlV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getDatabaseMysqlV2:getDatabaseMysqlV2", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseMysqlV2.
 */
export interface GetDatabaseMysqlV2OutputArgs {
    /**
     * The ID of the MySQL database.
     */
    id: pulumi.Input<string>;
}
