// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides details about a Linode NodeBalancer node.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-node).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_node = linode.getNodeBalancerNode({
 *     id: 123,
 *     nodebalancerId: 456,
 *     configId: 789,
 * });
 * ```
 */
export function getNodeBalancerNode(args: GetNodeBalancerNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeBalancerNodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("linode:index/getNodeBalancerNode:getNodeBalancerNode", {
        "configId": args.configId,
        "id": args.id,
        "nodebalancerId": args.nodebalancerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodeBalancerNode.
 */
export interface GetNodeBalancerNodeArgs {
    /**
     * The ID of the config that contains the Node.
     */
    configId: number;
    /**
     * The node's ID.
     */
    id: number;
    /**
     * The ID of the NodeBalancer that contains the node.
     */
    nodebalancerId: number;
}

/**
 * A collection of values returned by getNodeBalancerNode.
 */
export interface GetNodeBalancerNodeResult {
    /**
     * The private IP Address where this backend can be reached.
     */
    readonly address: string;
    readonly configId: number;
    readonly id: number;
    /**
     * The label of the Linode NodeBalancer Node. This is for display purposes only.
     */
    readonly label: string;
    /**
     * The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)
     */
    readonly mode: string;
    readonly nodebalancerId: number;
    /**
     * The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).
     */
    readonly status: string;
    /**
     * Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
     */
    readonly weight: number;
}
/**
 * Provides details about a Linode NodeBalancer node.
 * For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-node).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const my_node = linode.getNodeBalancerNode({
 *     id: 123,
 *     nodebalancerId: 456,
 *     configId: 789,
 * });
 * ```
 */
export function getNodeBalancerNodeOutput(args: GetNodeBalancerNodeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNodeBalancerNodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("linode:index/getNodeBalancerNode:getNodeBalancerNode", {
        "configId": args.configId,
        "id": args.id,
        "nodebalancerId": args.nodebalancerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNodeBalancerNode.
 */
export interface GetNodeBalancerNodeOutputArgs {
    /**
     * The ID of the config that contains the Node.
     */
    configId: pulumi.Input<number>;
    /**
     * The node's ID.
     */
    id: pulumi.Input<number>;
    /**
     * The ID of the NodeBalancer that contains the node.
     */
    nodebalancerId: pulumi.Input<number>;
}
