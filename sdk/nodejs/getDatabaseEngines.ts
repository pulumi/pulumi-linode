// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about Linode Managed Database engines that match a set of filters.
 *
 * ## Example Usage
 *
 * Get information about all Linode Managed Database engines:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const all = pulumi.output(linode.getDatabaseEngines());
 * ```
 *
 * Get information about all Linode MySQL Database engines:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const mysql = pulumi.output(linode.getDatabaseEngines({
 *     filters: [{
 *         name: "engine",
 *         values: ["mysql"],
 *     }],
 * }));
 * ```
 *
 * Create a Linode MySQL Database using the latest support MySQL version:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as linode from "@pulumi/linode";
 *
 * const mysql = linode.getDatabaseEngines({
 *     latest: true,
 *     filters: [{
 *         name: "engine",
 *         values: ["mysql"],
 *     }],
 * });
 * const myDb = new linode.DatabaseMysql("myDb", {
 *     label: "mydb",
 *     engineId: mysql.then(mysql => mysql.engines?[0]?.id),
 *     region: "us-southeast",
 *     type: "g6-nanode-1",
 * });
 * ```
 */
export function getDatabaseEngines(args?: GetDatabaseEnginesArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseEnginesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("linode:index/getDatabaseEngines:getDatabaseEngines", {
        "filters": args.filters,
        "latest": args.latest,
        "order": args.order,
        "orderBy": args.orderBy,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseEngines.
 */
export interface GetDatabaseEnginesArgs {
    filters?: inputs.GetDatabaseEnginesFilter[];
    /**
     * If true, only the latest engine version will be returned.
     */
    latest?: boolean;
    /**
     * The order in which results should be returned. (`asc`, `desc`; default `asc`)
     */
    order?: string;
    /**
     * The attribute to order the results by. (`version`)
     */
    orderBy?: string;
}

/**
 * A collection of values returned by getDatabaseEngines.
 */
export interface GetDatabaseEnginesResult {
    readonly engines: outputs.GetDatabaseEnginesEngine[];
    readonly filters?: outputs.GetDatabaseEnginesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly latest?: boolean;
    readonly order?: string;
    readonly orderBy?: string;
}

export function getDatabaseEnginesOutput(args?: GetDatabaseEnginesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseEnginesResult> {
    return pulumi.output(args).apply(a => getDatabaseEngines(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseEngines.
 */
export interface GetDatabaseEnginesOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetDatabaseEnginesFilterArgs>[]>;
    /**
     * If true, only the latest engine version will be returned.
     */
    latest?: pulumi.Input<boolean>;
    /**
     * The order in which results should be returned. (`asc`, `desc`; default `asc`)
     */
    order?: pulumi.Input<string>;
    /**
     * The attribute to order the results by. (`version`)
     */
    orderBy?: pulumi.Input<string>;
}
