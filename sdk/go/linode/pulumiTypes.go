// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type InstanceAlerts struct {
	Cpu           *int `pulumi:"cpu"`
	Io            *int `pulumi:"io"`
	NetworkIn     *int `pulumi:"networkIn"`
	NetworkOut    *int `pulumi:"networkOut"`
	TransferQuota *int `pulumi:"transferQuota"`
}

// InstanceAlertsInput is an input type that accepts InstanceAlertsArgs and InstanceAlertsOutput values.
// You can construct a concrete instance of `InstanceAlertsInput` via:
//
// 		 InstanceAlertsArgs{...}
//
type InstanceAlertsInput interface {
	pulumi.Input

	ToInstanceAlertsOutput() InstanceAlertsOutput
	ToInstanceAlertsOutputWithContext(context.Context) InstanceAlertsOutput
}

type InstanceAlertsArgs struct {
	Cpu           pulumi.IntPtrInput `pulumi:"cpu"`
	Io            pulumi.IntPtrInput `pulumi:"io"`
	NetworkIn     pulumi.IntPtrInput `pulumi:"networkIn"`
	NetworkOut    pulumi.IntPtrInput `pulumi:"networkOut"`
	TransferQuota pulumi.IntPtrInput `pulumi:"transferQuota"`
}

func (InstanceAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAlerts)(nil)).Elem()
}

func (i InstanceAlertsArgs) ToInstanceAlertsOutput() InstanceAlertsOutput {
	return i.ToInstanceAlertsOutputWithContext(context.Background())
}

func (i InstanceAlertsArgs) ToInstanceAlertsOutputWithContext(ctx context.Context) InstanceAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAlertsOutput)
}

func (i InstanceAlertsArgs) ToInstanceAlertsPtrOutput() InstanceAlertsPtrOutput {
	return i.ToInstanceAlertsPtrOutputWithContext(context.Background())
}

func (i InstanceAlertsArgs) ToInstanceAlertsPtrOutputWithContext(ctx context.Context) InstanceAlertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAlertsOutput).ToInstanceAlertsPtrOutputWithContext(ctx)
}

// InstanceAlertsPtrInput is an input type that accepts InstanceAlertsArgs, InstanceAlertsPtr and InstanceAlertsPtrOutput values.
// You can construct a concrete instance of `InstanceAlertsPtrInput` via:
//
// 		 InstanceAlertsArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceAlertsPtrInput interface {
	pulumi.Input

	ToInstanceAlertsPtrOutput() InstanceAlertsPtrOutput
	ToInstanceAlertsPtrOutputWithContext(context.Context) InstanceAlertsPtrOutput
}

type instanceAlertsPtrType InstanceAlertsArgs

func InstanceAlertsPtr(v *InstanceAlertsArgs) InstanceAlertsPtrInput {
	return (*instanceAlertsPtrType)(v)
}

func (*instanceAlertsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAlerts)(nil)).Elem()
}

func (i *instanceAlertsPtrType) ToInstanceAlertsPtrOutput() InstanceAlertsPtrOutput {
	return i.ToInstanceAlertsPtrOutputWithContext(context.Background())
}

func (i *instanceAlertsPtrType) ToInstanceAlertsPtrOutputWithContext(ctx context.Context) InstanceAlertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceAlertsPtrOutput)
}

type InstanceAlertsOutput struct{ *pulumi.OutputState }

func (InstanceAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceAlerts)(nil)).Elem()
}

func (o InstanceAlertsOutput) ToInstanceAlertsOutput() InstanceAlertsOutput {
	return o
}

func (o InstanceAlertsOutput) ToInstanceAlertsOutputWithContext(ctx context.Context) InstanceAlertsOutput {
	return o
}

func (o InstanceAlertsOutput) ToInstanceAlertsPtrOutput() InstanceAlertsPtrOutput {
	return o.ToInstanceAlertsPtrOutputWithContext(context.Background())
}

func (o InstanceAlertsOutput) ToInstanceAlertsPtrOutputWithContext(ctx context.Context) InstanceAlertsPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *InstanceAlerts {
		return &v
	}).(InstanceAlertsPtrOutput)
}
func (o InstanceAlertsOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsOutput) Io() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.Io }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsOutput) NetworkIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.NetworkIn }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsOutput) NetworkOut() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.NetworkOut }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsOutput) TransferQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.TransferQuota }).(pulumi.IntPtrOutput)
}

type InstanceAlertsPtrOutput struct{ *pulumi.OutputState }

func (InstanceAlertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceAlerts)(nil)).Elem()
}

func (o InstanceAlertsPtrOutput) ToInstanceAlertsPtrOutput() InstanceAlertsPtrOutput {
	return o
}

func (o InstanceAlertsPtrOutput) ToInstanceAlertsPtrOutputWithContext(ctx context.Context) InstanceAlertsPtrOutput {
	return o
}

func (o InstanceAlertsPtrOutput) Elem() InstanceAlertsOutput {
	return o.ApplyT(func(v *InstanceAlerts) InstanceAlerts { return *v }).(InstanceAlertsOutput)
}

func (o InstanceAlertsPtrOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.Cpu }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsPtrOutput) Io() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.Io }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsPtrOutput) NetworkIn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.NetworkIn }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsPtrOutput) NetworkOut() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.NetworkOut }).(pulumi.IntPtrOutput)
}

func (o InstanceAlertsPtrOutput) TransferQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceAlerts) *int { return v.TransferQuota }).(pulumi.IntPtrOutput)
}

type InstanceBackups struct {
	Enabled  *bool                    `pulumi:"enabled"`
	Schedule *InstanceBackupsSchedule `pulumi:"schedule"`
}

// InstanceBackupsInput is an input type that accepts InstanceBackupsArgs and InstanceBackupsOutput values.
// You can construct a concrete instance of `InstanceBackupsInput` via:
//
// 		 InstanceBackupsArgs{...}
//
type InstanceBackupsInput interface {
	pulumi.Input

	ToInstanceBackupsOutput() InstanceBackupsOutput
	ToInstanceBackupsOutputWithContext(context.Context) InstanceBackupsOutput
}

type InstanceBackupsArgs struct {
	Enabled  pulumi.BoolPtrInput             `pulumi:"enabled"`
	Schedule InstanceBackupsSchedulePtrInput `pulumi:"schedule"`
}

func (InstanceBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackups)(nil)).Elem()
}

func (i InstanceBackupsArgs) ToInstanceBackupsOutput() InstanceBackupsOutput {
	return i.ToInstanceBackupsOutputWithContext(context.Background())
}

func (i InstanceBackupsArgs) ToInstanceBackupsOutputWithContext(ctx context.Context) InstanceBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsOutput)
}

func (i InstanceBackupsArgs) ToInstanceBackupsPtrOutput() InstanceBackupsPtrOutput {
	return i.ToInstanceBackupsPtrOutputWithContext(context.Background())
}

func (i InstanceBackupsArgs) ToInstanceBackupsPtrOutputWithContext(ctx context.Context) InstanceBackupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsOutput).ToInstanceBackupsPtrOutputWithContext(ctx)
}

// InstanceBackupsPtrInput is an input type that accepts InstanceBackupsArgs, InstanceBackupsPtr and InstanceBackupsPtrOutput values.
// You can construct a concrete instance of `InstanceBackupsPtrInput` via:
//
// 		 InstanceBackupsArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceBackupsPtrInput interface {
	pulumi.Input

	ToInstanceBackupsPtrOutput() InstanceBackupsPtrOutput
	ToInstanceBackupsPtrOutputWithContext(context.Context) InstanceBackupsPtrOutput
}

type instanceBackupsPtrType InstanceBackupsArgs

func InstanceBackupsPtr(v *InstanceBackupsArgs) InstanceBackupsPtrInput {
	return (*instanceBackupsPtrType)(v)
}

func (*instanceBackupsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackups)(nil)).Elem()
}

func (i *instanceBackupsPtrType) ToInstanceBackupsPtrOutput() InstanceBackupsPtrOutput {
	return i.ToInstanceBackupsPtrOutputWithContext(context.Background())
}

func (i *instanceBackupsPtrType) ToInstanceBackupsPtrOutputWithContext(ctx context.Context) InstanceBackupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsPtrOutput)
}

type InstanceBackupsOutput struct{ *pulumi.OutputState }

func (InstanceBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackups)(nil)).Elem()
}

func (o InstanceBackupsOutput) ToInstanceBackupsOutput() InstanceBackupsOutput {
	return o
}

func (o InstanceBackupsOutput) ToInstanceBackupsOutputWithContext(ctx context.Context) InstanceBackupsOutput {
	return o
}

func (o InstanceBackupsOutput) ToInstanceBackupsPtrOutput() InstanceBackupsPtrOutput {
	return o.ToInstanceBackupsPtrOutputWithContext(context.Background())
}

func (o InstanceBackupsOutput) ToInstanceBackupsPtrOutputWithContext(ctx context.Context) InstanceBackupsPtrOutput {
	return o.ApplyT(func(v InstanceBackups) *InstanceBackups {
		return &v
	}).(InstanceBackupsPtrOutput)
}
func (o InstanceBackupsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceBackups) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o InstanceBackupsOutput) Schedule() InstanceBackupsSchedulePtrOutput {
	return o.ApplyT(func(v InstanceBackups) *InstanceBackupsSchedule { return v.Schedule }).(InstanceBackupsSchedulePtrOutput)
}

type InstanceBackupsPtrOutput struct{ *pulumi.OutputState }

func (InstanceBackupsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackups)(nil)).Elem()
}

func (o InstanceBackupsPtrOutput) ToInstanceBackupsPtrOutput() InstanceBackupsPtrOutput {
	return o
}

func (o InstanceBackupsPtrOutput) ToInstanceBackupsPtrOutputWithContext(ctx context.Context) InstanceBackupsPtrOutput {
	return o
}

func (o InstanceBackupsPtrOutput) Elem() InstanceBackupsOutput {
	return o.ApplyT(func(v *InstanceBackups) InstanceBackups { return *v }).(InstanceBackupsOutput)
}

func (o InstanceBackupsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceBackups) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o InstanceBackupsPtrOutput) Schedule() InstanceBackupsSchedulePtrOutput {
	return o.ApplyT(func(v InstanceBackups) *InstanceBackupsSchedule { return v.Schedule }).(InstanceBackupsSchedulePtrOutput)
}

type InstanceBackupsSchedule struct {
	Day    *string `pulumi:"day"`
	Window *string `pulumi:"window"`
}

// InstanceBackupsScheduleInput is an input type that accepts InstanceBackupsScheduleArgs and InstanceBackupsScheduleOutput values.
// You can construct a concrete instance of `InstanceBackupsScheduleInput` via:
//
// 		 InstanceBackupsScheduleArgs{...}
//
type InstanceBackupsScheduleInput interface {
	pulumi.Input

	ToInstanceBackupsScheduleOutput() InstanceBackupsScheduleOutput
	ToInstanceBackupsScheduleOutputWithContext(context.Context) InstanceBackupsScheduleOutput
}

type InstanceBackupsScheduleArgs struct {
	Day    pulumi.StringPtrInput `pulumi:"day"`
	Window pulumi.StringPtrInput `pulumi:"window"`
}

func (InstanceBackupsScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupsSchedule)(nil)).Elem()
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsScheduleOutput() InstanceBackupsScheduleOutput {
	return i.ToInstanceBackupsScheduleOutputWithContext(context.Background())
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsScheduleOutputWithContext(ctx context.Context) InstanceBackupsScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsScheduleOutput)
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return i.ToInstanceBackupsSchedulePtrOutputWithContext(context.Background())
}

func (i InstanceBackupsScheduleArgs) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsScheduleOutput).ToInstanceBackupsSchedulePtrOutputWithContext(ctx)
}

// InstanceBackupsSchedulePtrInput is an input type that accepts InstanceBackupsScheduleArgs, InstanceBackupsSchedulePtr and InstanceBackupsSchedulePtrOutput values.
// You can construct a concrete instance of `InstanceBackupsSchedulePtrInput` via:
//
// 		 InstanceBackupsScheduleArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceBackupsSchedulePtrInput interface {
	pulumi.Input

	ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput
	ToInstanceBackupsSchedulePtrOutputWithContext(context.Context) InstanceBackupsSchedulePtrOutput
}

type instanceBackupsSchedulePtrType InstanceBackupsScheduleArgs

func InstanceBackupsSchedulePtr(v *InstanceBackupsScheduleArgs) InstanceBackupsSchedulePtrInput {
	return (*instanceBackupsSchedulePtrType)(v)
}

func (*instanceBackupsSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupsSchedule)(nil)).Elem()
}

func (i *instanceBackupsSchedulePtrType) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return i.ToInstanceBackupsSchedulePtrOutputWithContext(context.Background())
}

func (i *instanceBackupsSchedulePtrType) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupsSchedulePtrOutput)
}

type InstanceBackupsScheduleOutput struct{ *pulumi.OutputState }

func (InstanceBackupsScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupsSchedule)(nil)).Elem()
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsScheduleOutput() InstanceBackupsScheduleOutput {
	return o
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsScheduleOutputWithContext(ctx context.Context) InstanceBackupsScheduleOutput {
	return o
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return o.ToInstanceBackupsSchedulePtrOutputWithContext(context.Background())
}

func (o InstanceBackupsScheduleOutput) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *InstanceBackupsSchedule {
		return &v
	}).(InstanceBackupsSchedulePtrOutput)
}
func (o InstanceBackupsScheduleOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *string { return v.Day }).(pulumi.StringPtrOutput)
}

func (o InstanceBackupsScheduleOutput) Window() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *string { return v.Window }).(pulumi.StringPtrOutput)
}

type InstanceBackupsSchedulePtrOutput struct{ *pulumi.OutputState }

func (InstanceBackupsSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupsSchedule)(nil)).Elem()
}

func (o InstanceBackupsSchedulePtrOutput) ToInstanceBackupsSchedulePtrOutput() InstanceBackupsSchedulePtrOutput {
	return o
}

func (o InstanceBackupsSchedulePtrOutput) ToInstanceBackupsSchedulePtrOutputWithContext(ctx context.Context) InstanceBackupsSchedulePtrOutput {
	return o
}

func (o InstanceBackupsSchedulePtrOutput) Elem() InstanceBackupsScheduleOutput {
	return o.ApplyT(func(v *InstanceBackupsSchedule) InstanceBackupsSchedule { return *v }).(InstanceBackupsScheduleOutput)
}

func (o InstanceBackupsSchedulePtrOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *string { return v.Day }).(pulumi.StringPtrOutput)
}

func (o InstanceBackupsSchedulePtrOutput) Window() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBackupsSchedule) *string { return v.Window }).(pulumi.StringPtrOutput)
}

type InstanceConfig struct {
	// - Arbitrary user comments about this `config`.
	Comments *string `pulumi:"comments"`
	// A list of `disk` or `volume` attachments for this `config`.  If the `bootConfigLabel` omits a `devices` block, the Linode will not be booted.
	Devices *InstanceConfigDevices `pulumi:"devices"`
	// Helpers enabled when booting to this Linode Config.
	Helpers *InstanceConfigHelpers `pulumi:"helpers"`
	// - A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
	Kernel *string `pulumi:"kernel"`
	// The Config's label for display purposes.  Also used by `bootConfigLabel`.
	Label string `pulumi:"label"`
	// - Defaults to the total RAM of the Linode
	MemoryLimit *int `pulumi:"memoryLimit"`
	// - The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `"/dev/sda"`
	RootDevice *string `pulumi:"rootDevice"`
	// - Defines the state of your Linode after booting. Defaults to `"default"`.
	RunLevel *string `pulumi:"runLevel"`
	// - Controls the virtualization mode. Defaults to `"paravirt"`.
	VirtMode *string `pulumi:"virtMode"`
}

// InstanceConfigInput is an input type that accepts InstanceConfigArgs and InstanceConfigOutput values.
// You can construct a concrete instance of `InstanceConfigInput` via:
//
// 		 InstanceConfigArgs{...}
//
type InstanceConfigInput interface {
	pulumi.Input

	ToInstanceConfigOutput() InstanceConfigOutput
	ToInstanceConfigOutputWithContext(context.Context) InstanceConfigOutput
}

type InstanceConfigArgs struct {
	// - Arbitrary user comments about this `config`.
	Comments pulumi.StringPtrInput `pulumi:"comments"`
	// A list of `disk` or `volume` attachments for this `config`.  If the `bootConfigLabel` omits a `devices` block, the Linode will not be booted.
	Devices InstanceConfigDevicesPtrInput `pulumi:"devices"`
	// Helpers enabled when booting to this Linode Config.
	Helpers InstanceConfigHelpersPtrInput `pulumi:"helpers"`
	// - A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
	Kernel pulumi.StringPtrInput `pulumi:"kernel"`
	// The Config's label for display purposes.  Also used by `bootConfigLabel`.
	Label pulumi.StringInput `pulumi:"label"`
	// - Defaults to the total RAM of the Linode
	MemoryLimit pulumi.IntPtrInput `pulumi:"memoryLimit"`
	// - The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `"/dev/sda"`
	RootDevice pulumi.StringPtrInput `pulumi:"rootDevice"`
	// - Defines the state of your Linode after booting. Defaults to `"default"`.
	RunLevel pulumi.StringPtrInput `pulumi:"runLevel"`
	// - Controls the virtualization mode. Defaults to `"paravirt"`.
	VirtMode pulumi.StringPtrInput `pulumi:"virtMode"`
}

func (InstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArgs) ToInstanceConfigOutput() InstanceConfigOutput {
	return i.ToInstanceConfigOutputWithContext(context.Background())
}

func (i InstanceConfigArgs) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigOutput)
}

// InstanceConfigArrayInput is an input type that accepts InstanceConfigArray and InstanceConfigArrayOutput values.
// You can construct a concrete instance of `InstanceConfigArrayInput` via:
//
// 		 InstanceConfigArray{ InstanceConfigArgs{...} }
//
type InstanceConfigArrayInput interface {
	pulumi.Input

	ToInstanceConfigArrayOutput() InstanceConfigArrayOutput
	ToInstanceConfigArrayOutputWithContext(context.Context) InstanceConfigArrayOutput
}

type InstanceConfigArray []InstanceConfigInput

func (InstanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return i.ToInstanceConfigArrayOutputWithContext(context.Background())
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigArrayOutput)
}

type InstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigOutput) ToInstanceConfigOutput() InstanceConfigOutput {
	return o
}

func (o InstanceConfigOutput) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return o
}

// - Arbitrary user comments about this `config`.
func (o InstanceConfigOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// A list of `disk` or `volume` attachments for this `config`.  If the `bootConfigLabel` omits a `devices` block, the Linode will not be booted.
func (o InstanceConfigOutput) Devices() InstanceConfigDevicesPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *InstanceConfigDevices { return v.Devices }).(InstanceConfigDevicesPtrOutput)
}

// Helpers enabled when booting to this Linode Config.
func (o InstanceConfigOutput) Helpers() InstanceConfigHelpersPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *InstanceConfigHelpers { return v.Helpers }).(InstanceConfigHelpersPtrOutput)
}

// - A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
func (o InstanceConfigOutput) Kernel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.Kernel }).(pulumi.StringPtrOutput)
}

// The Config's label for display purposes.  Also used by `bootConfigLabel`.
func (o InstanceConfigOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfig) string { return v.Label }).(pulumi.StringOutput)
}

// - Defaults to the total RAM of the Linode
func (o InstanceConfigOutput) MemoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *int { return v.MemoryLimit }).(pulumi.IntPtrOutput)
}

// - The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `"/dev/sda"`
func (o InstanceConfigOutput) RootDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.RootDevice }).(pulumi.StringPtrOutput)
}

// - Defines the state of your Linode after booting. Defaults to `"default"`.
func (o InstanceConfigOutput) RunLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.RunLevel }).(pulumi.StringPtrOutput)
}

// - Controls the virtualization mode. Defaults to `"paravirt"`.
func (o InstanceConfigOutput) VirtMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.VirtMode }).(pulumi.StringPtrOutput)
}

type InstanceConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) Index(i pulumi.IntInput) InstanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfig {
		return vs[0].([]InstanceConfig)[vs[1].(int)]
	}).(InstanceConfigOutput)
}

type InstanceConfigDevices struct {
	Sda *InstanceConfigDevicesSda `pulumi:"sda"`
	Sdb *InstanceConfigDevicesSdb `pulumi:"sdb"`
	Sdc *InstanceConfigDevicesSdc `pulumi:"sdc"`
	Sdd *InstanceConfigDevicesSdd `pulumi:"sdd"`
	Sde *InstanceConfigDevicesSde `pulumi:"sde"`
	Sdf *InstanceConfigDevicesSdf `pulumi:"sdf"`
	Sdg *InstanceConfigDevicesSdg `pulumi:"sdg"`
	Sdh *InstanceConfigDevicesSdh `pulumi:"sdh"`
}

// InstanceConfigDevicesInput is an input type that accepts InstanceConfigDevicesArgs and InstanceConfigDevicesOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesInput` via:
//
// 		 InstanceConfigDevicesArgs{...}
//
type InstanceConfigDevicesInput interface {
	pulumi.Input

	ToInstanceConfigDevicesOutput() InstanceConfigDevicesOutput
	ToInstanceConfigDevicesOutputWithContext(context.Context) InstanceConfigDevicesOutput
}

type InstanceConfigDevicesArgs struct {
	Sda InstanceConfigDevicesSdaPtrInput `pulumi:"sda"`
	Sdb InstanceConfigDevicesSdbPtrInput `pulumi:"sdb"`
	Sdc InstanceConfigDevicesSdcPtrInput `pulumi:"sdc"`
	Sdd InstanceConfigDevicesSddPtrInput `pulumi:"sdd"`
	Sde InstanceConfigDevicesSdePtrInput `pulumi:"sde"`
	Sdf InstanceConfigDevicesSdfPtrInput `pulumi:"sdf"`
	Sdg InstanceConfigDevicesSdgPtrInput `pulumi:"sdg"`
	Sdh InstanceConfigDevicesSdhPtrInput `pulumi:"sdh"`
}

func (InstanceConfigDevicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevices)(nil)).Elem()
}

func (i InstanceConfigDevicesArgs) ToInstanceConfigDevicesOutput() InstanceConfigDevicesOutput {
	return i.ToInstanceConfigDevicesOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesArgs) ToInstanceConfigDevicesOutputWithContext(ctx context.Context) InstanceConfigDevicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesOutput)
}

func (i InstanceConfigDevicesArgs) ToInstanceConfigDevicesPtrOutput() InstanceConfigDevicesPtrOutput {
	return i.ToInstanceConfigDevicesPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesArgs) ToInstanceConfigDevicesPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesOutput).ToInstanceConfigDevicesPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesPtrInput is an input type that accepts InstanceConfigDevicesArgs, InstanceConfigDevicesPtr and InstanceConfigDevicesPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesPtrInput` via:
//
// 		 InstanceConfigDevicesArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesPtrOutput() InstanceConfigDevicesPtrOutput
	ToInstanceConfigDevicesPtrOutputWithContext(context.Context) InstanceConfigDevicesPtrOutput
}

type instanceConfigDevicesPtrType InstanceConfigDevicesArgs

func InstanceConfigDevicesPtr(v *InstanceConfigDevicesArgs) InstanceConfigDevicesPtrInput {
	return (*instanceConfigDevicesPtrType)(v)
}

func (*instanceConfigDevicesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevices)(nil)).Elem()
}

func (i *instanceConfigDevicesPtrType) ToInstanceConfigDevicesPtrOutput() InstanceConfigDevicesPtrOutput {
	return i.ToInstanceConfigDevicesPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesPtrType) ToInstanceConfigDevicesPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesPtrOutput)
}

type InstanceConfigDevicesOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevices)(nil)).Elem()
}

func (o InstanceConfigDevicesOutput) ToInstanceConfigDevicesOutput() InstanceConfigDevicesOutput {
	return o
}

func (o InstanceConfigDevicesOutput) ToInstanceConfigDevicesOutputWithContext(ctx context.Context) InstanceConfigDevicesOutput {
	return o
}

func (o InstanceConfigDevicesOutput) ToInstanceConfigDevicesPtrOutput() InstanceConfigDevicesPtrOutput {
	return o.ToInstanceConfigDevicesPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesOutput) ToInstanceConfigDevicesPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevices {
		return &v
	}).(InstanceConfigDevicesPtrOutput)
}
func (o InstanceConfigDevicesOutput) Sda() InstanceConfigDevicesSdaPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSda { return v.Sda }).(InstanceConfigDevicesSdaPtrOutput)
}

func (o InstanceConfigDevicesOutput) Sdb() InstanceConfigDevicesSdbPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdb { return v.Sdb }).(InstanceConfigDevicesSdbPtrOutput)
}

func (o InstanceConfigDevicesOutput) Sdc() InstanceConfigDevicesSdcPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdc { return v.Sdc }).(InstanceConfigDevicesSdcPtrOutput)
}

func (o InstanceConfigDevicesOutput) Sdd() InstanceConfigDevicesSddPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdd { return v.Sdd }).(InstanceConfigDevicesSddPtrOutput)
}

func (o InstanceConfigDevicesOutput) Sde() InstanceConfigDevicesSdePtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSde { return v.Sde }).(InstanceConfigDevicesSdePtrOutput)
}

func (o InstanceConfigDevicesOutput) Sdf() InstanceConfigDevicesSdfPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdf { return v.Sdf }).(InstanceConfigDevicesSdfPtrOutput)
}

func (o InstanceConfigDevicesOutput) Sdg() InstanceConfigDevicesSdgPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdg { return v.Sdg }).(InstanceConfigDevicesSdgPtrOutput)
}

func (o InstanceConfigDevicesOutput) Sdh() InstanceConfigDevicesSdhPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdh { return v.Sdh }).(InstanceConfigDevicesSdhPtrOutput)
}

type InstanceConfigDevicesPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevices)(nil)).Elem()
}

func (o InstanceConfigDevicesPtrOutput) ToInstanceConfigDevicesPtrOutput() InstanceConfigDevicesPtrOutput {
	return o
}

func (o InstanceConfigDevicesPtrOutput) ToInstanceConfigDevicesPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesPtrOutput {
	return o
}

func (o InstanceConfigDevicesPtrOutput) Elem() InstanceConfigDevicesOutput {
	return o.ApplyT(func(v *InstanceConfigDevices) InstanceConfigDevices { return *v }).(InstanceConfigDevicesOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sda() InstanceConfigDevicesSdaPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSda { return v.Sda }).(InstanceConfigDevicesSdaPtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sdb() InstanceConfigDevicesSdbPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdb { return v.Sdb }).(InstanceConfigDevicesSdbPtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sdc() InstanceConfigDevicesSdcPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdc { return v.Sdc }).(InstanceConfigDevicesSdcPtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sdd() InstanceConfigDevicesSddPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdd { return v.Sdd }).(InstanceConfigDevicesSddPtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sde() InstanceConfigDevicesSdePtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSde { return v.Sde }).(InstanceConfigDevicesSdePtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sdf() InstanceConfigDevicesSdfPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdf { return v.Sdf }).(InstanceConfigDevicesSdfPtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sdg() InstanceConfigDevicesSdgPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdg { return v.Sdg }).(InstanceConfigDevicesSdgPtrOutput)
}

func (o InstanceConfigDevicesPtrOutput) Sdh() InstanceConfigDevicesSdhPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevices) *InstanceConfigDevicesSdh { return v.Sdh }).(InstanceConfigDevicesSdhPtrOutput)
}

type InstanceConfigDevicesSda struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdaInput is an input type that accepts InstanceConfigDevicesSdaArgs and InstanceConfigDevicesSdaOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdaInput` via:
//
// 		 InstanceConfigDevicesSdaArgs{...}
//
type InstanceConfigDevicesSdaInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdaOutput() InstanceConfigDevicesSdaOutput
	ToInstanceConfigDevicesSdaOutputWithContext(context.Context) InstanceConfigDevicesSdaOutput
}

type InstanceConfigDevicesSdaArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSda)(nil)).Elem()
}

func (i InstanceConfigDevicesSdaArgs) ToInstanceConfigDevicesSdaOutput() InstanceConfigDevicesSdaOutput {
	return i.ToInstanceConfigDevicesSdaOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdaArgs) ToInstanceConfigDevicesSdaOutputWithContext(ctx context.Context) InstanceConfigDevicesSdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdaOutput)
}

func (i InstanceConfigDevicesSdaArgs) ToInstanceConfigDevicesSdaPtrOutput() InstanceConfigDevicesSdaPtrOutput {
	return i.ToInstanceConfigDevicesSdaPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdaArgs) ToInstanceConfigDevicesSdaPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdaOutput).ToInstanceConfigDevicesSdaPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdaPtrInput is an input type that accepts InstanceConfigDevicesSdaArgs, InstanceConfigDevicesSdaPtr and InstanceConfigDevicesSdaPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdaPtrInput` via:
//
// 		 InstanceConfigDevicesSdaArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdaPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdaPtrOutput() InstanceConfigDevicesSdaPtrOutput
	ToInstanceConfigDevicesSdaPtrOutputWithContext(context.Context) InstanceConfigDevicesSdaPtrOutput
}

type instanceConfigDevicesSdaPtrType InstanceConfigDevicesSdaArgs

func InstanceConfigDevicesSdaPtr(v *InstanceConfigDevicesSdaArgs) InstanceConfigDevicesSdaPtrInput {
	return (*instanceConfigDevicesSdaPtrType)(v)
}

func (*instanceConfigDevicesSdaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSda)(nil)).Elem()
}

func (i *instanceConfigDevicesSdaPtrType) ToInstanceConfigDevicesSdaPtrOutput() InstanceConfigDevicesSdaPtrOutput {
	return i.ToInstanceConfigDevicesSdaPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdaPtrType) ToInstanceConfigDevicesSdaPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdaPtrOutput)
}

type InstanceConfigDevicesSdaOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSda)(nil)).Elem()
}

func (o InstanceConfigDevicesSdaOutput) ToInstanceConfigDevicesSdaOutput() InstanceConfigDevicesSdaOutput {
	return o
}

func (o InstanceConfigDevicesSdaOutput) ToInstanceConfigDevicesSdaOutputWithContext(ctx context.Context) InstanceConfigDevicesSdaOutput {
	return o
}

func (o InstanceConfigDevicesSdaOutput) ToInstanceConfigDevicesSdaPtrOutput() InstanceConfigDevicesSdaPtrOutput {
	return o.ToInstanceConfigDevicesSdaPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdaOutput) ToInstanceConfigDevicesSdaPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdaPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *InstanceConfigDevicesSda {
		return &v
	}).(InstanceConfigDevicesSdaPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdaOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdaOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdaOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdaPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSda)(nil)).Elem()
}

func (o InstanceConfigDevicesSdaPtrOutput) ToInstanceConfigDevicesSdaPtrOutput() InstanceConfigDevicesSdaPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdaPtrOutput) ToInstanceConfigDevicesSdaPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdaPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdaPtrOutput) Elem() InstanceConfigDevicesSdaOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSda) InstanceConfigDevicesSda { return *v }).(InstanceConfigDevicesSdaOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdaPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdaPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdaPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSda) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdb struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdbInput is an input type that accepts InstanceConfigDevicesSdbArgs and InstanceConfigDevicesSdbOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdbInput` via:
//
// 		 InstanceConfigDevicesSdbArgs{...}
//
type InstanceConfigDevicesSdbInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdbOutput() InstanceConfigDevicesSdbOutput
	ToInstanceConfigDevicesSdbOutputWithContext(context.Context) InstanceConfigDevicesSdbOutput
}

type InstanceConfigDevicesSdbArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdb)(nil)).Elem()
}

func (i InstanceConfigDevicesSdbArgs) ToInstanceConfigDevicesSdbOutput() InstanceConfigDevicesSdbOutput {
	return i.ToInstanceConfigDevicesSdbOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdbArgs) ToInstanceConfigDevicesSdbOutputWithContext(ctx context.Context) InstanceConfigDevicesSdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdbOutput)
}

func (i InstanceConfigDevicesSdbArgs) ToInstanceConfigDevicesSdbPtrOutput() InstanceConfigDevicesSdbPtrOutput {
	return i.ToInstanceConfigDevicesSdbPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdbArgs) ToInstanceConfigDevicesSdbPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdbOutput).ToInstanceConfigDevicesSdbPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdbPtrInput is an input type that accepts InstanceConfigDevicesSdbArgs, InstanceConfigDevicesSdbPtr and InstanceConfigDevicesSdbPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdbPtrInput` via:
//
// 		 InstanceConfigDevicesSdbArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdbPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdbPtrOutput() InstanceConfigDevicesSdbPtrOutput
	ToInstanceConfigDevicesSdbPtrOutputWithContext(context.Context) InstanceConfigDevicesSdbPtrOutput
}

type instanceConfigDevicesSdbPtrType InstanceConfigDevicesSdbArgs

func InstanceConfigDevicesSdbPtr(v *InstanceConfigDevicesSdbArgs) InstanceConfigDevicesSdbPtrInput {
	return (*instanceConfigDevicesSdbPtrType)(v)
}

func (*instanceConfigDevicesSdbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdb)(nil)).Elem()
}

func (i *instanceConfigDevicesSdbPtrType) ToInstanceConfigDevicesSdbPtrOutput() InstanceConfigDevicesSdbPtrOutput {
	return i.ToInstanceConfigDevicesSdbPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdbPtrType) ToInstanceConfigDevicesSdbPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdbPtrOutput)
}

type InstanceConfigDevicesSdbOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdb)(nil)).Elem()
}

func (o InstanceConfigDevicesSdbOutput) ToInstanceConfigDevicesSdbOutput() InstanceConfigDevicesSdbOutput {
	return o
}

func (o InstanceConfigDevicesSdbOutput) ToInstanceConfigDevicesSdbOutputWithContext(ctx context.Context) InstanceConfigDevicesSdbOutput {
	return o
}

func (o InstanceConfigDevicesSdbOutput) ToInstanceConfigDevicesSdbPtrOutput() InstanceConfigDevicesSdbPtrOutput {
	return o.ToInstanceConfigDevicesSdbPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdbOutput) ToInstanceConfigDevicesSdbPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdbPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *InstanceConfigDevicesSdb {
		return &v
	}).(InstanceConfigDevicesSdbPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdbOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdbOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdbOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdbPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdb)(nil)).Elem()
}

func (o InstanceConfigDevicesSdbPtrOutput) ToInstanceConfigDevicesSdbPtrOutput() InstanceConfigDevicesSdbPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdbPtrOutput) ToInstanceConfigDevicesSdbPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdbPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdbPtrOutput) Elem() InstanceConfigDevicesSdbOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSdb) InstanceConfigDevicesSdb { return *v }).(InstanceConfigDevicesSdbOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdbPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdbPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdbPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdb) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdc struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdcInput is an input type that accepts InstanceConfigDevicesSdcArgs and InstanceConfigDevicesSdcOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdcInput` via:
//
// 		 InstanceConfigDevicesSdcArgs{...}
//
type InstanceConfigDevicesSdcInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdcOutput() InstanceConfigDevicesSdcOutput
	ToInstanceConfigDevicesSdcOutputWithContext(context.Context) InstanceConfigDevicesSdcOutput
}

type InstanceConfigDevicesSdcArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdc)(nil)).Elem()
}

func (i InstanceConfigDevicesSdcArgs) ToInstanceConfigDevicesSdcOutput() InstanceConfigDevicesSdcOutput {
	return i.ToInstanceConfigDevicesSdcOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdcArgs) ToInstanceConfigDevicesSdcOutputWithContext(ctx context.Context) InstanceConfigDevicesSdcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdcOutput)
}

func (i InstanceConfigDevicesSdcArgs) ToInstanceConfigDevicesSdcPtrOutput() InstanceConfigDevicesSdcPtrOutput {
	return i.ToInstanceConfigDevicesSdcPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdcArgs) ToInstanceConfigDevicesSdcPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdcOutput).ToInstanceConfigDevicesSdcPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdcPtrInput is an input type that accepts InstanceConfigDevicesSdcArgs, InstanceConfigDevicesSdcPtr and InstanceConfigDevicesSdcPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdcPtrInput` via:
//
// 		 InstanceConfigDevicesSdcArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdcPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdcPtrOutput() InstanceConfigDevicesSdcPtrOutput
	ToInstanceConfigDevicesSdcPtrOutputWithContext(context.Context) InstanceConfigDevicesSdcPtrOutput
}

type instanceConfigDevicesSdcPtrType InstanceConfigDevicesSdcArgs

func InstanceConfigDevicesSdcPtr(v *InstanceConfigDevicesSdcArgs) InstanceConfigDevicesSdcPtrInput {
	return (*instanceConfigDevicesSdcPtrType)(v)
}

func (*instanceConfigDevicesSdcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdc)(nil)).Elem()
}

func (i *instanceConfigDevicesSdcPtrType) ToInstanceConfigDevicesSdcPtrOutput() InstanceConfigDevicesSdcPtrOutput {
	return i.ToInstanceConfigDevicesSdcPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdcPtrType) ToInstanceConfigDevicesSdcPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdcPtrOutput)
}

type InstanceConfigDevicesSdcOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdc)(nil)).Elem()
}

func (o InstanceConfigDevicesSdcOutput) ToInstanceConfigDevicesSdcOutput() InstanceConfigDevicesSdcOutput {
	return o
}

func (o InstanceConfigDevicesSdcOutput) ToInstanceConfigDevicesSdcOutputWithContext(ctx context.Context) InstanceConfigDevicesSdcOutput {
	return o
}

func (o InstanceConfigDevicesSdcOutput) ToInstanceConfigDevicesSdcPtrOutput() InstanceConfigDevicesSdcPtrOutput {
	return o.ToInstanceConfigDevicesSdcPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdcOutput) ToInstanceConfigDevicesSdcPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdcPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *InstanceConfigDevicesSdc {
		return &v
	}).(InstanceConfigDevicesSdcPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdcOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdcOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdcOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdcPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdc)(nil)).Elem()
}

func (o InstanceConfigDevicesSdcPtrOutput) ToInstanceConfigDevicesSdcPtrOutput() InstanceConfigDevicesSdcPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdcPtrOutput) ToInstanceConfigDevicesSdcPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdcPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdcPtrOutput) Elem() InstanceConfigDevicesSdcOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSdc) InstanceConfigDevicesSdc { return *v }).(InstanceConfigDevicesSdcOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdcPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdcPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdcPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdc) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdd struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSddInput is an input type that accepts InstanceConfigDevicesSddArgs and InstanceConfigDevicesSddOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSddInput` via:
//
// 		 InstanceConfigDevicesSddArgs{...}
//
type InstanceConfigDevicesSddInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSddOutput() InstanceConfigDevicesSddOutput
	ToInstanceConfigDevicesSddOutputWithContext(context.Context) InstanceConfigDevicesSddOutput
}

type InstanceConfigDevicesSddArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdd)(nil)).Elem()
}

func (i InstanceConfigDevicesSddArgs) ToInstanceConfigDevicesSddOutput() InstanceConfigDevicesSddOutput {
	return i.ToInstanceConfigDevicesSddOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSddArgs) ToInstanceConfigDevicesSddOutputWithContext(ctx context.Context) InstanceConfigDevicesSddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSddOutput)
}

func (i InstanceConfigDevicesSddArgs) ToInstanceConfigDevicesSddPtrOutput() InstanceConfigDevicesSddPtrOutput {
	return i.ToInstanceConfigDevicesSddPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSddArgs) ToInstanceConfigDevicesSddPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSddPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSddOutput).ToInstanceConfigDevicesSddPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSddPtrInput is an input type that accepts InstanceConfigDevicesSddArgs, InstanceConfigDevicesSddPtr and InstanceConfigDevicesSddPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSddPtrInput` via:
//
// 		 InstanceConfigDevicesSddArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSddPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSddPtrOutput() InstanceConfigDevicesSddPtrOutput
	ToInstanceConfigDevicesSddPtrOutputWithContext(context.Context) InstanceConfigDevicesSddPtrOutput
}

type instanceConfigDevicesSddPtrType InstanceConfigDevicesSddArgs

func InstanceConfigDevicesSddPtr(v *InstanceConfigDevicesSddArgs) InstanceConfigDevicesSddPtrInput {
	return (*instanceConfigDevicesSddPtrType)(v)
}

func (*instanceConfigDevicesSddPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdd)(nil)).Elem()
}

func (i *instanceConfigDevicesSddPtrType) ToInstanceConfigDevicesSddPtrOutput() InstanceConfigDevicesSddPtrOutput {
	return i.ToInstanceConfigDevicesSddPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSddPtrType) ToInstanceConfigDevicesSddPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSddPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSddPtrOutput)
}

type InstanceConfigDevicesSddOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdd)(nil)).Elem()
}

func (o InstanceConfigDevicesSddOutput) ToInstanceConfigDevicesSddOutput() InstanceConfigDevicesSddOutput {
	return o
}

func (o InstanceConfigDevicesSddOutput) ToInstanceConfigDevicesSddOutputWithContext(ctx context.Context) InstanceConfigDevicesSddOutput {
	return o
}

func (o InstanceConfigDevicesSddOutput) ToInstanceConfigDevicesSddPtrOutput() InstanceConfigDevicesSddPtrOutput {
	return o.ToInstanceConfigDevicesSddPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSddOutput) ToInstanceConfigDevicesSddPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSddPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *InstanceConfigDevicesSdd {
		return &v
	}).(InstanceConfigDevicesSddPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSddOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSddOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSddOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSddPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSddPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdd)(nil)).Elem()
}

func (o InstanceConfigDevicesSddPtrOutput) ToInstanceConfigDevicesSddPtrOutput() InstanceConfigDevicesSddPtrOutput {
	return o
}

func (o InstanceConfigDevicesSddPtrOutput) ToInstanceConfigDevicesSddPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSddPtrOutput {
	return o
}

func (o InstanceConfigDevicesSddPtrOutput) Elem() InstanceConfigDevicesSddOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSdd) InstanceConfigDevicesSdd { return *v }).(InstanceConfigDevicesSddOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSddPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSddPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSddPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdd) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSde struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdeInput is an input type that accepts InstanceConfigDevicesSdeArgs and InstanceConfigDevicesSdeOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdeInput` via:
//
// 		 InstanceConfigDevicesSdeArgs{...}
//
type InstanceConfigDevicesSdeInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdeOutput() InstanceConfigDevicesSdeOutput
	ToInstanceConfigDevicesSdeOutputWithContext(context.Context) InstanceConfigDevicesSdeOutput
}

type InstanceConfigDevicesSdeArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSde)(nil)).Elem()
}

func (i InstanceConfigDevicesSdeArgs) ToInstanceConfigDevicesSdeOutput() InstanceConfigDevicesSdeOutput {
	return i.ToInstanceConfigDevicesSdeOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdeArgs) ToInstanceConfigDevicesSdeOutputWithContext(ctx context.Context) InstanceConfigDevicesSdeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdeOutput)
}

func (i InstanceConfigDevicesSdeArgs) ToInstanceConfigDevicesSdePtrOutput() InstanceConfigDevicesSdePtrOutput {
	return i.ToInstanceConfigDevicesSdePtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdeArgs) ToInstanceConfigDevicesSdePtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdeOutput).ToInstanceConfigDevicesSdePtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdePtrInput is an input type that accepts InstanceConfigDevicesSdeArgs, InstanceConfigDevicesSdePtr and InstanceConfigDevicesSdePtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdePtrInput` via:
//
// 		 InstanceConfigDevicesSdeArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdePtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdePtrOutput() InstanceConfigDevicesSdePtrOutput
	ToInstanceConfigDevicesSdePtrOutputWithContext(context.Context) InstanceConfigDevicesSdePtrOutput
}

type instanceConfigDevicesSdePtrType InstanceConfigDevicesSdeArgs

func InstanceConfigDevicesSdePtr(v *InstanceConfigDevicesSdeArgs) InstanceConfigDevicesSdePtrInput {
	return (*instanceConfigDevicesSdePtrType)(v)
}

func (*instanceConfigDevicesSdePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSde)(nil)).Elem()
}

func (i *instanceConfigDevicesSdePtrType) ToInstanceConfigDevicesSdePtrOutput() InstanceConfigDevicesSdePtrOutput {
	return i.ToInstanceConfigDevicesSdePtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdePtrType) ToInstanceConfigDevicesSdePtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdePtrOutput)
}

type InstanceConfigDevicesSdeOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSde)(nil)).Elem()
}

func (o InstanceConfigDevicesSdeOutput) ToInstanceConfigDevicesSdeOutput() InstanceConfigDevicesSdeOutput {
	return o
}

func (o InstanceConfigDevicesSdeOutput) ToInstanceConfigDevicesSdeOutputWithContext(ctx context.Context) InstanceConfigDevicesSdeOutput {
	return o
}

func (o InstanceConfigDevicesSdeOutput) ToInstanceConfigDevicesSdePtrOutput() InstanceConfigDevicesSdePtrOutput {
	return o.ToInstanceConfigDevicesSdePtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdeOutput) ToInstanceConfigDevicesSdePtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdePtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *InstanceConfigDevicesSde {
		return &v
	}).(InstanceConfigDevicesSdePtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdeOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdeOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdeOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdePtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSde)(nil)).Elem()
}

func (o InstanceConfigDevicesSdePtrOutput) ToInstanceConfigDevicesSdePtrOutput() InstanceConfigDevicesSdePtrOutput {
	return o
}

func (o InstanceConfigDevicesSdePtrOutput) ToInstanceConfigDevicesSdePtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdePtrOutput {
	return o
}

func (o InstanceConfigDevicesSdePtrOutput) Elem() InstanceConfigDevicesSdeOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSde) InstanceConfigDevicesSde { return *v }).(InstanceConfigDevicesSdeOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdePtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdePtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdePtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSde) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdf struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdfInput is an input type that accepts InstanceConfigDevicesSdfArgs and InstanceConfigDevicesSdfOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdfInput` via:
//
// 		 InstanceConfigDevicesSdfArgs{...}
//
type InstanceConfigDevicesSdfInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdfOutput() InstanceConfigDevicesSdfOutput
	ToInstanceConfigDevicesSdfOutputWithContext(context.Context) InstanceConfigDevicesSdfOutput
}

type InstanceConfigDevicesSdfArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdf)(nil)).Elem()
}

func (i InstanceConfigDevicesSdfArgs) ToInstanceConfigDevicesSdfOutput() InstanceConfigDevicesSdfOutput {
	return i.ToInstanceConfigDevicesSdfOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdfArgs) ToInstanceConfigDevicesSdfOutputWithContext(ctx context.Context) InstanceConfigDevicesSdfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdfOutput)
}

func (i InstanceConfigDevicesSdfArgs) ToInstanceConfigDevicesSdfPtrOutput() InstanceConfigDevicesSdfPtrOutput {
	return i.ToInstanceConfigDevicesSdfPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdfArgs) ToInstanceConfigDevicesSdfPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdfOutput).ToInstanceConfigDevicesSdfPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdfPtrInput is an input type that accepts InstanceConfigDevicesSdfArgs, InstanceConfigDevicesSdfPtr and InstanceConfigDevicesSdfPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdfPtrInput` via:
//
// 		 InstanceConfigDevicesSdfArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdfPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdfPtrOutput() InstanceConfigDevicesSdfPtrOutput
	ToInstanceConfigDevicesSdfPtrOutputWithContext(context.Context) InstanceConfigDevicesSdfPtrOutput
}

type instanceConfigDevicesSdfPtrType InstanceConfigDevicesSdfArgs

func InstanceConfigDevicesSdfPtr(v *InstanceConfigDevicesSdfArgs) InstanceConfigDevicesSdfPtrInput {
	return (*instanceConfigDevicesSdfPtrType)(v)
}

func (*instanceConfigDevicesSdfPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdf)(nil)).Elem()
}

func (i *instanceConfigDevicesSdfPtrType) ToInstanceConfigDevicesSdfPtrOutput() InstanceConfigDevicesSdfPtrOutput {
	return i.ToInstanceConfigDevicesSdfPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdfPtrType) ToInstanceConfigDevicesSdfPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdfPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdfPtrOutput)
}

type InstanceConfigDevicesSdfOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdf)(nil)).Elem()
}

func (o InstanceConfigDevicesSdfOutput) ToInstanceConfigDevicesSdfOutput() InstanceConfigDevicesSdfOutput {
	return o
}

func (o InstanceConfigDevicesSdfOutput) ToInstanceConfigDevicesSdfOutputWithContext(ctx context.Context) InstanceConfigDevicesSdfOutput {
	return o
}

func (o InstanceConfigDevicesSdfOutput) ToInstanceConfigDevicesSdfPtrOutput() InstanceConfigDevicesSdfPtrOutput {
	return o.ToInstanceConfigDevicesSdfPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdfOutput) ToInstanceConfigDevicesSdfPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdfPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *InstanceConfigDevicesSdf {
		return &v
	}).(InstanceConfigDevicesSdfPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdfOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdfOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdfOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdfPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdfPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdf)(nil)).Elem()
}

func (o InstanceConfigDevicesSdfPtrOutput) ToInstanceConfigDevicesSdfPtrOutput() InstanceConfigDevicesSdfPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdfPtrOutput) ToInstanceConfigDevicesSdfPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdfPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdfPtrOutput) Elem() InstanceConfigDevicesSdfOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSdf) InstanceConfigDevicesSdf { return *v }).(InstanceConfigDevicesSdfOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdfPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdfPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdfPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdf) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdg struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdgInput is an input type that accepts InstanceConfigDevicesSdgArgs and InstanceConfigDevicesSdgOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdgInput` via:
//
// 		 InstanceConfigDevicesSdgArgs{...}
//
type InstanceConfigDevicesSdgInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdgOutput() InstanceConfigDevicesSdgOutput
	ToInstanceConfigDevicesSdgOutputWithContext(context.Context) InstanceConfigDevicesSdgOutput
}

type InstanceConfigDevicesSdgArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdg)(nil)).Elem()
}

func (i InstanceConfigDevicesSdgArgs) ToInstanceConfigDevicesSdgOutput() InstanceConfigDevicesSdgOutput {
	return i.ToInstanceConfigDevicesSdgOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdgArgs) ToInstanceConfigDevicesSdgOutputWithContext(ctx context.Context) InstanceConfigDevicesSdgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdgOutput)
}

func (i InstanceConfigDevicesSdgArgs) ToInstanceConfigDevicesSdgPtrOutput() InstanceConfigDevicesSdgPtrOutput {
	return i.ToInstanceConfigDevicesSdgPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdgArgs) ToInstanceConfigDevicesSdgPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdgOutput).ToInstanceConfigDevicesSdgPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdgPtrInput is an input type that accepts InstanceConfigDevicesSdgArgs, InstanceConfigDevicesSdgPtr and InstanceConfigDevicesSdgPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdgPtrInput` via:
//
// 		 InstanceConfigDevicesSdgArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdgPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdgPtrOutput() InstanceConfigDevicesSdgPtrOutput
	ToInstanceConfigDevicesSdgPtrOutputWithContext(context.Context) InstanceConfigDevicesSdgPtrOutput
}

type instanceConfigDevicesSdgPtrType InstanceConfigDevicesSdgArgs

func InstanceConfigDevicesSdgPtr(v *InstanceConfigDevicesSdgArgs) InstanceConfigDevicesSdgPtrInput {
	return (*instanceConfigDevicesSdgPtrType)(v)
}

func (*instanceConfigDevicesSdgPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdg)(nil)).Elem()
}

func (i *instanceConfigDevicesSdgPtrType) ToInstanceConfigDevicesSdgPtrOutput() InstanceConfigDevicesSdgPtrOutput {
	return i.ToInstanceConfigDevicesSdgPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdgPtrType) ToInstanceConfigDevicesSdgPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdgPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdgPtrOutput)
}

type InstanceConfigDevicesSdgOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdg)(nil)).Elem()
}

func (o InstanceConfigDevicesSdgOutput) ToInstanceConfigDevicesSdgOutput() InstanceConfigDevicesSdgOutput {
	return o
}

func (o InstanceConfigDevicesSdgOutput) ToInstanceConfigDevicesSdgOutputWithContext(ctx context.Context) InstanceConfigDevicesSdgOutput {
	return o
}

func (o InstanceConfigDevicesSdgOutput) ToInstanceConfigDevicesSdgPtrOutput() InstanceConfigDevicesSdgPtrOutput {
	return o.ToInstanceConfigDevicesSdgPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdgOutput) ToInstanceConfigDevicesSdgPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdgPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *InstanceConfigDevicesSdg {
		return &v
	}).(InstanceConfigDevicesSdgPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdgOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdgOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdgOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdgPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdgPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdg)(nil)).Elem()
}

func (o InstanceConfigDevicesSdgPtrOutput) ToInstanceConfigDevicesSdgPtrOutput() InstanceConfigDevicesSdgPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdgPtrOutput) ToInstanceConfigDevicesSdgPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdgPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdgPtrOutput) Elem() InstanceConfigDevicesSdgOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSdg) InstanceConfigDevicesSdg { return *v }).(InstanceConfigDevicesSdgOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdgPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdgPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdgPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdg) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdh struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId *int `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel *string `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId *int `pulumi:"volumeId"`
}

// InstanceConfigDevicesSdhInput is an input type that accepts InstanceConfigDevicesSdhArgs and InstanceConfigDevicesSdhOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdhInput` via:
//
// 		 InstanceConfigDevicesSdhArgs{...}
//
type InstanceConfigDevicesSdhInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdhOutput() InstanceConfigDevicesSdhOutput
	ToInstanceConfigDevicesSdhOutputWithContext(context.Context) InstanceConfigDevicesSdhOutput
}

type InstanceConfigDevicesSdhArgs struct {
	// The Disk ID of the associated `diskLabel`, if used.
	DiskId pulumi.IntPtrInput `pulumi:"diskId"`
	// The `label` of the `disk` to map to this `device` slot.
	DiskLabel pulumi.StringPtrInput `pulumi:"diskLabel"`
	// The Volume ID to map to this `device` slot.
	VolumeId pulumi.IntPtrInput `pulumi:"volumeId"`
}

func (InstanceConfigDevicesSdhArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdh)(nil)).Elem()
}

func (i InstanceConfigDevicesSdhArgs) ToInstanceConfigDevicesSdhOutput() InstanceConfigDevicesSdhOutput {
	return i.ToInstanceConfigDevicesSdhOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdhArgs) ToInstanceConfigDevicesSdhOutputWithContext(ctx context.Context) InstanceConfigDevicesSdhOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdhOutput)
}

func (i InstanceConfigDevicesSdhArgs) ToInstanceConfigDevicesSdhPtrOutput() InstanceConfigDevicesSdhPtrOutput {
	return i.ToInstanceConfigDevicesSdhPtrOutputWithContext(context.Background())
}

func (i InstanceConfigDevicesSdhArgs) ToInstanceConfigDevicesSdhPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdhPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdhOutput).ToInstanceConfigDevicesSdhPtrOutputWithContext(ctx)
}

// InstanceConfigDevicesSdhPtrInput is an input type that accepts InstanceConfigDevicesSdhArgs, InstanceConfigDevicesSdhPtr and InstanceConfigDevicesSdhPtrOutput values.
// You can construct a concrete instance of `InstanceConfigDevicesSdhPtrInput` via:
//
// 		 InstanceConfigDevicesSdhArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigDevicesSdhPtrInput interface {
	pulumi.Input

	ToInstanceConfigDevicesSdhPtrOutput() InstanceConfigDevicesSdhPtrOutput
	ToInstanceConfigDevicesSdhPtrOutputWithContext(context.Context) InstanceConfigDevicesSdhPtrOutput
}

type instanceConfigDevicesSdhPtrType InstanceConfigDevicesSdhArgs

func InstanceConfigDevicesSdhPtr(v *InstanceConfigDevicesSdhArgs) InstanceConfigDevicesSdhPtrInput {
	return (*instanceConfigDevicesSdhPtrType)(v)
}

func (*instanceConfigDevicesSdhPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdh)(nil)).Elem()
}

func (i *instanceConfigDevicesSdhPtrType) ToInstanceConfigDevicesSdhPtrOutput() InstanceConfigDevicesSdhPtrOutput {
	return i.ToInstanceConfigDevicesSdhPtrOutputWithContext(context.Background())
}

func (i *instanceConfigDevicesSdhPtrType) ToInstanceConfigDevicesSdhPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdhPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigDevicesSdhPtrOutput)
}

type InstanceConfigDevicesSdhOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdhOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigDevicesSdh)(nil)).Elem()
}

func (o InstanceConfigDevicesSdhOutput) ToInstanceConfigDevicesSdhOutput() InstanceConfigDevicesSdhOutput {
	return o
}

func (o InstanceConfigDevicesSdhOutput) ToInstanceConfigDevicesSdhOutputWithContext(ctx context.Context) InstanceConfigDevicesSdhOutput {
	return o
}

func (o InstanceConfigDevicesSdhOutput) ToInstanceConfigDevicesSdhPtrOutput() InstanceConfigDevicesSdhPtrOutput {
	return o.ToInstanceConfigDevicesSdhPtrOutputWithContext(context.Background())
}

func (o InstanceConfigDevicesSdhOutput) ToInstanceConfigDevicesSdhPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdhPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *InstanceConfigDevicesSdh {
		return &v
	}).(InstanceConfigDevicesSdhPtrOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdhOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdhOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdhOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigDevicesSdhPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigDevicesSdhPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigDevicesSdh)(nil)).Elem()
}

func (o InstanceConfigDevicesSdhPtrOutput) ToInstanceConfigDevicesSdhPtrOutput() InstanceConfigDevicesSdhPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdhPtrOutput) ToInstanceConfigDevicesSdhPtrOutputWithContext(ctx context.Context) InstanceConfigDevicesSdhPtrOutput {
	return o
}

func (o InstanceConfigDevicesSdhPtrOutput) Elem() InstanceConfigDevicesSdhOutput {
	return o.ApplyT(func(v *InstanceConfigDevicesSdh) InstanceConfigDevicesSdh { return *v }).(InstanceConfigDevicesSdhOutput)
}

// The Disk ID of the associated `diskLabel`, if used.
func (o InstanceConfigDevicesSdhPtrOutput) DiskId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *int { return v.DiskId }).(pulumi.IntPtrOutput)
}

// The `label` of the `disk` to map to this `device` slot.
func (o InstanceConfigDevicesSdhPtrOutput) DiskLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *string { return v.DiskLabel }).(pulumi.StringPtrOutput)
}

// The Volume ID to map to this `device` slot.
func (o InstanceConfigDevicesSdhPtrOutput) VolumeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceConfigDevicesSdh) *int { return v.VolumeId }).(pulumi.IntPtrOutput)
}

type InstanceConfigHelpers struct {
	DevtmpfsAutomount *bool `pulumi:"devtmpfsAutomount"`
	// Controls the behavior of the Linode Config's Distribution Helper setting.
	Distro *bool `pulumi:"distro"`
	// Creates a modules dependency file for the Kernel you run.
	ModulesDep *bool `pulumi:"modulesDep"`
	// Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
	Network *bool `pulumi:"network"`
	// Disables updatedb cron job to avoid disk thrashing.
	UpdatedbDisabled *bool `pulumi:"updatedbDisabled"`
}

// InstanceConfigHelpersInput is an input type that accepts InstanceConfigHelpersArgs and InstanceConfigHelpersOutput values.
// You can construct a concrete instance of `InstanceConfigHelpersInput` via:
//
// 		 InstanceConfigHelpersArgs{...}
//
type InstanceConfigHelpersInput interface {
	pulumi.Input

	ToInstanceConfigHelpersOutput() InstanceConfigHelpersOutput
	ToInstanceConfigHelpersOutputWithContext(context.Context) InstanceConfigHelpersOutput
}

type InstanceConfigHelpersArgs struct {
	DevtmpfsAutomount pulumi.BoolPtrInput `pulumi:"devtmpfsAutomount"`
	// Controls the behavior of the Linode Config's Distribution Helper setting.
	Distro pulumi.BoolPtrInput `pulumi:"distro"`
	// Creates a modules dependency file for the Kernel you run.
	ModulesDep pulumi.BoolPtrInput `pulumi:"modulesDep"`
	// Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
	Network pulumi.BoolPtrInput `pulumi:"network"`
	// Disables updatedb cron job to avoid disk thrashing.
	UpdatedbDisabled pulumi.BoolPtrInput `pulumi:"updatedbDisabled"`
}

func (InstanceConfigHelpersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigHelpers)(nil)).Elem()
}

func (i InstanceConfigHelpersArgs) ToInstanceConfigHelpersOutput() InstanceConfigHelpersOutput {
	return i.ToInstanceConfigHelpersOutputWithContext(context.Background())
}

func (i InstanceConfigHelpersArgs) ToInstanceConfigHelpersOutputWithContext(ctx context.Context) InstanceConfigHelpersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigHelpersOutput)
}

func (i InstanceConfigHelpersArgs) ToInstanceConfigHelpersPtrOutput() InstanceConfigHelpersPtrOutput {
	return i.ToInstanceConfigHelpersPtrOutputWithContext(context.Background())
}

func (i InstanceConfigHelpersArgs) ToInstanceConfigHelpersPtrOutputWithContext(ctx context.Context) InstanceConfigHelpersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigHelpersOutput).ToInstanceConfigHelpersPtrOutputWithContext(ctx)
}

// InstanceConfigHelpersPtrInput is an input type that accepts InstanceConfigHelpersArgs, InstanceConfigHelpersPtr and InstanceConfigHelpersPtrOutput values.
// You can construct a concrete instance of `InstanceConfigHelpersPtrInput` via:
//
// 		 InstanceConfigHelpersArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceConfigHelpersPtrInput interface {
	pulumi.Input

	ToInstanceConfigHelpersPtrOutput() InstanceConfigHelpersPtrOutput
	ToInstanceConfigHelpersPtrOutputWithContext(context.Context) InstanceConfigHelpersPtrOutput
}

type instanceConfigHelpersPtrType InstanceConfigHelpersArgs

func InstanceConfigHelpersPtr(v *InstanceConfigHelpersArgs) InstanceConfigHelpersPtrInput {
	return (*instanceConfigHelpersPtrType)(v)
}

func (*instanceConfigHelpersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigHelpers)(nil)).Elem()
}

func (i *instanceConfigHelpersPtrType) ToInstanceConfigHelpersPtrOutput() InstanceConfigHelpersPtrOutput {
	return i.ToInstanceConfigHelpersPtrOutputWithContext(context.Background())
}

func (i *instanceConfigHelpersPtrType) ToInstanceConfigHelpersPtrOutputWithContext(ctx context.Context) InstanceConfigHelpersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigHelpersPtrOutput)
}

type InstanceConfigHelpersOutput struct{ *pulumi.OutputState }

func (InstanceConfigHelpersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigHelpers)(nil)).Elem()
}

func (o InstanceConfigHelpersOutput) ToInstanceConfigHelpersOutput() InstanceConfigHelpersOutput {
	return o
}

func (o InstanceConfigHelpersOutput) ToInstanceConfigHelpersOutputWithContext(ctx context.Context) InstanceConfigHelpersOutput {
	return o
}

func (o InstanceConfigHelpersOutput) ToInstanceConfigHelpersPtrOutput() InstanceConfigHelpersPtrOutput {
	return o.ToInstanceConfigHelpersPtrOutputWithContext(context.Background())
}

func (o InstanceConfigHelpersOutput) ToInstanceConfigHelpersPtrOutputWithContext(ctx context.Context) InstanceConfigHelpersPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *InstanceConfigHelpers {
		return &v
	}).(InstanceConfigHelpersPtrOutput)
}
func (o InstanceConfigHelpersOutput) DevtmpfsAutomount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.DevtmpfsAutomount }).(pulumi.BoolPtrOutput)
}

// Controls the behavior of the Linode Config's Distribution Helper setting.
func (o InstanceConfigHelpersOutput) Distro() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.Distro }).(pulumi.BoolPtrOutput)
}

// Creates a modules dependency file for the Kernel you run.
func (o InstanceConfigHelpersOutput) ModulesDep() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.ModulesDep }).(pulumi.BoolPtrOutput)
}

// Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
func (o InstanceConfigHelpersOutput) Network() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.Network }).(pulumi.BoolPtrOutput)
}

// Disables updatedb cron job to avoid disk thrashing.
func (o InstanceConfigHelpersOutput) UpdatedbDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.UpdatedbDisabled }).(pulumi.BoolPtrOutput)
}

type InstanceConfigHelpersPtrOutput struct{ *pulumi.OutputState }

func (InstanceConfigHelpersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfigHelpers)(nil)).Elem()
}

func (o InstanceConfigHelpersPtrOutput) ToInstanceConfigHelpersPtrOutput() InstanceConfigHelpersPtrOutput {
	return o
}

func (o InstanceConfigHelpersPtrOutput) ToInstanceConfigHelpersPtrOutputWithContext(ctx context.Context) InstanceConfigHelpersPtrOutput {
	return o
}

func (o InstanceConfigHelpersPtrOutput) Elem() InstanceConfigHelpersOutput {
	return o.ApplyT(func(v *InstanceConfigHelpers) InstanceConfigHelpers { return *v }).(InstanceConfigHelpersOutput)
}

func (o InstanceConfigHelpersPtrOutput) DevtmpfsAutomount() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.DevtmpfsAutomount }).(pulumi.BoolPtrOutput)
}

// Controls the behavior of the Linode Config's Distribution Helper setting.
func (o InstanceConfigHelpersPtrOutput) Distro() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.Distro }).(pulumi.BoolPtrOutput)
}

// Creates a modules dependency file for the Kernel you run.
func (o InstanceConfigHelpersPtrOutput) ModulesDep() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.ModulesDep }).(pulumi.BoolPtrOutput)
}

// Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
func (o InstanceConfigHelpersPtrOutput) Network() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.Network }).(pulumi.BoolPtrOutput)
}

// Disables updatedb cron job to avoid disk thrashing.
func (o InstanceConfigHelpersPtrOutput) UpdatedbDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfigHelpers) *bool { return v.UpdatedbDisabled }).(pulumi.BoolPtrOutput)
}

type InstanceDisk struct {
	// A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorizedKeys` forces the creation of a new Linode Instance.*
	AuthorizedKeys []string `pulumi:"authorizedKeys"`
	// A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorizedUsers` forces the creation of a new Linode Instance.*
	AuthorizedUsers []string `pulumi:"authorizedUsers"`
	Filesystem      *string  `pulumi:"filesystem"`
	// The ID of the disk in the Linode API.
	Id *int `pulumi:"id"`
	// An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. *Changing `image` forces the creation of a new Linode Instance.*
	Image *string `pulumi:"image"`
	// The Config's label for display purposes.  Also used by `bootConfigLabel`.
	Label    string  `pulumi:"label"`
	ReadOnly *bool   `pulumi:"readOnly"`
	RootPass *string `pulumi:"rootPass"`
	// The size of the Disk in MB.
	Size int `pulumi:"size"`
	// An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscriptData` forces the creation of a new Linode Instance.*
	StackscriptData map[string]interface{} `pulumi:"stackscriptData"`
	// The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscriptId` forces the creation of a new Linode Instance.*
	StackscriptId *int `pulumi:"stackscriptId"`
}

// InstanceDiskInput is an input type that accepts InstanceDiskArgs and InstanceDiskOutput values.
// You can construct a concrete instance of `InstanceDiskInput` via:
//
// 		 InstanceDiskArgs{...}
//
type InstanceDiskInput interface {
	pulumi.Input

	ToInstanceDiskOutput() InstanceDiskOutput
	ToInstanceDiskOutputWithContext(context.Context) InstanceDiskOutput
}

type InstanceDiskArgs struct {
	// A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorizedKeys` forces the creation of a new Linode Instance.*
	AuthorizedKeys pulumi.StringArrayInput `pulumi:"authorizedKeys"`
	// A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorizedUsers` forces the creation of a new Linode Instance.*
	AuthorizedUsers pulumi.StringArrayInput `pulumi:"authorizedUsers"`
	Filesystem      pulumi.StringPtrInput   `pulumi:"filesystem"`
	// The ID of the disk in the Linode API.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. *Changing `image` forces the creation of a new Linode Instance.*
	Image pulumi.StringPtrInput `pulumi:"image"`
	// The Config's label for display purposes.  Also used by `bootConfigLabel`.
	Label    pulumi.StringInput    `pulumi:"label"`
	ReadOnly pulumi.BoolPtrInput   `pulumi:"readOnly"`
	RootPass pulumi.StringPtrInput `pulumi:"rootPass"`
	// The size of the Disk in MB.
	Size pulumi.IntInput `pulumi:"size"`
	// An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscriptData` forces the creation of a new Linode Instance.*
	StackscriptData pulumi.MapInput `pulumi:"stackscriptData"`
	// The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscriptId` forces the creation of a new Linode Instance.*
	StackscriptId pulumi.IntPtrInput `pulumi:"stackscriptId"`
}

func (InstanceDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDisk)(nil)).Elem()
}

func (i InstanceDiskArgs) ToInstanceDiskOutput() InstanceDiskOutput {
	return i.ToInstanceDiskOutputWithContext(context.Background())
}

func (i InstanceDiskArgs) ToInstanceDiskOutputWithContext(ctx context.Context) InstanceDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDiskOutput)
}

// InstanceDiskArrayInput is an input type that accepts InstanceDiskArray and InstanceDiskArrayOutput values.
// You can construct a concrete instance of `InstanceDiskArrayInput` via:
//
// 		 InstanceDiskArray{ InstanceDiskArgs{...} }
//
type InstanceDiskArrayInput interface {
	pulumi.Input

	ToInstanceDiskArrayOutput() InstanceDiskArrayOutput
	ToInstanceDiskArrayOutputWithContext(context.Context) InstanceDiskArrayOutput
}

type InstanceDiskArray []InstanceDiskInput

func (InstanceDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDisk)(nil)).Elem()
}

func (i InstanceDiskArray) ToInstanceDiskArrayOutput() InstanceDiskArrayOutput {
	return i.ToInstanceDiskArrayOutputWithContext(context.Background())
}

func (i InstanceDiskArray) ToInstanceDiskArrayOutputWithContext(ctx context.Context) InstanceDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDiskArrayOutput)
}

type InstanceDiskOutput struct{ *pulumi.OutputState }

func (InstanceDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDisk)(nil)).Elem()
}

func (o InstanceDiskOutput) ToInstanceDiskOutput() InstanceDiskOutput {
	return o
}

func (o InstanceDiskOutput) ToInstanceDiskOutputWithContext(ctx context.Context) InstanceDiskOutput {
	return o
}

// A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorizedKeys` forces the creation of a new Linode Instance.*
func (o InstanceDiskOutput) AuthorizedKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceDisk) []string { return v.AuthorizedKeys }).(pulumi.StringArrayOutput)
}

// A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorizedUsers` forces the creation of a new Linode Instance.*
func (o InstanceDiskOutput) AuthorizedUsers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceDisk) []string { return v.AuthorizedUsers }).(pulumi.StringArrayOutput)
}

func (o InstanceDiskOutput) Filesystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *string { return v.Filesystem }).(pulumi.StringPtrOutput)
}

// The ID of the disk in the Linode API.
func (o InstanceDiskOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. *Changing `image` forces the creation of a new Linode Instance.*
func (o InstanceDiskOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// The Config's label for display purposes.  Also used by `bootConfigLabel`.
func (o InstanceDiskOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDisk) string { return v.Label }).(pulumi.StringOutput)
}

func (o InstanceDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o InstanceDiskOutput) RootPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *string { return v.RootPass }).(pulumi.StringPtrOutput)
}

// The size of the Disk in MB.
func (o InstanceDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDisk) int { return v.Size }).(pulumi.IntOutput)
}

// An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscriptData` forces the creation of a new Linode Instance.*
func (o InstanceDiskOutput) StackscriptData() pulumi.MapOutput {
	return o.ApplyT(func(v InstanceDisk) map[string]interface{} { return v.StackscriptData }).(pulumi.MapOutput)
}

// The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscriptId` forces the creation of a new Linode Instance.*
func (o InstanceDiskOutput) StackscriptId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceDisk) *int { return v.StackscriptId }).(pulumi.IntPtrOutput)
}

type InstanceDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDisk)(nil)).Elem()
}

func (o InstanceDiskArrayOutput) ToInstanceDiskArrayOutput() InstanceDiskArrayOutput {
	return o
}

func (o InstanceDiskArrayOutput) ToInstanceDiskArrayOutputWithContext(ctx context.Context) InstanceDiskArrayOutput {
	return o
}

func (o InstanceDiskArrayOutput) Index(i pulumi.IntInput) InstanceDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDisk {
		return vs[0].([]InstanceDisk)[vs[1].(int)]
	}).(InstanceDiskOutput)
}

type InstanceSpecs struct {
	Disk     *int `pulumi:"disk"`
	Memory   *int `pulumi:"memory"`
	Transfer *int `pulumi:"transfer"`
	Vcpus    *int `pulumi:"vcpus"`
}

// InstanceSpecsInput is an input type that accepts InstanceSpecsArgs and InstanceSpecsOutput values.
// You can construct a concrete instance of `InstanceSpecsInput` via:
//
// 		 InstanceSpecsArgs{...}
//
type InstanceSpecsInput interface {
	pulumi.Input

	ToInstanceSpecsOutput() InstanceSpecsOutput
	ToInstanceSpecsOutputWithContext(context.Context) InstanceSpecsOutput
}

type InstanceSpecsArgs struct {
	Disk     pulumi.IntPtrInput `pulumi:"disk"`
	Memory   pulumi.IntPtrInput `pulumi:"memory"`
	Transfer pulumi.IntPtrInput `pulumi:"transfer"`
	Vcpus    pulumi.IntPtrInput `pulumi:"vcpus"`
}

func (InstanceSpecsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpecs)(nil)).Elem()
}

func (i InstanceSpecsArgs) ToInstanceSpecsOutput() InstanceSpecsOutput {
	return i.ToInstanceSpecsOutputWithContext(context.Background())
}

func (i InstanceSpecsArgs) ToInstanceSpecsOutputWithContext(ctx context.Context) InstanceSpecsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecsOutput)
}

func (i InstanceSpecsArgs) ToInstanceSpecsPtrOutput() InstanceSpecsPtrOutput {
	return i.ToInstanceSpecsPtrOutputWithContext(context.Background())
}

func (i InstanceSpecsArgs) ToInstanceSpecsPtrOutputWithContext(ctx context.Context) InstanceSpecsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecsOutput).ToInstanceSpecsPtrOutputWithContext(ctx)
}

// InstanceSpecsPtrInput is an input type that accepts InstanceSpecsArgs, InstanceSpecsPtr and InstanceSpecsPtrOutput values.
// You can construct a concrete instance of `InstanceSpecsPtrInput` via:
//
// 		 InstanceSpecsArgs{...}
//
//  or:
//
// 		 nil
//
type InstanceSpecsPtrInput interface {
	pulumi.Input

	ToInstanceSpecsPtrOutput() InstanceSpecsPtrOutput
	ToInstanceSpecsPtrOutputWithContext(context.Context) InstanceSpecsPtrOutput
}

type instanceSpecsPtrType InstanceSpecsArgs

func InstanceSpecsPtr(v *InstanceSpecsArgs) InstanceSpecsPtrInput {
	return (*instanceSpecsPtrType)(v)
}

func (*instanceSpecsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSpecs)(nil)).Elem()
}

func (i *instanceSpecsPtrType) ToInstanceSpecsPtrOutput() InstanceSpecsPtrOutput {
	return i.ToInstanceSpecsPtrOutputWithContext(context.Background())
}

func (i *instanceSpecsPtrType) ToInstanceSpecsPtrOutputWithContext(ctx context.Context) InstanceSpecsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecsPtrOutput)
}

type InstanceSpecsOutput struct{ *pulumi.OutputState }

func (InstanceSpecsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpecs)(nil)).Elem()
}

func (o InstanceSpecsOutput) ToInstanceSpecsOutput() InstanceSpecsOutput {
	return o
}

func (o InstanceSpecsOutput) ToInstanceSpecsOutputWithContext(ctx context.Context) InstanceSpecsOutput {
	return o
}

func (o InstanceSpecsOutput) ToInstanceSpecsPtrOutput() InstanceSpecsPtrOutput {
	return o.ToInstanceSpecsPtrOutputWithContext(context.Background())
}

func (o InstanceSpecsOutput) ToInstanceSpecsPtrOutputWithContext(ctx context.Context) InstanceSpecsPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *InstanceSpecs {
		return &v
	}).(InstanceSpecsPtrOutput)
}
func (o InstanceSpecsOutput) Disk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Disk }).(pulumi.IntPtrOutput)
}

func (o InstanceSpecsOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o InstanceSpecsOutput) Transfer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Transfer }).(pulumi.IntPtrOutput)
}

func (o InstanceSpecsOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

type InstanceSpecsPtrOutput struct{ *pulumi.OutputState }

func (InstanceSpecsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSpecs)(nil)).Elem()
}

func (o InstanceSpecsPtrOutput) ToInstanceSpecsPtrOutput() InstanceSpecsPtrOutput {
	return o
}

func (o InstanceSpecsPtrOutput) ToInstanceSpecsPtrOutputWithContext(ctx context.Context) InstanceSpecsPtrOutput {
	return o
}

func (o InstanceSpecsPtrOutput) Elem() InstanceSpecsOutput {
	return o.ApplyT(func(v *InstanceSpecs) InstanceSpecs { return *v }).(InstanceSpecsOutput)
}

func (o InstanceSpecsPtrOutput) Disk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Disk }).(pulumi.IntPtrOutput)
}

func (o InstanceSpecsPtrOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o InstanceSpecsPtrOutput) Transfer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Transfer }).(pulumi.IntPtrOutput)
}

func (o InstanceSpecsPtrOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceSpecs) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

type NodeBalancerConfigNodeStatus struct {
	StatusDown *int `pulumi:"statusDown"`
	StatusUp   *int `pulumi:"statusUp"`
}

// NodeBalancerConfigNodeStatusInput is an input type that accepts NodeBalancerConfigNodeStatusArgs and NodeBalancerConfigNodeStatusOutput values.
// You can construct a concrete instance of `NodeBalancerConfigNodeStatusInput` via:
//
// 		 NodeBalancerConfigNodeStatusArgs{...}
//
type NodeBalancerConfigNodeStatusInput interface {
	pulumi.Input

	ToNodeBalancerConfigNodeStatusOutput() NodeBalancerConfigNodeStatusOutput
	ToNodeBalancerConfigNodeStatusOutputWithContext(context.Context) NodeBalancerConfigNodeStatusOutput
}

type NodeBalancerConfigNodeStatusArgs struct {
	StatusDown pulumi.IntPtrInput `pulumi:"statusDown"`
	StatusUp   pulumi.IntPtrInput `pulumi:"statusUp"`
}

func (NodeBalancerConfigNodeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeBalancerConfigNodeStatus)(nil)).Elem()
}

func (i NodeBalancerConfigNodeStatusArgs) ToNodeBalancerConfigNodeStatusOutput() NodeBalancerConfigNodeStatusOutput {
	return i.ToNodeBalancerConfigNodeStatusOutputWithContext(context.Background())
}

func (i NodeBalancerConfigNodeStatusArgs) ToNodeBalancerConfigNodeStatusOutputWithContext(ctx context.Context) NodeBalancerConfigNodeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeBalancerConfigNodeStatusOutput)
}

func (i NodeBalancerConfigNodeStatusArgs) ToNodeBalancerConfigNodeStatusPtrOutput() NodeBalancerConfigNodeStatusPtrOutput {
	return i.ToNodeBalancerConfigNodeStatusPtrOutputWithContext(context.Background())
}

func (i NodeBalancerConfigNodeStatusArgs) ToNodeBalancerConfigNodeStatusPtrOutputWithContext(ctx context.Context) NodeBalancerConfigNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeBalancerConfigNodeStatusOutput).ToNodeBalancerConfigNodeStatusPtrOutputWithContext(ctx)
}

// NodeBalancerConfigNodeStatusPtrInput is an input type that accepts NodeBalancerConfigNodeStatusArgs, NodeBalancerConfigNodeStatusPtr and NodeBalancerConfigNodeStatusPtrOutput values.
// You can construct a concrete instance of `NodeBalancerConfigNodeStatusPtrInput` via:
//
// 		 NodeBalancerConfigNodeStatusArgs{...}
//
//  or:
//
// 		 nil
//
type NodeBalancerConfigNodeStatusPtrInput interface {
	pulumi.Input

	ToNodeBalancerConfigNodeStatusPtrOutput() NodeBalancerConfigNodeStatusPtrOutput
	ToNodeBalancerConfigNodeStatusPtrOutputWithContext(context.Context) NodeBalancerConfigNodeStatusPtrOutput
}

type nodeBalancerConfigNodeStatusPtrType NodeBalancerConfigNodeStatusArgs

func NodeBalancerConfigNodeStatusPtr(v *NodeBalancerConfigNodeStatusArgs) NodeBalancerConfigNodeStatusPtrInput {
	return (*nodeBalancerConfigNodeStatusPtrType)(v)
}

func (*nodeBalancerConfigNodeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeBalancerConfigNodeStatus)(nil)).Elem()
}

func (i *nodeBalancerConfigNodeStatusPtrType) ToNodeBalancerConfigNodeStatusPtrOutput() NodeBalancerConfigNodeStatusPtrOutput {
	return i.ToNodeBalancerConfigNodeStatusPtrOutputWithContext(context.Background())
}

func (i *nodeBalancerConfigNodeStatusPtrType) ToNodeBalancerConfigNodeStatusPtrOutputWithContext(ctx context.Context) NodeBalancerConfigNodeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeBalancerConfigNodeStatusPtrOutput)
}

type NodeBalancerConfigNodeStatusOutput struct{ *pulumi.OutputState }

func (NodeBalancerConfigNodeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeBalancerConfigNodeStatus)(nil)).Elem()
}

func (o NodeBalancerConfigNodeStatusOutput) ToNodeBalancerConfigNodeStatusOutput() NodeBalancerConfigNodeStatusOutput {
	return o
}

func (o NodeBalancerConfigNodeStatusOutput) ToNodeBalancerConfigNodeStatusOutputWithContext(ctx context.Context) NodeBalancerConfigNodeStatusOutput {
	return o
}

func (o NodeBalancerConfigNodeStatusOutput) ToNodeBalancerConfigNodeStatusPtrOutput() NodeBalancerConfigNodeStatusPtrOutput {
	return o.ToNodeBalancerConfigNodeStatusPtrOutputWithContext(context.Background())
}

func (o NodeBalancerConfigNodeStatusOutput) ToNodeBalancerConfigNodeStatusPtrOutputWithContext(ctx context.Context) NodeBalancerConfigNodeStatusPtrOutput {
	return o.ApplyT(func(v NodeBalancerConfigNodeStatus) *NodeBalancerConfigNodeStatus {
		return &v
	}).(NodeBalancerConfigNodeStatusPtrOutput)
}
func (o NodeBalancerConfigNodeStatusOutput) StatusDown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeBalancerConfigNodeStatus) *int { return v.StatusDown }).(pulumi.IntPtrOutput)
}

func (o NodeBalancerConfigNodeStatusOutput) StatusUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeBalancerConfigNodeStatus) *int { return v.StatusUp }).(pulumi.IntPtrOutput)
}

type NodeBalancerConfigNodeStatusPtrOutput struct{ *pulumi.OutputState }

func (NodeBalancerConfigNodeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeBalancerConfigNodeStatus)(nil)).Elem()
}

func (o NodeBalancerConfigNodeStatusPtrOutput) ToNodeBalancerConfigNodeStatusPtrOutput() NodeBalancerConfigNodeStatusPtrOutput {
	return o
}

func (o NodeBalancerConfigNodeStatusPtrOutput) ToNodeBalancerConfigNodeStatusPtrOutputWithContext(ctx context.Context) NodeBalancerConfigNodeStatusPtrOutput {
	return o
}

func (o NodeBalancerConfigNodeStatusPtrOutput) Elem() NodeBalancerConfigNodeStatusOutput {
	return o.ApplyT(func(v *NodeBalancerConfigNodeStatus) NodeBalancerConfigNodeStatus { return *v }).(NodeBalancerConfigNodeStatusOutput)
}

func (o NodeBalancerConfigNodeStatusPtrOutput) StatusDown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeBalancerConfigNodeStatus) *int { return v.StatusDown }).(pulumi.IntPtrOutput)
}

func (o NodeBalancerConfigNodeStatusPtrOutput) StatusUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeBalancerConfigNodeStatus) *int { return v.StatusUp }).(pulumi.IntPtrOutput)
}

type NodeBalancerTransfer struct {
	In    *float64 `pulumi:"in"`
	Out   *float64 `pulumi:"out"`
	Total *float64 `pulumi:"total"`
}

// NodeBalancerTransferInput is an input type that accepts NodeBalancerTransferArgs and NodeBalancerTransferOutput values.
// You can construct a concrete instance of `NodeBalancerTransferInput` via:
//
// 		 NodeBalancerTransferArgs{...}
//
type NodeBalancerTransferInput interface {
	pulumi.Input

	ToNodeBalancerTransferOutput() NodeBalancerTransferOutput
	ToNodeBalancerTransferOutputWithContext(context.Context) NodeBalancerTransferOutput
}

type NodeBalancerTransferArgs struct {
	In    pulumi.Float64PtrInput `pulumi:"in"`
	Out   pulumi.Float64PtrInput `pulumi:"out"`
	Total pulumi.Float64PtrInput `pulumi:"total"`
}

func (NodeBalancerTransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeBalancerTransfer)(nil)).Elem()
}

func (i NodeBalancerTransferArgs) ToNodeBalancerTransferOutput() NodeBalancerTransferOutput {
	return i.ToNodeBalancerTransferOutputWithContext(context.Background())
}

func (i NodeBalancerTransferArgs) ToNodeBalancerTransferOutputWithContext(ctx context.Context) NodeBalancerTransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeBalancerTransferOutput)
}

func (i NodeBalancerTransferArgs) ToNodeBalancerTransferPtrOutput() NodeBalancerTransferPtrOutput {
	return i.ToNodeBalancerTransferPtrOutputWithContext(context.Background())
}

func (i NodeBalancerTransferArgs) ToNodeBalancerTransferPtrOutputWithContext(ctx context.Context) NodeBalancerTransferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeBalancerTransferOutput).ToNodeBalancerTransferPtrOutputWithContext(ctx)
}

// NodeBalancerTransferPtrInput is an input type that accepts NodeBalancerTransferArgs, NodeBalancerTransferPtr and NodeBalancerTransferPtrOutput values.
// You can construct a concrete instance of `NodeBalancerTransferPtrInput` via:
//
// 		 NodeBalancerTransferArgs{...}
//
//  or:
//
// 		 nil
//
type NodeBalancerTransferPtrInput interface {
	pulumi.Input

	ToNodeBalancerTransferPtrOutput() NodeBalancerTransferPtrOutput
	ToNodeBalancerTransferPtrOutputWithContext(context.Context) NodeBalancerTransferPtrOutput
}

type nodeBalancerTransferPtrType NodeBalancerTransferArgs

func NodeBalancerTransferPtr(v *NodeBalancerTransferArgs) NodeBalancerTransferPtrInput {
	return (*nodeBalancerTransferPtrType)(v)
}

func (*nodeBalancerTransferPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeBalancerTransfer)(nil)).Elem()
}

func (i *nodeBalancerTransferPtrType) ToNodeBalancerTransferPtrOutput() NodeBalancerTransferPtrOutput {
	return i.ToNodeBalancerTransferPtrOutputWithContext(context.Background())
}

func (i *nodeBalancerTransferPtrType) ToNodeBalancerTransferPtrOutputWithContext(ctx context.Context) NodeBalancerTransferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeBalancerTransferPtrOutput)
}

type NodeBalancerTransferOutput struct{ *pulumi.OutputState }

func (NodeBalancerTransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeBalancerTransfer)(nil)).Elem()
}

func (o NodeBalancerTransferOutput) ToNodeBalancerTransferOutput() NodeBalancerTransferOutput {
	return o
}

func (o NodeBalancerTransferOutput) ToNodeBalancerTransferOutputWithContext(ctx context.Context) NodeBalancerTransferOutput {
	return o
}

func (o NodeBalancerTransferOutput) ToNodeBalancerTransferPtrOutput() NodeBalancerTransferPtrOutput {
	return o.ToNodeBalancerTransferPtrOutputWithContext(context.Background())
}

func (o NodeBalancerTransferOutput) ToNodeBalancerTransferPtrOutputWithContext(ctx context.Context) NodeBalancerTransferPtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *NodeBalancerTransfer {
		return &v
	}).(NodeBalancerTransferPtrOutput)
}
func (o NodeBalancerTransferOutput) In() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *float64 { return v.In }).(pulumi.Float64PtrOutput)
}

func (o NodeBalancerTransferOutput) Out() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *float64 { return v.Out }).(pulumi.Float64PtrOutput)
}

func (o NodeBalancerTransferOutput) Total() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *float64 { return v.Total }).(pulumi.Float64PtrOutput)
}

type NodeBalancerTransferPtrOutput struct{ *pulumi.OutputState }

func (NodeBalancerTransferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeBalancerTransfer)(nil)).Elem()
}

func (o NodeBalancerTransferPtrOutput) ToNodeBalancerTransferPtrOutput() NodeBalancerTransferPtrOutput {
	return o
}

func (o NodeBalancerTransferPtrOutput) ToNodeBalancerTransferPtrOutputWithContext(ctx context.Context) NodeBalancerTransferPtrOutput {
	return o
}

func (o NodeBalancerTransferPtrOutput) Elem() NodeBalancerTransferOutput {
	return o.ApplyT(func(v *NodeBalancerTransfer) NodeBalancerTransfer { return *v }).(NodeBalancerTransferOutput)
}

func (o NodeBalancerTransferPtrOutput) In() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *float64 { return v.In }).(pulumi.Float64PtrOutput)
}

func (o NodeBalancerTransferPtrOutput) Out() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *float64 { return v.Out }).(pulumi.Float64PtrOutput)
}

func (o NodeBalancerTransferPtrOutput) Total() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NodeBalancerTransfer) *float64 { return v.Total }).(pulumi.Float64PtrOutput)
}

type StackScriptUserDefinedField struct {
	Default *string `pulumi:"default"`
	Example *string `pulumi:"example"`
	// The StackScript's label is for display purposes only.
	Label  *string `pulumi:"label"`
	ManyOf *string `pulumi:"manyOf"`
	Name   *string `pulumi:"name"`
	OneOf  *string `pulumi:"oneOf"`
}

// StackScriptUserDefinedFieldInput is an input type that accepts StackScriptUserDefinedFieldArgs and StackScriptUserDefinedFieldOutput values.
// You can construct a concrete instance of `StackScriptUserDefinedFieldInput` via:
//
// 		 StackScriptUserDefinedFieldArgs{...}
//
type StackScriptUserDefinedFieldInput interface {
	pulumi.Input

	ToStackScriptUserDefinedFieldOutput() StackScriptUserDefinedFieldOutput
	ToStackScriptUserDefinedFieldOutputWithContext(context.Context) StackScriptUserDefinedFieldOutput
}

type StackScriptUserDefinedFieldArgs struct {
	Default pulumi.StringPtrInput `pulumi:"default"`
	Example pulumi.StringPtrInput `pulumi:"example"`
	// The StackScript's label is for display purposes only.
	Label  pulumi.StringPtrInput `pulumi:"label"`
	ManyOf pulumi.StringPtrInput `pulumi:"manyOf"`
	Name   pulumi.StringPtrInput `pulumi:"name"`
	OneOf  pulumi.StringPtrInput `pulumi:"oneOf"`
}

func (StackScriptUserDefinedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackScriptUserDefinedField)(nil)).Elem()
}

func (i StackScriptUserDefinedFieldArgs) ToStackScriptUserDefinedFieldOutput() StackScriptUserDefinedFieldOutput {
	return i.ToStackScriptUserDefinedFieldOutputWithContext(context.Background())
}

func (i StackScriptUserDefinedFieldArgs) ToStackScriptUserDefinedFieldOutputWithContext(ctx context.Context) StackScriptUserDefinedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackScriptUserDefinedFieldOutput)
}

// StackScriptUserDefinedFieldArrayInput is an input type that accepts StackScriptUserDefinedFieldArray and StackScriptUserDefinedFieldArrayOutput values.
// You can construct a concrete instance of `StackScriptUserDefinedFieldArrayInput` via:
//
// 		 StackScriptUserDefinedFieldArray{ StackScriptUserDefinedFieldArgs{...} }
//
type StackScriptUserDefinedFieldArrayInput interface {
	pulumi.Input

	ToStackScriptUserDefinedFieldArrayOutput() StackScriptUserDefinedFieldArrayOutput
	ToStackScriptUserDefinedFieldArrayOutputWithContext(context.Context) StackScriptUserDefinedFieldArrayOutput
}

type StackScriptUserDefinedFieldArray []StackScriptUserDefinedFieldInput

func (StackScriptUserDefinedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackScriptUserDefinedField)(nil)).Elem()
}

func (i StackScriptUserDefinedFieldArray) ToStackScriptUserDefinedFieldArrayOutput() StackScriptUserDefinedFieldArrayOutput {
	return i.ToStackScriptUserDefinedFieldArrayOutputWithContext(context.Background())
}

func (i StackScriptUserDefinedFieldArray) ToStackScriptUserDefinedFieldArrayOutputWithContext(ctx context.Context) StackScriptUserDefinedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackScriptUserDefinedFieldArrayOutput)
}

type StackScriptUserDefinedFieldOutput struct{ *pulumi.OutputState }

func (StackScriptUserDefinedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackScriptUserDefinedField)(nil)).Elem()
}

func (o StackScriptUserDefinedFieldOutput) ToStackScriptUserDefinedFieldOutput() StackScriptUserDefinedFieldOutput {
	return o
}

func (o StackScriptUserDefinedFieldOutput) ToStackScriptUserDefinedFieldOutputWithContext(ctx context.Context) StackScriptUserDefinedFieldOutput {
	return o
}

func (o StackScriptUserDefinedFieldOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackScriptUserDefinedField) *string { return v.Default }).(pulumi.StringPtrOutput)
}

func (o StackScriptUserDefinedFieldOutput) Example() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackScriptUserDefinedField) *string { return v.Example }).(pulumi.StringPtrOutput)
}

// The StackScript's label is for display purposes only.
func (o StackScriptUserDefinedFieldOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackScriptUserDefinedField) *string { return v.Label }).(pulumi.StringPtrOutput)
}

func (o StackScriptUserDefinedFieldOutput) ManyOf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackScriptUserDefinedField) *string { return v.ManyOf }).(pulumi.StringPtrOutput)
}

func (o StackScriptUserDefinedFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackScriptUserDefinedField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o StackScriptUserDefinedFieldOutput) OneOf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackScriptUserDefinedField) *string { return v.OneOf }).(pulumi.StringPtrOutput)
}

type StackScriptUserDefinedFieldArrayOutput struct{ *pulumi.OutputState }

func (StackScriptUserDefinedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackScriptUserDefinedField)(nil)).Elem()
}

func (o StackScriptUserDefinedFieldArrayOutput) ToStackScriptUserDefinedFieldArrayOutput() StackScriptUserDefinedFieldArrayOutput {
	return o
}

func (o StackScriptUserDefinedFieldArrayOutput) ToStackScriptUserDefinedFieldArrayOutputWithContext(ctx context.Context) StackScriptUserDefinedFieldArrayOutput {
	return o
}

func (o StackScriptUserDefinedFieldArrayOutput) Index(i pulumi.IntInput) StackScriptUserDefinedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackScriptUserDefinedField {
		return vs[0].([]StackScriptUserDefinedField)[vs[1].(int)]
	}).(StackScriptUserDefinedFieldOutput)
}

type GetInstanceTypeAddons struct {
	Backups GetInstanceTypeAddonsBackups `pulumi:"backups"`
}

// GetInstanceTypeAddonsInput is an input type that accepts GetInstanceTypeAddonsArgs and GetInstanceTypeAddonsOutput values.
// You can construct a concrete instance of `GetInstanceTypeAddonsInput` via:
//
// 		 GetInstanceTypeAddonsArgs{...}
//
type GetInstanceTypeAddonsInput interface {
	pulumi.Input

	ToGetInstanceTypeAddonsOutput() GetInstanceTypeAddonsOutput
	ToGetInstanceTypeAddonsOutputWithContext(context.Context) GetInstanceTypeAddonsOutput
}

type GetInstanceTypeAddonsArgs struct {
	Backups GetInstanceTypeAddonsBackupsInput `pulumi:"backups"`
}

func (GetInstanceTypeAddonsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeAddons)(nil)).Elem()
}

func (i GetInstanceTypeAddonsArgs) ToGetInstanceTypeAddonsOutput() GetInstanceTypeAddonsOutput {
	return i.ToGetInstanceTypeAddonsOutputWithContext(context.Background())
}

func (i GetInstanceTypeAddonsArgs) ToGetInstanceTypeAddonsOutputWithContext(ctx context.Context) GetInstanceTypeAddonsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypeAddonsOutput)
}

type GetInstanceTypeAddonsOutput struct{ *pulumi.OutputState }

func (GetInstanceTypeAddonsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeAddons)(nil)).Elem()
}

func (o GetInstanceTypeAddonsOutput) ToGetInstanceTypeAddonsOutput() GetInstanceTypeAddonsOutput {
	return o
}

func (o GetInstanceTypeAddonsOutput) ToGetInstanceTypeAddonsOutputWithContext(ctx context.Context) GetInstanceTypeAddonsOutput {
	return o
}

func (o GetInstanceTypeAddonsOutput) Backups() GetInstanceTypeAddonsBackupsOutput {
	return o.ApplyT(func(v GetInstanceTypeAddons) GetInstanceTypeAddonsBackups { return v.Backups }).(GetInstanceTypeAddonsBackupsOutput)
}

type GetInstanceTypeAddonsBackups struct {
	Price GetInstanceTypeAddonsBackupsPrice `pulumi:"price"`
}

// GetInstanceTypeAddonsBackupsInput is an input type that accepts GetInstanceTypeAddonsBackupsArgs and GetInstanceTypeAddonsBackupsOutput values.
// You can construct a concrete instance of `GetInstanceTypeAddonsBackupsInput` via:
//
// 		 GetInstanceTypeAddonsBackupsArgs{...}
//
type GetInstanceTypeAddonsBackupsInput interface {
	pulumi.Input

	ToGetInstanceTypeAddonsBackupsOutput() GetInstanceTypeAddonsBackupsOutput
	ToGetInstanceTypeAddonsBackupsOutputWithContext(context.Context) GetInstanceTypeAddonsBackupsOutput
}

type GetInstanceTypeAddonsBackupsArgs struct {
	Price GetInstanceTypeAddonsBackupsPriceInput `pulumi:"price"`
}

func (GetInstanceTypeAddonsBackupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeAddonsBackups)(nil)).Elem()
}

func (i GetInstanceTypeAddonsBackupsArgs) ToGetInstanceTypeAddonsBackupsOutput() GetInstanceTypeAddonsBackupsOutput {
	return i.ToGetInstanceTypeAddonsBackupsOutputWithContext(context.Background())
}

func (i GetInstanceTypeAddonsBackupsArgs) ToGetInstanceTypeAddonsBackupsOutputWithContext(ctx context.Context) GetInstanceTypeAddonsBackupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypeAddonsBackupsOutput)
}

type GetInstanceTypeAddonsBackupsOutput struct{ *pulumi.OutputState }

func (GetInstanceTypeAddonsBackupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeAddonsBackups)(nil)).Elem()
}

func (o GetInstanceTypeAddonsBackupsOutput) ToGetInstanceTypeAddonsBackupsOutput() GetInstanceTypeAddonsBackupsOutput {
	return o
}

func (o GetInstanceTypeAddonsBackupsOutput) ToGetInstanceTypeAddonsBackupsOutputWithContext(ctx context.Context) GetInstanceTypeAddonsBackupsOutput {
	return o
}

func (o GetInstanceTypeAddonsBackupsOutput) Price() GetInstanceTypeAddonsBackupsPriceOutput {
	return o.ApplyT(func(v GetInstanceTypeAddonsBackups) GetInstanceTypeAddonsBackupsPrice { return v.Price }).(GetInstanceTypeAddonsBackupsPriceOutput)
}

type GetInstanceTypeAddonsBackupsPrice struct {
	Hourly  float64 `pulumi:"hourly"`
	Monthly float64 `pulumi:"monthly"`
}

// GetInstanceTypeAddonsBackupsPriceInput is an input type that accepts GetInstanceTypeAddonsBackupsPriceArgs and GetInstanceTypeAddonsBackupsPriceOutput values.
// You can construct a concrete instance of `GetInstanceTypeAddonsBackupsPriceInput` via:
//
// 		 GetInstanceTypeAddonsBackupsPriceArgs{...}
//
type GetInstanceTypeAddonsBackupsPriceInput interface {
	pulumi.Input

	ToGetInstanceTypeAddonsBackupsPriceOutput() GetInstanceTypeAddonsBackupsPriceOutput
	ToGetInstanceTypeAddonsBackupsPriceOutputWithContext(context.Context) GetInstanceTypeAddonsBackupsPriceOutput
}

type GetInstanceTypeAddonsBackupsPriceArgs struct {
	Hourly  pulumi.Float64Input `pulumi:"hourly"`
	Monthly pulumi.Float64Input `pulumi:"monthly"`
}

func (GetInstanceTypeAddonsBackupsPriceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeAddonsBackupsPrice)(nil)).Elem()
}

func (i GetInstanceTypeAddonsBackupsPriceArgs) ToGetInstanceTypeAddonsBackupsPriceOutput() GetInstanceTypeAddonsBackupsPriceOutput {
	return i.ToGetInstanceTypeAddonsBackupsPriceOutputWithContext(context.Background())
}

func (i GetInstanceTypeAddonsBackupsPriceArgs) ToGetInstanceTypeAddonsBackupsPriceOutputWithContext(ctx context.Context) GetInstanceTypeAddonsBackupsPriceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypeAddonsBackupsPriceOutput)
}

type GetInstanceTypeAddonsBackupsPriceOutput struct{ *pulumi.OutputState }

func (GetInstanceTypeAddonsBackupsPriceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypeAddonsBackupsPrice)(nil)).Elem()
}

func (o GetInstanceTypeAddonsBackupsPriceOutput) ToGetInstanceTypeAddonsBackupsPriceOutput() GetInstanceTypeAddonsBackupsPriceOutput {
	return o
}

func (o GetInstanceTypeAddonsBackupsPriceOutput) ToGetInstanceTypeAddonsBackupsPriceOutputWithContext(ctx context.Context) GetInstanceTypeAddonsBackupsPriceOutput {
	return o
}

func (o GetInstanceTypeAddonsBackupsPriceOutput) Hourly() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceTypeAddonsBackupsPrice) float64 { return v.Hourly }).(pulumi.Float64Output)
}

func (o GetInstanceTypeAddonsBackupsPriceOutput) Monthly() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceTypeAddonsBackupsPrice) float64 { return v.Monthly }).(pulumi.Float64Output)
}

type GetInstanceTypePrice struct {
	Hourly  float64 `pulumi:"hourly"`
	Monthly float64 `pulumi:"monthly"`
}

// GetInstanceTypePriceInput is an input type that accepts GetInstanceTypePriceArgs and GetInstanceTypePriceOutput values.
// You can construct a concrete instance of `GetInstanceTypePriceInput` via:
//
// 		 GetInstanceTypePriceArgs{...}
//
type GetInstanceTypePriceInput interface {
	pulumi.Input

	ToGetInstanceTypePriceOutput() GetInstanceTypePriceOutput
	ToGetInstanceTypePriceOutputWithContext(context.Context) GetInstanceTypePriceOutput
}

type GetInstanceTypePriceArgs struct {
	Hourly  pulumi.Float64Input `pulumi:"hourly"`
	Monthly pulumi.Float64Input `pulumi:"monthly"`
}

func (GetInstanceTypePriceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypePrice)(nil)).Elem()
}

func (i GetInstanceTypePriceArgs) ToGetInstanceTypePriceOutput() GetInstanceTypePriceOutput {
	return i.ToGetInstanceTypePriceOutputWithContext(context.Background())
}

func (i GetInstanceTypePriceArgs) ToGetInstanceTypePriceOutputWithContext(ctx context.Context) GetInstanceTypePriceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypePriceOutput)
}

type GetInstanceTypePriceOutput struct{ *pulumi.OutputState }

func (GetInstanceTypePriceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypePrice)(nil)).Elem()
}

func (o GetInstanceTypePriceOutput) ToGetInstanceTypePriceOutput() GetInstanceTypePriceOutput {
	return o
}

func (o GetInstanceTypePriceOutput) ToGetInstanceTypePriceOutputWithContext(ctx context.Context) GetInstanceTypePriceOutput {
	return o
}

func (o GetInstanceTypePriceOutput) Hourly() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceTypePrice) float64 { return v.Hourly }).(pulumi.Float64Output)
}

func (o GetInstanceTypePriceOutput) Monthly() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceTypePrice) float64 { return v.Monthly }).(pulumi.Float64Output)
}

type GetProfileReferrals struct {
	Code      string  `pulumi:"code"`
	Completed int     `pulumi:"completed"`
	Credit    float64 `pulumi:"credit"`
	Pending   int     `pulumi:"pending"`
	Total     int     `pulumi:"total"`
	Url       string  `pulumi:"url"`
}

// GetProfileReferralsInput is an input type that accepts GetProfileReferralsArgs and GetProfileReferralsOutput values.
// You can construct a concrete instance of `GetProfileReferralsInput` via:
//
// 		 GetProfileReferralsArgs{...}
//
type GetProfileReferralsInput interface {
	pulumi.Input

	ToGetProfileReferralsOutput() GetProfileReferralsOutput
	ToGetProfileReferralsOutputWithContext(context.Context) GetProfileReferralsOutput
}

type GetProfileReferralsArgs struct {
	Code      pulumi.StringInput  `pulumi:"code"`
	Completed pulumi.IntInput     `pulumi:"completed"`
	Credit    pulumi.Float64Input `pulumi:"credit"`
	Pending   pulumi.IntInput     `pulumi:"pending"`
	Total     pulumi.IntInput     `pulumi:"total"`
	Url       pulumi.StringInput  `pulumi:"url"`
}

func (GetProfileReferralsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileReferrals)(nil)).Elem()
}

func (i GetProfileReferralsArgs) ToGetProfileReferralsOutput() GetProfileReferralsOutput {
	return i.ToGetProfileReferralsOutputWithContext(context.Background())
}

func (i GetProfileReferralsArgs) ToGetProfileReferralsOutputWithContext(ctx context.Context) GetProfileReferralsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProfileReferralsOutput)
}

type GetProfileReferralsOutput struct{ *pulumi.OutputState }

func (GetProfileReferralsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProfileReferrals)(nil)).Elem()
}

func (o GetProfileReferralsOutput) ToGetProfileReferralsOutput() GetProfileReferralsOutput {
	return o
}

func (o GetProfileReferralsOutput) ToGetProfileReferralsOutputWithContext(ctx context.Context) GetProfileReferralsOutput {
	return o
}

func (o GetProfileReferralsOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileReferrals) string { return v.Code }).(pulumi.StringOutput)
}

func (o GetProfileReferralsOutput) Completed() pulumi.IntOutput {
	return o.ApplyT(func(v GetProfileReferrals) int { return v.Completed }).(pulumi.IntOutput)
}

func (o GetProfileReferralsOutput) Credit() pulumi.Float64Output {
	return o.ApplyT(func(v GetProfileReferrals) float64 { return v.Credit }).(pulumi.Float64Output)
}

func (o GetProfileReferralsOutput) Pending() pulumi.IntOutput {
	return o.ApplyT(func(v GetProfileReferrals) int { return v.Pending }).(pulumi.IntOutput)
}

func (o GetProfileReferralsOutput) Total() pulumi.IntOutput {
	return o.ApplyT(func(v GetProfileReferrals) int { return v.Total }).(pulumi.IntOutput)
}

func (o GetProfileReferralsOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetProfileReferrals) string { return v.Url }).(pulumi.StringOutput)
}

type GetStackScriptUserDefinedField struct {
	Default string `pulumi:"default"`
	Example string `pulumi:"example"`
	Label   string `pulumi:"label"`
	ManyOf  string `pulumi:"manyOf"`
	Name    string `pulumi:"name"`
	OneOf   string `pulumi:"oneOf"`
}

// GetStackScriptUserDefinedFieldInput is an input type that accepts GetStackScriptUserDefinedFieldArgs and GetStackScriptUserDefinedFieldOutput values.
// You can construct a concrete instance of `GetStackScriptUserDefinedFieldInput` via:
//
// 		 GetStackScriptUserDefinedFieldArgs{...}
//
type GetStackScriptUserDefinedFieldInput interface {
	pulumi.Input

	ToGetStackScriptUserDefinedFieldOutput() GetStackScriptUserDefinedFieldOutput
	ToGetStackScriptUserDefinedFieldOutputWithContext(context.Context) GetStackScriptUserDefinedFieldOutput
}

type GetStackScriptUserDefinedFieldArgs struct {
	Default pulumi.StringInput `pulumi:"default"`
	Example pulumi.StringInput `pulumi:"example"`
	Label   pulumi.StringInput `pulumi:"label"`
	ManyOf  pulumi.StringInput `pulumi:"manyOf"`
	Name    pulumi.StringInput `pulumi:"name"`
	OneOf   pulumi.StringInput `pulumi:"oneOf"`
}

func (GetStackScriptUserDefinedFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackScriptUserDefinedField)(nil)).Elem()
}

func (i GetStackScriptUserDefinedFieldArgs) ToGetStackScriptUserDefinedFieldOutput() GetStackScriptUserDefinedFieldOutput {
	return i.ToGetStackScriptUserDefinedFieldOutputWithContext(context.Background())
}

func (i GetStackScriptUserDefinedFieldArgs) ToGetStackScriptUserDefinedFieldOutputWithContext(ctx context.Context) GetStackScriptUserDefinedFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackScriptUserDefinedFieldOutput)
}

// GetStackScriptUserDefinedFieldArrayInput is an input type that accepts GetStackScriptUserDefinedFieldArray and GetStackScriptUserDefinedFieldArrayOutput values.
// You can construct a concrete instance of `GetStackScriptUserDefinedFieldArrayInput` via:
//
// 		 GetStackScriptUserDefinedFieldArray{ GetStackScriptUserDefinedFieldArgs{...} }
//
type GetStackScriptUserDefinedFieldArrayInput interface {
	pulumi.Input

	ToGetStackScriptUserDefinedFieldArrayOutput() GetStackScriptUserDefinedFieldArrayOutput
	ToGetStackScriptUserDefinedFieldArrayOutputWithContext(context.Context) GetStackScriptUserDefinedFieldArrayOutput
}

type GetStackScriptUserDefinedFieldArray []GetStackScriptUserDefinedFieldInput

func (GetStackScriptUserDefinedFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackScriptUserDefinedField)(nil)).Elem()
}

func (i GetStackScriptUserDefinedFieldArray) ToGetStackScriptUserDefinedFieldArrayOutput() GetStackScriptUserDefinedFieldArrayOutput {
	return i.ToGetStackScriptUserDefinedFieldArrayOutputWithContext(context.Background())
}

func (i GetStackScriptUserDefinedFieldArray) ToGetStackScriptUserDefinedFieldArrayOutputWithContext(ctx context.Context) GetStackScriptUserDefinedFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStackScriptUserDefinedFieldArrayOutput)
}

type GetStackScriptUserDefinedFieldOutput struct{ *pulumi.OutputState }

func (GetStackScriptUserDefinedFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStackScriptUserDefinedField)(nil)).Elem()
}

func (o GetStackScriptUserDefinedFieldOutput) ToGetStackScriptUserDefinedFieldOutput() GetStackScriptUserDefinedFieldOutput {
	return o
}

func (o GetStackScriptUserDefinedFieldOutput) ToGetStackScriptUserDefinedFieldOutputWithContext(ctx context.Context) GetStackScriptUserDefinedFieldOutput {
	return o
}

func (o GetStackScriptUserDefinedFieldOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackScriptUserDefinedField) string { return v.Default }).(pulumi.StringOutput)
}

func (o GetStackScriptUserDefinedFieldOutput) Example() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackScriptUserDefinedField) string { return v.Example }).(pulumi.StringOutput)
}

func (o GetStackScriptUserDefinedFieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackScriptUserDefinedField) string { return v.Label }).(pulumi.StringOutput)
}

func (o GetStackScriptUserDefinedFieldOutput) ManyOf() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackScriptUserDefinedField) string { return v.ManyOf }).(pulumi.StringOutput)
}

func (o GetStackScriptUserDefinedFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackScriptUserDefinedField) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetStackScriptUserDefinedFieldOutput) OneOf() pulumi.StringOutput {
	return o.ApplyT(func(v GetStackScriptUserDefinedField) string { return v.OneOf }).(pulumi.StringOutput)
}

type GetStackScriptUserDefinedFieldArrayOutput struct{ *pulumi.OutputState }

func (GetStackScriptUserDefinedFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStackScriptUserDefinedField)(nil)).Elem()
}

func (o GetStackScriptUserDefinedFieldArrayOutput) ToGetStackScriptUserDefinedFieldArrayOutput() GetStackScriptUserDefinedFieldArrayOutput {
	return o
}

func (o GetStackScriptUserDefinedFieldArrayOutput) ToGetStackScriptUserDefinedFieldArrayOutputWithContext(ctx context.Context) GetStackScriptUserDefinedFieldArrayOutput {
	return o
}

func (o GetStackScriptUserDefinedFieldArrayOutput) Index(i pulumi.IntInput) GetStackScriptUserDefinedFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStackScriptUserDefinedField {
		return vs[0].([]GetStackScriptUserDefinedField)[vs[1].(int)]
	}).(GetStackScriptUserDefinedFieldOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceAlertsOutput{})
	pulumi.RegisterOutputType(InstanceAlertsPtrOutput{})
	pulumi.RegisterOutputType(InstanceBackupsOutput{})
	pulumi.RegisterOutputType(InstanceBackupsPtrOutput{})
	pulumi.RegisterOutputType(InstanceBackupsScheduleOutput{})
	pulumi.RegisterOutputType(InstanceBackupsSchedulePtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdaOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdaPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdbOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdbPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdcOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdcPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSddOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSddPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdeOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdePtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdfOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdfPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdgOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdgPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdhOutput{})
	pulumi.RegisterOutputType(InstanceConfigDevicesSdhPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigHelpersOutput{})
	pulumi.RegisterOutputType(InstanceConfigHelpersPtrOutput{})
	pulumi.RegisterOutputType(InstanceDiskOutput{})
	pulumi.RegisterOutputType(InstanceDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceSpecsOutput{})
	pulumi.RegisterOutputType(InstanceSpecsPtrOutput{})
	pulumi.RegisterOutputType(NodeBalancerConfigNodeStatusOutput{})
	pulumi.RegisterOutputType(NodeBalancerConfigNodeStatusPtrOutput{})
	pulumi.RegisterOutputType(NodeBalancerTransferOutput{})
	pulumi.RegisterOutputType(NodeBalancerTransferPtrOutput{})
	pulumi.RegisterOutputType(StackScriptUserDefinedFieldOutput{})
	pulumi.RegisterOutputType(StackScriptUserDefinedFieldArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypeAddonsOutput{})
	pulumi.RegisterOutputType(GetInstanceTypeAddonsBackupsOutput{})
	pulumi.RegisterOutputType(GetInstanceTypeAddonsBackupsPriceOutput{})
	pulumi.RegisterOutputType(GetInstanceTypePriceOutput{})
	pulumi.RegisterOutputType(GetProfileReferralsOutput{})
	pulumi.RegisterOutputType(GetStackScriptUserDefinedFieldOutput{})
	pulumi.RegisterOutputType(GetStackScriptUserDefinedFieldArrayOutput{})
}
