// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about Linode IPv6 ranges that match a set of filters.
//
// > Some fields may not be accessible directly the results of this data source.
// For additional information about a specific IPv6 range consider using the Ipv6Range
// data source.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			filtered_ranges, err := linode.GetIpv6Ranges(ctx, &linode.GetIpv6RangesArgs{
//				Filters: []linode.GetIpv6RangesFilter{
//					{
//						Name: "region",
//						Values: []string{
//							"us-mia",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("ranges", filtered_ranges)
//			return nil
//		})
//	}
//
// ```
//
// ## Filterable Fields
//
// * `range`
//
// * `routeTarget`
//
// * `prefix`
//
// * `region`
func GetIpv6Ranges(ctx *pulumi.Context, args *GetIpv6RangesArgs, opts ...pulumi.InvokeOption) (*GetIpv6RangesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpv6RangesResult
	err := ctx.Invoke("linode:index/getIpv6Ranges:getIpv6Ranges", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpv6Ranges.
type GetIpv6RangesArgs struct {
	Filters []GetIpv6RangesFilter `pulumi:"filters"`
	Ranges  []GetIpv6RangesRange  `pulumi:"ranges"`
}

// A collection of values returned by getIpv6Ranges.
type GetIpv6RangesResult struct {
	Filters []GetIpv6RangesFilter `pulumi:"filters"`
	Id      string                `pulumi:"id"`
	Ranges  []GetIpv6RangesRange  `pulumi:"ranges"`
}

func GetIpv6RangesOutput(ctx *pulumi.Context, args GetIpv6RangesOutputArgs, opts ...pulumi.InvokeOption) GetIpv6RangesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIpv6RangesResult, error) {
			args := v.(GetIpv6RangesArgs)
			r, err := GetIpv6Ranges(ctx, &args, opts...)
			var s GetIpv6RangesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIpv6RangesResultOutput)
}

// A collection of arguments for invoking getIpv6Ranges.
type GetIpv6RangesOutputArgs struct {
	Filters GetIpv6RangesFilterArrayInput `pulumi:"filters"`
	Ranges  GetIpv6RangesRangeArrayInput  `pulumi:"ranges"`
}

func (GetIpv6RangesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpv6RangesArgs)(nil)).Elem()
}

// A collection of values returned by getIpv6Ranges.
type GetIpv6RangesResultOutput struct{ *pulumi.OutputState }

func (GetIpv6RangesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpv6RangesResult)(nil)).Elem()
}

func (o GetIpv6RangesResultOutput) ToGetIpv6RangesResultOutput() GetIpv6RangesResultOutput {
	return o
}

func (o GetIpv6RangesResultOutput) ToGetIpv6RangesResultOutputWithContext(ctx context.Context) GetIpv6RangesResultOutput {
	return o
}

func (o GetIpv6RangesResultOutput) Filters() GetIpv6RangesFilterArrayOutput {
	return o.ApplyT(func(v GetIpv6RangesResult) []GetIpv6RangesFilter { return v.Filters }).(GetIpv6RangesFilterArrayOutput)
}

func (o GetIpv6RangesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpv6RangesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetIpv6RangesResultOutput) Ranges() GetIpv6RangesRangeArrayOutput {
	return o.ApplyT(func(v GetIpv6RangesResult) []GetIpv6RangesRange { return v.Ranges }).(GetIpv6RangesRangeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpv6RangesResultOutput{})
}
