// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instances).
//
// Please keep in mind that Managed Databases can take up to half an hour to provision.
//
// ## Example Usage
//
// Creating a simple PostgreSQL database that does not allow connections:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewDatabasePostgresqlV2(ctx, "foobar", &linode.DatabasePostgresqlV2Args{
//				Label:    pulumi.String("mydatabase"),
//				EngineId: pulumi.String("postgresql/16"),
//				Region:   pulumi.String("us-mia"),
//				Type:     pulumi.String("g6-nanode-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating a simple PostgreSQL database that allows connections from all IPv4 addresses:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewDatabasePostgresqlV2(ctx, "foobar", &linode.DatabasePostgresqlV2Args{
//				Label:    pulumi.String("mydatabase"),
//				EngineId: pulumi.String("postgresql/16"),
//				Region:   pulumi.String("us-mia"),
//				Type:     pulumi.String("g6-nanode-1"),
//				AllowLists: pulumi.StringArray{
//					pulumi.String("0.0.0.0/0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating a complex PostgreSQL database:
//
// ## Import
//
// Linode PostgreSQL Databases can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import linode:index/databasePostgresqlV2:DatabasePostgresqlV2 foobar 1234567
// ```
type DatabasePostgresqlV2 struct {
	pulumi.CustomResourceState

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayOutput `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntOutput `pulumi:"clusterSize"`
	// When this Managed Database was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Whether the Managed Databases is encrypted.
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `postgresql`)
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumAnalyzeScaleFactor pulumi.Float64Output `pulumi:"engineConfigPgAutovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumAnalyzeThreshold pulumi.IntOutput `pulumi:"engineConfigPgAutovacuumAnalyzeThreshold"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	EngineConfigPgAutovacuumMaxWorkers pulumi.IntOutput `pulumi:"engineConfigPgAutovacuumMaxWorkers"`
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
	EngineConfigPgAutovacuumNaptime pulumi.IntOutput `pulumi:"engineConfigPgAutovacuumNaptime"`
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
	EngineConfigPgAutovacuumVacuumCostDelay pulumi.IntOutput `pulumi:"engineConfigPgAutovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	EngineConfigPgAutovacuumVacuumCostLimit pulumi.IntOutput `pulumi:"engineConfigPgAutovacuumVacuumCostLimit"`
	// Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumVacuumScaleFactor pulumi.Float64Output `pulumi:"engineConfigPgAutovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumVacuumThreshold pulumi.IntOutput `pulumi:"engineConfigPgAutovacuumVacuumThreshold"`
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	EngineConfigPgBgwriterDelay pulumi.IntOutput `pulumi:"engineConfigPgBgwriterDelay"`
	// Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	EngineConfigPgBgwriterFlushAfter pulumi.IntOutput `pulumi:"engineConfigPgBgwriterFlushAfter"`
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	EngineConfigPgBgwriterLruMaxpages pulumi.IntOutput `pulumi:"engineConfigPgBgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	EngineConfigPgBgwriterLruMultiplier pulumi.Float64Output `pulumi:"engineConfigPgBgwriterLruMultiplier"`
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	EngineConfigPgDeadlockTimeout pulumi.IntOutput `pulumi:"engineConfigPgDeadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	EngineConfigPgDefaultToastCompression pulumi.StringOutput `pulumi:"engineConfigPgDefaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds.
	EngineConfigPgIdleInTransactionSessionTimeout pulumi.IntOutput `pulumi:"engineConfigPgIdleInTransactionSessionTimeout"`
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	EngineConfigPgJit pulumi.BoolOutput `pulumi:"engineConfigPgJit"`
	// PostgreSQL maximum number of files that can be open per process.
	EngineConfigPgMaxFilesPerProcess pulumi.IntOutput `pulumi:"engineConfigPgMaxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction.
	EngineConfigPgMaxLocksPerTransaction pulumi.IntOutput `pulumi:"engineConfigPgMaxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	EngineConfigPgMaxLogicalReplicationWorkers pulumi.IntOutput `pulumi:"engineConfigPgMaxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	EngineConfigPgMaxParallelWorkers pulumi.IntOutput `pulumi:"engineConfigPgMaxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	EngineConfigPgMaxParallelWorkersPerGather pulumi.IntOutput `pulumi:"engineConfigPgMaxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	EngineConfigPgMaxPredLocksPerTransaction pulumi.IntOutput `pulumi:"engineConfigPgMaxPredLocksPerTransaction"`
	// PostgreSQL maximum replication slots.
	EngineConfigPgMaxReplicationSlots pulumi.IntOutput `pulumi:"engineConfigPgMaxReplicationSlots"`
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
	EngineConfigPgMaxSlotWalKeepSize pulumi.IntOutput `pulumi:"engineConfigPgMaxSlotWalKeepSize"`
	// Maximum depth of the stack in bytes.
	EngineConfigPgMaxStackDepth pulumi.IntOutput `pulumi:"engineConfigPgMaxStackDepth"`
	// Max standby archive delay in milliseconds.
	EngineConfigPgMaxStandbyArchiveDelay pulumi.IntOutput `pulumi:"engineConfigPgMaxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	EngineConfigPgMaxStandbyStreamingDelay pulumi.IntOutput `pulumi:"engineConfigPgMaxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders.
	EngineConfigPgMaxWalSenders pulumi.IntOutput `pulumi:"engineConfigPgMaxWalSenders"`
	// Sets the maximum number of background processes that the system can support.
	EngineConfigPgMaxWorkerProcesses pulumi.IntOutput `pulumi:"engineConfigPgMaxWorkerProcesses"`
	// Chooses the algorithm for encrypting passwords. (default `md5`)
	EngineConfigPgPasswordEncryption pulumi.StringOutput `pulumi:"engineConfigPgPasswordEncryption"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	EngineConfigPgPgPartmanBgwInterval pulumi.IntOutput `pulumi:"engineConfigPgPgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks.
	EngineConfigPgPgPartmanBgwRole pulumi.StringOutput `pulumi:"engineConfigPgPgPartmanBgwRole"`
	// Enables or disables query plan monitoring.
	EngineConfigPgPgStatMonitorPgsmEnableQueryPlan pulumi.BoolOutput `pulumi:"engineConfigPgPgStatMonitorPgsmEnableQueryPlan"`
	// Sets the maximum number of buckets.
	EngineConfigPgPgStatMonitorPgsmMaxBuckets pulumi.IntOutput `pulumi:"engineConfigPgPgStatMonitorPgsmMaxBuckets"`
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	EngineConfigPgPgStatStatementsTrack pulumi.StringOutput `pulumi:"engineConfigPgPgStatStatementsTrack"`
	// Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
	EngineConfigPgStatMonitorEnable pulumi.BoolOutput `pulumi:"engineConfigPgStatMonitorEnable"`
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	EngineConfigPgTempFileLimit pulumi.IntOutput `pulumi:"engineConfigPgTempFileLimit"`
	// PostgreSQL service timezone.
	EngineConfigPgTimezone pulumi.StringOutput `pulumi:"engineConfigPgTimezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	EngineConfigPgTrackActivityQuerySize pulumi.IntOutput `pulumi:"engineConfigPgTrackActivityQuerySize"`
	// Record commit time of transactions.
	EngineConfigPgTrackCommitTimestamp pulumi.StringOutput `pulumi:"engineConfigPgTrackCommitTimestamp"`
	// Enables tracking of function call counts and time used.
	EngineConfigPgTrackFunctions pulumi.StringOutput `pulumi:"engineConfigPgTrackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	EngineConfigPgTrackIoTiming pulumi.StringOutput `pulumi:"engineConfigPgTrackIoTiming"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	EngineConfigPgWalSenderTimeout pulumi.IntOutput `pulumi:"engineConfigPgWalSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	EngineConfigPgWalWriterDelay pulumi.IntOutput `pulumi:"engineConfigPgWalWriterDelay"`
	// Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
	EngineConfigPglookoutMaxFailoverReplicationTimeLag pulumi.IntOutput `pulumi:"engineConfigPglookoutMaxFailoverReplicationTimeLag"`
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	EngineConfigSharedBuffersPercentage pulumi.Float64Output `pulumi:"engineConfigSharedBuffersPercentage"`
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	EngineConfigWorkMem pulumi.IntOutput `pulumi:"engineConfigWorkMem"`
	// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime pulumi.StringOutput `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource pulumi.IntPtrOutput `pulumi:"forkSource"`
	// The primary host for the Managed Database.
	HostPrimary pulumi.StringOutput `pulumi:"hostPrimary"`
	// The secondary/private host for the managed database.
	HostSecondary pulumi.StringOutput `pulumi:"hostSecondary"`
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringOutput `pulumi:"label"`
	// A mapping between IP addresses and strings designating them as primary or failover.
	Members pulumi.StringMapOutput `pulumi:"members"`
	// The oldest time to which a database can be restored.
	OldestRestoreTime pulumi.StringOutput `pulumi:"oldestRestoreTime"`
	// A set of pending updates.
	PendingUpdates DatabasePostgresqlV2PendingUpdateArrayOutput `pulumi:"pendingUpdates"`
	// The back-end platform for relational databases used by the service.
	Platform pulumi.StringOutput `pulumi:"platform"`
	// The access port for this Managed Database.
	Port pulumi.IntOutput `pulumi:"port"`
	// The region to use for the Managed Database.
	Region pulumi.StringOutput `pulumi:"region"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword pulumi.StringOutput `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername pulumi.StringOutput `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection pulumi.BoolOutput `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status pulumi.StringOutput `pulumi:"status"`
	// Whether this Managed Database should be suspended.
	Suspended pulumi.BoolOutput                     `pulumi:"suspended"`
	Timeouts  DatabasePostgresqlV2TimeoutsPtrOutput `pulumi:"timeouts"`
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type pulumi.StringOutput `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabasePostgresqlV2UpdatesOutput `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `13.2`)
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatabasePostgresqlV2 registers a new resource with the given unique name, arguments, and options.
func NewDatabasePostgresqlV2(ctx *pulumi.Context,
	name string, args *DatabasePostgresqlV2Args, opts ...pulumi.ResourceOption) (*DatabasePostgresqlV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCert",
		"rootPassword",
		"rootUsername",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasePostgresqlV2
	err := ctx.RegisterResource("linode:index/databasePostgresqlV2:DatabasePostgresqlV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasePostgresqlV2 gets an existing DatabasePostgresqlV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasePostgresqlV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasePostgresqlV2State, opts ...pulumi.ResourceOption) (*DatabasePostgresqlV2, error) {
	var resource DatabasePostgresqlV2
	err := ctx.ReadResource("linode:index/databasePostgresqlV2:DatabasePostgresqlV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasePostgresqlV2 resources.
type databasePostgresqlV2State struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert *string `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize *int `pulumi:"clusterSize"`
	// When this Managed Database was created.
	Created *string `pulumi:"created"`
	// Whether the Managed Databases is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `postgresql`)
	Engine *string `pulumi:"engine"`
	// Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumAnalyzeScaleFactor *float64 `pulumi:"engineConfigPgAutovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumAnalyzeThreshold *int `pulumi:"engineConfigPgAutovacuumAnalyzeThreshold"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	EngineConfigPgAutovacuumMaxWorkers *int `pulumi:"engineConfigPgAutovacuumMaxWorkers"`
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
	EngineConfigPgAutovacuumNaptime *int `pulumi:"engineConfigPgAutovacuumNaptime"`
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
	EngineConfigPgAutovacuumVacuumCostDelay *int `pulumi:"engineConfigPgAutovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	EngineConfigPgAutovacuumVacuumCostLimit *int `pulumi:"engineConfigPgAutovacuumVacuumCostLimit"`
	// Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumVacuumScaleFactor *float64 `pulumi:"engineConfigPgAutovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumVacuumThreshold *int `pulumi:"engineConfigPgAutovacuumVacuumThreshold"`
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	EngineConfigPgBgwriterDelay *int `pulumi:"engineConfigPgBgwriterDelay"`
	// Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	EngineConfigPgBgwriterFlushAfter *int `pulumi:"engineConfigPgBgwriterFlushAfter"`
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	EngineConfigPgBgwriterLruMaxpages *int `pulumi:"engineConfigPgBgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	EngineConfigPgBgwriterLruMultiplier *float64 `pulumi:"engineConfigPgBgwriterLruMultiplier"`
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	EngineConfigPgDeadlockTimeout *int `pulumi:"engineConfigPgDeadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	EngineConfigPgDefaultToastCompression *string `pulumi:"engineConfigPgDefaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds.
	EngineConfigPgIdleInTransactionSessionTimeout *int `pulumi:"engineConfigPgIdleInTransactionSessionTimeout"`
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	EngineConfigPgJit *bool `pulumi:"engineConfigPgJit"`
	// PostgreSQL maximum number of files that can be open per process.
	EngineConfigPgMaxFilesPerProcess *int `pulumi:"engineConfigPgMaxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction.
	EngineConfigPgMaxLocksPerTransaction *int `pulumi:"engineConfigPgMaxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	EngineConfigPgMaxLogicalReplicationWorkers *int `pulumi:"engineConfigPgMaxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	EngineConfigPgMaxParallelWorkers *int `pulumi:"engineConfigPgMaxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	EngineConfigPgMaxParallelWorkersPerGather *int `pulumi:"engineConfigPgMaxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	EngineConfigPgMaxPredLocksPerTransaction *int `pulumi:"engineConfigPgMaxPredLocksPerTransaction"`
	// PostgreSQL maximum replication slots.
	EngineConfigPgMaxReplicationSlots *int `pulumi:"engineConfigPgMaxReplicationSlots"`
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
	EngineConfigPgMaxSlotWalKeepSize *int `pulumi:"engineConfigPgMaxSlotWalKeepSize"`
	// Maximum depth of the stack in bytes.
	EngineConfigPgMaxStackDepth *int `pulumi:"engineConfigPgMaxStackDepth"`
	// Max standby archive delay in milliseconds.
	EngineConfigPgMaxStandbyArchiveDelay *int `pulumi:"engineConfigPgMaxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	EngineConfigPgMaxStandbyStreamingDelay *int `pulumi:"engineConfigPgMaxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders.
	EngineConfigPgMaxWalSenders *int `pulumi:"engineConfigPgMaxWalSenders"`
	// Sets the maximum number of background processes that the system can support.
	EngineConfigPgMaxWorkerProcesses *int `pulumi:"engineConfigPgMaxWorkerProcesses"`
	// Chooses the algorithm for encrypting passwords. (default `md5`)
	EngineConfigPgPasswordEncryption *string `pulumi:"engineConfigPgPasswordEncryption"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	EngineConfigPgPgPartmanBgwInterval *int `pulumi:"engineConfigPgPgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks.
	EngineConfigPgPgPartmanBgwRole *string `pulumi:"engineConfigPgPgPartmanBgwRole"`
	// Enables or disables query plan monitoring.
	EngineConfigPgPgStatMonitorPgsmEnableQueryPlan *bool `pulumi:"engineConfigPgPgStatMonitorPgsmEnableQueryPlan"`
	// Sets the maximum number of buckets.
	EngineConfigPgPgStatMonitorPgsmMaxBuckets *int `pulumi:"engineConfigPgPgStatMonitorPgsmMaxBuckets"`
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	EngineConfigPgPgStatStatementsTrack *string `pulumi:"engineConfigPgPgStatStatementsTrack"`
	// Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
	EngineConfigPgStatMonitorEnable *bool `pulumi:"engineConfigPgStatMonitorEnable"`
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	EngineConfigPgTempFileLimit *int `pulumi:"engineConfigPgTempFileLimit"`
	// PostgreSQL service timezone.
	EngineConfigPgTimezone *string `pulumi:"engineConfigPgTimezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	EngineConfigPgTrackActivityQuerySize *int `pulumi:"engineConfigPgTrackActivityQuerySize"`
	// Record commit time of transactions.
	EngineConfigPgTrackCommitTimestamp *string `pulumi:"engineConfigPgTrackCommitTimestamp"`
	// Enables tracking of function call counts and time used.
	EngineConfigPgTrackFunctions *string `pulumi:"engineConfigPgTrackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	EngineConfigPgTrackIoTiming *string `pulumi:"engineConfigPgTrackIoTiming"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	EngineConfigPgWalSenderTimeout *int `pulumi:"engineConfigPgWalSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	EngineConfigPgWalWriterDelay *int `pulumi:"engineConfigPgWalWriterDelay"`
	// Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
	EngineConfigPglookoutMaxFailoverReplicationTimeLag *int `pulumi:"engineConfigPglookoutMaxFailoverReplicationTimeLag"`
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	EngineConfigSharedBuffersPercentage *float64 `pulumi:"engineConfigSharedBuffersPercentage"`
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	EngineConfigWorkMem *int `pulumi:"engineConfigWorkMem"`
	// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
	EngineId *string `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime *string `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource *int `pulumi:"forkSource"`
	// The primary host for the Managed Database.
	HostPrimary *string `pulumi:"hostPrimary"`
	// The secondary/private host for the managed database.
	HostSecondary *string `pulumi:"hostSecondary"`
	// A unique, user-defined string referring to the Managed Database.
	Label *string `pulumi:"label"`
	// A mapping between IP addresses and strings designating them as primary or failover.
	Members map[string]string `pulumi:"members"`
	// The oldest time to which a database can be restored.
	OldestRestoreTime *string `pulumi:"oldestRestoreTime"`
	// A set of pending updates.
	PendingUpdates []DatabasePostgresqlV2PendingUpdate `pulumi:"pendingUpdates"`
	// The back-end platform for relational databases used by the service.
	Platform *string `pulumi:"platform"`
	// The access port for this Managed Database.
	Port *int `pulumi:"port"`
	// The region to use for the Managed Database.
	Region *string `pulumi:"region"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword *string `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername *string `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection *bool `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status *string `pulumi:"status"`
	// Whether this Managed Database should be suspended.
	Suspended *bool                         `pulumi:"suspended"`
	Timeouts  *DatabasePostgresqlV2Timeouts `pulumi:"timeouts"`
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type *string `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated *string `pulumi:"updated"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates *DatabasePostgresqlV2Updates `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `13.2`)
	Version *string `pulumi:"version"`
}

type DatabasePostgresqlV2State struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayInput
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert pulumi.StringPtrInput
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrInput
	// When this Managed Database was created.
	Created pulumi.StringPtrInput
	// Whether the Managed Databases is encrypted.
	Encrypted pulumi.BoolPtrInput
	// The Managed Database engine. (e.g. `postgresql`)
	Engine pulumi.StringPtrInput
	// Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumAnalyzeScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumAnalyzeThreshold pulumi.IntPtrInput
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	EngineConfigPgAutovacuumMaxWorkers pulumi.IntPtrInput
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
	EngineConfigPgAutovacuumNaptime pulumi.IntPtrInput
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
	EngineConfigPgAutovacuumVacuumCostDelay pulumi.IntPtrInput
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	EngineConfigPgAutovacuumVacuumCostLimit pulumi.IntPtrInput
	// Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumVacuumScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumVacuumThreshold pulumi.IntPtrInput
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	EngineConfigPgBgwriterDelay pulumi.IntPtrInput
	// Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	EngineConfigPgBgwriterFlushAfter pulumi.IntPtrInput
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	EngineConfigPgBgwriterLruMaxpages pulumi.IntPtrInput
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	EngineConfigPgBgwriterLruMultiplier pulumi.Float64PtrInput
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	EngineConfigPgDeadlockTimeout pulumi.IntPtrInput
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	EngineConfigPgDefaultToastCompression pulumi.StringPtrInput
	// Time out sessions with open transactions after this number of milliseconds.
	EngineConfigPgIdleInTransactionSessionTimeout pulumi.IntPtrInput
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	EngineConfigPgJit pulumi.BoolPtrInput
	// PostgreSQL maximum number of files that can be open per process.
	EngineConfigPgMaxFilesPerProcess pulumi.IntPtrInput
	// PostgreSQL maximum locks per transaction.
	EngineConfigPgMaxLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	EngineConfigPgMaxLogicalReplicationWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that the system can support for parallel queries.
	EngineConfigPgMaxParallelWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	EngineConfigPgMaxParallelWorkersPerGather pulumi.IntPtrInput
	// PostgreSQL maximum predicate locks per transaction.
	EngineConfigPgMaxPredLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum replication slots.
	EngineConfigPgMaxReplicationSlots pulumi.IntPtrInput
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
	EngineConfigPgMaxSlotWalKeepSize pulumi.IntPtrInput
	// Maximum depth of the stack in bytes.
	EngineConfigPgMaxStackDepth pulumi.IntPtrInput
	// Max standby archive delay in milliseconds.
	EngineConfigPgMaxStandbyArchiveDelay pulumi.IntPtrInput
	// Max standby streaming delay in milliseconds.
	EngineConfigPgMaxStandbyStreamingDelay pulumi.IntPtrInput
	// PostgreSQL maximum WAL senders.
	EngineConfigPgMaxWalSenders pulumi.IntPtrInput
	// Sets the maximum number of background processes that the system can support.
	EngineConfigPgMaxWorkerProcesses pulumi.IntPtrInput
	// Chooses the algorithm for encrypting passwords. (default `md5`)
	EngineConfigPgPasswordEncryption pulumi.StringPtrInput
	// Sets the time interval to run pg_partman's scheduled tasks.
	EngineConfigPgPgPartmanBgwInterval pulumi.IntPtrInput
	// Controls which role to use for pg_partman's scheduled background tasks.
	EngineConfigPgPgPartmanBgwRole pulumi.StringPtrInput
	// Enables or disables query plan monitoring.
	EngineConfigPgPgStatMonitorPgsmEnableQueryPlan pulumi.BoolPtrInput
	// Sets the maximum number of buckets.
	EngineConfigPgPgStatMonitorPgsmMaxBuckets pulumi.IntPtrInput
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	EngineConfigPgPgStatStatementsTrack pulumi.StringPtrInput
	// Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
	EngineConfigPgStatMonitorEnable pulumi.BoolPtrInput
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	EngineConfigPgTempFileLimit pulumi.IntPtrInput
	// PostgreSQL service timezone.
	EngineConfigPgTimezone pulumi.StringPtrInput
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	EngineConfigPgTrackActivityQuerySize pulumi.IntPtrInput
	// Record commit time of transactions.
	EngineConfigPgTrackCommitTimestamp pulumi.StringPtrInput
	// Enables tracking of function call counts and time used.
	EngineConfigPgTrackFunctions pulumi.StringPtrInput
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	EngineConfigPgTrackIoTiming pulumi.StringPtrInput
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	EngineConfigPgWalSenderTimeout pulumi.IntPtrInput
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	EngineConfigPgWalWriterDelay pulumi.IntPtrInput
	// Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
	EngineConfigPglookoutMaxFailoverReplicationTimeLag pulumi.IntPtrInput
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	EngineConfigSharedBuffersPercentage pulumi.Float64PtrInput
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	EngineConfigWorkMem pulumi.IntPtrInput
	// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
	EngineId pulumi.StringPtrInput
	// The database timestamp from which it was restored.
	ForkRestoreTime pulumi.StringPtrInput
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource pulumi.IntPtrInput
	// The primary host for the Managed Database.
	HostPrimary pulumi.StringPtrInput
	// The secondary/private host for the managed database.
	HostSecondary pulumi.StringPtrInput
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringPtrInput
	// A mapping between IP addresses and strings designating them as primary or failover.
	Members pulumi.StringMapInput
	// The oldest time to which a database can be restored.
	OldestRestoreTime pulumi.StringPtrInput
	// A set of pending updates.
	PendingUpdates DatabasePostgresqlV2PendingUpdateArrayInput
	// The back-end platform for relational databases used by the service.
	Platform pulumi.StringPtrInput
	// The access port for this Managed Database.
	Port pulumi.IntPtrInput
	// The region to use for the Managed Database.
	Region pulumi.StringPtrInput
	// The randomly-generated root password for the Managed Database instance.
	RootPassword pulumi.StringPtrInput
	// The root username for the Managed Database instance.
	RootUsername pulumi.StringPtrInput
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection pulumi.BoolPtrInput
	// The operating status of the Managed Database.
	Status pulumi.StringPtrInput
	// Whether this Managed Database should be suspended.
	Suspended pulumi.BoolPtrInput
	Timeouts  DatabasePostgresqlV2TimeoutsPtrInput
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type pulumi.StringPtrInput
	// When this Managed Database was last updated.
	Updated pulumi.StringPtrInput
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabasePostgresqlV2UpdatesPtrInput
	// The Managed Database engine version. (e.g. `13.2`)
	Version pulumi.StringPtrInput
}

func (DatabasePostgresqlV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePostgresqlV2State)(nil)).Elem()
}

type databasePostgresqlV2Args struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize *int `pulumi:"clusterSize"`
	// Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumAnalyzeScaleFactor *float64 `pulumi:"engineConfigPgAutovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumAnalyzeThreshold *int `pulumi:"engineConfigPgAutovacuumAnalyzeThreshold"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	EngineConfigPgAutovacuumMaxWorkers *int `pulumi:"engineConfigPgAutovacuumMaxWorkers"`
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
	EngineConfigPgAutovacuumNaptime *int `pulumi:"engineConfigPgAutovacuumNaptime"`
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
	EngineConfigPgAutovacuumVacuumCostDelay *int `pulumi:"engineConfigPgAutovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	EngineConfigPgAutovacuumVacuumCostLimit *int `pulumi:"engineConfigPgAutovacuumVacuumCostLimit"`
	// Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumVacuumScaleFactor *float64 `pulumi:"engineConfigPgAutovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumVacuumThreshold *int `pulumi:"engineConfigPgAutovacuumVacuumThreshold"`
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	EngineConfigPgBgwriterDelay *int `pulumi:"engineConfigPgBgwriterDelay"`
	// Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	EngineConfigPgBgwriterFlushAfter *int `pulumi:"engineConfigPgBgwriterFlushAfter"`
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	EngineConfigPgBgwriterLruMaxpages *int `pulumi:"engineConfigPgBgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	EngineConfigPgBgwriterLruMultiplier *float64 `pulumi:"engineConfigPgBgwriterLruMultiplier"`
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	EngineConfigPgDeadlockTimeout *int `pulumi:"engineConfigPgDeadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	EngineConfigPgDefaultToastCompression *string `pulumi:"engineConfigPgDefaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds.
	EngineConfigPgIdleInTransactionSessionTimeout *int `pulumi:"engineConfigPgIdleInTransactionSessionTimeout"`
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	EngineConfigPgJit *bool `pulumi:"engineConfigPgJit"`
	// PostgreSQL maximum number of files that can be open per process.
	EngineConfigPgMaxFilesPerProcess *int `pulumi:"engineConfigPgMaxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction.
	EngineConfigPgMaxLocksPerTransaction *int `pulumi:"engineConfigPgMaxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	EngineConfigPgMaxLogicalReplicationWorkers *int `pulumi:"engineConfigPgMaxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	EngineConfigPgMaxParallelWorkers *int `pulumi:"engineConfigPgMaxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	EngineConfigPgMaxParallelWorkersPerGather *int `pulumi:"engineConfigPgMaxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	EngineConfigPgMaxPredLocksPerTransaction *int `pulumi:"engineConfigPgMaxPredLocksPerTransaction"`
	// PostgreSQL maximum replication slots.
	EngineConfigPgMaxReplicationSlots *int `pulumi:"engineConfigPgMaxReplicationSlots"`
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
	EngineConfigPgMaxSlotWalKeepSize *int `pulumi:"engineConfigPgMaxSlotWalKeepSize"`
	// Maximum depth of the stack in bytes.
	EngineConfigPgMaxStackDepth *int `pulumi:"engineConfigPgMaxStackDepth"`
	// Max standby archive delay in milliseconds.
	EngineConfigPgMaxStandbyArchiveDelay *int `pulumi:"engineConfigPgMaxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	EngineConfigPgMaxStandbyStreamingDelay *int `pulumi:"engineConfigPgMaxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders.
	EngineConfigPgMaxWalSenders *int `pulumi:"engineConfigPgMaxWalSenders"`
	// Sets the maximum number of background processes that the system can support.
	EngineConfigPgMaxWorkerProcesses *int `pulumi:"engineConfigPgMaxWorkerProcesses"`
	// Chooses the algorithm for encrypting passwords. (default `md5`)
	EngineConfigPgPasswordEncryption *string `pulumi:"engineConfigPgPasswordEncryption"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	EngineConfigPgPgPartmanBgwInterval *int `pulumi:"engineConfigPgPgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks.
	EngineConfigPgPgPartmanBgwRole *string `pulumi:"engineConfigPgPgPartmanBgwRole"`
	// Enables or disables query plan monitoring.
	EngineConfigPgPgStatMonitorPgsmEnableQueryPlan *bool `pulumi:"engineConfigPgPgStatMonitorPgsmEnableQueryPlan"`
	// Sets the maximum number of buckets.
	EngineConfigPgPgStatMonitorPgsmMaxBuckets *int `pulumi:"engineConfigPgPgStatMonitorPgsmMaxBuckets"`
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	EngineConfigPgPgStatStatementsTrack *string `pulumi:"engineConfigPgPgStatStatementsTrack"`
	// Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
	EngineConfigPgStatMonitorEnable *bool `pulumi:"engineConfigPgStatMonitorEnable"`
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	EngineConfigPgTempFileLimit *int `pulumi:"engineConfigPgTempFileLimit"`
	// PostgreSQL service timezone.
	EngineConfigPgTimezone *string `pulumi:"engineConfigPgTimezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	EngineConfigPgTrackActivityQuerySize *int `pulumi:"engineConfigPgTrackActivityQuerySize"`
	// Record commit time of transactions.
	EngineConfigPgTrackCommitTimestamp *string `pulumi:"engineConfigPgTrackCommitTimestamp"`
	// Enables tracking of function call counts and time used.
	EngineConfigPgTrackFunctions *string `pulumi:"engineConfigPgTrackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	EngineConfigPgTrackIoTiming *string `pulumi:"engineConfigPgTrackIoTiming"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	EngineConfigPgWalSenderTimeout *int `pulumi:"engineConfigPgWalSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	EngineConfigPgWalWriterDelay *int `pulumi:"engineConfigPgWalWriterDelay"`
	// Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
	EngineConfigPglookoutMaxFailoverReplicationTimeLag *int `pulumi:"engineConfigPglookoutMaxFailoverReplicationTimeLag"`
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	EngineConfigSharedBuffersPercentage *float64 `pulumi:"engineConfigSharedBuffersPercentage"`
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	EngineConfigWorkMem *int `pulumi:"engineConfigWorkMem"`
	// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
	EngineId string `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime *string `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource *int `pulumi:"forkSource"`
	// A unique, user-defined string referring to the Managed Database.
	Label string `pulumi:"label"`
	// The region to use for the Managed Database.
	Region string `pulumi:"region"`
	// Whether this Managed Database should be suspended.
	Suspended *bool                         `pulumi:"suspended"`
	Timeouts  *DatabasePostgresqlV2Timeouts `pulumi:"timeouts"`
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type string `pulumi:"type"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates *DatabasePostgresqlV2Updates `pulumi:"updates"`
}

// The set of arguments for constructing a DatabasePostgresqlV2 resource.
type DatabasePostgresqlV2Args struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayInput
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrInput
	// Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumAnalyzeScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumAnalyzeThreshold pulumi.IntPtrInput
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	EngineConfigPgAutovacuumMaxWorkers pulumi.IntPtrInput
	// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
	EngineConfigPgAutovacuumNaptime pulumi.IntPtrInput
	// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
	EngineConfigPgAutovacuumVacuumCostDelay pulumi.IntPtrInput
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	EngineConfigPgAutovacuumVacuumCostLimit pulumi.IntPtrInput
	// Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
	EngineConfigPgAutovacuumVacuumScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	EngineConfigPgAutovacuumVacuumThreshold pulumi.IntPtrInput
	// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
	EngineConfigPgBgwriterDelay pulumi.IntPtrInput
	// Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	EngineConfigPgBgwriterFlushAfter pulumi.IntPtrInput
	// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
	EngineConfigPgBgwriterLruMaxpages pulumi.IntPtrInput
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	EngineConfigPgBgwriterLruMultiplier pulumi.Float64PtrInput
	// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	EngineConfigPgDeadlockTimeout pulumi.IntPtrInput
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
	EngineConfigPgDefaultToastCompression pulumi.StringPtrInput
	// Time out sessions with open transactions after this number of milliseconds.
	EngineConfigPgIdleInTransactionSessionTimeout pulumi.IntPtrInput
	// Controls system-wide use of Just-in-Time Compilation (JIT).
	EngineConfigPgJit pulumi.BoolPtrInput
	// PostgreSQL maximum number of files that can be open per process.
	EngineConfigPgMaxFilesPerProcess pulumi.IntPtrInput
	// PostgreSQL maximum locks per transaction.
	EngineConfigPgMaxLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	EngineConfigPgMaxLogicalReplicationWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that the system can support for parallel queries.
	EngineConfigPgMaxParallelWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	EngineConfigPgMaxParallelWorkersPerGather pulumi.IntPtrInput
	// PostgreSQL maximum predicate locks per transaction.
	EngineConfigPgMaxPredLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum replication slots.
	EngineConfigPgMaxReplicationSlots pulumi.IntPtrInput
	// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
	EngineConfigPgMaxSlotWalKeepSize pulumi.IntPtrInput
	// Maximum depth of the stack in bytes.
	EngineConfigPgMaxStackDepth pulumi.IntPtrInput
	// Max standby archive delay in milliseconds.
	EngineConfigPgMaxStandbyArchiveDelay pulumi.IntPtrInput
	// Max standby streaming delay in milliseconds.
	EngineConfigPgMaxStandbyStreamingDelay pulumi.IntPtrInput
	// PostgreSQL maximum WAL senders.
	EngineConfigPgMaxWalSenders pulumi.IntPtrInput
	// Sets the maximum number of background processes that the system can support.
	EngineConfigPgMaxWorkerProcesses pulumi.IntPtrInput
	// Chooses the algorithm for encrypting passwords. (default `md5`)
	EngineConfigPgPasswordEncryption pulumi.StringPtrInput
	// Sets the time interval to run pg_partman's scheduled tasks.
	EngineConfigPgPgPartmanBgwInterval pulumi.IntPtrInput
	// Controls which role to use for pg_partman's scheduled background tasks.
	EngineConfigPgPgPartmanBgwRole pulumi.StringPtrInput
	// Enables or disables query plan monitoring.
	EngineConfigPgPgStatMonitorPgsmEnableQueryPlan pulumi.BoolPtrInput
	// Sets the maximum number of buckets.
	EngineConfigPgPgStatMonitorPgsmMaxBuckets pulumi.IntPtrInput
	// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
	EngineConfigPgPgStatStatementsTrack pulumi.StringPtrInput
	// Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
	EngineConfigPgStatMonitorEnable pulumi.BoolPtrInput
	// PostgreSQL temporary file limit in KiB, -1 for unlimited.
	EngineConfigPgTempFileLimit pulumi.IntPtrInput
	// PostgreSQL service timezone.
	EngineConfigPgTimezone pulumi.StringPtrInput
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	EngineConfigPgTrackActivityQuerySize pulumi.IntPtrInput
	// Record commit time of transactions.
	EngineConfigPgTrackCommitTimestamp pulumi.StringPtrInput
	// Enables tracking of function call counts and time used.
	EngineConfigPgTrackFunctions pulumi.StringPtrInput
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
	EngineConfigPgTrackIoTiming pulumi.StringPtrInput
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
	EngineConfigPgWalSenderTimeout pulumi.IntPtrInput
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
	EngineConfigPgWalWriterDelay pulumi.IntPtrInput
	// Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
	EngineConfigPglookoutMaxFailoverReplicationTimeLag pulumi.IntPtrInput
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	EngineConfigSharedBuffersPercentage pulumi.Float64PtrInput
	// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
	EngineConfigWorkMem pulumi.IntPtrInput
	// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
	EngineId pulumi.StringInput
	// The database timestamp from which it was restored.
	ForkRestoreTime pulumi.StringPtrInput
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource pulumi.IntPtrInput
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringInput
	// The region to use for the Managed Database.
	Region pulumi.StringInput
	// Whether this Managed Database should be suspended.
	Suspended pulumi.BoolPtrInput
	Timeouts  DatabasePostgresqlV2TimeoutsPtrInput
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type pulumi.StringInput
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabasePostgresqlV2UpdatesPtrInput
}

func (DatabasePostgresqlV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePostgresqlV2Args)(nil)).Elem()
}

type DatabasePostgresqlV2Input interface {
	pulumi.Input

	ToDatabasePostgresqlV2Output() DatabasePostgresqlV2Output
	ToDatabasePostgresqlV2OutputWithContext(ctx context.Context) DatabasePostgresqlV2Output
}

func (*DatabasePostgresqlV2) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePostgresqlV2)(nil)).Elem()
}

func (i *DatabasePostgresqlV2) ToDatabasePostgresqlV2Output() DatabasePostgresqlV2Output {
	return i.ToDatabasePostgresqlV2OutputWithContext(context.Background())
}

func (i *DatabasePostgresqlV2) ToDatabasePostgresqlV2OutputWithContext(ctx context.Context) DatabasePostgresqlV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePostgresqlV2Output)
}

// DatabasePostgresqlV2ArrayInput is an input type that accepts DatabasePostgresqlV2Array and DatabasePostgresqlV2ArrayOutput values.
// You can construct a concrete instance of `DatabasePostgresqlV2ArrayInput` via:
//
//	DatabasePostgresqlV2Array{ DatabasePostgresqlV2Args{...} }
type DatabasePostgresqlV2ArrayInput interface {
	pulumi.Input

	ToDatabasePostgresqlV2ArrayOutput() DatabasePostgresqlV2ArrayOutput
	ToDatabasePostgresqlV2ArrayOutputWithContext(context.Context) DatabasePostgresqlV2ArrayOutput
}

type DatabasePostgresqlV2Array []DatabasePostgresqlV2Input

func (DatabasePostgresqlV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePostgresqlV2)(nil)).Elem()
}

func (i DatabasePostgresqlV2Array) ToDatabasePostgresqlV2ArrayOutput() DatabasePostgresqlV2ArrayOutput {
	return i.ToDatabasePostgresqlV2ArrayOutputWithContext(context.Background())
}

func (i DatabasePostgresqlV2Array) ToDatabasePostgresqlV2ArrayOutputWithContext(ctx context.Context) DatabasePostgresqlV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePostgresqlV2ArrayOutput)
}

// DatabasePostgresqlV2MapInput is an input type that accepts DatabasePostgresqlV2Map and DatabasePostgresqlV2MapOutput values.
// You can construct a concrete instance of `DatabasePostgresqlV2MapInput` via:
//
//	DatabasePostgresqlV2Map{ "key": DatabasePostgresqlV2Args{...} }
type DatabasePostgresqlV2MapInput interface {
	pulumi.Input

	ToDatabasePostgresqlV2MapOutput() DatabasePostgresqlV2MapOutput
	ToDatabasePostgresqlV2MapOutputWithContext(context.Context) DatabasePostgresqlV2MapOutput
}

type DatabasePostgresqlV2Map map[string]DatabasePostgresqlV2Input

func (DatabasePostgresqlV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePostgresqlV2)(nil)).Elem()
}

func (i DatabasePostgresqlV2Map) ToDatabasePostgresqlV2MapOutput() DatabasePostgresqlV2MapOutput {
	return i.ToDatabasePostgresqlV2MapOutputWithContext(context.Background())
}

func (i DatabasePostgresqlV2Map) ToDatabasePostgresqlV2MapOutputWithContext(ctx context.Context) DatabasePostgresqlV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePostgresqlV2MapOutput)
}

type DatabasePostgresqlV2Output struct{ *pulumi.OutputState }

func (DatabasePostgresqlV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePostgresqlV2)(nil)).Elem()
}

func (o DatabasePostgresqlV2Output) ToDatabasePostgresqlV2Output() DatabasePostgresqlV2Output {
	return o
}

func (o DatabasePostgresqlV2Output) ToDatabasePostgresqlV2OutputWithContext(ctx context.Context) DatabasePostgresqlV2Output {
	return o
}

// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
func (o DatabasePostgresqlV2Output) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringArrayOutput { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The base64-encoded SSL CA certificate for the Managed Database.
func (o DatabasePostgresqlV2Output) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.CaCert }).(pulumi.StringOutput)
}

// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
func (o DatabasePostgresqlV2Output) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.ClusterSize }).(pulumi.IntOutput)
}

// When this Managed Database was created.
func (o DatabasePostgresqlV2Output) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Whether the Managed Databases is encrypted.
func (o DatabasePostgresqlV2Output) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.BoolOutput { return v.Encrypted }).(pulumi.BoolOutput)
}

// The Managed Database engine. (e.g. `postgresql`)
func (o DatabasePostgresqlV2Output) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Specifies a fraction of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumAnalyzeScaleFactor() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.Float64Output {
		return v.EngineConfigPgAutovacuumAnalyzeScaleFactor
	}).(pulumi.Float64Output)
}

// Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumAnalyzeThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgAutovacuumAnalyzeThreshold }).(pulumi.IntOutput)
}

// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumMaxWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgAutovacuumMaxWorkers }).(pulumi.IntOutput)
}

// Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumNaptime() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgAutovacuumNaptime }).(pulumi.IntOutput)
}

// Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuumCostDelay value will be used. The default value is 20 milliseconds
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumVacuumCostDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgAutovacuumVacuumCostDelay }).(pulumi.IntOutput)
}

// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumVacuumCostLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgAutovacuumVacuumCostLimit }).(pulumi.IntOutput)
}

// Specifies a fraction of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumVacuumScaleFactor() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.Float64Output { return v.EngineConfigPgAutovacuumVacuumScaleFactor }).(pulumi.Float64Output)
}

// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
func (o DatabasePostgresqlV2Output) EngineConfigPgAutovacuumVacuumThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgAutovacuumVacuumThreshold }).(pulumi.IntOutput)
}

// Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
func (o DatabasePostgresqlV2Output) EngineConfigPgBgwriterDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgBgwriterDelay }).(pulumi.IntOutput)
}

// Whenever more than bgwriterFlushAfter bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
func (o DatabasePostgresqlV2Output) EngineConfigPgBgwriterFlushAfter() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgBgwriterFlushAfter }).(pulumi.IntOutput)
}

// In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
func (o DatabasePostgresqlV2Output) EngineConfigPgBgwriterLruMaxpages() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgBgwriterLruMaxpages }).(pulumi.IntOutput)
}

// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
func (o DatabasePostgresqlV2Output) EngineConfigPgBgwriterLruMultiplier() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.Float64Output { return v.EngineConfigPgBgwriterLruMultiplier }).(pulumi.Float64Output)
}

// This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
func (o DatabasePostgresqlV2Output) EngineConfigPgDeadlockTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgDeadlockTimeout }).(pulumi.IntOutput)
}

// Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
func (o DatabasePostgresqlV2Output) EngineConfigPgDefaultToastCompression() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgDefaultToastCompression }).(pulumi.StringOutput)
}

// Time out sessions with open transactions after this number of milliseconds.
func (o DatabasePostgresqlV2Output) EngineConfigPgIdleInTransactionSessionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgIdleInTransactionSessionTimeout }).(pulumi.IntOutput)
}

// Controls system-wide use of Just-in-Time Compilation (JIT).
func (o DatabasePostgresqlV2Output) EngineConfigPgJit() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.BoolOutput { return v.EngineConfigPgJit }).(pulumi.BoolOutput)
}

// PostgreSQL maximum number of files that can be open per process.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxFilesPerProcess() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxFilesPerProcess }).(pulumi.IntOutput)
}

// PostgreSQL maximum locks per transaction.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxLocksPerTransaction() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxLocksPerTransaction }).(pulumi.IntOutput)
}

// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxLogicalReplicationWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxLogicalReplicationWorkers }).(pulumi.IntOutput)
}

// Sets the maximum number of workers that the system can support for parallel queries.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxParallelWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxParallelWorkers }).(pulumi.IntOutput)
}

// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxParallelWorkersPerGather() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxParallelWorkersPerGather }).(pulumi.IntOutput)
}

// PostgreSQL maximum predicate locks per transaction.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxPredLocksPerTransaction() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxPredLocksPerTransaction }).(pulumi.IntOutput)
}

// PostgreSQL maximum replication slots.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxReplicationSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxReplicationSlots }).(pulumi.IntOutput)
}

// PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). walKeepSize minimum WAL size setting takes precedence over this.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxSlotWalKeepSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxSlotWalKeepSize }).(pulumi.IntOutput)
}

// Maximum depth of the stack in bytes.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxStackDepth() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxStackDepth }).(pulumi.IntOutput)
}

// Max standby archive delay in milliseconds.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxStandbyArchiveDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxStandbyArchiveDelay }).(pulumi.IntOutput)
}

// Max standby streaming delay in milliseconds.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxStandbyStreamingDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxStandbyStreamingDelay }).(pulumi.IntOutput)
}

// PostgreSQL maximum WAL senders.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxWalSenders() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxWalSenders }).(pulumi.IntOutput)
}

// Sets the maximum number of background processes that the system can support.
func (o DatabasePostgresqlV2Output) EngineConfigPgMaxWorkerProcesses() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgMaxWorkerProcesses }).(pulumi.IntOutput)
}

// Chooses the algorithm for encrypting passwords. (default `md5`)
func (o DatabasePostgresqlV2Output) EngineConfigPgPasswordEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgPasswordEncryption }).(pulumi.StringOutput)
}

// Sets the time interval to run pg_partman's scheduled tasks.
func (o DatabasePostgresqlV2Output) EngineConfigPgPgPartmanBgwInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgPgPartmanBgwInterval }).(pulumi.IntOutput)
}

// Controls which role to use for pg_partman's scheduled background tasks.
func (o DatabasePostgresqlV2Output) EngineConfigPgPgPartmanBgwRole() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgPgPartmanBgwRole }).(pulumi.StringOutput)
}

// Enables or disables query plan monitoring.
func (o DatabasePostgresqlV2Output) EngineConfigPgPgStatMonitorPgsmEnableQueryPlan() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.BoolOutput {
		return v.EngineConfigPgPgStatMonitorPgsmEnableQueryPlan
	}).(pulumi.BoolOutput)
}

// Sets the maximum number of buckets.
func (o DatabasePostgresqlV2Output) EngineConfigPgPgStatMonitorPgsmMaxBuckets() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgPgStatMonitorPgsmMaxBuckets }).(pulumi.IntOutput)
}

// Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
func (o DatabasePostgresqlV2Output) EngineConfigPgPgStatStatementsTrack() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgPgStatStatementsTrack }).(pulumi.StringOutput)
}

// Enable the pgStatMonitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pgStatStatements results for utility commands are unreliable. (default `false`)
func (o DatabasePostgresqlV2Output) EngineConfigPgStatMonitorEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.BoolOutput { return v.EngineConfigPgStatMonitorEnable }).(pulumi.BoolOutput)
}

// PostgreSQL temporary file limit in KiB, -1 for unlimited.
func (o DatabasePostgresqlV2Output) EngineConfigPgTempFileLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgTempFileLimit }).(pulumi.IntOutput)
}

// PostgreSQL service timezone.
func (o DatabasePostgresqlV2Output) EngineConfigPgTimezone() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgTimezone }).(pulumi.StringOutput)
}

// Specifies the number of bytes reserved to track the currently executing command for each active session.
func (o DatabasePostgresqlV2Output) EngineConfigPgTrackActivityQuerySize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgTrackActivityQuerySize }).(pulumi.IntOutput)
}

// Record commit time of transactions.
func (o DatabasePostgresqlV2Output) EngineConfigPgTrackCommitTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgTrackCommitTimestamp }).(pulumi.StringOutput)
}

// Enables tracking of function call counts and time used.
func (o DatabasePostgresqlV2Output) EngineConfigPgTrackFunctions() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgTrackFunctions }).(pulumi.StringOutput)
}

// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
func (o DatabasePostgresqlV2Output) EngineConfigPgTrackIoTiming() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineConfigPgTrackIoTiming }).(pulumi.StringOutput)
}

// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
func (o DatabasePostgresqlV2Output) EngineConfigPgWalSenderTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgWalSenderTimeout }).(pulumi.IntOutput)
}

// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
func (o DatabasePostgresqlV2Output) EngineConfigPgWalWriterDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigPgWalWriterDelay }).(pulumi.IntOutput)
}

// Number of seconds of master unavailability before triggering database failover to standby. (default `60`)
func (o DatabasePostgresqlV2Output) EngineConfigPglookoutMaxFailoverReplicationTimeLag() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput {
		return v.EngineConfigPglookoutMaxFailoverReplicationTimeLag
	}).(pulumi.IntOutput)
}

// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
func (o DatabasePostgresqlV2Output) EngineConfigSharedBuffersPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.Float64Output { return v.EngineConfigSharedBuffersPercentage }).(pulumi.Float64Output)
}

// Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
func (o DatabasePostgresqlV2Output) EngineConfigWorkMem() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.EngineConfigWorkMem }).(pulumi.IntOutput)
}

// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
func (o DatabasePostgresqlV2Output) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The database timestamp from which it was restored.
func (o DatabasePostgresqlV2Output) ForkRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.ForkRestoreTime }).(pulumi.StringOutput)
}

// The ID of the database that was forked from.
//
// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
func (o DatabasePostgresqlV2Output) ForkSource() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntPtrOutput { return v.ForkSource }).(pulumi.IntPtrOutput)
}

// The primary host for the Managed Database.
func (o DatabasePostgresqlV2Output) HostPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.HostPrimary }).(pulumi.StringOutput)
}

// The secondary/private host for the managed database.
func (o DatabasePostgresqlV2Output) HostSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.HostSecondary }).(pulumi.StringOutput)
}

// A unique, user-defined string referring to the Managed Database.
func (o DatabasePostgresqlV2Output) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// A mapping between IP addresses and strings designating them as primary or failover.
func (o DatabasePostgresqlV2Output) Members() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringMapOutput { return v.Members }).(pulumi.StringMapOutput)
}

// The oldest time to which a database can be restored.
func (o DatabasePostgresqlV2Output) OldestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.OldestRestoreTime }).(pulumi.StringOutput)
}

// A set of pending updates.
func (o DatabasePostgresqlV2Output) PendingUpdates() DatabasePostgresqlV2PendingUpdateArrayOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) DatabasePostgresqlV2PendingUpdateArrayOutput { return v.PendingUpdates }).(DatabasePostgresqlV2PendingUpdateArrayOutput)
}

// The back-end platform for relational databases used by the service.
func (o DatabasePostgresqlV2Output) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

// The access port for this Managed Database.
func (o DatabasePostgresqlV2Output) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The region to use for the Managed Database.
func (o DatabasePostgresqlV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The randomly-generated root password for the Managed Database instance.
func (o DatabasePostgresqlV2Output) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.RootPassword }).(pulumi.StringOutput)
}

// The root username for the Managed Database instance.
func (o DatabasePostgresqlV2Output) RootUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.RootUsername }).(pulumi.StringOutput)
}

// Whether to require SSL credentials to establish a connection to the Managed Database.
func (o DatabasePostgresqlV2Output) SslConnection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.BoolOutput { return v.SslConnection }).(pulumi.BoolOutput)
}

// The operating status of the Managed Database.
func (o DatabasePostgresqlV2Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Whether this Managed Database should be suspended.
func (o DatabasePostgresqlV2Output) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.BoolOutput { return v.Suspended }).(pulumi.BoolOutput)
}

func (o DatabasePostgresqlV2Output) Timeouts() DatabasePostgresqlV2TimeoutsPtrOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) DatabasePostgresqlV2TimeoutsPtrOutput { return v.Timeouts }).(DatabasePostgresqlV2TimeoutsPtrOutput)
}

// The Linode Instance type used for the nodes of the Managed Database.
//
// ***
func (o DatabasePostgresqlV2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// When this Managed Database was last updated.
func (o DatabasePostgresqlV2Output) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// Configuration settings for automated patch update maintenance for the Managed Database.
func (o DatabasePostgresqlV2Output) Updates() DatabasePostgresqlV2UpdatesOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) DatabasePostgresqlV2UpdatesOutput { return v.Updates }).(DatabasePostgresqlV2UpdatesOutput)
}

// The Managed Database engine version. (e.g. `13.2`)
func (o DatabasePostgresqlV2Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlV2) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DatabasePostgresqlV2ArrayOutput struct{ *pulumi.OutputState }

func (DatabasePostgresqlV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePostgresqlV2)(nil)).Elem()
}

func (o DatabasePostgresqlV2ArrayOutput) ToDatabasePostgresqlV2ArrayOutput() DatabasePostgresqlV2ArrayOutput {
	return o
}

func (o DatabasePostgresqlV2ArrayOutput) ToDatabasePostgresqlV2ArrayOutputWithContext(ctx context.Context) DatabasePostgresqlV2ArrayOutput {
	return o
}

func (o DatabasePostgresqlV2ArrayOutput) Index(i pulumi.IntInput) DatabasePostgresqlV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabasePostgresqlV2 {
		return vs[0].([]*DatabasePostgresqlV2)[vs[1].(int)]
	}).(DatabasePostgresqlV2Output)
}

type DatabasePostgresqlV2MapOutput struct{ *pulumi.OutputState }

func (DatabasePostgresqlV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePostgresqlV2)(nil)).Elem()
}

func (o DatabasePostgresqlV2MapOutput) ToDatabasePostgresqlV2MapOutput() DatabasePostgresqlV2MapOutput {
	return o
}

func (o DatabasePostgresqlV2MapOutput) ToDatabasePostgresqlV2MapOutputWithContext(ctx context.Context) DatabasePostgresqlV2MapOutput {
	return o
}

func (o DatabasePostgresqlV2MapOutput) MapIndex(k pulumi.StringInput) DatabasePostgresqlV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabasePostgresqlV2 {
		return vs[0].(map[string]*DatabasePostgresqlV2)[vs[1].(string)]
	}).(DatabasePostgresqlV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePostgresqlV2Input)(nil)).Elem(), &DatabasePostgresqlV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePostgresqlV2ArrayInput)(nil)).Elem(), DatabasePostgresqlV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePostgresqlV2MapInput)(nil)).Elem(), DatabasePostgresqlV2Map{})
	pulumi.RegisterOutputType(DatabasePostgresqlV2Output{})
	pulumi.RegisterOutputType(DatabasePostgresqlV2ArrayOutput{})
	pulumi.RegisterOutputType(DatabasePostgresqlV2MapOutput{})
}
