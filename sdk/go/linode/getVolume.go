// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a Linode Volume.
//
// ## Example Usage
//
// The following example shows how one might use this data source to access information about a Linode Volume.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-linode/sdk/v3/go/linode"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := linode.LookupVolume(ctx, &GetVolumeArgs{
// 			Id: 1234567,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Attributes
//
// The Linode Volume resource exports the following attributes:
//
// - `id` - The unique ID of this Volume.
//
// - `created` - When this Volume was created.
//
// - `status` - The current status of the Volume. (`creating`, `active`, `resizing`, `contactSupport`)
//
// - `label` - This Volume's label is for display purposes only.
//
// - `tags` - An array of tags applied to this object.
//
// - `size` - The Volume's size, in GiB.
//
// - `region` - The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
//
// - `updated` - When this Volume was last updated.
//
// - `linodeId` - If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
//
// - `filesystemPath` - The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	var rv LookupVolumeResult
	err := ctx.Invoke("linode:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// The unique numeric ID of the Volume record to query.
	Id int `pulumi:"id"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	Created        string   `pulumi:"created"`
	FilesystemPath string   `pulumi:"filesystemPath"`
	Id             int      `pulumi:"id"`
	Label          string   `pulumi:"label"`
	LinodeId       int      `pulumi:"linodeId"`
	Region         string   `pulumi:"region"`
	Size           int      `pulumi:"size"`
	Status         string   `pulumi:"status"`
	Tags           []string `pulumi:"tags"`
	Updated        string   `pulumi:"updated"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeResult, error) {
			args := v.(LookupVolumeArgs)
			r, err := LookupVolume(ctx, &args, opts...)
			var s LookupVolumeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// The unique numeric ID of the Volume record to query.
	Id pulumi.IntInput `pulumi:"id"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Created }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) FilesystemPath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.FilesystemPath }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupVolumeResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Label }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) LinodeId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.LinodeId }).(pulumi.IntOutput)
}

func (o LookupVolumeResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Size }).(pulumi.IntOutput)
}

func (o LookupVolumeResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LookupVolumeResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Updated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
