// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instances).
//
// Please keep in mind that Managed Databases can take up to half an hour to provision.
//
// ## Example Usage
//
// Creating a simple MySQL database that does not allow connections:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewDatabaseMysqlV2(ctx, "foobar", &linode.DatabaseMysqlV2Args{
//				Label:    pulumi.String("mydatabase"),
//				EngineId: pulumi.String("mysql/8"),
//				Region:   pulumi.String("us-mia"),
//				Type:     pulumi.String("g6-nanode-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating a simple MySQL database that allows connections from all IPv4 addresses:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewDatabaseMysqlV2(ctx, "foobar", &linode.DatabaseMysqlV2Args{
//				Label:    pulumi.String("mydatabase"),
//				EngineId: pulumi.String("mysql/8"),
//				Region:   pulumi.String("us-mia"),
//				Type:     pulumi.String("g6-nanode-1"),
//				AllowLists: pulumi.StringArray{
//					pulumi.String("0.0.0.0/0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating a complex MySQL database:
//
// ## Import
//
// Linode MySQL Databases can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import linode:index/databaseMysqlV2:DatabaseMysqlV2 foobar 1234567
// ```
type DatabaseMysqlV2 struct {
	pulumi.CustomResourceState

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayOutput `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntOutput `pulumi:"clusterSize"`
	// When this Managed Database was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Whether the Managed Databases is encrypted.
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `mysql`)
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	EngineConfigBinlogRetentionPeriod pulumi.IntOutput `pulumi:"engineConfigBinlogRetentionPeriod"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
	EngineConfigMysqlConnectTimeout pulumi.IntOutput `pulumi:"engineConfigMysqlConnectTimeout"`
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
	EngineConfigMysqlDefaultTimeZone pulumi.StringOutput `pulumi:"engineConfigMysqlDefaultTimeZone"`
	// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
	EngineConfigMysqlGroupConcatMaxLen pulumi.Float64Output `pulumi:"engineConfigMysqlGroupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	EngineConfigMysqlInformationSchemaStatsExpiry pulumi.IntOutput `pulumi:"engineConfigMysqlInformationSchemaStatsExpiry"`
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	EngineConfigMysqlInnodbChangeBufferMaxSize pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbChangeBufferMaxSize"`
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	EngineConfigMysqlInnodbFlushNeighbors pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbFlushNeighbors"`
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbFtMinTokenSize pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbFtMinTokenSize"`
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
	EngineConfigMysqlInnodbFtServerStopwordTable pulumi.StringPtrOutput `pulumi:"engineConfigMysqlInnodbFtServerStopwordTable"`
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	EngineConfigMysqlInnodbLockWaitTimeout pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbLockWaitTimeout"`
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	EngineConfigMysqlInnodbLogBufferSize pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbLogBufferSize"`
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	EngineConfigMysqlInnodbOnlineAlterLogMaxSize pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbOnlineAlterLogMaxSize"`
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbReadIoThreads pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbReadIoThreads"`
	// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbRollbackOnTimeout pulumi.BoolOutput `pulumi:"engineConfigMysqlInnodbRollbackOnTimeout"`
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	EngineConfigMysqlInnodbThreadConcurrency pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbThreadConcurrency"`
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbWriteIoThreads pulumi.IntOutput `pulumi:"engineConfigMysqlInnodbWriteIoThreads"`
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	EngineConfigMysqlInteractiveTimeout pulumi.IntOutput `pulumi:"engineConfigMysqlInteractiveTimeout"`
	// The storage engine for in-memory internal temporary tables.
	EngineConfigMysqlInternalTmpMemStorageEngine pulumi.StringOutput `pulumi:"engineConfigMysqlInternalTmpMemStorageEngine"`
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	EngineConfigMysqlMaxAllowedPacket pulumi.IntOutput `pulumi:"engineConfigMysqlMaxAllowedPacket"`
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	EngineConfigMysqlMaxHeapTableSize pulumi.IntOutput `pulumi:"engineConfigMysqlMaxHeapTableSize"`
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlNetBufferLength pulumi.IntOutput `pulumi:"engineConfigMysqlNetBufferLength"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	EngineConfigMysqlNetReadTimeout pulumi.IntOutput `pulumi:"engineConfigMysqlNetReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	EngineConfigMysqlNetWriteTimeout pulumi.IntOutput `pulumi:"engineConfigMysqlNetWriteTimeout"`
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	EngineConfigMysqlSortBufferSize pulumi.IntOutput `pulumi:"engineConfigMysqlSortBufferSize"`
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
	EngineConfigMysqlSqlMode pulumi.StringOutput `pulumi:"engineConfigMysqlSqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
	EngineConfigMysqlSqlRequirePrimaryKey pulumi.BoolOutput `pulumi:"engineConfigMysqlSqlRequirePrimaryKey"`
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	EngineConfigMysqlTmpTableSize pulumi.IntOutput `pulumi:"engineConfigMysqlTmpTableSize"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	EngineConfigMysqlWaitTimeout pulumi.IntOutput `pulumi:"engineConfigMysqlWaitTimeout"`
	// The Managed Database engine in engine/version format. (e.g. `mysql`)
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime pulumi.StringOutput `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource pulumi.IntPtrOutput `pulumi:"forkSource"`
	// The primary host for the Managed Database.
	HostPrimary pulumi.StringOutput `pulumi:"hostPrimary"`
	// The secondary/private host for the managed database.
	HostSecondary pulumi.StringOutput `pulumi:"hostSecondary"`
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringOutput `pulumi:"label"`
	// A mapping between IP addresses and strings designating them as primary or failover.
	Members pulumi.StringMapOutput `pulumi:"members"`
	// The oldest time to which a database can be restored.
	OldestRestoreTime pulumi.StringOutput `pulumi:"oldestRestoreTime"`
	// A set of pending updates.
	PendingUpdates DatabaseMysqlV2PendingUpdateArrayOutput `pulumi:"pendingUpdates"`
	// The back-end platform for relational databases used by the service.
	Platform pulumi.StringOutput `pulumi:"platform"`
	// The access port for this Managed Database.
	Port pulumi.IntOutput `pulumi:"port"`
	// The region to use for the Managed Database.
	Region pulumi.StringOutput `pulumi:"region"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword pulumi.StringOutput `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername pulumi.StringOutput `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection pulumi.BoolOutput `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status pulumi.StringOutput `pulumi:"status"`
	// Whether this Managed Database should be suspended.
	Suspended pulumi.BoolOutput                `pulumi:"suspended"`
	Timeouts  DatabaseMysqlV2TimeoutsPtrOutput `pulumi:"timeouts"`
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type pulumi.StringOutput `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabaseMysqlV2UpdatesOutput `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `13.2`)
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatabaseMysqlV2 registers a new resource with the given unique name, arguments, and options.
func NewDatabaseMysqlV2(ctx *pulumi.Context,
	name string, args *DatabaseMysqlV2Args, opts ...pulumi.ResourceOption) (*DatabaseMysqlV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCert",
		"rootPassword",
		"rootUsername",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseMysqlV2
	err := ctx.RegisterResource("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseMysqlV2 gets an existing DatabaseMysqlV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseMysqlV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseMysqlV2State, opts ...pulumi.ResourceOption) (*DatabaseMysqlV2, error) {
	var resource DatabaseMysqlV2
	err := ctx.ReadResource("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseMysqlV2 resources.
type databaseMysqlV2State struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert *string `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize *int `pulumi:"clusterSize"`
	// When this Managed Database was created.
	Created *string `pulumi:"created"`
	// Whether the Managed Databases is encrypted.
	Encrypted *bool `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `mysql`)
	Engine *string `pulumi:"engine"`
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	EngineConfigBinlogRetentionPeriod *int `pulumi:"engineConfigBinlogRetentionPeriod"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
	EngineConfigMysqlConnectTimeout *int `pulumi:"engineConfigMysqlConnectTimeout"`
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
	EngineConfigMysqlDefaultTimeZone *string `pulumi:"engineConfigMysqlDefaultTimeZone"`
	// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
	EngineConfigMysqlGroupConcatMaxLen *float64 `pulumi:"engineConfigMysqlGroupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	EngineConfigMysqlInformationSchemaStatsExpiry *int `pulumi:"engineConfigMysqlInformationSchemaStatsExpiry"`
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	EngineConfigMysqlInnodbChangeBufferMaxSize *int `pulumi:"engineConfigMysqlInnodbChangeBufferMaxSize"`
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	EngineConfigMysqlInnodbFlushNeighbors *int `pulumi:"engineConfigMysqlInnodbFlushNeighbors"`
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbFtMinTokenSize *int `pulumi:"engineConfigMysqlInnodbFtMinTokenSize"`
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
	EngineConfigMysqlInnodbFtServerStopwordTable *string `pulumi:"engineConfigMysqlInnodbFtServerStopwordTable"`
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	EngineConfigMysqlInnodbLockWaitTimeout *int `pulumi:"engineConfigMysqlInnodbLockWaitTimeout"`
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	EngineConfigMysqlInnodbLogBufferSize *int `pulumi:"engineConfigMysqlInnodbLogBufferSize"`
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	EngineConfigMysqlInnodbOnlineAlterLogMaxSize *int `pulumi:"engineConfigMysqlInnodbOnlineAlterLogMaxSize"`
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbReadIoThreads *int `pulumi:"engineConfigMysqlInnodbReadIoThreads"`
	// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbRollbackOnTimeout *bool `pulumi:"engineConfigMysqlInnodbRollbackOnTimeout"`
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	EngineConfigMysqlInnodbThreadConcurrency *int `pulumi:"engineConfigMysqlInnodbThreadConcurrency"`
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbWriteIoThreads *int `pulumi:"engineConfigMysqlInnodbWriteIoThreads"`
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	EngineConfigMysqlInteractiveTimeout *int `pulumi:"engineConfigMysqlInteractiveTimeout"`
	// The storage engine for in-memory internal temporary tables.
	EngineConfigMysqlInternalTmpMemStorageEngine *string `pulumi:"engineConfigMysqlInternalTmpMemStorageEngine"`
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	EngineConfigMysqlMaxAllowedPacket *int `pulumi:"engineConfigMysqlMaxAllowedPacket"`
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	EngineConfigMysqlMaxHeapTableSize *int `pulumi:"engineConfigMysqlMaxHeapTableSize"`
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlNetBufferLength *int `pulumi:"engineConfigMysqlNetBufferLength"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	EngineConfigMysqlNetReadTimeout *int `pulumi:"engineConfigMysqlNetReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	EngineConfigMysqlNetWriteTimeout *int `pulumi:"engineConfigMysqlNetWriteTimeout"`
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	EngineConfigMysqlSortBufferSize *int `pulumi:"engineConfigMysqlSortBufferSize"`
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
	EngineConfigMysqlSqlMode *string `pulumi:"engineConfigMysqlSqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
	EngineConfigMysqlSqlRequirePrimaryKey *bool `pulumi:"engineConfigMysqlSqlRequirePrimaryKey"`
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	EngineConfigMysqlTmpTableSize *int `pulumi:"engineConfigMysqlTmpTableSize"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	EngineConfigMysqlWaitTimeout *int `pulumi:"engineConfigMysqlWaitTimeout"`
	// The Managed Database engine in engine/version format. (e.g. `mysql`)
	EngineId *string `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime *string `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource *int `pulumi:"forkSource"`
	// The primary host for the Managed Database.
	HostPrimary *string `pulumi:"hostPrimary"`
	// The secondary/private host for the managed database.
	HostSecondary *string `pulumi:"hostSecondary"`
	// A unique, user-defined string referring to the Managed Database.
	Label *string `pulumi:"label"`
	// A mapping between IP addresses and strings designating them as primary or failover.
	Members map[string]string `pulumi:"members"`
	// The oldest time to which a database can be restored.
	OldestRestoreTime *string `pulumi:"oldestRestoreTime"`
	// A set of pending updates.
	PendingUpdates []DatabaseMysqlV2PendingUpdate `pulumi:"pendingUpdates"`
	// The back-end platform for relational databases used by the service.
	Platform *string `pulumi:"platform"`
	// The access port for this Managed Database.
	Port *int `pulumi:"port"`
	// The region to use for the Managed Database.
	Region *string `pulumi:"region"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword *string `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername *string `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection *bool `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status *string `pulumi:"status"`
	// Whether this Managed Database should be suspended.
	Suspended *bool                    `pulumi:"suspended"`
	Timeouts  *DatabaseMysqlV2Timeouts `pulumi:"timeouts"`
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type *string `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated *string `pulumi:"updated"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates *DatabaseMysqlV2Updates `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `13.2`)
	Version *string `pulumi:"version"`
}

type DatabaseMysqlV2State struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayInput
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert pulumi.StringPtrInput
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrInput
	// When this Managed Database was created.
	Created pulumi.StringPtrInput
	// Whether the Managed Databases is encrypted.
	Encrypted pulumi.BoolPtrInput
	// The Managed Database engine. (e.g. `mysql`)
	Engine pulumi.StringPtrInput
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	EngineConfigBinlogRetentionPeriod pulumi.IntPtrInput
	// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
	EngineConfigMysqlConnectTimeout pulumi.IntPtrInput
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
	EngineConfigMysqlDefaultTimeZone pulumi.StringPtrInput
	// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
	EngineConfigMysqlGroupConcatMaxLen pulumi.Float64PtrInput
	// The time, in seconds, before cached statistics expire.
	EngineConfigMysqlInformationSchemaStatsExpiry pulumi.IntPtrInput
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	EngineConfigMysqlInnodbChangeBufferMaxSize pulumi.IntPtrInput
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	EngineConfigMysqlInnodbFlushNeighbors pulumi.IntPtrInput
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbFtMinTokenSize pulumi.IntPtrInput
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
	EngineConfigMysqlInnodbFtServerStopwordTable pulumi.StringPtrInput
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	EngineConfigMysqlInnodbLockWaitTimeout pulumi.IntPtrInput
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	EngineConfigMysqlInnodbLogBufferSize pulumi.IntPtrInput
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	EngineConfigMysqlInnodbOnlineAlterLogMaxSize pulumi.IntPtrInput
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbReadIoThreads pulumi.IntPtrInput
	// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbRollbackOnTimeout pulumi.BoolPtrInput
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	EngineConfigMysqlInnodbThreadConcurrency pulumi.IntPtrInput
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbWriteIoThreads pulumi.IntPtrInput
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	EngineConfigMysqlInteractiveTimeout pulumi.IntPtrInput
	// The storage engine for in-memory internal temporary tables.
	EngineConfigMysqlInternalTmpMemStorageEngine pulumi.StringPtrInput
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	EngineConfigMysqlMaxAllowedPacket pulumi.IntPtrInput
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	EngineConfigMysqlMaxHeapTableSize pulumi.IntPtrInput
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlNetBufferLength pulumi.IntPtrInput
	// The number of seconds to wait for more data from a connection before aborting the read.
	EngineConfigMysqlNetReadTimeout pulumi.IntPtrInput
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	EngineConfigMysqlNetWriteTimeout pulumi.IntPtrInput
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	EngineConfigMysqlSortBufferSize pulumi.IntPtrInput
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
	EngineConfigMysqlSqlMode pulumi.StringPtrInput
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
	EngineConfigMysqlSqlRequirePrimaryKey pulumi.BoolPtrInput
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	EngineConfigMysqlTmpTableSize pulumi.IntPtrInput
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	EngineConfigMysqlWaitTimeout pulumi.IntPtrInput
	// The Managed Database engine in engine/version format. (e.g. `mysql`)
	EngineId pulumi.StringPtrInput
	// The database timestamp from which it was restored.
	ForkRestoreTime pulumi.StringPtrInput
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource pulumi.IntPtrInput
	// The primary host for the Managed Database.
	HostPrimary pulumi.StringPtrInput
	// The secondary/private host for the managed database.
	HostSecondary pulumi.StringPtrInput
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringPtrInput
	// A mapping between IP addresses and strings designating them as primary or failover.
	Members pulumi.StringMapInput
	// The oldest time to which a database can be restored.
	OldestRestoreTime pulumi.StringPtrInput
	// A set of pending updates.
	PendingUpdates DatabaseMysqlV2PendingUpdateArrayInput
	// The back-end platform for relational databases used by the service.
	Platform pulumi.StringPtrInput
	// The access port for this Managed Database.
	Port pulumi.IntPtrInput
	// The region to use for the Managed Database.
	Region pulumi.StringPtrInput
	// The randomly-generated root password for the Managed Database instance.
	RootPassword pulumi.StringPtrInput
	// The root username for the Managed Database instance.
	RootUsername pulumi.StringPtrInput
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection pulumi.BoolPtrInput
	// The operating status of the Managed Database.
	Status pulumi.StringPtrInput
	// Whether this Managed Database should be suspended.
	Suspended pulumi.BoolPtrInput
	Timeouts  DatabaseMysqlV2TimeoutsPtrInput
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type pulumi.StringPtrInput
	// When this Managed Database was last updated.
	Updated pulumi.StringPtrInput
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabaseMysqlV2UpdatesPtrInput
	// The Managed Database engine version. (e.g. `13.2`)
	Version pulumi.StringPtrInput
}

func (DatabaseMysqlV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMysqlV2State)(nil)).Elem()
}

type databaseMysqlV2Args struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize *int `pulumi:"clusterSize"`
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	EngineConfigBinlogRetentionPeriod *int `pulumi:"engineConfigBinlogRetentionPeriod"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
	EngineConfigMysqlConnectTimeout *int `pulumi:"engineConfigMysqlConnectTimeout"`
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
	EngineConfigMysqlDefaultTimeZone *string `pulumi:"engineConfigMysqlDefaultTimeZone"`
	// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
	EngineConfigMysqlGroupConcatMaxLen *float64 `pulumi:"engineConfigMysqlGroupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	EngineConfigMysqlInformationSchemaStatsExpiry *int `pulumi:"engineConfigMysqlInformationSchemaStatsExpiry"`
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	EngineConfigMysqlInnodbChangeBufferMaxSize *int `pulumi:"engineConfigMysqlInnodbChangeBufferMaxSize"`
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	EngineConfigMysqlInnodbFlushNeighbors *int `pulumi:"engineConfigMysqlInnodbFlushNeighbors"`
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbFtMinTokenSize *int `pulumi:"engineConfigMysqlInnodbFtMinTokenSize"`
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
	EngineConfigMysqlInnodbFtServerStopwordTable *string `pulumi:"engineConfigMysqlInnodbFtServerStopwordTable"`
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	EngineConfigMysqlInnodbLockWaitTimeout *int `pulumi:"engineConfigMysqlInnodbLockWaitTimeout"`
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	EngineConfigMysqlInnodbLogBufferSize *int `pulumi:"engineConfigMysqlInnodbLogBufferSize"`
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	EngineConfigMysqlInnodbOnlineAlterLogMaxSize *int `pulumi:"engineConfigMysqlInnodbOnlineAlterLogMaxSize"`
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbReadIoThreads *int `pulumi:"engineConfigMysqlInnodbReadIoThreads"`
	// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbRollbackOnTimeout *bool `pulumi:"engineConfigMysqlInnodbRollbackOnTimeout"`
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	EngineConfigMysqlInnodbThreadConcurrency *int `pulumi:"engineConfigMysqlInnodbThreadConcurrency"`
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbWriteIoThreads *int `pulumi:"engineConfigMysqlInnodbWriteIoThreads"`
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	EngineConfigMysqlInteractiveTimeout *int `pulumi:"engineConfigMysqlInteractiveTimeout"`
	// The storage engine for in-memory internal temporary tables.
	EngineConfigMysqlInternalTmpMemStorageEngine *string `pulumi:"engineConfigMysqlInternalTmpMemStorageEngine"`
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	EngineConfigMysqlMaxAllowedPacket *int `pulumi:"engineConfigMysqlMaxAllowedPacket"`
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	EngineConfigMysqlMaxHeapTableSize *int `pulumi:"engineConfigMysqlMaxHeapTableSize"`
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlNetBufferLength *int `pulumi:"engineConfigMysqlNetBufferLength"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	EngineConfigMysqlNetReadTimeout *int `pulumi:"engineConfigMysqlNetReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	EngineConfigMysqlNetWriteTimeout *int `pulumi:"engineConfigMysqlNetWriteTimeout"`
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	EngineConfigMysqlSortBufferSize *int `pulumi:"engineConfigMysqlSortBufferSize"`
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
	EngineConfigMysqlSqlMode *string `pulumi:"engineConfigMysqlSqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
	EngineConfigMysqlSqlRequirePrimaryKey *bool `pulumi:"engineConfigMysqlSqlRequirePrimaryKey"`
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	EngineConfigMysqlTmpTableSize *int `pulumi:"engineConfigMysqlTmpTableSize"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	EngineConfigMysqlWaitTimeout *int `pulumi:"engineConfigMysqlWaitTimeout"`
	// The Managed Database engine in engine/version format. (e.g. `mysql`)
	EngineId string `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime *string `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource *int `pulumi:"forkSource"`
	// A unique, user-defined string referring to the Managed Database.
	Label string `pulumi:"label"`
	// The region to use for the Managed Database.
	Region string `pulumi:"region"`
	// Whether this Managed Database should be suspended.
	Suspended *bool                    `pulumi:"suspended"`
	Timeouts  *DatabaseMysqlV2Timeouts `pulumi:"timeouts"`
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type string `pulumi:"type"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates *DatabaseMysqlV2Updates `pulumi:"updates"`
}

// The set of arguments for constructing a DatabaseMysqlV2 resource.
type DatabaseMysqlV2Args struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayInput
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrInput
	// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	EngineConfigBinlogRetentionPeriod pulumi.IntPtrInput
	// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
	EngineConfigMysqlConnectTimeout pulumi.IntPtrInput
	// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
	EngineConfigMysqlDefaultTimeZone pulumi.StringPtrInput
	// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
	EngineConfigMysqlGroupConcatMaxLen pulumi.Float64PtrInput
	// The time, in seconds, before cached statistics expire.
	EngineConfigMysqlInformationSchemaStatsExpiry pulumi.IntPtrInput
	// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
	EngineConfigMysqlInnodbChangeBufferMaxSize pulumi.IntPtrInput
	// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
	EngineConfigMysqlInnodbFlushNeighbors pulumi.IntPtrInput
	// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbFtMinTokenSize pulumi.IntPtrInput
	// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
	EngineConfigMysqlInnodbFtServerStopwordTable pulumi.StringPtrInput
	// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
	EngineConfigMysqlInnodbLockWaitTimeout pulumi.IntPtrInput
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	EngineConfigMysqlInnodbLogBufferSize pulumi.IntPtrInput
	// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
	EngineConfigMysqlInnodbOnlineAlterLogMaxSize pulumi.IntPtrInput
	// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbReadIoThreads pulumi.IntPtrInput
	// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbRollbackOnTimeout pulumi.BoolPtrInput
	// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
	EngineConfigMysqlInnodbThreadConcurrency pulumi.IntPtrInput
	// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlInnodbWriteIoThreads pulumi.IntPtrInput
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	EngineConfigMysqlInteractiveTimeout pulumi.IntPtrInput
	// The storage engine for in-memory internal temporary tables.
	EngineConfigMysqlInternalTmpMemStorageEngine pulumi.StringPtrInput
	// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
	EngineConfigMysqlMaxAllowedPacket pulumi.IntPtrInput
	// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
	EngineConfigMysqlMaxHeapTableSize pulumi.IntPtrInput
	// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
	EngineConfigMysqlNetBufferLength pulumi.IntPtrInput
	// The number of seconds to wait for more data from a connection before aborting the read.
	EngineConfigMysqlNetReadTimeout pulumi.IntPtrInput
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	EngineConfigMysqlNetWriteTimeout pulumi.IntPtrInput
	// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
	EngineConfigMysqlSortBufferSize pulumi.IntPtrInput
	// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
	EngineConfigMysqlSqlMode pulumi.StringPtrInput
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
	EngineConfigMysqlSqlRequirePrimaryKey pulumi.BoolPtrInput
	// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	EngineConfigMysqlTmpTableSize pulumi.IntPtrInput
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	EngineConfigMysqlWaitTimeout pulumi.IntPtrInput
	// The Managed Database engine in engine/version format. (e.g. `mysql`)
	EngineId pulumi.StringInput
	// The database timestamp from which it was restored.
	ForkRestoreTime pulumi.StringPtrInput
	// The ID of the database that was forked from.
	//
	// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
	ForkSource pulumi.IntPtrInput
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringInput
	// The region to use for the Managed Database.
	Region pulumi.StringInput
	// Whether this Managed Database should be suspended.
	Suspended pulumi.BoolPtrInput
	Timeouts  DatabaseMysqlV2TimeoutsPtrInput
	// The Linode Instance type used for the nodes of the Managed Database.
	//
	// ***
	Type pulumi.StringInput
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabaseMysqlV2UpdatesPtrInput
}

func (DatabaseMysqlV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMysqlV2Args)(nil)).Elem()
}

type DatabaseMysqlV2Input interface {
	pulumi.Input

	ToDatabaseMysqlV2Output() DatabaseMysqlV2Output
	ToDatabaseMysqlV2OutputWithContext(ctx context.Context) DatabaseMysqlV2Output
}

func (*DatabaseMysqlV2) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysqlV2)(nil)).Elem()
}

func (i *DatabaseMysqlV2) ToDatabaseMysqlV2Output() DatabaseMysqlV2Output {
	return i.ToDatabaseMysqlV2OutputWithContext(context.Background())
}

func (i *DatabaseMysqlV2) ToDatabaseMysqlV2OutputWithContext(ctx context.Context) DatabaseMysqlV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlV2Output)
}

// DatabaseMysqlV2ArrayInput is an input type that accepts DatabaseMysqlV2Array and DatabaseMysqlV2ArrayOutput values.
// You can construct a concrete instance of `DatabaseMysqlV2ArrayInput` via:
//
//	DatabaseMysqlV2Array{ DatabaseMysqlV2Args{...} }
type DatabaseMysqlV2ArrayInput interface {
	pulumi.Input

	ToDatabaseMysqlV2ArrayOutput() DatabaseMysqlV2ArrayOutput
	ToDatabaseMysqlV2ArrayOutputWithContext(context.Context) DatabaseMysqlV2ArrayOutput
}

type DatabaseMysqlV2Array []DatabaseMysqlV2Input

func (DatabaseMysqlV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMysqlV2)(nil)).Elem()
}

func (i DatabaseMysqlV2Array) ToDatabaseMysqlV2ArrayOutput() DatabaseMysqlV2ArrayOutput {
	return i.ToDatabaseMysqlV2ArrayOutputWithContext(context.Background())
}

func (i DatabaseMysqlV2Array) ToDatabaseMysqlV2ArrayOutputWithContext(ctx context.Context) DatabaseMysqlV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlV2ArrayOutput)
}

// DatabaseMysqlV2MapInput is an input type that accepts DatabaseMysqlV2Map and DatabaseMysqlV2MapOutput values.
// You can construct a concrete instance of `DatabaseMysqlV2MapInput` via:
//
//	DatabaseMysqlV2Map{ "key": DatabaseMysqlV2Args{...} }
type DatabaseMysqlV2MapInput interface {
	pulumi.Input

	ToDatabaseMysqlV2MapOutput() DatabaseMysqlV2MapOutput
	ToDatabaseMysqlV2MapOutputWithContext(context.Context) DatabaseMysqlV2MapOutput
}

type DatabaseMysqlV2Map map[string]DatabaseMysqlV2Input

func (DatabaseMysqlV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMysqlV2)(nil)).Elem()
}

func (i DatabaseMysqlV2Map) ToDatabaseMysqlV2MapOutput() DatabaseMysqlV2MapOutput {
	return i.ToDatabaseMysqlV2MapOutputWithContext(context.Background())
}

func (i DatabaseMysqlV2Map) ToDatabaseMysqlV2MapOutputWithContext(ctx context.Context) DatabaseMysqlV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlV2MapOutput)
}

type DatabaseMysqlV2Output struct{ *pulumi.OutputState }

func (DatabaseMysqlV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysqlV2)(nil)).Elem()
}

func (o DatabaseMysqlV2Output) ToDatabaseMysqlV2Output() DatabaseMysqlV2Output {
	return o
}

func (o DatabaseMysqlV2Output) ToDatabaseMysqlV2OutputWithContext(ctx context.Context) DatabaseMysqlV2Output {
	return o
}

// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
func (o DatabaseMysqlV2Output) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringArrayOutput { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The base64-encoded SSL CA certificate for the Managed Database.
func (o DatabaseMysqlV2Output) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.CaCert }).(pulumi.StringOutput)
}

// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
func (o DatabaseMysqlV2Output) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.ClusterSize }).(pulumi.IntOutput)
}

// When this Managed Database was created.
func (o DatabaseMysqlV2Output) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Whether the Managed Databases is encrypted.
func (o DatabaseMysqlV2Output) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.BoolOutput { return v.Encrypted }).(pulumi.BoolOutput)
}

// The Managed Database engine. (e.g. `mysql`)
func (o DatabaseMysqlV2Output) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
func (o DatabaseMysqlV2Output) EngineConfigBinlogRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigBinlogRetentionPeriod }).(pulumi.IntOutput)
}

// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
func (o DatabaseMysqlV2Output) EngineConfigMysqlConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlConnectTimeout }).(pulumi.IntOutput)
}

// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
func (o DatabaseMysqlV2Output) EngineConfigMysqlDefaultTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.EngineConfigMysqlDefaultTimeZone }).(pulumi.StringOutput)
}

// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
func (o DatabaseMysqlV2Output) EngineConfigMysqlGroupConcatMaxLen() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.Float64Output { return v.EngineConfigMysqlGroupConcatMaxLen }).(pulumi.Float64Output)
}

// The time, in seconds, before cached statistics expire.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInformationSchemaStatsExpiry() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInformationSchemaStatsExpiry }).(pulumi.IntOutput)
}

// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbChangeBufferMaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbChangeBufferMaxSize }).(pulumi.IntOutput)
}

// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbFlushNeighbors() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbFlushNeighbors }).(pulumi.IntOutput)
}

// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbFtMinTokenSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbFtMinTokenSize }).(pulumi.IntOutput)
}

// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbFtServerStopwordTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringPtrOutput { return v.EngineConfigMysqlInnodbFtServerStopwordTable }).(pulumi.StringPtrOutput)
}

// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbLockWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbLockWaitTimeout }).(pulumi.IntOutput)
}

// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbLogBufferSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbLogBufferSize }).(pulumi.IntOutput)
}

// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbOnlineAlterLogMaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbOnlineAlterLogMaxSize }).(pulumi.IntOutput)
}

// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbReadIoThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbReadIoThreads }).(pulumi.IntOutput)
}

// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbRollbackOnTimeout() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.BoolOutput { return v.EngineConfigMysqlInnodbRollbackOnTimeout }).(pulumi.BoolOutput)
}

// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbThreadConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbThreadConcurrency }).(pulumi.IntOutput)
}

// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInnodbWriteIoThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInnodbWriteIoThreads }).(pulumi.IntOutput)
}

// The number of seconds the server waits for activity on an interactive connection before closing it.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInteractiveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlInteractiveTimeout }).(pulumi.IntOutput)
}

// The storage engine for in-memory internal temporary tables.
func (o DatabaseMysqlV2Output) EngineConfigMysqlInternalTmpMemStorageEngine() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.EngineConfigMysqlInternalTmpMemStorageEngine }).(pulumi.StringOutput)
}

// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
func (o DatabaseMysqlV2Output) EngineConfigMysqlMaxAllowedPacket() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlMaxAllowedPacket }).(pulumi.IntOutput)
}

// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
func (o DatabaseMysqlV2Output) EngineConfigMysqlMaxHeapTableSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlMaxHeapTableSize }).(pulumi.IntOutput)
}

// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
func (o DatabaseMysqlV2Output) EngineConfigMysqlNetBufferLength() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlNetBufferLength }).(pulumi.IntOutput)
}

// The number of seconds to wait for more data from a connection before aborting the read.
func (o DatabaseMysqlV2Output) EngineConfigMysqlNetReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlNetReadTimeout }).(pulumi.IntOutput)
}

// The number of seconds to wait for a block to be written to a connection before aborting the write.
func (o DatabaseMysqlV2Output) EngineConfigMysqlNetWriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlNetWriteTimeout }).(pulumi.IntOutput)
}

// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
func (o DatabaseMysqlV2Output) EngineConfigMysqlSortBufferSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlSortBufferSize }).(pulumi.IntOutput)
}

// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
func (o DatabaseMysqlV2Output) EngineConfigMysqlSqlMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.EngineConfigMysqlSqlMode }).(pulumi.StringOutput)
}

// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
func (o DatabaseMysqlV2Output) EngineConfigMysqlSqlRequirePrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.BoolOutput { return v.EngineConfigMysqlSqlRequirePrimaryKey }).(pulumi.BoolOutput)
}

// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
func (o DatabaseMysqlV2Output) EngineConfigMysqlTmpTableSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlTmpTableSize }).(pulumi.IntOutput)
}

// The number of seconds the server waits for activity on a noninteractive connection before closing it.
func (o DatabaseMysqlV2Output) EngineConfigMysqlWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.EngineConfigMysqlWaitTimeout }).(pulumi.IntOutput)
}

// The Managed Database engine in engine/version format. (e.g. `mysql`)
func (o DatabaseMysqlV2Output) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The database timestamp from which it was restored.
func (o DatabaseMysqlV2Output) ForkRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.ForkRestoreTime }).(pulumi.StringOutput)
}

// The ID of the database that was forked from.
//
// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
func (o DatabaseMysqlV2Output) ForkSource() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntPtrOutput { return v.ForkSource }).(pulumi.IntPtrOutput)
}

// The primary host for the Managed Database.
func (o DatabaseMysqlV2Output) HostPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.HostPrimary }).(pulumi.StringOutput)
}

// The secondary/private host for the managed database.
func (o DatabaseMysqlV2Output) HostSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.HostSecondary }).(pulumi.StringOutput)
}

// A unique, user-defined string referring to the Managed Database.
func (o DatabaseMysqlV2Output) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// A mapping between IP addresses and strings designating them as primary or failover.
func (o DatabaseMysqlV2Output) Members() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringMapOutput { return v.Members }).(pulumi.StringMapOutput)
}

// The oldest time to which a database can be restored.
func (o DatabaseMysqlV2Output) OldestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.OldestRestoreTime }).(pulumi.StringOutput)
}

// A set of pending updates.
func (o DatabaseMysqlV2Output) PendingUpdates() DatabaseMysqlV2PendingUpdateArrayOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) DatabaseMysqlV2PendingUpdateArrayOutput { return v.PendingUpdates }).(DatabaseMysqlV2PendingUpdateArrayOutput)
}

// The back-end platform for relational databases used by the service.
func (o DatabaseMysqlV2Output) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

// The access port for this Managed Database.
func (o DatabaseMysqlV2Output) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The region to use for the Managed Database.
func (o DatabaseMysqlV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The randomly-generated root password for the Managed Database instance.
func (o DatabaseMysqlV2Output) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.RootPassword }).(pulumi.StringOutput)
}

// The root username for the Managed Database instance.
func (o DatabaseMysqlV2Output) RootUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.RootUsername }).(pulumi.StringOutput)
}

// Whether to require SSL credentials to establish a connection to the Managed Database.
func (o DatabaseMysqlV2Output) SslConnection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.BoolOutput { return v.SslConnection }).(pulumi.BoolOutput)
}

// The operating status of the Managed Database.
func (o DatabaseMysqlV2Output) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Whether this Managed Database should be suspended.
func (o DatabaseMysqlV2Output) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.BoolOutput { return v.Suspended }).(pulumi.BoolOutput)
}

func (o DatabaseMysqlV2Output) Timeouts() DatabaseMysqlV2TimeoutsPtrOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) DatabaseMysqlV2TimeoutsPtrOutput { return v.Timeouts }).(DatabaseMysqlV2TimeoutsPtrOutput)
}

// The Linode Instance type used for the nodes of the Managed Database.
//
// ***
func (o DatabaseMysqlV2Output) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// When this Managed Database was last updated.
func (o DatabaseMysqlV2Output) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// Configuration settings for automated patch update maintenance for the Managed Database.
func (o DatabaseMysqlV2Output) Updates() DatabaseMysqlV2UpdatesOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) DatabaseMysqlV2UpdatesOutput { return v.Updates }).(DatabaseMysqlV2UpdatesOutput)
}

// The Managed Database engine version. (e.g. `13.2`)
func (o DatabaseMysqlV2Output) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlV2) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DatabaseMysqlV2ArrayOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMysqlV2)(nil)).Elem()
}

func (o DatabaseMysqlV2ArrayOutput) ToDatabaseMysqlV2ArrayOutput() DatabaseMysqlV2ArrayOutput {
	return o
}

func (o DatabaseMysqlV2ArrayOutput) ToDatabaseMysqlV2ArrayOutputWithContext(ctx context.Context) DatabaseMysqlV2ArrayOutput {
	return o
}

func (o DatabaseMysqlV2ArrayOutput) Index(i pulumi.IntInput) DatabaseMysqlV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseMysqlV2 {
		return vs[0].([]*DatabaseMysqlV2)[vs[1].(int)]
	}).(DatabaseMysqlV2Output)
}

type DatabaseMysqlV2MapOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMysqlV2)(nil)).Elem()
}

func (o DatabaseMysqlV2MapOutput) ToDatabaseMysqlV2MapOutput() DatabaseMysqlV2MapOutput {
	return o
}

func (o DatabaseMysqlV2MapOutput) ToDatabaseMysqlV2MapOutputWithContext(ctx context.Context) DatabaseMysqlV2MapOutput {
	return o
}

func (o DatabaseMysqlV2MapOutput) MapIndex(k pulumi.StringInput) DatabaseMysqlV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseMysqlV2 {
		return vs[0].(map[string]*DatabaseMysqlV2)[vs[1].(string)]
	}).(DatabaseMysqlV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlV2Input)(nil)).Elem(), &DatabaseMysqlV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlV2ArrayInput)(nil)).Elem(), DatabaseMysqlV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlV2MapInput)(nil)).Elem(), DatabaseMysqlV2Map{})
	pulumi.RegisterOutputType(DatabaseMysqlV2Output{})
	pulumi.RegisterOutputType(DatabaseMysqlV2ArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlV2MapOutput{})
}
