// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a Linode Networking IP Address
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ip).
//
// ## Example Usage
//
// The following example shows how one might use this data source to access information about a Linode Networking IP Address.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.LookupNetworkingIp(ctx, &linode.LookupNetworkingIpArgs{
//				Address: "162.159.27.72",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNetworkingIp(ctx *pulumi.Context, args *LookupNetworkingIpArgs, opts ...pulumi.InvokeOption) (*LookupNetworkingIpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetworkingIpResult
	err := ctx.Invoke("linode:index/getNetworkingIp:getNetworkingIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkingIp.
type LookupNetworkingIpArgs struct {
	// The IP Address to access.  The address must be associated with the account and a resource that the user has access to view.
	Address string `pulumi:"address"`
}

// A collection of values returned by getNetworkingIp.
type LookupNetworkingIpResult struct {
	// The IPv4 address that is configured as a 1:1 NAT for this VPC interface.
	Address string `pulumi:"address"`
	// The default gateway for this address.
	Gateway string `pulumi:"gateway"`
	Id      string `pulumi:"id"`
	// The ID of the Linode this address currently belongs to.
	LinodeId int `pulumi:"linodeId"`
	// The number of bits set in the subnet mask.
	Prefix int `pulumi:"prefix"`
	// Whether this is a public or private IP address.
	Public bool `pulumi:"public"`
	// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
	Rdns string `pulumi:"rdns"`
	// The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
	Region string `pulumi:"region"`
	// Whether this IP address is a reserved IP.
	Reserved bool `pulumi:"reserved"`
	// The mask that separates host bits from network bits for this address.
	SubnetMask string `pulumi:"subnetMask"`
	// The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
	Type string `pulumi:"type"`
	// Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
	VpcNat11 GetNetworkingIpVpcNat11 `pulumi:"vpcNat11"`
}

func LookupNetworkingIpOutput(ctx *pulumi.Context, args LookupNetworkingIpOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkingIpResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNetworkingIpResultOutput, error) {
			args := v.(LookupNetworkingIpArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("linode:index/getNetworkingIp:getNetworkingIp", args, LookupNetworkingIpResultOutput{}, options).(LookupNetworkingIpResultOutput), nil
		}).(LookupNetworkingIpResultOutput)
}

// A collection of arguments for invoking getNetworkingIp.
type LookupNetworkingIpOutputArgs struct {
	// The IP Address to access.  The address must be associated with the account and a resource that the user has access to view.
	Address pulumi.StringInput `pulumi:"address"`
}

func (LookupNetworkingIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkingIpArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkingIp.
type LookupNetworkingIpResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkingIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkingIpResult)(nil)).Elem()
}

func (o LookupNetworkingIpResultOutput) ToLookupNetworkingIpResultOutput() LookupNetworkingIpResultOutput {
	return o
}

func (o LookupNetworkingIpResultOutput) ToLookupNetworkingIpResultOutputWithContext(ctx context.Context) LookupNetworkingIpResultOutput {
	return o
}

// The IPv4 address that is configured as a 1:1 NAT for this VPC interface.
func (o LookupNetworkingIpResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.Address }).(pulumi.StringOutput)
}

// The default gateway for this address.
func (o LookupNetworkingIpResultOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.Gateway }).(pulumi.StringOutput)
}

func (o LookupNetworkingIpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Linode this address currently belongs to.
func (o LookupNetworkingIpResultOutput) LinodeId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) int { return v.LinodeId }).(pulumi.IntOutput)
}

// The number of bits set in the subnet mask.
func (o LookupNetworkingIpResultOutput) Prefix() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) int { return v.Prefix }).(pulumi.IntOutput)
}

// Whether this is a public or private IP address.
func (o LookupNetworkingIpResultOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) bool { return v.Public }).(pulumi.BoolOutput)
}

// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
func (o LookupNetworkingIpResultOutput) Rdns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.Rdns }).(pulumi.StringOutput)
}

// The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
func (o LookupNetworkingIpResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.Region }).(pulumi.StringOutput)
}

// Whether this IP address is a reserved IP.
func (o LookupNetworkingIpResultOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) bool { return v.Reserved }).(pulumi.BoolOutput)
}

// The mask that separates host bits from network bits for this address.
func (o LookupNetworkingIpResultOutput) SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.SubnetMask }).(pulumi.StringOutput)
}

// The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
func (o LookupNetworkingIpResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkingIpResult) string { return v.Type }).(pulumi.StringOutput)
}

// Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
func (o LookupNetworkingIpResultOutput) VpcNat11() GetNetworkingIpVpcNat11Output {
	return o.ApplyT(func(v LookupNetworkingIpResult) GetNetworkingIpVpcNat11 { return v.VpcNat11 }).(GetNetworkingIpVpcNat11Output)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkingIpResultOutput{})
}
