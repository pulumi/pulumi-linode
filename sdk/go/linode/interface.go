// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Linode Interface resource that can be used to create, modify, and delete network interfaces for Linode instances. Interfaces allow you to configure public, VLAN, and VPC networking for your Linode instances.
//
// This resource is specifically for Linode interfaces. If you are interested in deploying a Linode instance with a legacy config interface, please refer to the `InstanceConfig` resource documentation for details.
//
// This resource is designed to work with explicitly defined disk and config resources for the Linode instance. See the Complete Example with Linode section below for details.
//
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-linode-instance-interface).
//
// ## Example Usage
//
// ### Public Interface Example
//
// The following example shows how to create a public interface with specific IPv4 and IPv6 configurations.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInterface(ctx, "public", &linode.InterfaceArgs{
//				LinodeId: pulumi.Any(my_instance.Id),
//				Public: &linode.InterfacePublicArgs{
//					Ipv4: &linode.InterfacePublicIpv4Args{
//						Addresses: linode.InterfacePublicIpv4AddressArray{
//							&linode.InterfacePublicIpv4AddressArgs{
//								Address: pulumi.String("auto"),
//								Primary: pulumi.Bool(true),
//							},
//						},
//					},
//					Ipv6: &linode.InterfacePublicIpv6Args{
//						Ranges: linode.InterfacePublicIpv6RangeArray{
//							&linode.InterfacePublicIpv6RangeArgs{
//								Range: pulumi.String("/64"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### IPv6-Only Public Interface Example
//
// The following example shows how to create an IPv6-only public interface. Note that you must explicitly set `addresses = []` to prevent the automatic creation of an IPv4 address.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInterface(ctx, "ipv6_only", &linode.InterfaceArgs{
//				LinodeId: pulumi.Any(my_instance.Id),
//				Public: &linode.InterfacePublicArgs{
//					Ipv4: &linode.InterfacePublicIpv4Args{
//						Addresses: linode.InterfacePublicIpv4AddressArray{},
//					},
//					Ipv6: &linode.InterfacePublicIpv6Args{
//						Ranges: linode.InterfacePublicIpv6RangeArray{
//							&linode.InterfacePublicIpv6RangeArgs{
//								Range: pulumi.String("/64"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### VPC Interface Example
//
// The following example shows how to create a VPC interface with custom IPv4 configuration and 1:1 NAT.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInterface(ctx, "vpc", &linode.InterfaceArgs{
//				LinodeId: pulumi.Any(my_instance.Id),
//				Vpc: &linode.InterfaceVpcArgs{
//					SubnetId: pulumi.Int(240213),
//					Ipv4: &linode.InterfaceVpcIpv4Args{
//						Addresses: linode.InterfaceVpcIpv4AddressArray{
//							&linode.InterfaceVpcIpv4AddressArgs{
//								Address: pulumi.String("auto"),
//							},
//						},
//						Ranges: linode.InterfaceVpcIpv4RangeArray{
//							&linode.InterfaceVpcIpv4RangeArgs{
//								Range: pulumi.String("/32"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### VPC (IPv6) Interface Example
//
// The following example shows how to create a public VPC interface with a custom IPv6 configuration.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInterface(ctx, "vpc", &linode.InterfaceArgs{
//				LinodeId: pulumi.Any(my_instance.Id),
//				Vpc: &linode.InterfaceVpcArgs{
//					SubnetId: pulumi.Int(12345),
//					Ipv6: &linode.InterfaceVpcIpv6Args{
//						IsPublic: pulumi.Bool(true),
//						Slaacs: linode.InterfaceVpcIpv6SlaacArray{
//							&linode.InterfaceVpcIpv6SlaacArgs{
//								Range: pulumi.String("auto"),
//							},
//						},
//						Ranges: linode.InterfaceVpcIpv6RangeArray{
//							&linode.InterfaceVpcIpv6RangeArgs{
//								Range: pulumi.String("auto"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### VLAN Interface Example
//
// The following example shows how to create a VLAN interface.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInterface(ctx, "vlan", &linode.InterfaceArgs{
//				LinodeId: pulumi.Any(web.Id),
//				Vlan: &linode.InterfaceVlanArgs{
//					VlanLabel:   pulumi.String("web-vlan"),
//					IpamAddress: pulumi.String("192.168.200.5/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Complete Example with Linode
//
// ## Notes
//
// * Each Linode instance can have up to 3 network interfaces.
// * VLAN interfaces cannot be updated after creation and require recreation.
// * VPC subnet IDs cannot be changed after interface creation.
// * Firewall IDs are only supported for public and VPC interfaces, not for VLAN interfaces.
// * When configuring multiple interfaces, use the `defaultRoute` setting to specify which interface should handle default routing.
//
// ## Import
//
// Interfaces can be imported using a Linode ID followed by an Interface ID, separated by a comma, e.g.
//
// ```sh
// $ pulumi import linode:index/interface:Interface example 12345,67890
// ```
type Interface struct {
	pulumi.CustomResourceState

	// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
	DefaultRoute InterfaceDefaultRouteOutput `pulumi:"defaultRoute"`
	// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
	FirewallId pulumi.IntPtrOutput `pulumi:"firewallId"`
	// The ID of the Linode to assign this interface to.
	LinodeId pulumi.IntOutput `pulumi:"linodeId"`
	// Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Public InterfacePublicPtrOutput `pulumi:"public"`
	// Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vlan InterfaceVlanPtrOutput `pulumi:"vlan"`
	// Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vpc InterfaceVpcPtrOutput `pulumi:"vpc"`
}

// NewInterface registers a new resource with the given unique name, arguments, and options.
func NewInterface(ctx *pulumi.Context,
	name string, args *InterfaceArgs, opts ...pulumi.ResourceOption) (*Interface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LinodeId == nil {
		return nil, errors.New("invalid value for required argument 'LinodeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Interface
	err := ctx.RegisterResource("linode:index/interface:Interface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterface gets an existing Interface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceState, opts ...pulumi.ResourceOption) (*Interface, error) {
	var resource Interface
	err := ctx.ReadResource("linode:index/interface:Interface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Interface resources.
type interfaceState struct {
	// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
	DefaultRoute *InterfaceDefaultRoute `pulumi:"defaultRoute"`
	// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
	FirewallId *int `pulumi:"firewallId"`
	// The ID of the Linode to assign this interface to.
	LinodeId *int `pulumi:"linodeId"`
	// Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Public *InterfacePublic `pulumi:"public"`
	// Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vlan *InterfaceVlan `pulumi:"vlan"`
	// Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vpc *InterfaceVpc `pulumi:"vpc"`
}

type InterfaceState struct {
	// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
	DefaultRoute InterfaceDefaultRoutePtrInput
	// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
	FirewallId pulumi.IntPtrInput
	// The ID of the Linode to assign this interface to.
	LinodeId pulumi.IntPtrInput
	// Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Public InterfacePublicPtrInput
	// Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vlan InterfaceVlanPtrInput
	// Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vpc InterfaceVpcPtrInput
}

func (InterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceState)(nil)).Elem()
}

type interfaceArgs struct {
	// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
	DefaultRoute *InterfaceDefaultRoute `pulumi:"defaultRoute"`
	// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
	FirewallId *int `pulumi:"firewallId"`
	// The ID of the Linode to assign this interface to.
	LinodeId int `pulumi:"linodeId"`
	// Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Public *InterfacePublic `pulumi:"public"`
	// Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vlan *InterfaceVlan `pulumi:"vlan"`
	// Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vpc *InterfaceVpc `pulumi:"vpc"`
}

// The set of arguments for constructing a Interface resource.
type InterfaceArgs struct {
	// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
	DefaultRoute InterfaceDefaultRoutePtrInput
	// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
	FirewallId pulumi.IntPtrInput
	// The ID of the Linode to assign this interface to.
	LinodeId pulumi.IntInput
	// Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Public InterfacePublicPtrInput
	// Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vlan InterfaceVlanPtrInput
	// Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
	Vpc InterfaceVpcPtrInput
}

func (InterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceArgs)(nil)).Elem()
}

type InterfaceInput interface {
	pulumi.Input

	ToInterfaceOutput() InterfaceOutput
	ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput
}

func (*Interface) ElementType() reflect.Type {
	return reflect.TypeOf((**Interface)(nil)).Elem()
}

func (i *Interface) ToInterfaceOutput() InterfaceOutput {
	return i.ToInterfaceOutputWithContext(context.Background())
}

func (i *Interface) ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOutput)
}

// InterfaceArrayInput is an input type that accepts InterfaceArray and InterfaceArrayOutput values.
// You can construct a concrete instance of `InterfaceArrayInput` via:
//
//	InterfaceArray{ InterfaceArgs{...} }
type InterfaceArrayInput interface {
	pulumi.Input

	ToInterfaceArrayOutput() InterfaceArrayOutput
	ToInterfaceArrayOutputWithContext(context.Context) InterfaceArrayOutput
}

type InterfaceArray []InterfaceInput

func (InterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interface)(nil)).Elem()
}

func (i InterfaceArray) ToInterfaceArrayOutput() InterfaceArrayOutput {
	return i.ToInterfaceArrayOutputWithContext(context.Background())
}

func (i InterfaceArray) ToInterfaceArrayOutputWithContext(ctx context.Context) InterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceArrayOutput)
}

// InterfaceMapInput is an input type that accepts InterfaceMap and InterfaceMapOutput values.
// You can construct a concrete instance of `InterfaceMapInput` via:
//
//	InterfaceMap{ "key": InterfaceArgs{...} }
type InterfaceMapInput interface {
	pulumi.Input

	ToInterfaceMapOutput() InterfaceMapOutput
	ToInterfaceMapOutputWithContext(context.Context) InterfaceMapOutput
}

type InterfaceMap map[string]InterfaceInput

func (InterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interface)(nil)).Elem()
}

func (i InterfaceMap) ToInterfaceMapOutput() InterfaceMapOutput {
	return i.ToInterfaceMapOutputWithContext(context.Background())
}

func (i InterfaceMap) ToInterfaceMapOutputWithContext(ctx context.Context) InterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceMapOutput)
}

type InterfaceOutput struct{ *pulumi.OutputState }

func (InterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Interface)(nil)).Elem()
}

func (o InterfaceOutput) ToInterfaceOutput() InterfaceOutput {
	return o
}

func (o InterfaceOutput) ToInterfaceOutputWithContext(ctx context.Context) InterfaceOutput {
	return o
}

// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
func (o InterfaceOutput) DefaultRoute() InterfaceDefaultRouteOutput {
	return o.ApplyT(func(v *Interface) InterfaceDefaultRouteOutput { return v.DefaultRoute }).(InterfaceDefaultRouteOutput)
}

// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
func (o InterfaceOutput) FirewallId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntPtrOutput { return v.FirewallId }).(pulumi.IntPtrOutput)
}

// The ID of the Linode to assign this interface to.
func (o InterfaceOutput) LinodeId() pulumi.IntOutput {
	return o.ApplyT(func(v *Interface) pulumi.IntOutput { return v.LinodeId }).(pulumi.IntOutput)
}

// Nested attributes object for a Linode public interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
func (o InterfaceOutput) Public() InterfacePublicPtrOutput {
	return o.ApplyT(func(v *Interface) InterfacePublicPtrOutput { return v.Public }).(InterfacePublicPtrOutput)
}

// Nested attributes object for a Linode VLAN interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
func (o InterfaceOutput) Vlan() InterfaceVlanPtrOutput {
	return o.ApplyT(func(v *Interface) InterfaceVlanPtrOutput { return v.Vlan }).(InterfaceVlanPtrOutput)
}

// Nested attributes object for a Linode VPC interface. Exactly one of `public`, `vlan`, or `vpc` must be specified.
func (o InterfaceOutput) Vpc() InterfaceVpcPtrOutput {
	return o.ApplyT(func(v *Interface) InterfaceVpcPtrOutput { return v.Vpc }).(InterfaceVpcPtrOutput)
}

type InterfaceArrayOutput struct{ *pulumi.OutputState }

func (InterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Interface)(nil)).Elem()
}

func (o InterfaceArrayOutput) ToInterfaceArrayOutput() InterfaceArrayOutput {
	return o
}

func (o InterfaceArrayOutput) ToInterfaceArrayOutputWithContext(ctx context.Context) InterfaceArrayOutput {
	return o
}

func (o InterfaceArrayOutput) Index(i pulumi.IntInput) InterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Interface {
		return vs[0].([]*Interface)[vs[1].(int)]
	}).(InterfaceOutput)
}

type InterfaceMapOutput struct{ *pulumi.OutputState }

func (InterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Interface)(nil)).Elem()
}

func (o InterfaceMapOutput) ToInterfaceMapOutput() InterfaceMapOutput {
	return o
}

func (o InterfaceMapOutput) ToInterfaceMapOutputWithContext(ctx context.Context) InterfaceMapOutput {
	return o
}

func (o InterfaceMapOutput) MapIndex(k pulumi.StringInput) InterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Interface {
		return vs[0].(map[string]*Interface)[vs[1].(string)]
	}).(InterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceInput)(nil)).Elem(), &Interface{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceArrayInput)(nil)).Elem(), InterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceMapInput)(nil)).Elem(), InterfaceMap{})
	pulumi.RegisterOutputType(InterfaceOutput{})
	pulumi.RegisterOutputType(InterfaceArrayOutput{})
	pulumi.RegisterOutputType(InterfaceMapOutput{})
}
