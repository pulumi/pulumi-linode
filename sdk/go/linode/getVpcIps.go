// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a list of Linode VPC IPs that match a set of filters.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
//
// Provides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).
//
// ## Example Usage
//
// The following example shows how one might use this data source to list VPC IPs.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			filtered_ips, err := linode.GetVpcIps(ctx, &linode.GetVpcIpsArgs{
//				Filters: []linode.GetVpcIpsFilter{
//					{
//						Name: "address",
//						Values: []string{
//							"10.0.0.0",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpcIps", filtered_ips.VpcIps)
//			return nil
//		})
//	}
//
// ```
//
// One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			specific_vpc_ips, err := linode.GetVpcIps(ctx, &linode.GetVpcIpsArgs{
//				VpcId: pulumi.IntRef(123),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpcIps", specific_vpc_ips.VpcIps)
//			return nil
//		})
//	}
//
// ```
//
// ## Filterable Fields
//
// * `active`
//
// * `configId`
//
// * `linodeId`
//
// * `region`
//
// * `vpcId`
func GetVpcIps(ctx *pulumi.Context, args *GetVpcIpsArgs, opts ...pulumi.InvokeOption) (*GetVpcIpsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcIpsResult
	err := ctx.Invoke("linode:index/getVpcIps:getVpcIps", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcIps.
type GetVpcIpsArgs struct {
	Filters []GetVpcIpsFilter `pulumi:"filters"`
	// The id of the parent VPC for the list of VPC IPs.
	//
	// * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
	VpcId  *int             `pulumi:"vpcId"`
	VpcIps []GetVpcIpsVpcIp `pulumi:"vpcIps"`
}

// A collection of values returned by getVpcIps.
type GetVpcIpsResult struct {
	Filters []GetVpcIpsFilter `pulumi:"filters"`
	Id      string            `pulumi:"id"`
	// The unique globally general API entity identifier for the VPC.
	VpcId  *int             `pulumi:"vpcId"`
	VpcIps []GetVpcIpsVpcIp `pulumi:"vpcIps"`
}

func GetVpcIpsOutput(ctx *pulumi.Context, args GetVpcIpsOutputArgs, opts ...pulumi.InvokeOption) GetVpcIpsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVpcIpsResultOutput, error) {
			args := v.(GetVpcIpsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("linode:index/getVpcIps:getVpcIps", args, GetVpcIpsResultOutput{}, options).(GetVpcIpsResultOutput), nil
		}).(GetVpcIpsResultOutput)
}

// A collection of arguments for invoking getVpcIps.
type GetVpcIpsOutputArgs struct {
	Filters GetVpcIpsFilterArrayInput `pulumi:"filters"`
	// The id of the parent VPC for the list of VPC IPs.
	//
	// * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
	VpcId  pulumi.IntPtrInput       `pulumi:"vpcId"`
	VpcIps GetVpcIpsVpcIpArrayInput `pulumi:"vpcIps"`
}

func (GetVpcIpsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcIpsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcIps.
type GetVpcIpsResultOutput struct{ *pulumi.OutputState }

func (GetVpcIpsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcIpsResult)(nil)).Elem()
}

func (o GetVpcIpsResultOutput) ToGetVpcIpsResultOutput() GetVpcIpsResultOutput {
	return o
}

func (o GetVpcIpsResultOutput) ToGetVpcIpsResultOutputWithContext(ctx context.Context) GetVpcIpsResultOutput {
	return o
}

func (o GetVpcIpsResultOutput) Filters() GetVpcIpsFilterArrayOutput {
	return o.ApplyT(func(v GetVpcIpsResult) []GetVpcIpsFilter { return v.Filters }).(GetVpcIpsFilterArrayOutput)
}

func (o GetVpcIpsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcIpsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique globally general API entity identifier for the VPC.
func (o GetVpcIpsResultOutput) VpcId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVpcIpsResult) *int { return v.VpcId }).(pulumi.IntPtrOutput)
}

func (o GetVpcIpsResultOutput) VpcIps() GetVpcIpsVpcIpArrayOutput {
	return o.ApplyT(func(v GetVpcIpsResult) []GetVpcIpsVpcIp { return v.VpcIps }).(GetVpcIpsVpcIpArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcIpsResultOutput{})
}
