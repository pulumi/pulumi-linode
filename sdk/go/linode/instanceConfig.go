// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Linode Instance Config resource. This can be used to create, modify, and delete Linode Instance Configs.
//
// **NOTE:** Deleting a config will shut down the attached instance if the config is in use.
//
// ## Example Usage
//
// Creating a simple bootable Linode Instance Configuration Profile:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v3/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInstance(ctx, "my-instance", &linode.InstanceArgs{
//				Label:  pulumi.String("my-instance"),
//				Type:   pulumi.String("g6-standard-1"),
//				Region: pulumi.String("us-southeast"),
//			})
//			if err != nil {
//				return err
//			}
//			boot, err := linode.NewInstanceDisk(ctx, "boot", &linode.InstanceDiskArgs{
//				Label:    pulumi.String("boot"),
//				LinodeId: my_instance.ID(),
//				Size: my_instance.Specs.ApplyT(func(specs InstanceSpecs) (int, error) {
//					return specs.Disk, nil
//				}).(pulumi.IntOutput),
//				Image:    pulumi.String("linode/ubuntu20.04"),
//				RootPass: pulumi.String("myc00lpass!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = linode.NewInstanceConfig(ctx, "my-config", &linode.InstanceConfigArgs{
//				LinodeId: my_instance.ID(),
//				Label:    pulumi.String("my-config"),
//				Devices: &InstanceConfigDevicesArgs{
//					Sda: &InstanceConfigDevicesSdaArgs{
//						DiskId: boot.ID(),
//					},
//				},
//				Booted: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating a complex bootable Instance Configuration Profile:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v3/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewInstance(ctx, "my-instance", &linode.InstanceArgs{
//				Label:  pulumi.String("my-instance"),
//				Type:   pulumi.String("g6-standard-1"),
//				Region: pulumi.String("us-southeast"),
//			})
//			if err != nil {
//				return err
//			}
//			boot, err := linode.NewInstanceDisk(ctx, "boot", &linode.InstanceDiskArgs{
//				Label:    pulumi.String("boot"),
//				LinodeId: my_instance.ID(),
//				Size: my_instance.Specs.ApplyT(func(specs InstanceSpecs) (float64, error) {
//					return specs.Disk - 512, nil
//				}).(pulumi.Float64Output),
//				Image:    pulumi.String("linode/ubuntu20.04"),
//				RootPass: pulumi.String("myc00lpass!"),
//			})
//			if err != nil {
//				return err
//			}
//			swap, err := linode.NewInstanceDisk(ctx, "swap", &linode.InstanceDiskArgs{
//				Label:      pulumi.String("swap"),
//				LinodeId:   my_instance.ID(),
//				Size:       pulumi.Int(512),
//				Filesystem: pulumi.String("swap"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = linode.NewInstanceConfig(ctx, "my-config", &linode.InstanceConfigArgs{
//				LinodeId: my_instance.ID(),
//				Label:    pulumi.String("my-config"),
//				Devices: &InstanceConfigDevicesArgs{
//					Sda: &InstanceConfigDevicesSdaArgs{
//						DiskId: boot.ID(),
//					},
//					Sdb: &InstanceConfigDevicesSdbArgs{
//						DiskId: swap.ID(),
//					},
//				},
//				Helpers: InstanceConfigHelperArray{
//					&InstanceConfigHelperArgs{
//						UpdatedbDisabled: pulumi.Bool(false),
//					},
//				},
//				Interfaces: InstanceConfigInterfaceArray{
//					&InstanceConfigInterfaceArgs{
//						Purpose: pulumi.String("public"),
//					},
//					&InstanceConfigInterfaceArgs{
//						Purpose:     pulumi.String("vlan"),
//						Label:       pulumi.String("my-vlan"),
//						IpamAddress: pulumi.String("10.0.0.2/24"),
//					},
//				},
//				Booted: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Instance Configs can be imported using the `linode_id` followed by the Instance Config `id` separated by a comma, e.g.
//
// ```sh
//
//	$ pulumi import linode:index/instanceConfig:InstanceConfig my-config 1234567,7654321
//
// ```
//
//	The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for various Linode resource types.
type InstanceConfig struct {
	pulumi.CustomResourceState

	// If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.
	Booted pulumi.BoolOutput `pulumi:"booted"`
	// Optional field for arbitrary User comments on this Config.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// A dictionary of device disks to use as a device map in a Linode’s configuration profile.
	Devices InstanceConfigDevicesOutput `pulumi:"devices"`
	// Helpers enabled when booting to this Linode Config.
	Helpers InstanceConfigHelperArrayOutput `pulumi:"helpers"`
	// An array of Network Interfaces to add to this Linode’s Configuration Profile.
	Interfaces InstanceConfigInterfaceArrayOutput `pulumi:"interfaces"`
	// A Kernel ID to boot a Linode with. (default `linode/latest-64bit`)
	Kernel pulumi.StringPtrOutput `pulumi:"kernel"`
	// The name of this interface.
	Label pulumi.StringOutput `pulumi:"label"`
	// The ID of the Linode to create this configuration profile under.
	LinodeId pulumi.IntOutput `pulumi:"linodeId"`
	// The memory limit of the Config. Defaults to the total ram of the Linode.
	MemoryLimit pulumi.IntOutput `pulumi:"memoryLimit"`
	// The root device to boot. (default `/dev/sda`)
	RootDevice pulumi.StringPtrOutput `pulumi:"rootDevice"`
	// Defines the state of your Linode after booting. (`default`, `single`, `binbash`)
	RunLevel pulumi.StringPtrOutput `pulumi:"runLevel"`
	// Controls the virtualization mode. (`paravirt`, `fullvirt`)
	VirtMode pulumi.StringPtrOutput `pulumi:"virtMode"`
}

// NewInstanceConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceConfig(ctx *pulumi.Context,
	name string, args *InstanceConfigArgs, opts ...pulumi.ResourceOption) (*InstanceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.LinodeId == nil {
		return nil, errors.New("invalid value for required argument 'LinodeId'")
	}
	var resource InstanceConfig
	err := ctx.RegisterResource("linode:index/instanceConfig:InstanceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceConfig gets an existing InstanceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceConfigState, opts ...pulumi.ResourceOption) (*InstanceConfig, error) {
	var resource InstanceConfig
	err := ctx.ReadResource("linode:index/instanceConfig:InstanceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceConfig resources.
type instanceConfigState struct {
	// If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.
	Booted *bool `pulumi:"booted"`
	// Optional field for arbitrary User comments on this Config.
	Comments *string `pulumi:"comments"`
	// A dictionary of device disks to use as a device map in a Linode’s configuration profile.
	Devices *InstanceConfigDevices `pulumi:"devices"`
	// Helpers enabled when booting to this Linode Config.
	Helpers []InstanceConfigHelper `pulumi:"helpers"`
	// An array of Network Interfaces to add to this Linode’s Configuration Profile.
	Interfaces []InstanceConfigInterface `pulumi:"interfaces"`
	// A Kernel ID to boot a Linode with. (default `linode/latest-64bit`)
	Kernel *string `pulumi:"kernel"`
	// The name of this interface.
	Label *string `pulumi:"label"`
	// The ID of the Linode to create this configuration profile under.
	LinodeId *int `pulumi:"linodeId"`
	// The memory limit of the Config. Defaults to the total ram of the Linode.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The root device to boot. (default `/dev/sda`)
	RootDevice *string `pulumi:"rootDevice"`
	// Defines the state of your Linode after booting. (`default`, `single`, `binbash`)
	RunLevel *string `pulumi:"runLevel"`
	// Controls the virtualization mode. (`paravirt`, `fullvirt`)
	VirtMode *string `pulumi:"virtMode"`
}

type InstanceConfigState struct {
	// If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.
	Booted pulumi.BoolPtrInput
	// Optional field for arbitrary User comments on this Config.
	Comments pulumi.StringPtrInput
	// A dictionary of device disks to use as a device map in a Linode’s configuration profile.
	Devices InstanceConfigDevicesPtrInput
	// Helpers enabled when booting to this Linode Config.
	Helpers InstanceConfigHelperArrayInput
	// An array of Network Interfaces to add to this Linode’s Configuration Profile.
	Interfaces InstanceConfigInterfaceArrayInput
	// A Kernel ID to boot a Linode with. (default `linode/latest-64bit`)
	Kernel pulumi.StringPtrInput
	// The name of this interface.
	Label pulumi.StringPtrInput
	// The ID of the Linode to create this configuration profile under.
	LinodeId pulumi.IntPtrInput
	// The memory limit of the Config. Defaults to the total ram of the Linode.
	MemoryLimit pulumi.IntPtrInput
	// The root device to boot. (default `/dev/sda`)
	RootDevice pulumi.StringPtrInput
	// Defines the state of your Linode after booting. (`default`, `single`, `binbash`)
	RunLevel pulumi.StringPtrInput
	// Controls the virtualization mode. (`paravirt`, `fullvirt`)
	VirtMode pulumi.StringPtrInput
}

func (InstanceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceConfigState)(nil)).Elem()
}

type instanceConfigArgs struct {
	// If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.
	Booted *bool `pulumi:"booted"`
	// Optional field for arbitrary User comments on this Config.
	Comments *string `pulumi:"comments"`
	// A dictionary of device disks to use as a device map in a Linode’s configuration profile.
	Devices *InstanceConfigDevices `pulumi:"devices"`
	// Helpers enabled when booting to this Linode Config.
	Helpers []InstanceConfigHelper `pulumi:"helpers"`
	// An array of Network Interfaces to add to this Linode’s Configuration Profile.
	Interfaces []InstanceConfigInterface `pulumi:"interfaces"`
	// A Kernel ID to boot a Linode with. (default `linode/latest-64bit`)
	Kernel *string `pulumi:"kernel"`
	// The name of this interface.
	Label string `pulumi:"label"`
	// The ID of the Linode to create this configuration profile under.
	LinodeId int `pulumi:"linodeId"`
	// The memory limit of the Config. Defaults to the total ram of the Linode.
	MemoryLimit *int `pulumi:"memoryLimit"`
	// The root device to boot. (default `/dev/sda`)
	RootDevice *string `pulumi:"rootDevice"`
	// Defines the state of your Linode after booting. (`default`, `single`, `binbash`)
	RunLevel *string `pulumi:"runLevel"`
	// Controls the virtualization mode. (`paravirt`, `fullvirt`)
	VirtMode *string `pulumi:"virtMode"`
}

// The set of arguments for constructing a InstanceConfig resource.
type InstanceConfigArgs struct {
	// If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.
	Booted pulumi.BoolPtrInput
	// Optional field for arbitrary User comments on this Config.
	Comments pulumi.StringPtrInput
	// A dictionary of device disks to use as a device map in a Linode’s configuration profile.
	Devices InstanceConfigDevicesPtrInput
	// Helpers enabled when booting to this Linode Config.
	Helpers InstanceConfigHelperArrayInput
	// An array of Network Interfaces to add to this Linode’s Configuration Profile.
	Interfaces InstanceConfigInterfaceArrayInput
	// A Kernel ID to boot a Linode with. (default `linode/latest-64bit`)
	Kernel pulumi.StringPtrInput
	// The name of this interface.
	Label pulumi.StringInput
	// The ID of the Linode to create this configuration profile under.
	LinodeId pulumi.IntInput
	// The memory limit of the Config. Defaults to the total ram of the Linode.
	MemoryLimit pulumi.IntPtrInput
	// The root device to boot. (default `/dev/sda`)
	RootDevice pulumi.StringPtrInput
	// Defines the state of your Linode after booting. (`default`, `single`, `binbash`)
	RunLevel pulumi.StringPtrInput
	// Controls the virtualization mode. (`paravirt`, `fullvirt`)
	VirtMode pulumi.StringPtrInput
}

func (InstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceConfigArgs)(nil)).Elem()
}

type InstanceConfigInput interface {
	pulumi.Input

	ToInstanceConfigOutput() InstanceConfigOutput
	ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput
}

func (*InstanceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfig)(nil)).Elem()
}

func (i *InstanceConfig) ToInstanceConfigOutput() InstanceConfigOutput {
	return i.ToInstanceConfigOutputWithContext(context.Background())
}

func (i *InstanceConfig) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigOutput)
}

// InstanceConfigArrayInput is an input type that accepts InstanceConfigArray and InstanceConfigArrayOutput values.
// You can construct a concrete instance of `InstanceConfigArrayInput` via:
//
//	InstanceConfigArray{ InstanceConfigArgs{...} }
type InstanceConfigArrayInput interface {
	pulumi.Input

	ToInstanceConfigArrayOutput() InstanceConfigArrayOutput
	ToInstanceConfigArrayOutputWithContext(context.Context) InstanceConfigArrayOutput
}

type InstanceConfigArray []InstanceConfigInput

func (InstanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return i.ToInstanceConfigArrayOutputWithContext(context.Background())
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigArrayOutput)
}

// InstanceConfigMapInput is an input type that accepts InstanceConfigMap and InstanceConfigMapOutput values.
// You can construct a concrete instance of `InstanceConfigMapInput` via:
//
//	InstanceConfigMap{ "key": InstanceConfigArgs{...} }
type InstanceConfigMapInput interface {
	pulumi.Input

	ToInstanceConfigMapOutput() InstanceConfigMapOutput
	ToInstanceConfigMapOutputWithContext(context.Context) InstanceConfigMapOutput
}

type InstanceConfigMap map[string]InstanceConfigInput

func (InstanceConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigMap) ToInstanceConfigMapOutput() InstanceConfigMapOutput {
	return i.ToInstanceConfigMapOutputWithContext(context.Background())
}

func (i InstanceConfigMap) ToInstanceConfigMapOutputWithContext(ctx context.Context) InstanceConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigMapOutput)
}

type InstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigOutput) ToInstanceConfigOutput() InstanceConfigOutput {
	return o
}

func (o InstanceConfigOutput) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return o
}

// If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.
func (o InstanceConfigOutput) Booted() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.BoolOutput { return v.Booted }).(pulumi.BoolOutput)
}

// Optional field for arbitrary User comments on this Config.
func (o InstanceConfigOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// A dictionary of device disks to use as a device map in a Linode’s configuration profile.
func (o InstanceConfigOutput) Devices() InstanceConfigDevicesOutput {
	return o.ApplyT(func(v *InstanceConfig) InstanceConfigDevicesOutput { return v.Devices }).(InstanceConfigDevicesOutput)
}

// Helpers enabled when booting to this Linode Config.
func (o InstanceConfigOutput) Helpers() InstanceConfigHelperArrayOutput {
	return o.ApplyT(func(v *InstanceConfig) InstanceConfigHelperArrayOutput { return v.Helpers }).(InstanceConfigHelperArrayOutput)
}

// An array of Network Interfaces to add to this Linode’s Configuration Profile.
func (o InstanceConfigOutput) Interfaces() InstanceConfigInterfaceArrayOutput {
	return o.ApplyT(func(v *InstanceConfig) InstanceConfigInterfaceArrayOutput { return v.Interfaces }).(InstanceConfigInterfaceArrayOutput)
}

// A Kernel ID to boot a Linode with. (default `linode/latest-64bit`)
func (o InstanceConfigOutput) Kernel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringPtrOutput { return v.Kernel }).(pulumi.StringPtrOutput)
}

// The name of this interface.
func (o InstanceConfigOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The ID of the Linode to create this configuration profile under.
func (o InstanceConfigOutput) LinodeId() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.IntOutput { return v.LinodeId }).(pulumi.IntOutput)
}

// The memory limit of the Config. Defaults to the total ram of the Linode.
func (o InstanceConfigOutput) MemoryLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.IntOutput { return v.MemoryLimit }).(pulumi.IntOutput)
}

// The root device to boot. (default `/dev/sda`)
func (o InstanceConfigOutput) RootDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringPtrOutput { return v.RootDevice }).(pulumi.StringPtrOutput)
}

// Defines the state of your Linode after booting. (`default`, `single`, `binbash`)
func (o InstanceConfigOutput) RunLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringPtrOutput { return v.RunLevel }).(pulumi.StringPtrOutput)
}

// Controls the virtualization mode. (`paravirt`, `fullvirt`)
func (o InstanceConfigOutput) VirtMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringPtrOutput { return v.VirtMode }).(pulumi.StringPtrOutput)
}

type InstanceConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) Index(i pulumi.IntInput) InstanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceConfig {
		return vs[0].([]*InstanceConfig)[vs[1].(int)]
	}).(InstanceConfigOutput)
}

type InstanceConfigMapOutput struct{ *pulumi.OutputState }

func (InstanceConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigMapOutput) ToInstanceConfigMapOutput() InstanceConfigMapOutput {
	return o
}

func (o InstanceConfigMapOutput) ToInstanceConfigMapOutputWithContext(ctx context.Context) InstanceConfigMapOutput {
	return o
}

func (o InstanceConfigMapOutput) MapIndex(k pulumi.StringInput) InstanceConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceConfig {
		return vs[0].(map[string]*InstanceConfig)[vs[1].(string)]
	}).(InstanceConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigInput)(nil)).Elem(), &InstanceConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigArrayInput)(nil)).Elem(), InstanceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigMapInput)(nil)).Elem(), InstanceConfigMap{})
	pulumi.RegisterOutputType(InstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigMapOutput{})
}
