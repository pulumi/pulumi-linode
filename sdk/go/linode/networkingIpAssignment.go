// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the assignment of multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in a specified region.
//
// For more information, see the corresponding [API documentation](https://techdocs.akamai.com/linode-api/reference/post-assign-ips).
type NetworkingIpAssignment struct {
	pulumi.CustomResourceState

	// A list of IP/Linode assignments to apply.
	Assignments NetworkingIpAssignmentAssignmentArrayOutput `pulumi:"assignments"`
	// The region where the IP addresses will be assigned.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewNetworkingIpAssignment registers a new resource with the given unique name, arguments, and options.
func NewNetworkingIpAssignment(ctx *pulumi.Context,
	name string, args *NetworkingIpAssignmentArgs, opts ...pulumi.ResourceOption) (*NetworkingIpAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkingIpAssignment
	err := ctx.RegisterResource("linode:index/networkingIpAssignment:NetworkingIpAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingIpAssignment gets an existing NetworkingIpAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingIpAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingIpAssignmentState, opts ...pulumi.ResourceOption) (*NetworkingIpAssignment, error) {
	var resource NetworkingIpAssignment
	err := ctx.ReadResource("linode:index/networkingIpAssignment:NetworkingIpAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingIpAssignment resources.
type networkingIpAssignmentState struct {
	// A list of IP/Linode assignments to apply.
	Assignments []NetworkingIpAssignmentAssignment `pulumi:"assignments"`
	// The region where the IP addresses will be assigned.
	Region *string `pulumi:"region"`
}

type NetworkingIpAssignmentState struct {
	// A list of IP/Linode assignments to apply.
	Assignments NetworkingIpAssignmentAssignmentArrayInput
	// The region where the IP addresses will be assigned.
	Region pulumi.StringPtrInput
}

func (NetworkingIpAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingIpAssignmentState)(nil)).Elem()
}

type networkingIpAssignmentArgs struct {
	// A list of IP/Linode assignments to apply.
	Assignments []NetworkingIpAssignmentAssignment `pulumi:"assignments"`
	// The region where the IP addresses will be assigned.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a NetworkingIpAssignment resource.
type NetworkingIpAssignmentArgs struct {
	// A list of IP/Linode assignments to apply.
	Assignments NetworkingIpAssignmentAssignmentArrayInput
	// The region where the IP addresses will be assigned.
	Region pulumi.StringInput
}

func (NetworkingIpAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingIpAssignmentArgs)(nil)).Elem()
}

type NetworkingIpAssignmentInput interface {
	pulumi.Input

	ToNetworkingIpAssignmentOutput() NetworkingIpAssignmentOutput
	ToNetworkingIpAssignmentOutputWithContext(ctx context.Context) NetworkingIpAssignmentOutput
}

func (*NetworkingIpAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingIpAssignment)(nil)).Elem()
}

func (i *NetworkingIpAssignment) ToNetworkingIpAssignmentOutput() NetworkingIpAssignmentOutput {
	return i.ToNetworkingIpAssignmentOutputWithContext(context.Background())
}

func (i *NetworkingIpAssignment) ToNetworkingIpAssignmentOutputWithContext(ctx context.Context) NetworkingIpAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingIpAssignmentOutput)
}

// NetworkingIpAssignmentArrayInput is an input type that accepts NetworkingIpAssignmentArray and NetworkingIpAssignmentArrayOutput values.
// You can construct a concrete instance of `NetworkingIpAssignmentArrayInput` via:
//
//	NetworkingIpAssignmentArray{ NetworkingIpAssignmentArgs{...} }
type NetworkingIpAssignmentArrayInput interface {
	pulumi.Input

	ToNetworkingIpAssignmentArrayOutput() NetworkingIpAssignmentArrayOutput
	ToNetworkingIpAssignmentArrayOutputWithContext(context.Context) NetworkingIpAssignmentArrayOutput
}

type NetworkingIpAssignmentArray []NetworkingIpAssignmentInput

func (NetworkingIpAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingIpAssignment)(nil)).Elem()
}

func (i NetworkingIpAssignmentArray) ToNetworkingIpAssignmentArrayOutput() NetworkingIpAssignmentArrayOutput {
	return i.ToNetworkingIpAssignmentArrayOutputWithContext(context.Background())
}

func (i NetworkingIpAssignmentArray) ToNetworkingIpAssignmentArrayOutputWithContext(ctx context.Context) NetworkingIpAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingIpAssignmentArrayOutput)
}

// NetworkingIpAssignmentMapInput is an input type that accepts NetworkingIpAssignmentMap and NetworkingIpAssignmentMapOutput values.
// You can construct a concrete instance of `NetworkingIpAssignmentMapInput` via:
//
//	NetworkingIpAssignmentMap{ "key": NetworkingIpAssignmentArgs{...} }
type NetworkingIpAssignmentMapInput interface {
	pulumi.Input

	ToNetworkingIpAssignmentMapOutput() NetworkingIpAssignmentMapOutput
	ToNetworkingIpAssignmentMapOutputWithContext(context.Context) NetworkingIpAssignmentMapOutput
}

type NetworkingIpAssignmentMap map[string]NetworkingIpAssignmentInput

func (NetworkingIpAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingIpAssignment)(nil)).Elem()
}

func (i NetworkingIpAssignmentMap) ToNetworkingIpAssignmentMapOutput() NetworkingIpAssignmentMapOutput {
	return i.ToNetworkingIpAssignmentMapOutputWithContext(context.Background())
}

func (i NetworkingIpAssignmentMap) ToNetworkingIpAssignmentMapOutputWithContext(ctx context.Context) NetworkingIpAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingIpAssignmentMapOutput)
}

type NetworkingIpAssignmentOutput struct{ *pulumi.OutputState }

func (NetworkingIpAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingIpAssignment)(nil)).Elem()
}

func (o NetworkingIpAssignmentOutput) ToNetworkingIpAssignmentOutput() NetworkingIpAssignmentOutput {
	return o
}

func (o NetworkingIpAssignmentOutput) ToNetworkingIpAssignmentOutputWithContext(ctx context.Context) NetworkingIpAssignmentOutput {
	return o
}

// A list of IP/Linode assignments to apply.
func (o NetworkingIpAssignmentOutput) Assignments() NetworkingIpAssignmentAssignmentArrayOutput {
	return o.ApplyT(func(v *NetworkingIpAssignment) NetworkingIpAssignmentAssignmentArrayOutput { return v.Assignments }).(NetworkingIpAssignmentAssignmentArrayOutput)
}

// The region where the IP addresses will be assigned.
func (o NetworkingIpAssignmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingIpAssignment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type NetworkingIpAssignmentArrayOutput struct{ *pulumi.OutputState }

func (NetworkingIpAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingIpAssignment)(nil)).Elem()
}

func (o NetworkingIpAssignmentArrayOutput) ToNetworkingIpAssignmentArrayOutput() NetworkingIpAssignmentArrayOutput {
	return o
}

func (o NetworkingIpAssignmentArrayOutput) ToNetworkingIpAssignmentArrayOutputWithContext(ctx context.Context) NetworkingIpAssignmentArrayOutput {
	return o
}

func (o NetworkingIpAssignmentArrayOutput) Index(i pulumi.IntInput) NetworkingIpAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingIpAssignment {
		return vs[0].([]*NetworkingIpAssignment)[vs[1].(int)]
	}).(NetworkingIpAssignmentOutput)
}

type NetworkingIpAssignmentMapOutput struct{ *pulumi.OutputState }

func (NetworkingIpAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingIpAssignment)(nil)).Elem()
}

func (o NetworkingIpAssignmentMapOutput) ToNetworkingIpAssignmentMapOutput() NetworkingIpAssignmentMapOutput {
	return o
}

func (o NetworkingIpAssignmentMapOutput) ToNetworkingIpAssignmentMapOutputWithContext(ctx context.Context) NetworkingIpAssignmentMapOutput {
	return o
}

func (o NetworkingIpAssignmentMapOutput) MapIndex(k pulumi.StringInput) NetworkingIpAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingIpAssignment {
		return vs[0].(map[string]*NetworkingIpAssignment)[vs[1].(string)]
	}).(NetworkingIpAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingIpAssignmentInput)(nil)).Elem(), &NetworkingIpAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingIpAssignmentArrayInput)(nil)).Elem(), NetworkingIpAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingIpAssignmentMapInput)(nil)).Elem(), NetworkingIpAssignmentMap{})
	pulumi.RegisterOutputType(NetworkingIpAssignmentOutput{})
	pulumi.RegisterOutputType(NetworkingIpAssignmentArrayOutput{})
	pulumi.RegisterOutputType(NetworkingIpAssignmentMapOutput{})
}
