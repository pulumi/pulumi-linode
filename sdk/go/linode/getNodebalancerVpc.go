// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `apiVersion` provider argument must be set to `v4beta`.
//
// Provides information about a NodeBalancer VPC configuration.
// For more information, see the corresponding [Linode APIv4 documentation](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-vpc-config).
//
// ## Example Usage
//
// Retrieve information about a NodeBalancer VPC configuration:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.GetNodebalancerVpc(ctx, &linode.GetNodebalancerVpcArgs{
//				NodebalancerId: 123,
//				Id:             456,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNodebalancerVpc(ctx *pulumi.Context, args *GetNodebalancerVpcArgs, opts ...pulumi.InvokeOption) (*GetNodebalancerVpcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodebalancerVpcResult
	err := ctx.Invoke("linode:index/getNodebalancerVpc:getNodebalancerVpc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodebalancerVpc.
type GetNodebalancerVpcArgs struct {
	// The ID of the VPC configuration.
	Id int `pulumi:"id"`
	// The ID of the parent NodeBalancer of the VPC configuration.
	NodebalancerId int `pulumi:"nodebalancerId"`
}

// A collection of values returned by getNodebalancerVpc.
type GetNodebalancerVpcResult struct {
	Id int `pulumi:"id"`
	// A CIDR range for the VPC's IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
	Ipv4Range      string `pulumi:"ipv4Range"`
	NodebalancerId int    `pulumi:"nodebalancerId"`
	// The ID of this configuration's VPC subnet.
	SubnetId int `pulumi:"subnetId"`
	// The ID of this configuration's VPC.
	VpcId int `pulumi:"vpcId"`
}

func GetNodebalancerVpcOutput(ctx *pulumi.Context, args GetNodebalancerVpcOutputArgs, opts ...pulumi.InvokeOption) GetNodebalancerVpcResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNodebalancerVpcResultOutput, error) {
			args := v.(GetNodebalancerVpcArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("linode:index/getNodebalancerVpc:getNodebalancerVpc", args, GetNodebalancerVpcResultOutput{}, options).(GetNodebalancerVpcResultOutput), nil
		}).(GetNodebalancerVpcResultOutput)
}

// A collection of arguments for invoking getNodebalancerVpc.
type GetNodebalancerVpcOutputArgs struct {
	// The ID of the VPC configuration.
	Id pulumi.IntInput `pulumi:"id"`
	// The ID of the parent NodeBalancer of the VPC configuration.
	NodebalancerId pulumi.IntInput `pulumi:"nodebalancerId"`
}

func (GetNodebalancerVpcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodebalancerVpcArgs)(nil)).Elem()
}

// A collection of values returned by getNodebalancerVpc.
type GetNodebalancerVpcResultOutput struct{ *pulumi.OutputState }

func (GetNodebalancerVpcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodebalancerVpcResult)(nil)).Elem()
}

func (o GetNodebalancerVpcResultOutput) ToGetNodebalancerVpcResultOutput() GetNodebalancerVpcResultOutput {
	return o
}

func (o GetNodebalancerVpcResultOutput) ToGetNodebalancerVpcResultOutputWithContext(ctx context.Context) GetNodebalancerVpcResultOutput {
	return o
}

func (o GetNodebalancerVpcResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodebalancerVpcResult) int { return v.Id }).(pulumi.IntOutput)
}

// A CIDR range for the VPC's IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
func (o GetNodebalancerVpcResultOutput) Ipv4Range() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodebalancerVpcResult) string { return v.Ipv4Range }).(pulumi.StringOutput)
}

func (o GetNodebalancerVpcResultOutput) NodebalancerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodebalancerVpcResult) int { return v.NodebalancerId }).(pulumi.IntOutput)
}

// The ID of this configuration's VPC subnet.
func (o GetNodebalancerVpcResultOutput) SubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodebalancerVpcResult) int { return v.SubnetId }).(pulumi.IntOutput)
}

// The ID of this configuration's VPC.
func (o GetNodebalancerVpcResultOutput) VpcId() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodebalancerVpcResult) int { return v.VpcId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodebalancerVpcResultOutput{})
}
