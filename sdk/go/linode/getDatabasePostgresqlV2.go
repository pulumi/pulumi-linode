// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a Linode PostgreSQL Database.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).
//
// ## Example Usage
//
// Get information about a PostgreSQL database:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.LookupDatabasePostgresqlV2(ctx, &linode.LookupDatabasePostgresqlV2Args{
//				Id: "12345",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## pendingUpdates
//
// The following arguments are exposed by each entry in the `pendingUpdates` attribute:
//
// * `deadline` - The time when a mandatory update needs to be applied.
//
// * `description` - A description of the update.
//
// * `plannedFor` - The date and time a maintenance update will be applied.
//
// ## updates
//
// The following arguments are supported in the `updates` specification block:
//
// * `dayOfWeek` - The day to perform maintenance. (`monday`, `tuesday`, ...)
//
// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
//
// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
//
// * `hourOfDay` - The hour to begin maintenance based in UTC time. (`0`..`23`)
func LookupDatabasePostgresqlV2(ctx *pulumi.Context, args *LookupDatabasePostgresqlV2Args, opts ...pulumi.InvokeOption) (*LookupDatabasePostgresqlV2Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabasePostgresqlV2Result
	err := ctx.Invoke("linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabasePostgresqlV2.
type LookupDatabasePostgresqlV2Args struct {
	// The ID of the PostgreSQL database.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDatabasePostgresqlV2.
type LookupDatabasePostgresqlV2Result struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database.
	CaCert string `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize int `pulumi:"clusterSize"`
	// When this Managed Database was created.
	Created string `pulumi:"created"`
	// Whether the Managed Databases is encrypted.
	Encrypted bool `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `postgresql`)
	Engine string `pulumi:"engine"`
	// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
	EngineId string `pulumi:"engineId"`
	// The database timestamp from which it was restored.
	ForkRestoreTime string `pulumi:"forkRestoreTime"`
	// The ID of the database that was forked from.
	ForkSource int `pulumi:"forkSource"`
	// The primary host for the Managed Database.
	HostPrimary string `pulumi:"hostPrimary"`
	// The secondary/private host for the managed database.
	HostSecondary string `pulumi:"hostSecondary"`
	Id            string `pulumi:"id"`
	// A unique, user-defined string referring to the Managed Database.
	Label             string                                 `pulumi:"label"`
	Members           map[string]string                      `pulumi:"members"`
	OldestRestoreTime string                                 `pulumi:"oldestRestoreTime"`
	PendingUpdates    []GetDatabasePostgresqlV2PendingUpdate `pulumi:"pendingUpdates"`
	// The back-end platform for relational databases used by the service.
	Platform string `pulumi:"platform"`
	// The access port for this Managed Database.
	Port int `pulumi:"port"`
	// The region to use for the Managed Database.
	Region string `pulumi:"region"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword string `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername string `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database.
	SslConnection bool `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status string `pulumi:"status"`
	// Whether this Managed Database is suspended.
	Suspended bool `pulumi:"suspended"`
	// The Linode Instance type used for the nodes of the Managed Database.
	Type string `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated string                         `pulumi:"updated"`
	Updates GetDatabasePostgresqlV2Updates `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `13.2`)
	Version string `pulumi:"version"`
}

func LookupDatabasePostgresqlV2Output(ctx *pulumi.Context, args LookupDatabasePostgresqlV2OutputArgs, opts ...pulumi.InvokeOption) LookupDatabasePostgresqlV2ResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDatabasePostgresqlV2ResultOutput, error) {
			args := v.(LookupDatabasePostgresqlV2Args)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2", args, LookupDatabasePostgresqlV2ResultOutput{}, options).(LookupDatabasePostgresqlV2ResultOutput), nil
		}).(LookupDatabasePostgresqlV2ResultOutput)
}

// A collection of arguments for invoking getDatabasePostgresqlV2.
type LookupDatabasePostgresqlV2OutputArgs struct {
	// The ID of the PostgreSQL database.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDatabasePostgresqlV2OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasePostgresqlV2Args)(nil)).Elem()
}

// A collection of values returned by getDatabasePostgresqlV2.
type LookupDatabasePostgresqlV2ResultOutput struct{ *pulumi.OutputState }

func (LookupDatabasePostgresqlV2ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabasePostgresqlV2Result)(nil)).Elem()
}

func (o LookupDatabasePostgresqlV2ResultOutput) ToLookupDatabasePostgresqlV2ResultOutput() LookupDatabasePostgresqlV2ResultOutput {
	return o
}

func (o LookupDatabasePostgresqlV2ResultOutput) ToLookupDatabasePostgresqlV2ResultOutputWithContext(ctx context.Context) LookupDatabasePostgresqlV2ResultOutput {
	return o
}

// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
func (o LookupDatabasePostgresqlV2ResultOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The base64-encoded SSL CA certificate for the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.CaCert }).(pulumi.StringOutput)
}

// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
func (o LookupDatabasePostgresqlV2ResultOutput) ClusterSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) int { return v.ClusterSize }).(pulumi.IntOutput)
}

// When this Managed Database was created.
func (o LookupDatabasePostgresqlV2ResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Created }).(pulumi.StringOutput)
}

// Whether the Managed Databases is encrypted.
func (o LookupDatabasePostgresqlV2ResultOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) bool { return v.Encrypted }).(pulumi.BoolOutput)
}

// The Managed Database engine. (e.g. `postgresql`)
func (o LookupDatabasePostgresqlV2ResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Engine }).(pulumi.StringOutput)
}

// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
func (o LookupDatabasePostgresqlV2ResultOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.EngineId }).(pulumi.StringOutput)
}

// The database timestamp from which it was restored.
func (o LookupDatabasePostgresqlV2ResultOutput) ForkRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.ForkRestoreTime }).(pulumi.StringOutput)
}

// The ID of the database that was forked from.
func (o LookupDatabasePostgresqlV2ResultOutput) ForkSource() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) int { return v.ForkSource }).(pulumi.IntOutput)
}

// The primary host for the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) HostPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.HostPrimary }).(pulumi.StringOutput)
}

// The secondary/private host for the managed database.
func (o LookupDatabasePostgresqlV2ResultOutput) HostSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.HostSecondary }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlV2ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Id }).(pulumi.StringOutput)
}

// A unique, user-defined string referring to the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Label }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlV2ResultOutput) Members() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) map[string]string { return v.Members }).(pulumi.StringMapOutput)
}

func (o LookupDatabasePostgresqlV2ResultOutput) OldestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.OldestRestoreTime }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlV2ResultOutput) PendingUpdates() GetDatabasePostgresqlV2PendingUpdateArrayOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) []GetDatabasePostgresqlV2PendingUpdate {
		return v.PendingUpdates
	}).(GetDatabasePostgresqlV2PendingUpdateArrayOutput)
}

// The back-end platform for relational databases used by the service.
func (o LookupDatabasePostgresqlV2ResultOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Platform }).(pulumi.StringOutput)
}

// The access port for this Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) int { return v.Port }).(pulumi.IntOutput)
}

// The region to use for the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Region }).(pulumi.StringOutput)
}

// The randomly-generated root password for the Managed Database instance.
func (o LookupDatabasePostgresqlV2ResultOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.RootPassword }).(pulumi.StringOutput)
}

// The root username for the Managed Database instance.
func (o LookupDatabasePostgresqlV2ResultOutput) RootUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.RootUsername }).(pulumi.StringOutput)
}

// Whether to require SSL credentials to establish a connection to the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) SslConnection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) bool { return v.SslConnection }).(pulumi.BoolOutput)
}

// The operating status of the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Status }).(pulumi.StringOutput)
}

// Whether this Managed Database is suspended.
func (o LookupDatabasePostgresqlV2ResultOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) bool { return v.Suspended }).(pulumi.BoolOutput)
}

// The Linode Instance type used for the nodes of the Managed Database.
func (o LookupDatabasePostgresqlV2ResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Type }).(pulumi.StringOutput)
}

// When this Managed Database was last updated.
func (o LookupDatabasePostgresqlV2ResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Updated }).(pulumi.StringOutput)
}

func (o LookupDatabasePostgresqlV2ResultOutput) Updates() GetDatabasePostgresqlV2UpdatesOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) GetDatabasePostgresqlV2Updates { return v.Updates }).(GetDatabasePostgresqlV2UpdatesOutput)
}

// The Managed Database engine version. (e.g. `13.2`)
func (o LookupDatabasePostgresqlV2ResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabasePostgresqlV2Result) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabasePostgresqlV2ResultOutput{})
}
