// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package linode

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type NodeBalancerNode struct {
	pulumi.CustomResourceState

	// The private IP Address where this backend can be reached. This must be a private IP address.
	Address pulumi.StringOutput `pulumi:"address"`
	// The ID of the NodeBalancerConfig to access.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The label of the Linode NodeBalancer Node. This is for display purposes only.
	Label pulumi.StringOutput `pulumi:"label"`
	// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The ID of the NodeBalancer to access.
	NodebalancerId pulumi.IntOutput `pulumi:"nodebalancerId"`
	// The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
	Status pulumi.StringOutput `pulumi:"status"`
	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewNodeBalancerNode registers a new resource with the given unique name, arguments, and options.
func NewNodeBalancerNode(ctx *pulumi.Context,
	name string, args *NodeBalancerNodeArgs, opts ...pulumi.ResourceOption) (*NodeBalancerNode, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.ConfigId == nil {
		return nil, errors.New("missing required argument 'ConfigId'")
	}
	if args == nil || args.Label == nil {
		return nil, errors.New("missing required argument 'Label'")
	}
	if args == nil || args.NodebalancerId == nil {
		return nil, errors.New("missing required argument 'NodebalancerId'")
	}
	if args == nil {
		args = &NodeBalancerNodeArgs{}
	}
	var resource NodeBalancerNode
	err := ctx.RegisterResource("linode:index/nodeBalancerNode:NodeBalancerNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeBalancerNode gets an existing NodeBalancerNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeBalancerNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeBalancerNodeState, opts ...pulumi.ResourceOption) (*NodeBalancerNode, error) {
	var resource NodeBalancerNode
	err := ctx.ReadResource("linode:index/nodeBalancerNode:NodeBalancerNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeBalancerNode resources.
type nodeBalancerNodeState struct {
	// The private IP Address where this backend can be reached. This must be a private IP address.
	Address *string `pulumi:"address"`
	// The ID of the NodeBalancerConfig to access.
	ConfigId *int `pulumi:"configId"`
	// The label of the Linode NodeBalancer Node. This is for display purposes only.
	Label *string `pulumi:"label"`
	// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it
	Mode *string `pulumi:"mode"`
	// The ID of the NodeBalancer to access.
	NodebalancerId *int `pulumi:"nodebalancerId"`
	// The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
	Status *string `pulumi:"status"`
	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
	Weight *int `pulumi:"weight"`
}

type NodeBalancerNodeState struct {
	// The private IP Address where this backend can be reached. This must be a private IP address.
	Address pulumi.StringPtrInput
	// The ID of the NodeBalancerConfig to access.
	ConfigId pulumi.IntPtrInput
	// The label of the Linode NodeBalancer Node. This is for display purposes only.
	Label pulumi.StringPtrInput
	// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it
	Mode pulumi.StringPtrInput
	// The ID of the NodeBalancer to access.
	NodebalancerId pulumi.IntPtrInput
	// The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
	Status pulumi.StringPtrInput
	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
	Weight pulumi.IntPtrInput
}

func (NodeBalancerNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeBalancerNodeState)(nil)).Elem()
}

type nodeBalancerNodeArgs struct {
	// The private IP Address where this backend can be reached. This must be a private IP address.
	Address string `pulumi:"address"`
	// The ID of the NodeBalancerConfig to access.
	ConfigId int `pulumi:"configId"`
	// The label of the Linode NodeBalancer Node. This is for display purposes only.
	Label string `pulumi:"label"`
	// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it
	Mode *string `pulumi:"mode"`
	// The ID of the NodeBalancer to access.
	NodebalancerId int `pulumi:"nodebalancerId"`
	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a NodeBalancerNode resource.
type NodeBalancerNodeArgs struct {
	// The private IP Address where this backend can be reached. This must be a private IP address.
	Address pulumi.StringInput
	// The ID of the NodeBalancerConfig to access.
	ConfigId pulumi.IntInput
	// The label of the Linode NodeBalancer Node. This is for display purposes only.
	Label pulumi.StringInput
	// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it
	Mode pulumi.StringPtrInput
	// The ID of the NodeBalancer to access.
	NodebalancerId pulumi.IntInput
	// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
	Weight pulumi.IntPtrInput
}

func (NodeBalancerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeBalancerNodeArgs)(nil)).Elem()
}
