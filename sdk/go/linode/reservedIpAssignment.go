// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedIpAssignment struct {
	pulumi.CustomResourceState

	// The resulting IPv4 address.
	Address pulumi.StringOutput `pulumi:"address"`
	// If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
	// `skipImplicitReboots` provider argument.
	ApplyImmediately pulumi.BoolOutput `pulumi:"applyImmediately"`
	// The default gateway for this address
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId pulumi.IntOutput `pulumi:"linodeId"`
	// The number of bits set in the subnet mask.
	Prefix pulumi.IntOutput `pulumi:"prefix"`
	// Whether the IPv4 address is public or private.
	Public pulumi.BoolOutput `pulumi:"public"`
	// The reverse DNS assigned to this address.
	Rdns pulumi.StringOutput `pulumi:"rdns"`
	// The region this IP resides in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The reservation status of the IP address
	Reserved pulumi.BoolOutput `pulumi:"reserved"`
	// The mask that separates host bits from network bits for this address.
	SubnetMask pulumi.StringOutput `pulumi:"subnetMask"`
	// The type of IP address.
	Type pulumi.StringOutput `pulumi:"type"`
	// Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
	VpcNat11s ReservedIpAssignmentVpcNat11ArrayOutput `pulumi:"vpcNat11s"`
}

// NewReservedIpAssignment registers a new resource with the given unique name, arguments, and options.
func NewReservedIpAssignment(ctx *pulumi.Context,
	name string, args *ReservedIpAssignmentArgs, opts ...pulumi.ResourceOption) (*ReservedIpAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.LinodeId == nil {
		return nil, errors.New("invalid value for required argument 'LinodeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedIpAssignment
	err := ctx.RegisterResource("linode:index/reservedIpAssignment:ReservedIpAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIpAssignment gets an existing ReservedIpAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIpAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIpAssignmentState, opts ...pulumi.ResourceOption) (*ReservedIpAssignment, error) {
	var resource ReservedIpAssignment
	err := ctx.ReadResource("linode:index/reservedIpAssignment:ReservedIpAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIpAssignment resources.
type reservedIpAssignmentState struct {
	// The resulting IPv4 address.
	Address *string `pulumi:"address"`
	// If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
	// `skipImplicitReboots` provider argument.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// The default gateway for this address
	Gateway *string `pulumi:"gateway"`
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId *int `pulumi:"linodeId"`
	// The number of bits set in the subnet mask.
	Prefix *int `pulumi:"prefix"`
	// Whether the IPv4 address is public or private.
	Public *bool `pulumi:"public"`
	// The reverse DNS assigned to this address.
	Rdns *string `pulumi:"rdns"`
	// The region this IP resides in.
	Region *string `pulumi:"region"`
	// The reservation status of the IP address
	Reserved *bool `pulumi:"reserved"`
	// The mask that separates host bits from network bits for this address.
	SubnetMask *string `pulumi:"subnetMask"`
	// The type of IP address.
	Type *string `pulumi:"type"`
	// Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
	VpcNat11s []ReservedIpAssignmentVpcNat11 `pulumi:"vpcNat11s"`
}

type ReservedIpAssignmentState struct {
	// The resulting IPv4 address.
	Address pulumi.StringPtrInput
	// If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
	// `skipImplicitReboots` provider argument.
	ApplyImmediately pulumi.BoolPtrInput
	// The default gateway for this address
	Gateway pulumi.StringPtrInput
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId pulumi.IntPtrInput
	// The number of bits set in the subnet mask.
	Prefix pulumi.IntPtrInput
	// Whether the IPv4 address is public or private.
	Public pulumi.BoolPtrInput
	// The reverse DNS assigned to this address.
	Rdns pulumi.StringPtrInput
	// The region this IP resides in.
	Region pulumi.StringPtrInput
	// The reservation status of the IP address
	Reserved pulumi.BoolPtrInput
	// The mask that separates host bits from network bits for this address.
	SubnetMask pulumi.StringPtrInput
	// The type of IP address.
	Type pulumi.StringPtrInput
	// Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
	VpcNat11s ReservedIpAssignmentVpcNat11ArrayInput
}

func (ReservedIpAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIpAssignmentState)(nil)).Elem()
}

type reservedIpAssignmentArgs struct {
	// The resulting IPv4 address.
	Address string `pulumi:"address"`
	// If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
	// `skipImplicitReboots` provider argument.
	ApplyImmediately *bool `pulumi:"applyImmediately"`
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId int `pulumi:"linodeId"`
	// Whether the IPv4 address is public or private.
	Public *bool `pulumi:"public"`
	// The reverse DNS assigned to this address.
	Rdns *string `pulumi:"rdns"`
}

// The set of arguments for constructing a ReservedIpAssignment resource.
type ReservedIpAssignmentArgs struct {
	// The resulting IPv4 address.
	Address pulumi.StringInput
	// If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
	// `skipImplicitReboots` provider argument.
	ApplyImmediately pulumi.BoolPtrInput
	// The ID of the Linode to allocate an IPv4 address for.
	LinodeId pulumi.IntInput
	// Whether the IPv4 address is public or private.
	Public pulumi.BoolPtrInput
	// The reverse DNS assigned to this address.
	Rdns pulumi.StringPtrInput
}

func (ReservedIpAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIpAssignmentArgs)(nil)).Elem()
}

type ReservedIpAssignmentInput interface {
	pulumi.Input

	ToReservedIpAssignmentOutput() ReservedIpAssignmentOutput
	ToReservedIpAssignmentOutputWithContext(ctx context.Context) ReservedIpAssignmentOutput
}

func (*ReservedIpAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpAssignment)(nil)).Elem()
}

func (i *ReservedIpAssignment) ToReservedIpAssignmentOutput() ReservedIpAssignmentOutput {
	return i.ToReservedIpAssignmentOutputWithContext(context.Background())
}

func (i *ReservedIpAssignment) ToReservedIpAssignmentOutputWithContext(ctx context.Context) ReservedIpAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpAssignmentOutput)
}

// ReservedIpAssignmentArrayInput is an input type that accepts ReservedIpAssignmentArray and ReservedIpAssignmentArrayOutput values.
// You can construct a concrete instance of `ReservedIpAssignmentArrayInput` via:
//
//	ReservedIpAssignmentArray{ ReservedIpAssignmentArgs{...} }
type ReservedIpAssignmentArrayInput interface {
	pulumi.Input

	ToReservedIpAssignmentArrayOutput() ReservedIpAssignmentArrayOutput
	ToReservedIpAssignmentArrayOutputWithContext(context.Context) ReservedIpAssignmentArrayOutput
}

type ReservedIpAssignmentArray []ReservedIpAssignmentInput

func (ReservedIpAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIpAssignment)(nil)).Elem()
}

func (i ReservedIpAssignmentArray) ToReservedIpAssignmentArrayOutput() ReservedIpAssignmentArrayOutput {
	return i.ToReservedIpAssignmentArrayOutputWithContext(context.Background())
}

func (i ReservedIpAssignmentArray) ToReservedIpAssignmentArrayOutputWithContext(ctx context.Context) ReservedIpAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpAssignmentArrayOutput)
}

// ReservedIpAssignmentMapInput is an input type that accepts ReservedIpAssignmentMap and ReservedIpAssignmentMapOutput values.
// You can construct a concrete instance of `ReservedIpAssignmentMapInput` via:
//
//	ReservedIpAssignmentMap{ "key": ReservedIpAssignmentArgs{...} }
type ReservedIpAssignmentMapInput interface {
	pulumi.Input

	ToReservedIpAssignmentMapOutput() ReservedIpAssignmentMapOutput
	ToReservedIpAssignmentMapOutputWithContext(context.Context) ReservedIpAssignmentMapOutput
}

type ReservedIpAssignmentMap map[string]ReservedIpAssignmentInput

func (ReservedIpAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIpAssignment)(nil)).Elem()
}

func (i ReservedIpAssignmentMap) ToReservedIpAssignmentMapOutput() ReservedIpAssignmentMapOutput {
	return i.ToReservedIpAssignmentMapOutputWithContext(context.Background())
}

func (i ReservedIpAssignmentMap) ToReservedIpAssignmentMapOutputWithContext(ctx context.Context) ReservedIpAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpAssignmentMapOutput)
}

type ReservedIpAssignmentOutput struct{ *pulumi.OutputState }

func (ReservedIpAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpAssignment)(nil)).Elem()
}

func (o ReservedIpAssignmentOutput) ToReservedIpAssignmentOutput() ReservedIpAssignmentOutput {
	return o
}

func (o ReservedIpAssignmentOutput) ToReservedIpAssignmentOutputWithContext(ctx context.Context) ReservedIpAssignmentOutput {
	return o
}

// The resulting IPv4 address.
func (o ReservedIpAssignmentOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the
// `skipImplicitReboots` provider argument.
func (o ReservedIpAssignmentOutput) ApplyImmediately() pulumi.BoolOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.BoolOutput { return v.ApplyImmediately }).(pulumi.BoolOutput)
}

// The default gateway for this address
func (o ReservedIpAssignmentOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// The ID of the Linode to allocate an IPv4 address for.
func (o ReservedIpAssignmentOutput) LinodeId() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.IntOutput { return v.LinodeId }).(pulumi.IntOutput)
}

// The number of bits set in the subnet mask.
func (o ReservedIpAssignmentOutput) Prefix() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.IntOutput { return v.Prefix }).(pulumi.IntOutput)
}

// Whether the IPv4 address is public or private.
func (o ReservedIpAssignmentOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.BoolOutput { return v.Public }).(pulumi.BoolOutput)
}

// The reverse DNS assigned to this address.
func (o ReservedIpAssignmentOutput) Rdns() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.StringOutput { return v.Rdns }).(pulumi.StringOutput)
}

// The region this IP resides in.
func (o ReservedIpAssignmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The reservation status of the IP address
func (o ReservedIpAssignmentOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.BoolOutput { return v.Reserved }).(pulumi.BoolOutput)
}

// The mask that separates host bits from network bits for this address.
func (o ReservedIpAssignmentOutput) SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.StringOutput { return v.SubnetMask }).(pulumi.StringOutput)
}

// The type of IP address.
func (o ReservedIpAssignmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.
func (o ReservedIpAssignmentOutput) VpcNat11s() ReservedIpAssignmentVpcNat11ArrayOutput {
	return o.ApplyT(func(v *ReservedIpAssignment) ReservedIpAssignmentVpcNat11ArrayOutput { return v.VpcNat11s }).(ReservedIpAssignmentVpcNat11ArrayOutput)
}

type ReservedIpAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ReservedIpAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIpAssignment)(nil)).Elem()
}

func (o ReservedIpAssignmentArrayOutput) ToReservedIpAssignmentArrayOutput() ReservedIpAssignmentArrayOutput {
	return o
}

func (o ReservedIpAssignmentArrayOutput) ToReservedIpAssignmentArrayOutputWithContext(ctx context.Context) ReservedIpAssignmentArrayOutput {
	return o
}

func (o ReservedIpAssignmentArrayOutput) Index(i pulumi.IntInput) ReservedIpAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedIpAssignment {
		return vs[0].([]*ReservedIpAssignment)[vs[1].(int)]
	}).(ReservedIpAssignmentOutput)
}

type ReservedIpAssignmentMapOutput struct{ *pulumi.OutputState }

func (ReservedIpAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIpAssignment)(nil)).Elem()
}

func (o ReservedIpAssignmentMapOutput) ToReservedIpAssignmentMapOutput() ReservedIpAssignmentMapOutput {
	return o
}

func (o ReservedIpAssignmentMapOutput) ToReservedIpAssignmentMapOutputWithContext(ctx context.Context) ReservedIpAssignmentMapOutput {
	return o
}

func (o ReservedIpAssignmentMapOutput) MapIndex(k pulumi.StringInput) ReservedIpAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedIpAssignment {
		return vs[0].(map[string]*ReservedIpAssignment)[vs[1].(string)]
	}).(ReservedIpAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpAssignmentInput)(nil)).Elem(), &ReservedIpAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpAssignmentArrayInput)(nil)).Elem(), ReservedIpAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpAssignmentMapInput)(nil)).Elem(), ReservedIpAssignmentMap{})
	pulumi.RegisterOutputType(ReservedIpAssignmentOutput{})
	pulumi.RegisterOutputType(ReservedIpAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ReservedIpAssignmentMapOutput{})
}
