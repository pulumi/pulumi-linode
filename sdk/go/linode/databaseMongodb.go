// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Linode Mongo Database resource. This can be used to create, modify, and delete Linode MongoDB Databases.
// For more information, see the [Linode APIv4 docs](https://www.linode.com/docs/api/databases/).
//
// Please keep in mind that Managed Databases can take up to an hour to provision.
//
// ## Example Usage
//
// Creating a simple MongoDB database instance:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewDatabaseMongodb(ctx, "foobar", &linode.DatabaseMongodbArgs{
//				EngineId: pulumi.String("mongodb/4.4.10"),
//				Label:    pulumi.String("mydatabase"),
//				Region:   pulumi.String("us-southeast"),
//				Type:     pulumi.String("g6-nanode-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating a complex MongoDB database instance:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.NewDatabaseMongodb(ctx, "foobar", &linode.DatabaseMongodbArgs{
//				AllowLists: pulumi.StringArray{
//					pulumi.String("0.0.0.0/0"),
//				},
//				ClusterSize:     pulumi.Int(3),
//				CompressionType: pulumi.String("zlib"),
//				Encrypted:       pulumi.Bool(true),
//				EngineId:        pulumi.String("mongodb/4.4.10"),
//				Label:           pulumi.String("mydatabase"),
//				Region:          pulumi.String("us-southeast"),
//				SslConnection:   pulumi.Bool(true),
//				StorageEngine:   pulumi.String("wiredtiger"),
//				Type:            pulumi.String("g6-nanode-1"),
//				Updates: &linode.DatabaseMongodbUpdatesArgs{
//					DayOfWeek:   pulumi.String("saturday"),
//					Duration:    pulumi.Int(1),
//					Frequency:   pulumi.String("monthly"),
//					HourOfDay:   pulumi.Int(22),
//					WeekOfMonth: pulumi.Int(2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## updates
//
// The following arguments are supported in the `updates` specification block:
//
// * `dayOfWeek` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)
//
// * `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)
//
// * `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
//
// * `hourOfDay` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)
//
// * `weekOfMonth` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
//
// ## Import
//
// Linode MongoDB Databases can be imported using the `id`, e.g.
//
// ```sh
//
//	$ pulumi import linode:index/databaseMongodb:DatabaseMongodb foobar 1234567
//
// ```
type DatabaseMongodb struct {
	pulumi.CustomResourceState

	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayOutput `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database instance.
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrOutput `pulumi:"clusterSize"`
	// The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
	CompressionType pulumi.StringPtrOutput `pulumi:"compressionType"`
	// When this Managed Database was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Whether the Managed Databases is encrypted. (default `false`)
	Encrypted pulumi.BoolPtrOutput `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `mongodb`)
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The primary host for the Managed Database.
	HostPrimary pulumi.StringOutput `pulumi:"hostPrimary"`
	// The secondary/private network host for the Managed Database.
	HostSecondary pulumi.StringOutput `pulumi:"hostSecondary"`
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringOutput `pulumi:"label"`
	// A set of peer addresses for this Database.
	Peers pulumi.StringArrayOutput `pulumi:"peers"`
	// The access port for this Managed Database.
	Port pulumi.IntOutput `pulumi:"port"`
	// The region to use for the Managed Database.
	Region pulumi.StringOutput `pulumi:"region"`
	// Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
	ReplicaSet pulumi.StringOutput `pulumi:"replicaSet"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword pulumi.StringOutput `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername pulumi.StringOutput `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
	SslConnection pulumi.BoolPtrOutput `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
	StorageEngine pulumi.StringPtrOutput `pulumi:"storageEngine"`
	// The Linode Instance type used for the nodes of the  Managed Database instance.
	Type pulumi.StringOutput `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabaseMongodbUpdatesOutput `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `v8.0.26`)
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatabaseMongodb registers a new resource with the given unique name, arguments, and options.
func NewDatabaseMongodb(ctx *pulumi.Context,
	name string, args *DatabaseMongodbArgs, opts ...pulumi.ResourceOption) (*DatabaseMongodb, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.Label == nil {
		return nil, errors.New("invalid value for required argument 'Label'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCert",
		"rootPassword",
		"rootUsername",
	})
	opts = append(opts, secrets)
	var resource DatabaseMongodb
	err := ctx.RegisterResource("linode:index/databaseMongodb:DatabaseMongodb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseMongodb gets an existing DatabaseMongodb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseMongodb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseMongodbState, opts ...pulumi.ResourceOption) (*DatabaseMongodb, error) {
	var resource DatabaseMongodb
	err := ctx.ReadResource("linode:index/databaseMongodb:DatabaseMongodb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseMongodb resources.
type databaseMongodbState struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The base64-encoded SSL CA certificate for the Managed Database instance.
	CaCert *string `pulumi:"caCert"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize *int `pulumi:"clusterSize"`
	// The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
	CompressionType *string `pulumi:"compressionType"`
	// When this Managed Database was created.
	Created *string `pulumi:"created"`
	// Whether the Managed Databases is encrypted. (default `false`)
	Encrypted *bool `pulumi:"encrypted"`
	// The Managed Database engine. (e.g. `mongodb`)
	Engine *string `pulumi:"engine"`
	// The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
	EngineId *string `pulumi:"engineId"`
	// The primary host for the Managed Database.
	HostPrimary *string `pulumi:"hostPrimary"`
	// The secondary/private network host for the Managed Database.
	HostSecondary *string `pulumi:"hostSecondary"`
	// A unique, user-defined string referring to the Managed Database.
	Label *string `pulumi:"label"`
	// A set of peer addresses for this Database.
	Peers []string `pulumi:"peers"`
	// The access port for this Managed Database.
	Port *int `pulumi:"port"`
	// The region to use for the Managed Database.
	Region *string `pulumi:"region"`
	// Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
	ReplicaSet *string `pulumi:"replicaSet"`
	// The randomly-generated root password for the Managed Database instance.
	RootPassword *string `pulumi:"rootPassword"`
	// The root username for the Managed Database instance.
	RootUsername *string `pulumi:"rootUsername"`
	// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
	SslConnection *bool `pulumi:"sslConnection"`
	// The operating status of the Managed Database.
	Status *string `pulumi:"status"`
	// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
	StorageEngine *string `pulumi:"storageEngine"`
	// The Linode Instance type used for the nodes of the  Managed Database instance.
	Type *string `pulumi:"type"`
	// When this Managed Database was last updated.
	Updated *string `pulumi:"updated"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates *DatabaseMongodbUpdates `pulumi:"updates"`
	// The Managed Database engine version. (e.g. `v8.0.26`)
	Version *string `pulumi:"version"`
}

type DatabaseMongodbState struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayInput
	// The base64-encoded SSL CA certificate for the Managed Database instance.
	CaCert pulumi.StringPtrInput
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrInput
	// The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
	CompressionType pulumi.StringPtrInput
	// When this Managed Database was created.
	Created pulumi.StringPtrInput
	// Whether the Managed Databases is encrypted. (default `false`)
	Encrypted pulumi.BoolPtrInput
	// The Managed Database engine. (e.g. `mongodb`)
	Engine pulumi.StringPtrInput
	// The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
	EngineId pulumi.StringPtrInput
	// The primary host for the Managed Database.
	HostPrimary pulumi.StringPtrInput
	// The secondary/private network host for the Managed Database.
	HostSecondary pulumi.StringPtrInput
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringPtrInput
	// A set of peer addresses for this Database.
	Peers pulumi.StringArrayInput
	// The access port for this Managed Database.
	Port pulumi.IntPtrInput
	// The region to use for the Managed Database.
	Region pulumi.StringPtrInput
	// Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
	ReplicaSet pulumi.StringPtrInput
	// The randomly-generated root password for the Managed Database instance.
	RootPassword pulumi.StringPtrInput
	// The root username for the Managed Database instance.
	RootUsername pulumi.StringPtrInput
	// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
	SslConnection pulumi.BoolPtrInput
	// The operating status of the Managed Database.
	Status pulumi.StringPtrInput
	// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
	StorageEngine pulumi.StringPtrInput
	// The Linode Instance type used for the nodes of the  Managed Database instance.
	Type pulumi.StringPtrInput
	// When this Managed Database was last updated.
	Updated pulumi.StringPtrInput
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabaseMongodbUpdatesPtrInput
	// The Managed Database engine version. (e.g. `v8.0.26`)
	Version pulumi.StringPtrInput
}

func (DatabaseMongodbState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMongodbState)(nil)).Elem()
}

type databaseMongodbArgs struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists []string `pulumi:"allowLists"`
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize *int `pulumi:"clusterSize"`
	// The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
	CompressionType *string `pulumi:"compressionType"`
	// Whether the Managed Databases is encrypted. (default `false`)
	Encrypted *bool `pulumi:"encrypted"`
	// The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
	EngineId string `pulumi:"engineId"`
	// A unique, user-defined string referring to the Managed Database.
	Label string `pulumi:"label"`
	// The region to use for the Managed Database.
	Region string `pulumi:"region"`
	// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
	SslConnection *bool `pulumi:"sslConnection"`
	// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
	StorageEngine *string `pulumi:"storageEngine"`
	// The Linode Instance type used for the nodes of the  Managed Database instance.
	Type string `pulumi:"type"`
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates *DatabaseMongodbUpdates `pulumi:"updates"`
}

// The set of arguments for constructing a DatabaseMongodb resource.
type DatabaseMongodbArgs struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
	AllowLists pulumi.StringArrayInput
	// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
	ClusterSize pulumi.IntPtrInput
	// The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
	CompressionType pulumi.StringPtrInput
	// Whether the Managed Databases is encrypted. (default `false`)
	Encrypted pulumi.BoolPtrInput
	// The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
	EngineId pulumi.StringInput
	// A unique, user-defined string referring to the Managed Database.
	Label pulumi.StringInput
	// The region to use for the Managed Database.
	Region pulumi.StringInput
	// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
	SslConnection pulumi.BoolPtrInput
	// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
	StorageEngine pulumi.StringPtrInput
	// The Linode Instance type used for the nodes of the  Managed Database instance.
	Type pulumi.StringInput
	// Configuration settings for automated patch update maintenance for the Managed Database.
	Updates DatabaseMongodbUpdatesPtrInput
}

func (DatabaseMongodbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMongodbArgs)(nil)).Elem()
}

type DatabaseMongodbInput interface {
	pulumi.Input

	ToDatabaseMongodbOutput() DatabaseMongodbOutput
	ToDatabaseMongodbOutputWithContext(ctx context.Context) DatabaseMongodbOutput
}

func (*DatabaseMongodb) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMongodb)(nil)).Elem()
}

func (i *DatabaseMongodb) ToDatabaseMongodbOutput() DatabaseMongodbOutput {
	return i.ToDatabaseMongodbOutputWithContext(context.Background())
}

func (i *DatabaseMongodb) ToDatabaseMongodbOutputWithContext(ctx context.Context) DatabaseMongodbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMongodbOutput)
}

// DatabaseMongodbArrayInput is an input type that accepts DatabaseMongodbArray and DatabaseMongodbArrayOutput values.
// You can construct a concrete instance of `DatabaseMongodbArrayInput` via:
//
//	DatabaseMongodbArray{ DatabaseMongodbArgs{...} }
type DatabaseMongodbArrayInput interface {
	pulumi.Input

	ToDatabaseMongodbArrayOutput() DatabaseMongodbArrayOutput
	ToDatabaseMongodbArrayOutputWithContext(context.Context) DatabaseMongodbArrayOutput
}

type DatabaseMongodbArray []DatabaseMongodbInput

func (DatabaseMongodbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMongodb)(nil)).Elem()
}

func (i DatabaseMongodbArray) ToDatabaseMongodbArrayOutput() DatabaseMongodbArrayOutput {
	return i.ToDatabaseMongodbArrayOutputWithContext(context.Background())
}

func (i DatabaseMongodbArray) ToDatabaseMongodbArrayOutputWithContext(ctx context.Context) DatabaseMongodbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMongodbArrayOutput)
}

// DatabaseMongodbMapInput is an input type that accepts DatabaseMongodbMap and DatabaseMongodbMapOutput values.
// You can construct a concrete instance of `DatabaseMongodbMapInput` via:
//
//	DatabaseMongodbMap{ "key": DatabaseMongodbArgs{...} }
type DatabaseMongodbMapInput interface {
	pulumi.Input

	ToDatabaseMongodbMapOutput() DatabaseMongodbMapOutput
	ToDatabaseMongodbMapOutputWithContext(context.Context) DatabaseMongodbMapOutput
}

type DatabaseMongodbMap map[string]DatabaseMongodbInput

func (DatabaseMongodbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMongodb)(nil)).Elem()
}

func (i DatabaseMongodbMap) ToDatabaseMongodbMapOutput() DatabaseMongodbMapOutput {
	return i.ToDatabaseMongodbMapOutputWithContext(context.Background())
}

func (i DatabaseMongodbMap) ToDatabaseMongodbMapOutputWithContext(ctx context.Context) DatabaseMongodbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMongodbMapOutput)
}

type DatabaseMongodbOutput struct{ *pulumi.OutputState }

func (DatabaseMongodbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMongodb)(nil)).Elem()
}

func (o DatabaseMongodbOutput) ToDatabaseMongodbOutput() DatabaseMongodbOutput {
	return o
}

func (o DatabaseMongodbOutput) ToDatabaseMongodbOutputWithContext(ctx context.Context) DatabaseMongodbOutput {
	return o
}

// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
func (o DatabaseMongodbOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringArrayOutput { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The base64-encoded SSL CA certificate for the Managed Database instance.
func (o DatabaseMongodbOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.CaCert }).(pulumi.StringOutput)
}

// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
func (o DatabaseMongodbOutput) ClusterSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.IntPtrOutput { return v.ClusterSize }).(pulumi.IntPtrOutput)
}

// The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)
func (o DatabaseMongodbOutput) CompressionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringPtrOutput { return v.CompressionType }).(pulumi.StringPtrOutput)
}

// When this Managed Database was created.
func (o DatabaseMongodbOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Whether the Managed Databases is encrypted. (default `false`)
func (o DatabaseMongodbOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.BoolPtrOutput { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

// The Managed Database engine. (e.g. `mongodb`)
func (o DatabaseMongodbOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)
func (o DatabaseMongodbOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The primary host for the Managed Database.
func (o DatabaseMongodbOutput) HostPrimary() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.HostPrimary }).(pulumi.StringOutput)
}

// The secondary/private network host for the Managed Database.
func (o DatabaseMongodbOutput) HostSecondary() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.HostSecondary }).(pulumi.StringOutput)
}

// A unique, user-defined string referring to the Managed Database.
func (o DatabaseMongodbOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// A set of peer addresses for this Database.
func (o DatabaseMongodbOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringArrayOutput { return v.Peers }).(pulumi.StringArrayOutput)
}

// The access port for this Managed Database.
func (o DatabaseMongodbOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The region to use for the Managed Database.
func (o DatabaseMongodbOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
func (o DatabaseMongodbOutput) ReplicaSet() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.ReplicaSet }).(pulumi.StringOutput)
}

// The randomly-generated root password for the Managed Database instance.
func (o DatabaseMongodbOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.RootPassword }).(pulumi.StringOutput)
}

// The root username for the Managed Database instance.
func (o DatabaseMongodbOutput) RootUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.RootUsername }).(pulumi.StringOutput)
}

// Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)
func (o DatabaseMongodbOutput) SslConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.BoolPtrOutput { return v.SslConnection }).(pulumi.BoolPtrOutput)
}

// The operating status of the Managed Database.
func (o DatabaseMongodbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)
func (o DatabaseMongodbOutput) StorageEngine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringPtrOutput { return v.StorageEngine }).(pulumi.StringPtrOutput)
}

// The Linode Instance type used for the nodes of the  Managed Database instance.
func (o DatabaseMongodbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// When this Managed Database was last updated.
func (o DatabaseMongodbOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// Configuration settings for automated patch update maintenance for the Managed Database.
func (o DatabaseMongodbOutput) Updates() DatabaseMongodbUpdatesOutput {
	return o.ApplyT(func(v *DatabaseMongodb) DatabaseMongodbUpdatesOutput { return v.Updates }).(DatabaseMongodbUpdatesOutput)
}

// The Managed Database engine version. (e.g. `v8.0.26`)
func (o DatabaseMongodbOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodb) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DatabaseMongodbArrayOutput struct{ *pulumi.OutputState }

func (DatabaseMongodbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMongodb)(nil)).Elem()
}

func (o DatabaseMongodbArrayOutput) ToDatabaseMongodbArrayOutput() DatabaseMongodbArrayOutput {
	return o
}

func (o DatabaseMongodbArrayOutput) ToDatabaseMongodbArrayOutputWithContext(ctx context.Context) DatabaseMongodbArrayOutput {
	return o
}

func (o DatabaseMongodbArrayOutput) Index(i pulumi.IntInput) DatabaseMongodbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseMongodb {
		return vs[0].([]*DatabaseMongodb)[vs[1].(int)]
	}).(DatabaseMongodbOutput)
}

type DatabaseMongodbMapOutput struct{ *pulumi.OutputState }

func (DatabaseMongodbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMongodb)(nil)).Elem()
}

func (o DatabaseMongodbMapOutput) ToDatabaseMongodbMapOutput() DatabaseMongodbMapOutput {
	return o
}

func (o DatabaseMongodbMapOutput) ToDatabaseMongodbMapOutputWithContext(ctx context.Context) DatabaseMongodbMapOutput {
	return o
}

func (o DatabaseMongodbMapOutput) MapIndex(k pulumi.StringInput) DatabaseMongodbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseMongodb {
		return vs[0].(map[string]*DatabaseMongodb)[vs[1].(string)]
	}).(DatabaseMongodbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMongodbInput)(nil)).Elem(), &DatabaseMongodb{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMongodbArrayInput)(nil)).Elem(), DatabaseMongodbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMongodbMapInput)(nil)).Elem(), DatabaseMongodbMap{})
	pulumi.RegisterOutputType(DatabaseMongodbOutput{})
	pulumi.RegisterOutputType(DatabaseMongodbArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMongodbMapOutput{})
}
