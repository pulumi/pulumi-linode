// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LkeNodePool struct {
	pulumi.CustomResourceState

	Autoscaler LkeNodePoolAutoscalerPtrOutput `pulumi:"autoscaler"`
	// The ID of the cluster to associate this node pool with.
	ClusterId pulumi.IntOutput `pulumi:"clusterId"`
	// The number of nodes in the Node Pool.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// A list of nodes in the node pool.
	Nodes LkeNodePoolNodeArrayOutput `pulumi:"nodes"`
	// An array of tags applied to this object. Tags are for organizational purposes only.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The type of node pool.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLkeNodePool registers a new resource with the given unique name, arguments, and options.
func NewLkeNodePool(ctx *pulumi.Context,
	name string, args *LkeNodePoolArgs, opts ...pulumi.ResourceOption) (*LkeNodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LkeNodePool
	err := ctx.RegisterResource("linode:index/lkeNodePool:LkeNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLkeNodePool gets an existing LkeNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLkeNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LkeNodePoolState, opts ...pulumi.ResourceOption) (*LkeNodePool, error) {
	var resource LkeNodePool
	err := ctx.ReadResource("linode:index/lkeNodePool:LkeNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LkeNodePool resources.
type lkeNodePoolState struct {
	Autoscaler *LkeNodePoolAutoscaler `pulumi:"autoscaler"`
	// The ID of the cluster to associate this node pool with.
	ClusterId *int `pulumi:"clusterId"`
	// The number of nodes in the Node Pool.
	NodeCount *int `pulumi:"nodeCount"`
	// A list of nodes in the node pool.
	Nodes []LkeNodePoolNode `pulumi:"nodes"`
	// An array of tags applied to this object. Tags are for organizational purposes only.
	Tags []string `pulumi:"tags"`
	// The type of node pool.
	Type *string `pulumi:"type"`
}

type LkeNodePoolState struct {
	Autoscaler LkeNodePoolAutoscalerPtrInput
	// The ID of the cluster to associate this node pool with.
	ClusterId pulumi.IntPtrInput
	// The number of nodes in the Node Pool.
	NodeCount pulumi.IntPtrInput
	// A list of nodes in the node pool.
	Nodes LkeNodePoolNodeArrayInput
	// An array of tags applied to this object. Tags are for organizational purposes only.
	Tags pulumi.StringArrayInput
	// The type of node pool.
	Type pulumi.StringPtrInput
}

func (LkeNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*lkeNodePoolState)(nil)).Elem()
}

type lkeNodePoolArgs struct {
	Autoscaler *LkeNodePoolAutoscaler `pulumi:"autoscaler"`
	// The ID of the cluster to associate this node pool with.
	ClusterId int `pulumi:"clusterId"`
	// The number of nodes in the Node Pool.
	NodeCount *int `pulumi:"nodeCount"`
	// An array of tags applied to this object. Tags are for organizational purposes only.
	Tags []string `pulumi:"tags"`
	// The type of node pool.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a LkeNodePool resource.
type LkeNodePoolArgs struct {
	Autoscaler LkeNodePoolAutoscalerPtrInput
	// The ID of the cluster to associate this node pool with.
	ClusterId pulumi.IntInput
	// The number of nodes in the Node Pool.
	NodeCount pulumi.IntPtrInput
	// An array of tags applied to this object. Tags are for organizational purposes only.
	Tags pulumi.StringArrayInput
	// The type of node pool.
	Type pulumi.StringInput
}

func (LkeNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lkeNodePoolArgs)(nil)).Elem()
}

type LkeNodePoolInput interface {
	pulumi.Input

	ToLkeNodePoolOutput() LkeNodePoolOutput
	ToLkeNodePoolOutputWithContext(ctx context.Context) LkeNodePoolOutput
}

func (*LkeNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**LkeNodePool)(nil)).Elem()
}

func (i *LkeNodePool) ToLkeNodePoolOutput() LkeNodePoolOutput {
	return i.ToLkeNodePoolOutputWithContext(context.Background())
}

func (i *LkeNodePool) ToLkeNodePoolOutputWithContext(ctx context.Context) LkeNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LkeNodePoolOutput)
}

// LkeNodePoolArrayInput is an input type that accepts LkeNodePoolArray and LkeNodePoolArrayOutput values.
// You can construct a concrete instance of `LkeNodePoolArrayInput` via:
//
//	LkeNodePoolArray{ LkeNodePoolArgs{...} }
type LkeNodePoolArrayInput interface {
	pulumi.Input

	ToLkeNodePoolArrayOutput() LkeNodePoolArrayOutput
	ToLkeNodePoolArrayOutputWithContext(context.Context) LkeNodePoolArrayOutput
}

type LkeNodePoolArray []LkeNodePoolInput

func (LkeNodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LkeNodePool)(nil)).Elem()
}

func (i LkeNodePoolArray) ToLkeNodePoolArrayOutput() LkeNodePoolArrayOutput {
	return i.ToLkeNodePoolArrayOutputWithContext(context.Background())
}

func (i LkeNodePoolArray) ToLkeNodePoolArrayOutputWithContext(ctx context.Context) LkeNodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LkeNodePoolArrayOutput)
}

// LkeNodePoolMapInput is an input type that accepts LkeNodePoolMap and LkeNodePoolMapOutput values.
// You can construct a concrete instance of `LkeNodePoolMapInput` via:
//
//	LkeNodePoolMap{ "key": LkeNodePoolArgs{...} }
type LkeNodePoolMapInput interface {
	pulumi.Input

	ToLkeNodePoolMapOutput() LkeNodePoolMapOutput
	ToLkeNodePoolMapOutputWithContext(context.Context) LkeNodePoolMapOutput
}

type LkeNodePoolMap map[string]LkeNodePoolInput

func (LkeNodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LkeNodePool)(nil)).Elem()
}

func (i LkeNodePoolMap) ToLkeNodePoolMapOutput() LkeNodePoolMapOutput {
	return i.ToLkeNodePoolMapOutputWithContext(context.Background())
}

func (i LkeNodePoolMap) ToLkeNodePoolMapOutputWithContext(ctx context.Context) LkeNodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LkeNodePoolMapOutput)
}

type LkeNodePoolOutput struct{ *pulumi.OutputState }

func (LkeNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LkeNodePool)(nil)).Elem()
}

func (o LkeNodePoolOutput) ToLkeNodePoolOutput() LkeNodePoolOutput {
	return o
}

func (o LkeNodePoolOutput) ToLkeNodePoolOutputWithContext(ctx context.Context) LkeNodePoolOutput {
	return o
}

func (o LkeNodePoolOutput) Autoscaler() LkeNodePoolAutoscalerPtrOutput {
	return o.ApplyT(func(v *LkeNodePool) LkeNodePoolAutoscalerPtrOutput { return v.Autoscaler }).(LkeNodePoolAutoscalerPtrOutput)
}

// The ID of the cluster to associate this node pool with.
func (o LkeNodePoolOutput) ClusterId() pulumi.IntOutput {
	return o.ApplyT(func(v *LkeNodePool) pulumi.IntOutput { return v.ClusterId }).(pulumi.IntOutput)
}

// The number of nodes in the Node Pool.
func (o LkeNodePoolOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *LkeNodePool) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// A list of nodes in the node pool.
func (o LkeNodePoolOutput) Nodes() LkeNodePoolNodeArrayOutput {
	return o.ApplyT(func(v *LkeNodePool) LkeNodePoolNodeArrayOutput { return v.Nodes }).(LkeNodePoolNodeArrayOutput)
}

// An array of tags applied to this object. Tags are for organizational purposes only.
func (o LkeNodePoolOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LkeNodePool) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The type of node pool.
func (o LkeNodePoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LkeNodePool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type LkeNodePoolArrayOutput struct{ *pulumi.OutputState }

func (LkeNodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LkeNodePool)(nil)).Elem()
}

func (o LkeNodePoolArrayOutput) ToLkeNodePoolArrayOutput() LkeNodePoolArrayOutput {
	return o
}

func (o LkeNodePoolArrayOutput) ToLkeNodePoolArrayOutputWithContext(ctx context.Context) LkeNodePoolArrayOutput {
	return o
}

func (o LkeNodePoolArrayOutput) Index(i pulumi.IntInput) LkeNodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LkeNodePool {
		return vs[0].([]*LkeNodePool)[vs[1].(int)]
	}).(LkeNodePoolOutput)
}

type LkeNodePoolMapOutput struct{ *pulumi.OutputState }

func (LkeNodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LkeNodePool)(nil)).Elem()
}

func (o LkeNodePoolMapOutput) ToLkeNodePoolMapOutput() LkeNodePoolMapOutput {
	return o
}

func (o LkeNodePoolMapOutput) ToLkeNodePoolMapOutputWithContext(ctx context.Context) LkeNodePoolMapOutput {
	return o
}

func (o LkeNodePoolMapOutput) MapIndex(k pulumi.StringInput) LkeNodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LkeNodePool {
		return vs[0].(map[string]*LkeNodePool)[vs[1].(string)]
	}).(LkeNodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LkeNodePoolInput)(nil)).Elem(), &LkeNodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*LkeNodePoolArrayInput)(nil)).Elem(), LkeNodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LkeNodePoolMapInput)(nil)).Elem(), LkeNodePoolMap{})
	pulumi.RegisterOutputType(LkeNodePoolOutput{})
	pulumi.RegisterOutputType(LkeNodePoolArrayOutput{})
	pulumi.RegisterOutputType(LkeNodePoolMapOutput{})
}
