// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// > **NOTICE:** The Firewall feature is currently available through early access.
//
// Manages a Linode Firewall.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-linode/sdk/v2/go/linode"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myInstance, err := linode.NewInstance(ctx, "myInstance", &linode.InstanceArgs{
// 			Label:    pulumi.String("my_instance"),
// 			Image:    pulumi.String("linode/ubuntu18.04"),
// 			Region:   pulumi.String("us-east"),
// 			Type:     pulumi.String("g6-standard-1"),
// 			RootPass: pulumi.String(fmt.Sprintf("%v%v", "bogusPassword", "$")),
// 			SwapSize: pulumi.Int(256),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = linode.NewFirewall(ctx, "myFirewall", &linode.FirewallArgs{
// 			Label: pulumi.String("my_firewall"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("test"),
// 			},
// 			Inbounds: linode.FirewallInboundArray{
// 				&linode.FirewallInboundArgs{
// 					Protocol: pulumi.String("TCP"),
// 					Ports: pulumi.StringArray{
// 						pulumi.String("80"),
// 					},
// 					Addresses: pulumi.StringArray{
// 						pulumi.String("0.0.0.0/0"),
// 					},
// 				},
// 			},
// 			Outbounds: linode.FirewallOutboundArray{
// 				&linode.FirewallOutboundArgs{
// 					Protocol: pulumi.String("TCP"),
// 					Ports: pulumi.StringArray{
// 						pulumi.String("80"),
// 					},
// 					Addresses: pulumi.StringArray{
// 						pulumi.String("0.0.0.0/0"),
// 					},
// 				},
// 			},
// 			Linodes: pulumi.IntArray{
// 				myInstance.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Firewalls can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import linode:index/firewall:Firewall my_firewall 12345
// ```
type Firewall struct {
	pulumi.CustomResourceState

	// The devices associated with this firewall.
	Devices FirewallDeviceArrayOutput `pulumi:"devices"`
	// If `true`, the Firewall's rules are not enforced (defaults to `false`).
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// A firewall rule that specifies what inbound network traffic is allowed.
	Inbounds FirewallInboundArrayOutput `pulumi:"inbounds"`
	// This Firewall's unique label.
	Label pulumi.StringOutput `pulumi:"label"`
	// A list of IDs of Linodes this Firewall should govern it's network traffic for.
	Linodes pulumi.IntArrayOutput `pulumi:"linodes"`
	// A firewall rule that specifies what outbound network traffic is allowed.
	Outbounds FirewallOutboundArrayOutput `pulumi:"outbounds"`
	// The status of the Firewall.
	Status pulumi.StringOutput `pulumi:"status"`
	// A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewFirewall registers a new resource with the given unique name, arguments, and options.
func NewFirewall(ctx *pulumi.Context,
	name string, args *FirewallArgs, opts ...pulumi.ResourceOption) (*Firewall, error) {
	if args == nil || args.Linodes == nil {
		return nil, errors.New("missing required argument 'Linodes'")
	}
	if args == nil {
		args = &FirewallArgs{}
	}
	var resource Firewall
	err := ctx.RegisterResource("linode:index/firewall:Firewall", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewall gets an existing Firewall resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewall(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallState, opts ...pulumi.ResourceOption) (*Firewall, error) {
	var resource Firewall
	err := ctx.ReadResource("linode:index/firewall:Firewall", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Firewall resources.
type firewallState struct {
	// The devices associated with this firewall.
	Devices []FirewallDevice `pulumi:"devices"`
	// If `true`, the Firewall's rules are not enforced (defaults to `false`).
	Disabled *bool `pulumi:"disabled"`
	// A firewall rule that specifies what inbound network traffic is allowed.
	Inbounds []FirewallInbound `pulumi:"inbounds"`
	// This Firewall's unique label.
	Label *string `pulumi:"label"`
	// A list of IDs of Linodes this Firewall should govern it's network traffic for.
	Linodes []int `pulumi:"linodes"`
	// A firewall rule that specifies what outbound network traffic is allowed.
	Outbounds []FirewallOutbound `pulumi:"outbounds"`
	// The status of the Firewall.
	Status *string `pulumi:"status"`
	// A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
	Tags []string `pulumi:"tags"`
}

type FirewallState struct {
	// The devices associated with this firewall.
	Devices FirewallDeviceArrayInput
	// If `true`, the Firewall's rules are not enforced (defaults to `false`).
	Disabled pulumi.BoolPtrInput
	// A firewall rule that specifies what inbound network traffic is allowed.
	Inbounds FirewallInboundArrayInput
	// This Firewall's unique label.
	Label pulumi.StringPtrInput
	// A list of IDs of Linodes this Firewall should govern it's network traffic for.
	Linodes pulumi.IntArrayInput
	// A firewall rule that specifies what outbound network traffic is allowed.
	Outbounds FirewallOutboundArrayInput
	// The status of the Firewall.
	Status pulumi.StringPtrInput
	// A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
	Tags pulumi.StringArrayInput
}

func (FirewallState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallState)(nil)).Elem()
}

type firewallArgs struct {
	// If `true`, the Firewall's rules are not enforced (defaults to `false`).
	Disabled *bool `pulumi:"disabled"`
	// A firewall rule that specifies what inbound network traffic is allowed.
	Inbounds []FirewallInbound `pulumi:"inbounds"`
	// This Firewall's unique label.
	Label *string `pulumi:"label"`
	// A list of IDs of Linodes this Firewall should govern it's network traffic for.
	Linodes []int `pulumi:"linodes"`
	// A firewall rule that specifies what outbound network traffic is allowed.
	Outbounds []FirewallOutbound `pulumi:"outbounds"`
	// A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Firewall resource.
type FirewallArgs struct {
	// If `true`, the Firewall's rules are not enforced (defaults to `false`).
	Disabled pulumi.BoolPtrInput
	// A firewall rule that specifies what inbound network traffic is allowed.
	Inbounds FirewallInboundArrayInput
	// This Firewall's unique label.
	Label pulumi.StringPtrInput
	// A list of IDs of Linodes this Firewall should govern it's network traffic for.
	Linodes pulumi.IntArrayInput
	// A firewall rule that specifies what outbound network traffic is allowed.
	Outbounds FirewallOutboundArrayInput
	// A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
	Tags pulumi.StringArrayInput
}

func (FirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallArgs)(nil)).Elem()
}

type FirewallInput interface {
	pulumi.Input

	ToFirewallOutput() FirewallOutput
	ToFirewallOutputWithContext(ctx context.Context) FirewallOutput
}

func (Firewall) ElementType() reflect.Type {
	return reflect.TypeOf((*Firewall)(nil)).Elem()
}

func (i Firewall) ToFirewallOutput() FirewallOutput {
	return i.ToFirewallOutputWithContext(context.Background())
}

func (i Firewall) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallOutput)
}

type FirewallOutput struct {
	*pulumi.OutputState
}

func (FirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallOutput)(nil)).Elem()
}

func (o FirewallOutput) ToFirewallOutput() FirewallOutput {
	return o
}

func (o FirewallOutput) ToFirewallOutputWithContext(ctx context.Context) FirewallOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FirewallOutput{})
}
