// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Kubernetes versions available for deployment to a Kubernetes cluster.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-version).
//
// ## Example Usage
//
// The following example shows how one might use this data source to access information about a Linode LKE Version.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.GetLkeVersion(ctx, &linode.GetLkeVersionArgs{
//				Id: "1.31",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// The following example shows how one might use this data source to access information about a Linode LKE Version
// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
//
// > **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.GetLkeVersion(ctx, &linode.GetLkeVersionArgs{
//				Id:   "1.31",
//				Tier: pulumi.StringRef("standard"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLkeVersion(ctx *pulumi.Context, args *GetLkeVersionArgs, opts ...pulumi.InvokeOption) (*GetLkeVersionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLkeVersionResult
	err := ctx.Invoke("linode:index/getLkeVersion:getLkeVersion", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLkeVersion.
type GetLkeVersionArgs struct {
	// The unique ID of this Linode LKE Version.
	Id string `pulumi:"id"`
	// The tier (`standard` or `enterprise`) of Linode LKE Version to fetch.
	Tier *string `pulumi:"tier"`
}

// A collection of values returned by getLkeVersion.
type GetLkeVersionResult struct {
	// The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
	Id string `pulumi:"id"`
	// The Kubernetes version tier. Only exported if `tier` was provided when using the datasource.
	Tier string `pulumi:"tier"`
}

func GetLkeVersionOutput(ctx *pulumi.Context, args GetLkeVersionOutputArgs, opts ...pulumi.InvokeOption) GetLkeVersionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetLkeVersionResultOutput, error) {
			args := v.(GetLkeVersionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("linode:index/getLkeVersion:getLkeVersion", args, GetLkeVersionResultOutput{}, options).(GetLkeVersionResultOutput), nil
		}).(GetLkeVersionResultOutput)
}

// A collection of arguments for invoking getLkeVersion.
type GetLkeVersionOutputArgs struct {
	// The unique ID of this Linode LKE Version.
	Id pulumi.StringInput `pulumi:"id"`
	// The tier (`standard` or `enterprise`) of Linode LKE Version to fetch.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (GetLkeVersionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLkeVersionArgs)(nil)).Elem()
}

// A collection of values returned by getLkeVersion.
type GetLkeVersionResultOutput struct{ *pulumi.OutputState }

func (GetLkeVersionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLkeVersionResult)(nil)).Elem()
}

func (o GetLkeVersionResultOutput) ToGetLkeVersionResultOutput() GetLkeVersionResultOutput {
	return o
}

func (o GetLkeVersionResultOutput) ToGetLkeVersionResultOutputWithContext(ctx context.Context) GetLkeVersionResultOutput {
	return o
}

// The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
func (o GetLkeVersionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLkeVersionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Kubernetes version tier. Only exported if `tier` was provided when using the datasource.
func (o GetLkeVersionResultOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v GetLkeVersionResult) string { return v.Tier }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLkeVersionResultOutput{})
}
