// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Vlan struct {
	pulumi.CustomResourceState

	// The Linodes attached to this vlan.
	AttachedLinodes VlanAttachedLinodeArrayOutput `pulumi:"attachedLinodes"`
	// The CIDR block for this VLAN.
	CidrBlock pulumi.StringPtrOutput `pulumi:"cidrBlock"`
	// Description of the vlan for display purposes only.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of IDs of Linodes to attach to this VLAN.
	Linodes pulumi.IntArrayOutput `pulumi:"linodes"`
	// The region of where the VLAN is deployed.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewVlan registers a new resource with the given unique name, arguments, and options.
func NewVlan(ctx *pulumi.Context,
	name string, args *VlanArgs, opts ...pulumi.ResourceOption) (*Vlan, error) {
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	if args == nil {
		args = &VlanArgs{}
	}
	var resource Vlan
	err := ctx.RegisterResource("linode:index/vlan:Vlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlan gets an existing Vlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanState, opts ...pulumi.ResourceOption) (*Vlan, error) {
	var resource Vlan
	err := ctx.ReadResource("linode:index/vlan:Vlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vlan resources.
type vlanState struct {
	// The Linodes attached to this vlan.
	AttachedLinodes []VlanAttachedLinode `pulumi:"attachedLinodes"`
	// The CIDR block for this VLAN.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Description of the vlan for display purposes only.
	Description *string `pulumi:"description"`
	// A list of IDs of Linodes to attach to this VLAN.
	Linodes []int `pulumi:"linodes"`
	// The region of where the VLAN is deployed.
	Region *string `pulumi:"region"`
}

type VlanState struct {
	// The Linodes attached to this vlan.
	AttachedLinodes VlanAttachedLinodeArrayInput
	// The CIDR block for this VLAN.
	CidrBlock pulumi.StringPtrInput
	// Description of the vlan for display purposes only.
	Description pulumi.StringPtrInput
	// A list of IDs of Linodes to attach to this VLAN.
	Linodes pulumi.IntArrayInput
	// The region of where the VLAN is deployed.
	Region pulumi.StringPtrInput
}

func (VlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanState)(nil)).Elem()
}

type vlanArgs struct {
	// The CIDR block for this VLAN.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Description of the vlan for display purposes only.
	Description *string `pulumi:"description"`
	// A list of IDs of Linodes to attach to this VLAN.
	Linodes []int `pulumi:"linodes"`
	// The region of where the VLAN is deployed.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a Vlan resource.
type VlanArgs struct {
	// The CIDR block for this VLAN.
	CidrBlock pulumi.StringPtrInput
	// Description of the vlan for display purposes only.
	Description pulumi.StringPtrInput
	// A list of IDs of Linodes to attach to this VLAN.
	Linodes pulumi.IntArrayInput
	// The region of where the VLAN is deployed.
	Region pulumi.StringInput
}

func (VlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanArgs)(nil)).Elem()
}

type VlanInput interface {
	pulumi.Input

	ToVlanOutput() VlanOutput
	ToVlanOutputWithContext(ctx context.Context) VlanOutput
}

func (Vlan) ElementType() reflect.Type {
	return reflect.TypeOf((*Vlan)(nil)).Elem()
}

func (i Vlan) ToVlanOutput() VlanOutput {
	return i.ToVlanOutputWithContext(context.Background())
}

func (i Vlan) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanOutput)
}

type VlanOutput struct {
	*pulumi.OutputState
}

func (VlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanOutput)(nil)).Elem()
}

func (o VlanOutput) ToVlanOutput() VlanOutput {
	return o
}

func (o VlanOutput) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(VlanOutput{})
}
