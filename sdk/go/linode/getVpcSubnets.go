// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a list of Linode VPC subnets that match a set of filters.
//
// ## Example Usage
//
// The following example shows how one might use this data source to list VPC subnets.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			filtered_subnets, err := linode.GetVpcSubnets(ctx, &linode.GetVpcSubnetsArgs{
//				VpcId: 123,
//				Filters: []linode.GetVpcSubnetsFilter{
//					{
//						Name: "label",
//						Values: []string{
//							"test",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("vpcSubnets", filtered_subnets.VpcSubnets)
//			return nil
//		})
//	}
//
// ```
// ## Filterable Fields
//
// * `id`
//
// * `label`
//
// * `ipv4`
func GetVpcSubnets(ctx *pulumi.Context, args *GetVpcSubnetsArgs, opts ...pulumi.InvokeOption) (*GetVpcSubnetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcSubnetsResult
	err := ctx.Invoke("linode:index/getVpcSubnets:getVpcSubnets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcSubnets.
type GetVpcSubnetsArgs struct {
	Filters []GetVpcSubnetsFilter `pulumi:"filters"`
	// The id of the parent VPC for the list of VPCs.
	//
	// * `filter` - (Optional) A set of filters used to select Linode VPC subnets that meet certain requirements.
	VpcId      int                      `pulumi:"vpcId"`
	VpcSubnets []GetVpcSubnetsVpcSubnet `pulumi:"vpcSubnets"`
}

// A collection of values returned by getVpcSubnets.
type GetVpcSubnetsResult struct {
	Filters []GetVpcSubnetsFilter `pulumi:"filters"`
	// The unique id of the VPC subnet.
	Id         string                   `pulumi:"id"`
	VpcId      int                      `pulumi:"vpcId"`
	VpcSubnets []GetVpcSubnetsVpcSubnet `pulumi:"vpcSubnets"`
}

func GetVpcSubnetsOutput(ctx *pulumi.Context, args GetVpcSubnetsOutputArgs, opts ...pulumi.InvokeOption) GetVpcSubnetsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVpcSubnetsResult, error) {
			args := v.(GetVpcSubnetsArgs)
			r, err := GetVpcSubnets(ctx, &args, opts...)
			var s GetVpcSubnetsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVpcSubnetsResultOutput)
}

// A collection of arguments for invoking getVpcSubnets.
type GetVpcSubnetsOutputArgs struct {
	Filters GetVpcSubnetsFilterArrayInput `pulumi:"filters"`
	// The id of the parent VPC for the list of VPCs.
	//
	// * `filter` - (Optional) A set of filters used to select Linode VPC subnets that meet certain requirements.
	VpcId      pulumi.IntInput                  `pulumi:"vpcId"`
	VpcSubnets GetVpcSubnetsVpcSubnetArrayInput `pulumi:"vpcSubnets"`
}

func (GetVpcSubnetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcSubnetsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcSubnets.
type GetVpcSubnetsResultOutput struct{ *pulumi.OutputState }

func (GetVpcSubnetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcSubnetsResult)(nil)).Elem()
}

func (o GetVpcSubnetsResultOutput) ToGetVpcSubnetsResultOutput() GetVpcSubnetsResultOutput {
	return o
}

func (o GetVpcSubnetsResultOutput) ToGetVpcSubnetsResultOutputWithContext(ctx context.Context) GetVpcSubnetsResultOutput {
	return o
}

func (o GetVpcSubnetsResultOutput) Filters() GetVpcSubnetsFilterArrayOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) []GetVpcSubnetsFilter { return v.Filters }).(GetVpcSubnetsFilterArrayOutput)
}

// The unique id of the VPC subnet.
func (o GetVpcSubnetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcSubnetsResultOutput) VpcId() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) int { return v.VpcId }).(pulumi.IntOutput)
}

func (o GetVpcSubnetsResultOutput) VpcSubnets() GetVpcSubnetsVpcSubnetArrayOutput {
	return o.ApplyT(func(v GetVpcSubnetsResult) []GetVpcSubnetsVpcSubnet { return v.VpcSubnets }).(GetVpcSubnetsVpcSubnetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcSubnetsResultOutput{})
}
