// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `apiVersion` provider argument must be set to `v4beta`.
//
// Provides information about Linode NodeBalancers VPC configurations that match a set of filters.
// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancers).
//
// ## Example Usage
//
// Retrieve all VPC configurations under a NodeBalancer:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.GetNodebalancerVpcs(ctx, &linode.GetNodebalancerVpcsArgs{
//				NodebalancerId: 12345,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Retrieve all VPC configurations under a NodeBalancer with an IPv4 range of "10.0.0.4/30":
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-linode/sdk/v5/go/linode"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := linode.GetNodebalancerVpcs(ctx, &linode.GetNodebalancerVpcsArgs{
//				NodebalancerId: 12345,
//				Filters: []linode.GetNodebalancerVpcsFilter{
//					{
//						Name: "ipv4_range",
//						Values: []string{
//							"10.0.0.4/30",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Filterable Fields
//
// * `id`
//
// * `ipv4Range`
//
// * `nodebalancerId`
//
// * `subnetId`
//
// * `vpcId`
func GetNodebalancerVpcs(ctx *pulumi.Context, args *GetNodebalancerVpcsArgs, opts ...pulumi.InvokeOption) (*GetNodebalancerVpcsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodebalancerVpcsResult
	err := ctx.Invoke("linode:index/getNodebalancerVpcs:getNodebalancerVpcs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodebalancerVpcs.
type GetNodebalancerVpcsArgs struct {
	Filters []GetNodebalancerVpcsFilter `pulumi:"filters"`
	// The ID of the NodeBalancer to list VPC configurations for.
	//
	// * `filter` - (Optional) A set of filters used to select VPC configurations that meet certain requirements.
	NodebalancerId int `pulumi:"nodebalancerId"`
	// The order in which results should be returned. (`asc`, `desc`; default `asc`)
	Order *string `pulumi:"order"`
	// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
	OrderBy *string `pulumi:"orderBy"`
}

// A collection of values returned by getNodebalancerVpcs.
type GetNodebalancerVpcsResult struct {
	Filters []GetNodebalancerVpcsFilter `pulumi:"filters"`
	// The ID of the VPC configuration.
	Id string `pulumi:"id"`
	// The ID of the parent NodeBalancer for this VPC configuration.
	NodebalancerId int                            `pulumi:"nodebalancerId"`
	Order          *string                        `pulumi:"order"`
	OrderBy        *string                        `pulumi:"orderBy"`
	VpcConfigs     []GetNodebalancerVpcsVpcConfig `pulumi:"vpcConfigs"`
}

func GetNodebalancerVpcsOutput(ctx *pulumi.Context, args GetNodebalancerVpcsOutputArgs, opts ...pulumi.InvokeOption) GetNodebalancerVpcsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNodebalancerVpcsResultOutput, error) {
			args := v.(GetNodebalancerVpcsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("linode:index/getNodebalancerVpcs:getNodebalancerVpcs", args, GetNodebalancerVpcsResultOutput{}, options).(GetNodebalancerVpcsResultOutput), nil
		}).(GetNodebalancerVpcsResultOutput)
}

// A collection of arguments for invoking getNodebalancerVpcs.
type GetNodebalancerVpcsOutputArgs struct {
	Filters GetNodebalancerVpcsFilterArrayInput `pulumi:"filters"`
	// The ID of the NodeBalancer to list VPC configurations for.
	//
	// * `filter` - (Optional) A set of filters used to select VPC configurations that meet certain requirements.
	NodebalancerId pulumi.IntInput `pulumi:"nodebalancerId"`
	// The order in which results should be returned. (`asc`, `desc`; default `asc`)
	Order pulumi.StringPtrInput `pulumi:"order"`
	// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
	OrderBy pulumi.StringPtrInput `pulumi:"orderBy"`
}

func (GetNodebalancerVpcsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodebalancerVpcsArgs)(nil)).Elem()
}

// A collection of values returned by getNodebalancerVpcs.
type GetNodebalancerVpcsResultOutput struct{ *pulumi.OutputState }

func (GetNodebalancerVpcsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodebalancerVpcsResult)(nil)).Elem()
}

func (o GetNodebalancerVpcsResultOutput) ToGetNodebalancerVpcsResultOutput() GetNodebalancerVpcsResultOutput {
	return o
}

func (o GetNodebalancerVpcsResultOutput) ToGetNodebalancerVpcsResultOutputWithContext(ctx context.Context) GetNodebalancerVpcsResultOutput {
	return o
}

func (o GetNodebalancerVpcsResultOutput) Filters() GetNodebalancerVpcsFilterArrayOutput {
	return o.ApplyT(func(v GetNodebalancerVpcsResult) []GetNodebalancerVpcsFilter { return v.Filters }).(GetNodebalancerVpcsFilterArrayOutput)
}

// The ID of the VPC configuration.
func (o GetNodebalancerVpcsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodebalancerVpcsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the parent NodeBalancer for this VPC configuration.
func (o GetNodebalancerVpcsResultOutput) NodebalancerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodebalancerVpcsResult) int { return v.NodebalancerId }).(pulumi.IntOutput)
}

func (o GetNodebalancerVpcsResultOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodebalancerVpcsResult) *string { return v.Order }).(pulumi.StringPtrOutput)
}

func (o GetNodebalancerVpcsResultOutput) OrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodebalancerVpcsResult) *string { return v.OrderBy }).(pulumi.StringPtrOutput)
}

func (o GetNodebalancerVpcsResultOutput) VpcConfigs() GetNodebalancerVpcsVpcConfigArrayOutput {
	return o.ApplyT(func(v GetNodebalancerVpcsResult) []GetNodebalancerVpcsVpcConfig { return v.VpcConfigs }).(GetNodebalancerVpcsVpcConfigArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodebalancerVpcsResultOutput{})
}
