// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package linode

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-linode/sdk/v4/go/linode/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "linode:index/accountSettings:AccountSettings":
		r = &AccountSettings{}
	case "linode:index/databaseAccessControls:DatabaseAccessControls":
		r = &DatabaseAccessControls{}
	case "linode:index/databaseMysql:DatabaseMysql":
		r = &DatabaseMysql{}
	case "linode:index/databasePostgresql:DatabasePostgresql":
		r = &DatabasePostgresql{}
	case "linode:index/domain:Domain":
		r = &Domain{}
	case "linode:index/domainRecord:DomainRecord":
		r = &DomainRecord{}
	case "linode:index/firewall:Firewall":
		r = &Firewall{}
	case "linode:index/firewallDevice:FirewallDevice":
		r = &FirewallDevice{}
	case "linode:index/image:Image":
		r = &Image{}
	case "linode:index/instance:Instance":
		r = &Instance{}
	case "linode:index/instanceDisk:InstanceDisk":
		r = &InstanceDisk{}
	case "linode:index/instanceIp:InstanceIp":
		r = &InstanceIp{}
	case "linode:index/instanceSharedIps:InstanceSharedIps":
		r = &InstanceSharedIps{}
	case "linode:index/ipv6Range:Ipv6Range":
		r = &Ipv6Range{}
	case "linode:index/lkeCluster:LkeCluster":
		r = &LkeCluster{}
	case "linode:index/nodeBalancer:NodeBalancer":
		r = &NodeBalancer{}
	case "linode:index/nodeBalancerConfig:NodeBalancerConfig":
		r = &NodeBalancerConfig{}
	case "linode:index/nodeBalancerNode:NodeBalancerNode":
		r = &NodeBalancerNode{}
	case "linode:index/objectStorageBucket:ObjectStorageBucket":
		r = &ObjectStorageBucket{}
	case "linode:index/objectStorageKey:ObjectStorageKey":
		r = &ObjectStorageKey{}
	case "linode:index/objectStorageObject:ObjectStorageObject":
		r = &ObjectStorageObject{}
	case "linode:index/rdns:Rdns":
		r = &Rdns{}
	case "linode:index/sshKey:SshKey":
		r = &SshKey{}
	case "linode:index/stackScript:StackScript":
		r = &StackScript{}
	case "linode:index/token:Token":
		r = &Token{}
	case "linode:index/user:User":
		r = &User{}
	case "linode:index/volume:Volume":
		r = &Volume{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:linode" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"linode",
		"index/accountSettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/databaseAccessControls",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/databaseMysql",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/databasePostgresql",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/domain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/domainRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/firewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/firewallDevice",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/image",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/instance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/instanceDisk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/instanceIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/instanceSharedIps",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/ipv6Range",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/lkeCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/nodeBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/nodeBalancerConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/nodeBalancerNode",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/objectStorageBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/objectStorageKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/objectStorageObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/rdns",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/sshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/stackScript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/token",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"linode",
		"index/volume",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"linode",
		&pkg{version},
	)
}
