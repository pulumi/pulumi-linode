# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDomainsResult',
    'AwaitableGetDomainsResult',
    'get_domains',
    'get_domains_output',
]

@pulumi.output_type
class GetDomainsResult:
    """
    A collection of values returned by getDomains.
    """
    def __init__(__self__, domains=None, filters=None, id=None, order=None, order_by=None):
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence['outputs.GetDomainsDomainResult']]:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDomainsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of this Domain.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")


class AwaitableGetDomainsResult(GetDomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsResult(
            domains=self.domains,
            filters=self.filters,
            id=self.id,
            order=self.order,
            order_by=self.order_by)


def get_domains(domains: Optional[Sequence[pulumi.InputType['GetDomainsDomainArgs']]] = None,
                filters: Optional[Sequence[pulumi.InputType['GetDomainsFilterArgs']]] = None,
                order: Optional[str] = None,
                order_by: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainsResult:
    """
    Provides information about Linode Domains that match a set of filters.

    ## Example Usage

    Get information about all Linode Cloud Domains with a specific tag:

    ```python
    import pulumi
    import pulumi_linode as linode

    specific = linode.get_domains(filters=[linode.GetDomainsFilterArgs(
        name="tags",
        values=["test-tag"],
    )])
    pulumi.export("domain", specific.domains[0].domain)
    ```
    ## Filterable Fields

    * `group`

    * `tags`

    * `domain`

    * `type`

    * `status`

    * `description`

    * `master_ips`

    * `axfr_ips`

    * `ttl_sec`

    * `retry_sec`

    * `expire_sec`

    * `refresh_sec`

    * `soa_email`


    :param str order: The order in which results should be returned. (`asc`, `desc`; default `asc`)
    :param str order_by: The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
    """
    __args__ = dict()
    __args__['domains'] = domains
    __args__['filters'] = filters
    __args__['order'] = order
    __args__['orderBy'] = order_by
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('linode:index/getDomains:getDomains', __args__, opts=opts, typ=GetDomainsResult).value

    return AwaitableGetDomainsResult(
        domains=pulumi.get(__ret__, 'domains'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        order=pulumi.get(__ret__, 'order'),
        order_by=pulumi.get(__ret__, 'order_by'))


@_utilities.lift_output_func(get_domains)
def get_domains_output(domains: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDomainsDomainArgs']]]]] = None,
                       filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDomainsFilterArgs']]]]] = None,
                       order: Optional[pulumi.Input[Optional[str]]] = None,
                       order_by: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainsResult]:
    """
    Provides information about Linode Domains that match a set of filters.

    ## Example Usage

    Get information about all Linode Cloud Domains with a specific tag:

    ```python
    import pulumi
    import pulumi_linode as linode

    specific = linode.get_domains(filters=[linode.GetDomainsFilterArgs(
        name="tags",
        values=["test-tag"],
    )])
    pulumi.export("domain", specific.domains[0].domain)
    ```
    ## Filterable Fields

    * `group`

    * `tags`

    * `domain`

    * `type`

    * `status`

    * `description`

    * `master_ips`

    * `axfr_ips`

    * `ttl_sec`

    * `retry_sec`

    * `expire_sec`

    * `refresh_sec`

    * `soa_email`


    :param str order: The order in which results should be returned. (`asc`, `desc`; default `asc`)
    :param str order_by: The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
    """
    ...
