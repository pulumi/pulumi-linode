# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetChildAccountsResult',
    'AwaitableGetChildAccountsResult',
    'get_child_accounts',
    'get_child_accounts_output',
]

@pulumi.output_type
class GetChildAccountsResult:
    """
    A collection of values returned by getChildAccounts.
    """
    def __init__(__self__, child_accounts=None, filters=None, id=None):
        if child_accounts and not isinstance(child_accounts, list):
            raise TypeError("Expected argument 'child_accounts' to be a list")
        pulumi.set(__self__, "child_accounts", child_accounts)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="childAccounts")
    def child_accounts(self) -> Optional[Sequence['outputs.GetChildAccountsChildAccountResult']]:
        return pulumi.get(self, "child_accounts")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetChildAccountsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


class AwaitableGetChildAccountsResult(GetChildAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetChildAccountsResult(
            child_accounts=self.child_accounts,
            filters=self.filters,
            id=self.id)


def get_child_accounts(child_accounts: Optional[Sequence[pulumi.InputType['GetChildAccountsChildAccountArgs']]] = None,
                       filters: Optional[Sequence[pulumi.InputType['GetChildAccountsFilterArgs']]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetChildAccountsResult:
    """
    Provides information about Linode Child Accounts that match a set of filters.

    ## Example Usage

    The following example shows how one might use this data source to access Child Accounts under the current Account.

    ```python
    import pulumi
    import pulumi_linode as linode

    all = linode.get_child_accounts()
    filtered = linode.get_child_accounts(filters=[
        linode.GetChildAccountsFilterArgs(
            name="email",
            values=["example@linode.com"],
        ),
        linode.GetChildAccountsFilterArgs(
            name="first_name",
            values=["John"],
        ),
        linode.GetChildAccountsFilterArgs(
            name="last_name",
            values=["Smith"],
        ),
    ])
    pulumi.export("allAccounts", [__item.euuid for __item in all.child_accounts])
    pulumi.export("filteredAccounts", [__item.euuid for __item in filtered.child_accounts])
    ```

    ## Filterable Fields

    * `euuid`

    * `email`

    * `first_name`

    * `last_name`

    * `company`

    * `address_1`

    * `address_2`

    * `phone`

    * `city`

    * `state`

    * `country`

    * `zip`

    * `capabilities`

    * `active_since`
    """
    __args__ = dict()
    __args__['childAccounts'] = child_accounts
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('linode:index/getChildAccounts:getChildAccounts', __args__, opts=opts, typ=GetChildAccountsResult).value

    return AwaitableGetChildAccountsResult(
        child_accounts=pulumi.get(__ret__, 'child_accounts'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_child_accounts)
def get_child_accounts_output(child_accounts: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetChildAccountsChildAccountArgs']]]]] = None,
                              filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetChildAccountsFilterArgs']]]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetChildAccountsResult]:
    """
    Provides information about Linode Child Accounts that match a set of filters.

    ## Example Usage

    The following example shows how one might use this data source to access Child Accounts under the current Account.

    ```python
    import pulumi
    import pulumi_linode as linode

    all = linode.get_child_accounts()
    filtered = linode.get_child_accounts(filters=[
        linode.GetChildAccountsFilterArgs(
            name="email",
            values=["example@linode.com"],
        ),
        linode.GetChildAccountsFilterArgs(
            name="first_name",
            values=["John"],
        ),
        linode.GetChildAccountsFilterArgs(
            name="last_name",
            values=["Smith"],
        ),
    ])
    pulumi.export("allAccounts", [__item.euuid for __item in all.child_accounts])
    pulumi.export("filteredAccounts", [__item.euuid for __item in filtered.child_accounts])
    ```

    ## Filterable Fields

    * `euuid`

    * `email`

    * `first_name`

    * `last_name`

    * `company`

    * `address_1`

    * `address_2`

    * `phone`

    * `city`

    * `state`

    * `country`

    * `zip`

    * `capabilities`

    * `active_since`
    """
    ...
