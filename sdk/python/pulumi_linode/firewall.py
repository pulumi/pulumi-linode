# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallArgs', 'Firewall']

@pulumi.input_type
class FirewallArgs:
    def __init__(__self__, *,
                 inbound_policy: pulumi.Input[str],
                 label: pulumi.Input[str],
                 outbound_policy: pulumi.Input[str],
                 disabled: Optional[pulumi.Input[bool]] = None,
                 inbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]] = None,
                 linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 outbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Firewall resource.
        :param pulumi.Input[str] inbound_policy: The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)
               
               * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[str] label: This Firewall's unique label.
        :param pulumi.Input[str] outbound_policy: The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        :param pulumi.Input[bool] disabled: If `true`, the Firewall's rules are not enforced (defaults to `false`).
               
               * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]] inbounds: A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] linodes: A list of IDs of Linodes this Firewall should govern network traffic for.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] nodebalancers: A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]] outbounds: A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        """
        FirewallArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            inbound_policy=inbound_policy,
            label=label,
            outbound_policy=outbound_policy,
            disabled=disabled,
            inbounds=inbounds,
            linodes=linodes,
            nodebalancers=nodebalancers,
            outbounds=outbounds,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             inbound_policy: Optional[pulumi.Input[str]] = None,
             label: Optional[pulumi.Input[str]] = None,
             outbound_policy: Optional[pulumi.Input[str]] = None,
             disabled: Optional[pulumi.Input[bool]] = None,
             inbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]] = None,
             linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             outbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if inbound_policy is None and 'inboundPolicy' in kwargs:
            inbound_policy = kwargs['inboundPolicy']
        if inbound_policy is None:
            raise TypeError("Missing 'inbound_policy' argument")
        if label is None:
            raise TypeError("Missing 'label' argument")
        if outbound_policy is None and 'outboundPolicy' in kwargs:
            outbound_policy = kwargs['outboundPolicy']
        if outbound_policy is None:
            raise TypeError("Missing 'outbound_policy' argument")

        _setter("inbound_policy", inbound_policy)
        _setter("label", label)
        _setter("outbound_policy", outbound_policy)
        if disabled is not None:
            _setter("disabled", disabled)
        if inbounds is not None:
            _setter("inbounds", inbounds)
        if linodes is not None:
            _setter("linodes", linodes)
        if nodebalancers is not None:
            _setter("nodebalancers", nodebalancers)
        if outbounds is not None:
            _setter("outbounds", outbounds)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> pulumi.Input[str]:
        """
        The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)

        * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        """
        return pulumi.get(self, "inbound_policy")

    @inbound_policy.setter
    def inbound_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "inbound_policy", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> pulumi.Input[str]:
        """
        The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "outbound_policy")

    @outbound_policy.setter
    def outbound_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "outbound_policy", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the Firewall's rules are not enforced (defaults to `false`).

        * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def inbounds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]]:
        """
        A firewall rule that specifies what inbound network traffic is allowed.
        """
        return pulumi.get(self, "inbounds")

    @inbounds.setter
    def inbounds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]]):
        pulumi.set(self, "inbounds", value)

    @property
    @pulumi.getter
    def linodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of IDs of Linodes this Firewall should govern network traffic for.
        """
        return pulumi.get(self, "linodes")

    @linodes.setter
    def linodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "linodes", value)

    @property
    @pulumi.getter
    def nodebalancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        """
        return pulumi.get(self, "nodebalancers")

    @nodebalancers.setter
    def nodebalancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "nodebalancers", value)

    @property
    @pulumi.getter
    def outbounds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]]:
        """
        A firewall rule that specifies what outbound network traffic is allowed.
        """
        return pulumi.get(self, "outbounds")

    @outbounds.setter
    def outbounds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]]):
        pulumi.set(self, "outbounds", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _FirewallState:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallDeviceArgs']]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 inbound_policy: Optional[pulumi.Input[str]] = None,
                 inbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 outbound_policy: Optional[pulumi.Input[str]] = None,
                 outbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Firewall resources.
        :param pulumi.Input[str] created: When this firewall was created
        :param pulumi.Input[Sequence[pulumi.Input['FirewallDeviceArgs']]] devices: The devices associated with this firewall.
        :param pulumi.Input[bool] disabled: If `true`, the Firewall's rules are not enforced (defaults to `false`).
               
               * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[str] inbound_policy: The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)
               
               * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]] inbounds: A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[str] label: This Firewall's unique label.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] linodes: A list of IDs of Linodes this Firewall should govern network traffic for.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] nodebalancers: A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        :param pulumi.Input[str] outbound_policy: The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        :param pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]] outbounds: A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[str] status: The status of the Firewall.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        :param pulumi.Input[str] updated: When this firewall was last updated
        """
        _FirewallState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            devices=devices,
            disabled=disabled,
            inbound_policy=inbound_policy,
            inbounds=inbounds,
            label=label,
            linodes=linodes,
            nodebalancers=nodebalancers,
            outbound_policy=outbound_policy,
            outbounds=outbounds,
            status=status,
            tags=tags,
            updated=updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: Optional[pulumi.Input[str]] = None,
             devices: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallDeviceArgs']]]] = None,
             disabled: Optional[pulumi.Input[bool]] = None,
             inbound_policy: Optional[pulumi.Input[str]] = None,
             inbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]] = None,
             label: Optional[pulumi.Input[str]] = None,
             linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             outbound_policy: Optional[pulumi.Input[str]] = None,
             outbounds: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]] = None,
             status: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             updated: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if inbound_policy is None and 'inboundPolicy' in kwargs:
            inbound_policy = kwargs['inboundPolicy']
        if outbound_policy is None and 'outboundPolicy' in kwargs:
            outbound_policy = kwargs['outboundPolicy']

        if created is not None:
            _setter("created", created)
        if devices is not None:
            _setter("devices", devices)
        if disabled is not None:
            _setter("disabled", disabled)
        if inbound_policy is not None:
            _setter("inbound_policy", inbound_policy)
        if inbounds is not None:
            _setter("inbounds", inbounds)
        if label is not None:
            _setter("label", label)
        if linodes is not None:
            _setter("linodes", linodes)
        if nodebalancers is not None:
            _setter("nodebalancers", nodebalancers)
        if outbound_policy is not None:
            _setter("outbound_policy", outbound_policy)
        if outbounds is not None:
            _setter("outbounds", outbounds)
        if status is not None:
            _setter("status", status)
        if tags is not None:
            _setter("tags", tags)
        if updated is not None:
            _setter("updated", updated)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        When this firewall was created
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallDeviceArgs']]]]:
        """
        The devices associated with this firewall.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If `true`, the Firewall's rules are not enforced (defaults to `false`).

        * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)

        * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        """
        return pulumi.get(self, "inbound_policy")

    @inbound_policy.setter
    def inbound_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inbound_policy", value)

    @property
    @pulumi.getter
    def inbounds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]]:
        """
        A firewall rule that specifies what inbound network traffic is allowed.
        """
        return pulumi.get(self, "inbounds")

    @inbounds.setter
    def inbounds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInboundArgs']]]]):
        pulumi.set(self, "inbounds", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def linodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of IDs of Linodes this Firewall should govern network traffic for.
        """
        return pulumi.get(self, "linodes")

    @linodes.setter
    def linodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "linodes", value)

    @property
    @pulumi.getter
    def nodebalancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        """
        return pulumi.get(self, "nodebalancers")

    @nodebalancers.setter
    def nodebalancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "nodebalancers", value)

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "outbound_policy")

    @outbound_policy.setter
    def outbound_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_policy", value)

    @property
    @pulumi.getter
    def outbounds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]]:
        """
        A firewall rule that specifies what outbound network traffic is allowed.
        """
        return pulumi.get(self, "outbounds")

    @outbounds.setter
    def outbounds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallOutboundArgs']]]]):
        pulumi.set(self, "outbounds", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the Firewall.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def updated(self) -> Optional[pulumi.Input[str]]:
        """
        When this firewall was last updated
        """
        return pulumi.get(self, "updated")

    @updated.setter
    def updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated", value)


class Firewall(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 inbound_policy: Optional[pulumi.Input[str]] = None,
                 inbounds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInboundArgs']]]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 outbound_policy: Optional[pulumi.Input[str]] = None,
                 outbounds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallOutboundArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a Linode Firewall.

        ## Import

        Firewalls can be imported using the `id`, e.g.

        ```sh
         $ pulumi import linode:index/firewall:Firewall my_firewall 12345
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: If `true`, the Firewall's rules are not enforced (defaults to `false`).
               
               * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[str] inbound_policy: The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)
               
               * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInboundArgs']]]] inbounds: A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[str] label: This Firewall's unique label.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] linodes: A list of IDs of Linodes this Firewall should govern network traffic for.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] nodebalancers: A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        :param pulumi.Input[str] outbound_policy: The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallOutboundArgs']]]] outbounds: A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Linode Firewall.

        ## Import

        Firewalls can be imported using the `id`, e.g.

        ```sh
         $ pulumi import linode:index/firewall:Firewall my_firewall 12345
        ```

        :param str resource_name: The name of the resource.
        :param FirewallArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            FirewallArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 inbound_policy: Optional[pulumi.Input[str]] = None,
                 inbounds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInboundArgs']]]]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 outbound_policy: Optional[pulumi.Input[str]] = None,
                 outbounds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallOutboundArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallArgs.__new__(FirewallArgs)

            __props__.__dict__["disabled"] = disabled
            if inbound_policy is None and not opts.urn:
                raise TypeError("Missing required property 'inbound_policy'")
            __props__.__dict__["inbound_policy"] = inbound_policy
            __props__.__dict__["inbounds"] = inbounds
            if label is None and not opts.urn:
                raise TypeError("Missing required property 'label'")
            __props__.__dict__["label"] = label
            __props__.__dict__["linodes"] = linodes
            __props__.__dict__["nodebalancers"] = nodebalancers
            if outbound_policy is None and not opts.urn:
                raise TypeError("Missing required property 'outbound_policy'")
            __props__.__dict__["outbound_policy"] = outbound_policy
            __props__.__dict__["outbounds"] = outbounds
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created"] = None
            __props__.__dict__["devices"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated"] = None
        super(Firewall, __self__).__init__(
            'linode:index/firewall:Firewall',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created: Optional[pulumi.Input[str]] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallDeviceArgs']]]]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            inbound_policy: Optional[pulumi.Input[str]] = None,
            inbounds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInboundArgs']]]]] = None,
            label: Optional[pulumi.Input[str]] = None,
            linodes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            nodebalancers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            outbound_policy: Optional[pulumi.Input[str]] = None,
            outbounds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallOutboundArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            updated: Optional[pulumi.Input[str]] = None) -> 'Firewall':
        """
        Get an existing Firewall resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created: When this firewall was created
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallDeviceArgs']]]] devices: The devices associated with this firewall.
        :param pulumi.Input[bool] disabled: If `true`, the Firewall's rules are not enforced (defaults to `false`).
               
               * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[str] inbound_policy: The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)
               
               * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallInboundArgs']]]] inbounds: A firewall rule that specifies what inbound network traffic is allowed.
        :param pulumi.Input[str] label: This Firewall's unique label.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] linodes: A list of IDs of Linodes this Firewall should govern network traffic for.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] nodebalancers: A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        :param pulumi.Input[str] outbound_policy: The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallOutboundArgs']]]] outbounds: A firewall rule that specifies what outbound network traffic is allowed.
        :param pulumi.Input[str] status: The status of the Firewall.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        :param pulumi.Input[str] updated: When this firewall was last updated
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallState.__new__(_FirewallState)

        __props__.__dict__["created"] = created
        __props__.__dict__["devices"] = devices
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["inbound_policy"] = inbound_policy
        __props__.__dict__["inbounds"] = inbounds
        __props__.__dict__["label"] = label
        __props__.__dict__["linodes"] = linodes
        __props__.__dict__["nodebalancers"] = nodebalancers
        __props__.__dict__["outbound_policy"] = outbound_policy
        __props__.__dict__["outbounds"] = outbounds
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated"] = updated
        return Firewall(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        When this firewall was created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Sequence['outputs.FirewallDevice']]:
        """
        The devices associated with this firewall.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If `true`, the Firewall's rules are not enforced (defaults to `false`).

        * `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> pulumi.Output[str]:
        """
        The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)

        * `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.
        """
        return pulumi.get(self, "inbound_policy")

    @property
    @pulumi.getter
    def inbounds(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallInbound']]]:
        """
        A firewall rule that specifies what inbound network traffic is allowed.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[str]:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def linodes(self) -> pulumi.Output[Sequence[int]]:
        """
        A list of IDs of Linodes this Firewall should govern network traffic for.
        """
        return pulumi.get(self, "linodes")

    @property
    @pulumi.getter
    def nodebalancers(self) -> pulumi.Output[Sequence[int]]:
        """
        A list of IDs of NodeBalancers this Firewall should govern network traffic for.
        """
        return pulumi.get(self, "nodebalancers")

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> pulumi.Output[str]:
        """
        The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "outbound_policy")

    @property
    @pulumi.getter
    def outbounds(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallOutbound']]]:
        """
        A firewall rule that specifies what outbound network traffic is allowed.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the Firewall.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        """
        When this firewall was last updated
        """
        return pulumi.get(self, "updated")

