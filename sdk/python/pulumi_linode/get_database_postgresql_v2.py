# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabasePostgresqlV2Result',
    'AwaitableGetDatabasePostgresqlV2Result',
    'get_database_postgresql_v2',
    'get_database_postgresql_v2_output',
]

@pulumi.output_type
class GetDatabasePostgresqlV2Result:
    """
    A collection of values returned by getDatabasePostgresqlV2.
    """
    def __init__(__self__, allow_lists=None, ca_cert=None, cluster_size=None, created=None, encrypted=None, engine=None, engine_config_pg_autovacuum_analyze_scale_factor=None, engine_config_pg_autovacuum_analyze_threshold=None, engine_config_pg_autovacuum_max_workers=None, engine_config_pg_autovacuum_naptime=None, engine_config_pg_autovacuum_vacuum_cost_delay=None, engine_config_pg_autovacuum_vacuum_cost_limit=None, engine_config_pg_autovacuum_vacuum_scale_factor=None, engine_config_pg_autovacuum_vacuum_threshold=None, engine_config_pg_bgwriter_delay=None, engine_config_pg_bgwriter_flush_after=None, engine_config_pg_bgwriter_lru_maxpages=None, engine_config_pg_bgwriter_lru_multiplier=None, engine_config_pg_deadlock_timeout=None, engine_config_pg_default_toast_compression=None, engine_config_pg_idle_in_transaction_session_timeout=None, engine_config_pg_jit=None, engine_config_pg_max_files_per_process=None, engine_config_pg_max_locks_per_transaction=None, engine_config_pg_max_logical_replication_workers=None, engine_config_pg_max_parallel_workers=None, engine_config_pg_max_parallel_workers_per_gather=None, engine_config_pg_max_pred_locks_per_transaction=None, engine_config_pg_max_replication_slots=None, engine_config_pg_max_slot_wal_keep_size=None, engine_config_pg_max_stack_depth=None, engine_config_pg_max_standby_archive_delay=None, engine_config_pg_max_standby_streaming_delay=None, engine_config_pg_max_wal_senders=None, engine_config_pg_max_worker_processes=None, engine_config_pg_password_encryption=None, engine_config_pg_pg_partman_bgw_interval=None, engine_config_pg_pg_partman_bgw_role=None, engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan=None, engine_config_pg_pg_stat_monitor_pgsm_max_buckets=None, engine_config_pg_pg_stat_statements_track=None, engine_config_pg_stat_monitor_enable=None, engine_config_pg_temp_file_limit=None, engine_config_pg_timezone=None, engine_config_pg_track_activity_query_size=None, engine_config_pg_track_commit_timestamp=None, engine_config_pg_track_functions=None, engine_config_pg_track_io_timing=None, engine_config_pg_wal_sender_timeout=None, engine_config_pg_wal_writer_delay=None, engine_config_pglookout_max_failover_replication_time_lag=None, engine_config_shared_buffers_percentage=None, engine_config_work_mem=None, engine_id=None, fork_restore_time=None, fork_source=None, host_primary=None, host_secondary=None, id=None, label=None, members=None, oldest_restore_time=None, pending_updates=None, platform=None, port=None, region=None, root_password=None, root_username=None, ssl_connection=None, status=None, suspended=None, type=None, updated=None, updates=None, version=None):
        if allow_lists and not isinstance(allow_lists, list):
            raise TypeError("Expected argument 'allow_lists' to be a list")
        pulumi.set(__self__, "allow_lists", allow_lists)
        if ca_cert and not isinstance(ca_cert, str):
            raise TypeError("Expected argument 'ca_cert' to be a str")
        pulumi.set(__self__, "ca_cert", ca_cert)
        if cluster_size and not isinstance(cluster_size, int):
            raise TypeError("Expected argument 'cluster_size' to be a int")
        pulumi.set(__self__, "cluster_size", cluster_size)
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        pulumi.set(__self__, "created", created)
        if encrypted and not isinstance(encrypted, bool):
            raise TypeError("Expected argument 'encrypted' to be a bool")
        pulumi.set(__self__, "encrypted", encrypted)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if engine_config_pg_autovacuum_analyze_scale_factor and not isinstance(engine_config_pg_autovacuum_analyze_scale_factor, float):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_analyze_scale_factor' to be a float")
        pulumi.set(__self__, "engine_config_pg_autovacuum_analyze_scale_factor", engine_config_pg_autovacuum_analyze_scale_factor)
        if engine_config_pg_autovacuum_analyze_threshold and not isinstance(engine_config_pg_autovacuum_analyze_threshold, int):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_analyze_threshold' to be a int")
        pulumi.set(__self__, "engine_config_pg_autovacuum_analyze_threshold", engine_config_pg_autovacuum_analyze_threshold)
        if engine_config_pg_autovacuum_max_workers and not isinstance(engine_config_pg_autovacuum_max_workers, int):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_max_workers' to be a int")
        pulumi.set(__self__, "engine_config_pg_autovacuum_max_workers", engine_config_pg_autovacuum_max_workers)
        if engine_config_pg_autovacuum_naptime and not isinstance(engine_config_pg_autovacuum_naptime, int):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_naptime' to be a int")
        pulumi.set(__self__, "engine_config_pg_autovacuum_naptime", engine_config_pg_autovacuum_naptime)
        if engine_config_pg_autovacuum_vacuum_cost_delay and not isinstance(engine_config_pg_autovacuum_vacuum_cost_delay, int):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_vacuum_cost_delay' to be a int")
        pulumi.set(__self__, "engine_config_pg_autovacuum_vacuum_cost_delay", engine_config_pg_autovacuum_vacuum_cost_delay)
        if engine_config_pg_autovacuum_vacuum_cost_limit and not isinstance(engine_config_pg_autovacuum_vacuum_cost_limit, int):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_vacuum_cost_limit' to be a int")
        pulumi.set(__self__, "engine_config_pg_autovacuum_vacuum_cost_limit", engine_config_pg_autovacuum_vacuum_cost_limit)
        if engine_config_pg_autovacuum_vacuum_scale_factor and not isinstance(engine_config_pg_autovacuum_vacuum_scale_factor, float):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_vacuum_scale_factor' to be a float")
        pulumi.set(__self__, "engine_config_pg_autovacuum_vacuum_scale_factor", engine_config_pg_autovacuum_vacuum_scale_factor)
        if engine_config_pg_autovacuum_vacuum_threshold and not isinstance(engine_config_pg_autovacuum_vacuum_threshold, int):
            raise TypeError("Expected argument 'engine_config_pg_autovacuum_vacuum_threshold' to be a int")
        pulumi.set(__self__, "engine_config_pg_autovacuum_vacuum_threshold", engine_config_pg_autovacuum_vacuum_threshold)
        if engine_config_pg_bgwriter_delay and not isinstance(engine_config_pg_bgwriter_delay, int):
            raise TypeError("Expected argument 'engine_config_pg_bgwriter_delay' to be a int")
        pulumi.set(__self__, "engine_config_pg_bgwriter_delay", engine_config_pg_bgwriter_delay)
        if engine_config_pg_bgwriter_flush_after and not isinstance(engine_config_pg_bgwriter_flush_after, int):
            raise TypeError("Expected argument 'engine_config_pg_bgwriter_flush_after' to be a int")
        pulumi.set(__self__, "engine_config_pg_bgwriter_flush_after", engine_config_pg_bgwriter_flush_after)
        if engine_config_pg_bgwriter_lru_maxpages and not isinstance(engine_config_pg_bgwriter_lru_maxpages, int):
            raise TypeError("Expected argument 'engine_config_pg_bgwriter_lru_maxpages' to be a int")
        pulumi.set(__self__, "engine_config_pg_bgwriter_lru_maxpages", engine_config_pg_bgwriter_lru_maxpages)
        if engine_config_pg_bgwriter_lru_multiplier and not isinstance(engine_config_pg_bgwriter_lru_multiplier, float):
            raise TypeError("Expected argument 'engine_config_pg_bgwriter_lru_multiplier' to be a float")
        pulumi.set(__self__, "engine_config_pg_bgwriter_lru_multiplier", engine_config_pg_bgwriter_lru_multiplier)
        if engine_config_pg_deadlock_timeout and not isinstance(engine_config_pg_deadlock_timeout, int):
            raise TypeError("Expected argument 'engine_config_pg_deadlock_timeout' to be a int")
        pulumi.set(__self__, "engine_config_pg_deadlock_timeout", engine_config_pg_deadlock_timeout)
        if engine_config_pg_default_toast_compression and not isinstance(engine_config_pg_default_toast_compression, str):
            raise TypeError("Expected argument 'engine_config_pg_default_toast_compression' to be a str")
        pulumi.set(__self__, "engine_config_pg_default_toast_compression", engine_config_pg_default_toast_compression)
        if engine_config_pg_idle_in_transaction_session_timeout and not isinstance(engine_config_pg_idle_in_transaction_session_timeout, int):
            raise TypeError("Expected argument 'engine_config_pg_idle_in_transaction_session_timeout' to be a int")
        pulumi.set(__self__, "engine_config_pg_idle_in_transaction_session_timeout", engine_config_pg_idle_in_transaction_session_timeout)
        if engine_config_pg_jit and not isinstance(engine_config_pg_jit, bool):
            raise TypeError("Expected argument 'engine_config_pg_jit' to be a bool")
        pulumi.set(__self__, "engine_config_pg_jit", engine_config_pg_jit)
        if engine_config_pg_max_files_per_process and not isinstance(engine_config_pg_max_files_per_process, int):
            raise TypeError("Expected argument 'engine_config_pg_max_files_per_process' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_files_per_process", engine_config_pg_max_files_per_process)
        if engine_config_pg_max_locks_per_transaction and not isinstance(engine_config_pg_max_locks_per_transaction, int):
            raise TypeError("Expected argument 'engine_config_pg_max_locks_per_transaction' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_locks_per_transaction", engine_config_pg_max_locks_per_transaction)
        if engine_config_pg_max_logical_replication_workers and not isinstance(engine_config_pg_max_logical_replication_workers, int):
            raise TypeError("Expected argument 'engine_config_pg_max_logical_replication_workers' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_logical_replication_workers", engine_config_pg_max_logical_replication_workers)
        if engine_config_pg_max_parallel_workers and not isinstance(engine_config_pg_max_parallel_workers, int):
            raise TypeError("Expected argument 'engine_config_pg_max_parallel_workers' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_parallel_workers", engine_config_pg_max_parallel_workers)
        if engine_config_pg_max_parallel_workers_per_gather and not isinstance(engine_config_pg_max_parallel_workers_per_gather, int):
            raise TypeError("Expected argument 'engine_config_pg_max_parallel_workers_per_gather' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_parallel_workers_per_gather", engine_config_pg_max_parallel_workers_per_gather)
        if engine_config_pg_max_pred_locks_per_transaction and not isinstance(engine_config_pg_max_pred_locks_per_transaction, int):
            raise TypeError("Expected argument 'engine_config_pg_max_pred_locks_per_transaction' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_pred_locks_per_transaction", engine_config_pg_max_pred_locks_per_transaction)
        if engine_config_pg_max_replication_slots and not isinstance(engine_config_pg_max_replication_slots, int):
            raise TypeError("Expected argument 'engine_config_pg_max_replication_slots' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_replication_slots", engine_config_pg_max_replication_slots)
        if engine_config_pg_max_slot_wal_keep_size and not isinstance(engine_config_pg_max_slot_wal_keep_size, int):
            raise TypeError("Expected argument 'engine_config_pg_max_slot_wal_keep_size' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_slot_wal_keep_size", engine_config_pg_max_slot_wal_keep_size)
        if engine_config_pg_max_stack_depth and not isinstance(engine_config_pg_max_stack_depth, int):
            raise TypeError("Expected argument 'engine_config_pg_max_stack_depth' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_stack_depth", engine_config_pg_max_stack_depth)
        if engine_config_pg_max_standby_archive_delay and not isinstance(engine_config_pg_max_standby_archive_delay, int):
            raise TypeError("Expected argument 'engine_config_pg_max_standby_archive_delay' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_standby_archive_delay", engine_config_pg_max_standby_archive_delay)
        if engine_config_pg_max_standby_streaming_delay and not isinstance(engine_config_pg_max_standby_streaming_delay, int):
            raise TypeError("Expected argument 'engine_config_pg_max_standby_streaming_delay' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_standby_streaming_delay", engine_config_pg_max_standby_streaming_delay)
        if engine_config_pg_max_wal_senders and not isinstance(engine_config_pg_max_wal_senders, int):
            raise TypeError("Expected argument 'engine_config_pg_max_wal_senders' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_wal_senders", engine_config_pg_max_wal_senders)
        if engine_config_pg_max_worker_processes and not isinstance(engine_config_pg_max_worker_processes, int):
            raise TypeError("Expected argument 'engine_config_pg_max_worker_processes' to be a int")
        pulumi.set(__self__, "engine_config_pg_max_worker_processes", engine_config_pg_max_worker_processes)
        if engine_config_pg_password_encryption and not isinstance(engine_config_pg_password_encryption, str):
            raise TypeError("Expected argument 'engine_config_pg_password_encryption' to be a str")
        pulumi.set(__self__, "engine_config_pg_password_encryption", engine_config_pg_password_encryption)
        if engine_config_pg_pg_partman_bgw_interval and not isinstance(engine_config_pg_pg_partman_bgw_interval, int):
            raise TypeError("Expected argument 'engine_config_pg_pg_partman_bgw_interval' to be a int")
        pulumi.set(__self__, "engine_config_pg_pg_partman_bgw_interval", engine_config_pg_pg_partman_bgw_interval)
        if engine_config_pg_pg_partman_bgw_role and not isinstance(engine_config_pg_pg_partman_bgw_role, str):
            raise TypeError("Expected argument 'engine_config_pg_pg_partman_bgw_role' to be a str")
        pulumi.set(__self__, "engine_config_pg_pg_partman_bgw_role", engine_config_pg_pg_partman_bgw_role)
        if engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan and not isinstance(engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan, bool):
            raise TypeError("Expected argument 'engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan' to be a bool")
        pulumi.set(__self__, "engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan", engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan)
        if engine_config_pg_pg_stat_monitor_pgsm_max_buckets and not isinstance(engine_config_pg_pg_stat_monitor_pgsm_max_buckets, int):
            raise TypeError("Expected argument 'engine_config_pg_pg_stat_monitor_pgsm_max_buckets' to be a int")
        pulumi.set(__self__, "engine_config_pg_pg_stat_monitor_pgsm_max_buckets", engine_config_pg_pg_stat_monitor_pgsm_max_buckets)
        if engine_config_pg_pg_stat_statements_track and not isinstance(engine_config_pg_pg_stat_statements_track, str):
            raise TypeError("Expected argument 'engine_config_pg_pg_stat_statements_track' to be a str")
        pulumi.set(__self__, "engine_config_pg_pg_stat_statements_track", engine_config_pg_pg_stat_statements_track)
        if engine_config_pg_stat_monitor_enable and not isinstance(engine_config_pg_stat_monitor_enable, bool):
            raise TypeError("Expected argument 'engine_config_pg_stat_monitor_enable' to be a bool")
        pulumi.set(__self__, "engine_config_pg_stat_monitor_enable", engine_config_pg_stat_monitor_enable)
        if engine_config_pg_temp_file_limit and not isinstance(engine_config_pg_temp_file_limit, int):
            raise TypeError("Expected argument 'engine_config_pg_temp_file_limit' to be a int")
        pulumi.set(__self__, "engine_config_pg_temp_file_limit", engine_config_pg_temp_file_limit)
        if engine_config_pg_timezone and not isinstance(engine_config_pg_timezone, str):
            raise TypeError("Expected argument 'engine_config_pg_timezone' to be a str")
        pulumi.set(__self__, "engine_config_pg_timezone", engine_config_pg_timezone)
        if engine_config_pg_track_activity_query_size and not isinstance(engine_config_pg_track_activity_query_size, int):
            raise TypeError("Expected argument 'engine_config_pg_track_activity_query_size' to be a int")
        pulumi.set(__self__, "engine_config_pg_track_activity_query_size", engine_config_pg_track_activity_query_size)
        if engine_config_pg_track_commit_timestamp and not isinstance(engine_config_pg_track_commit_timestamp, str):
            raise TypeError("Expected argument 'engine_config_pg_track_commit_timestamp' to be a str")
        pulumi.set(__self__, "engine_config_pg_track_commit_timestamp", engine_config_pg_track_commit_timestamp)
        if engine_config_pg_track_functions and not isinstance(engine_config_pg_track_functions, str):
            raise TypeError("Expected argument 'engine_config_pg_track_functions' to be a str")
        pulumi.set(__self__, "engine_config_pg_track_functions", engine_config_pg_track_functions)
        if engine_config_pg_track_io_timing and not isinstance(engine_config_pg_track_io_timing, str):
            raise TypeError("Expected argument 'engine_config_pg_track_io_timing' to be a str")
        pulumi.set(__self__, "engine_config_pg_track_io_timing", engine_config_pg_track_io_timing)
        if engine_config_pg_wal_sender_timeout and not isinstance(engine_config_pg_wal_sender_timeout, int):
            raise TypeError("Expected argument 'engine_config_pg_wal_sender_timeout' to be a int")
        pulumi.set(__self__, "engine_config_pg_wal_sender_timeout", engine_config_pg_wal_sender_timeout)
        if engine_config_pg_wal_writer_delay and not isinstance(engine_config_pg_wal_writer_delay, int):
            raise TypeError("Expected argument 'engine_config_pg_wal_writer_delay' to be a int")
        pulumi.set(__self__, "engine_config_pg_wal_writer_delay", engine_config_pg_wal_writer_delay)
        if engine_config_pglookout_max_failover_replication_time_lag and not isinstance(engine_config_pglookout_max_failover_replication_time_lag, int):
            raise TypeError("Expected argument 'engine_config_pglookout_max_failover_replication_time_lag' to be a int")
        pulumi.set(__self__, "engine_config_pglookout_max_failover_replication_time_lag", engine_config_pglookout_max_failover_replication_time_lag)
        if engine_config_shared_buffers_percentage and not isinstance(engine_config_shared_buffers_percentage, float):
            raise TypeError("Expected argument 'engine_config_shared_buffers_percentage' to be a float")
        pulumi.set(__self__, "engine_config_shared_buffers_percentage", engine_config_shared_buffers_percentage)
        if engine_config_work_mem and not isinstance(engine_config_work_mem, int):
            raise TypeError("Expected argument 'engine_config_work_mem' to be a int")
        pulumi.set(__self__, "engine_config_work_mem", engine_config_work_mem)
        if engine_id and not isinstance(engine_id, str):
            raise TypeError("Expected argument 'engine_id' to be a str")
        pulumi.set(__self__, "engine_id", engine_id)
        if fork_restore_time and not isinstance(fork_restore_time, str):
            raise TypeError("Expected argument 'fork_restore_time' to be a str")
        pulumi.set(__self__, "fork_restore_time", fork_restore_time)
        if fork_source and not isinstance(fork_source, int):
            raise TypeError("Expected argument 'fork_source' to be a int")
        pulumi.set(__self__, "fork_source", fork_source)
        if host_primary and not isinstance(host_primary, str):
            raise TypeError("Expected argument 'host_primary' to be a str")
        pulumi.set(__self__, "host_primary", host_primary)
        if host_secondary and not isinstance(host_secondary, str):
            raise TypeError("Expected argument 'host_secondary' to be a str")
        pulumi.set(__self__, "host_secondary", host_secondary)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if members and not isinstance(members, dict):
            raise TypeError("Expected argument 'members' to be a dict")
        pulumi.set(__self__, "members", members)
        if oldest_restore_time and not isinstance(oldest_restore_time, str):
            raise TypeError("Expected argument 'oldest_restore_time' to be a str")
        pulumi.set(__self__, "oldest_restore_time", oldest_restore_time)
        if pending_updates and not isinstance(pending_updates, list):
            raise TypeError("Expected argument 'pending_updates' to be a list")
        pulumi.set(__self__, "pending_updates", pending_updates)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if root_password and not isinstance(root_password, str):
            raise TypeError("Expected argument 'root_password' to be a str")
        pulumi.set(__self__, "root_password", root_password)
        if root_username and not isinstance(root_username, str):
            raise TypeError("Expected argument 'root_username' to be a str")
        pulumi.set(__self__, "root_username", root_username)
        if ssl_connection and not isinstance(ssl_connection, bool):
            raise TypeError("Expected argument 'ssl_connection' to be a bool")
        pulumi.set(__self__, "ssl_connection", ssl_connection)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if suspended and not isinstance(suspended, bool):
            raise TypeError("Expected argument 'suspended' to be a bool")
        pulumi.set(__self__, "suspended", suspended)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        pulumi.set(__self__, "updated", updated)
        if updates and not isinstance(updates, dict):
            raise TypeError("Expected argument 'updates' to be a dict")
        pulumi.set(__self__, "updates", updates)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Sequence[builtins.str]:
        """
        A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `DatabaseAccessControls` to manage your allow list separately.
        """
        return pulumi.get(self, "allow_lists")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> builtins.str:
        """
        The base64-encoded SSL CA certificate for the Managed Database.
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> builtins.int:
        """
        The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        """
        return pulumi.get(self, "cluster_size")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this Managed Database was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def encrypted(self) -> builtins.bool:
        """
        Whether the Managed Databases is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The Managed Database engine. (e.g. `postgresql`)
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumAnalyzeScaleFactor")
    def engine_config_pg_autovacuum_analyze_scale_factor(self) -> builtins.float:
        """
        Specifies a fraction of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size)
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_analyze_scale_factor")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumAnalyzeThreshold")
    def engine_config_pg_autovacuum_analyze_threshold(self) -> builtins.int:
        """
        Specifies the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_analyze_threshold")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumMaxWorkers")
    def engine_config_pg_autovacuum_max_workers(self) -> builtins.int:
        """
        Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_max_workers")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumNaptime")
    def engine_config_pg_autovacuum_naptime(self) -> builtins.int:
        """
        Specifies the minimum delay between autovacuum runs on any given database. The delay is measured in seconds, and the default is one minute
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_naptime")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumVacuumCostDelay")
    def engine_config_pg_autovacuum_vacuum_cost_delay(self) -> builtins.int:
        """
        Specifies the cost delay value that will be used in automatic VACUUM operations. If -1 is specified, the regular vacuum_cost_delay value will be used. The default value is 20 milliseconds
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_vacuum_cost_delay")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumVacuumCostLimit")
    def engine_config_pg_autovacuum_vacuum_cost_limit(self) -> builtins.int:
        """
        Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_vacuum_cost_limit")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumVacuumScaleFactor")
    def engine_config_pg_autovacuum_vacuum_scale_factor(self) -> builtins.float:
        """
        Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size)
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_vacuum_scale_factor")

    @property
    @pulumi.getter(name="engineConfigPgAutovacuumVacuumThreshold")
    def engine_config_pg_autovacuum_vacuum_threshold(self) -> builtins.int:
        """
        Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
        """
        return pulumi.get(self, "engine_config_pg_autovacuum_vacuum_threshold")

    @property
    @pulumi.getter(name="engineConfigPgBgwriterDelay")
    def engine_config_pg_bgwriter_delay(self) -> builtins.int:
        """
        Specifies the delay between activity rounds for the background writer in milliseconds. Default is 200.
        """
        return pulumi.get(self, "engine_config_pg_bgwriter_delay")

    @property
    @pulumi.getter(name="engineConfigPgBgwriterFlushAfter")
    def engine_config_pg_bgwriter_flush_after(self) -> builtins.int:
        """
        Whenever more than bgwriter_flush_after bytes have been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
        """
        return pulumi.get(self, "engine_config_pg_bgwriter_flush_after")

    @property
    @pulumi.getter(name="engineConfigPgBgwriterLruMaxpages")
    def engine_config_pg_bgwriter_lru_maxpages(self) -> builtins.int:
        """
        In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. Default is 100.
        """
        return pulumi.get(self, "engine_config_pg_bgwriter_lru_maxpages")

    @property
    @pulumi.getter(name="engineConfigPgBgwriterLruMultiplier")
    def engine_config_pg_bgwriter_lru_multiplier(self) -> builtins.float:
        """
        The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
        """
        return pulumi.get(self, "engine_config_pg_bgwriter_lru_multiplier")

    @property
    @pulumi.getter(name="engineConfigPgDeadlockTimeout")
    def engine_config_pg_deadlock_timeout(self) -> builtins.int:
        """
        This is the amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
        """
        return pulumi.get(self, "engine_config_pg_deadlock_timeout")

    @property
    @pulumi.getter(name="engineConfigPgDefaultToastCompression")
    def engine_config_pg_default_toast_compression(self) -> builtins.str:
        """
        Specifies the default TOAST compression method for values of compressible columns (the default is lz4).
        """
        return pulumi.get(self, "engine_config_pg_default_toast_compression")

    @property
    @pulumi.getter(name="engineConfigPgIdleInTransactionSessionTimeout")
    def engine_config_pg_idle_in_transaction_session_timeout(self) -> builtins.int:
        """
        Time out sessions with open transactions after this number of milliseconds.
        """
        return pulumi.get(self, "engine_config_pg_idle_in_transaction_session_timeout")

    @property
    @pulumi.getter(name="engineConfigPgJit")
    def engine_config_pg_jit(self) -> builtins.bool:
        """
        Controls system-wide use of Just-in-Time Compilation (JIT).
        """
        return pulumi.get(self, "engine_config_pg_jit")

    @property
    @pulumi.getter(name="engineConfigPgMaxFilesPerProcess")
    def engine_config_pg_max_files_per_process(self) -> builtins.int:
        """
        PostgreSQL maximum number of files that can be open per process.
        """
        return pulumi.get(self, "engine_config_pg_max_files_per_process")

    @property
    @pulumi.getter(name="engineConfigPgMaxLocksPerTransaction")
    def engine_config_pg_max_locks_per_transaction(self) -> builtins.int:
        """
        PostgreSQL maximum locks per transaction.
        """
        return pulumi.get(self, "engine_config_pg_max_locks_per_transaction")

    @property
    @pulumi.getter(name="engineConfigPgMaxLogicalReplicationWorkers")
    def engine_config_pg_max_logical_replication_workers(self) -> builtins.int:
        """
        PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
        """
        return pulumi.get(self, "engine_config_pg_max_logical_replication_workers")

    @property
    @pulumi.getter(name="engineConfigPgMaxParallelWorkers")
    def engine_config_pg_max_parallel_workers(self) -> builtins.int:
        """
        Sets the maximum number of workers that the system can support for parallel queries.
        """
        return pulumi.get(self, "engine_config_pg_max_parallel_workers")

    @property
    @pulumi.getter(name="engineConfigPgMaxParallelWorkersPerGather")
    def engine_config_pg_max_parallel_workers_per_gather(self) -> builtins.int:
        """
        Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
        """
        return pulumi.get(self, "engine_config_pg_max_parallel_workers_per_gather")

    @property
    @pulumi.getter(name="engineConfigPgMaxPredLocksPerTransaction")
    def engine_config_pg_max_pred_locks_per_transaction(self) -> builtins.int:
        """
        PostgreSQL maximum predicate locks per transaction.
        """
        return pulumi.get(self, "engine_config_pg_max_pred_locks_per_transaction")

    @property
    @pulumi.getter(name="engineConfigPgMaxReplicationSlots")
    def engine_config_pg_max_replication_slots(self) -> builtins.int:
        """
        PostgreSQL maximum replication slots.
        """
        return pulumi.get(self, "engine_config_pg_max_replication_slots")

    @property
    @pulumi.getter(name="engineConfigPgMaxSlotWalKeepSize")
    def engine_config_pg_max_slot_wal_keep_size(self) -> builtins.int:
        """
        PostgreSQL maximum WAL size (MB) reserved for replication slots. Default is -1 (unlimited). wal_keep_size minimum WAL size setting takes precedence over this.
        """
        return pulumi.get(self, "engine_config_pg_max_slot_wal_keep_size")

    @property
    @pulumi.getter(name="engineConfigPgMaxStackDepth")
    def engine_config_pg_max_stack_depth(self) -> builtins.int:
        """
        Maximum depth of the stack in bytes.
        """
        return pulumi.get(self, "engine_config_pg_max_stack_depth")

    @property
    @pulumi.getter(name="engineConfigPgMaxStandbyArchiveDelay")
    def engine_config_pg_max_standby_archive_delay(self) -> builtins.int:
        """
        Max standby archive delay in milliseconds.
        """
        return pulumi.get(self, "engine_config_pg_max_standby_archive_delay")

    @property
    @pulumi.getter(name="engineConfigPgMaxStandbyStreamingDelay")
    def engine_config_pg_max_standby_streaming_delay(self) -> builtins.int:
        """
        Max standby streaming delay in milliseconds.
        """
        return pulumi.get(self, "engine_config_pg_max_standby_streaming_delay")

    @property
    @pulumi.getter(name="engineConfigPgMaxWalSenders")
    def engine_config_pg_max_wal_senders(self) -> builtins.int:
        """
        PostgreSQL maximum WAL senders.
        """
        return pulumi.get(self, "engine_config_pg_max_wal_senders")

    @property
    @pulumi.getter(name="engineConfigPgMaxWorkerProcesses")
    def engine_config_pg_max_worker_processes(self) -> builtins.int:
        """
        Sets the maximum number of background processes that the system can support.
        """
        return pulumi.get(self, "engine_config_pg_max_worker_processes")

    @property
    @pulumi.getter(name="engineConfigPgPasswordEncryption")
    def engine_config_pg_password_encryption(self) -> builtins.str:
        """
        Chooses the algorithm for encrypting passwords.
        """
        return pulumi.get(self, "engine_config_pg_password_encryption")

    @property
    @pulumi.getter(name="engineConfigPgPgPartmanBgwInterval")
    def engine_config_pg_pg_partman_bgw_interval(self) -> builtins.int:
        """
        Sets the time interval to run pg_partman's scheduled tasks.
        """
        return pulumi.get(self, "engine_config_pg_pg_partman_bgw_interval")

    @property
    @pulumi.getter(name="engineConfigPgPgPartmanBgwRole")
    def engine_config_pg_pg_partman_bgw_role(self) -> builtins.str:
        """
        Controls which role to use for pg_partman's scheduled background tasks.
        """
        return pulumi.get(self, "engine_config_pg_pg_partman_bgw_role")

    @property
    @pulumi.getter(name="engineConfigPgPgStatMonitorPgsmEnableQueryPlan")
    def engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan(self) -> builtins.bool:
        """
        Enables or disables query plan monitoring.
        """
        return pulumi.get(self, "engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan")

    @property
    @pulumi.getter(name="engineConfigPgPgStatMonitorPgsmMaxBuckets")
    def engine_config_pg_pg_stat_monitor_pgsm_max_buckets(self) -> builtins.int:
        """
        Sets the maximum number of buckets.
        """
        return pulumi.get(self, "engine_config_pg_pg_stat_monitor_pgsm_max_buckets")

    @property
    @pulumi.getter(name="engineConfigPgPgStatStatementsTrack")
    def engine_config_pg_pg_stat_statements_track(self) -> builtins.str:
        """
        Controls which statements are counted. Specify top to track top-level statements (those issued directly by clients), all to also track nested statements (such as statements invoked within functions), or none to disable statement statistics collection. The default value is top.
        """
        return pulumi.get(self, "engine_config_pg_pg_stat_statements_track")

    @property
    @pulumi.getter(name="engineConfigPgStatMonitorEnable")
    def engine_config_pg_stat_monitor_enable(self) -> builtins.bool:
        """
        Enable the pg_stat_monitor extension. Enabling this extension will cause the cluster to be restarted. When this extension is enabled, pg_stat_statements results for utility commands are unreliable.
        """
        return pulumi.get(self, "engine_config_pg_stat_monitor_enable")

    @property
    @pulumi.getter(name="engineConfigPgTempFileLimit")
    def engine_config_pg_temp_file_limit(self) -> builtins.int:
        """
        PostgreSQL temporary file limit in KiB, -1 for unlimited.
        """
        return pulumi.get(self, "engine_config_pg_temp_file_limit")

    @property
    @pulumi.getter(name="engineConfigPgTimezone")
    def engine_config_pg_timezone(self) -> builtins.str:
        """
        PostgreSQL service timezone.
        """
        return pulumi.get(self, "engine_config_pg_timezone")

    @property
    @pulumi.getter(name="engineConfigPgTrackActivityQuerySize")
    def engine_config_pg_track_activity_query_size(self) -> builtins.int:
        """
        Specifies the number of bytes reserved to track the currently executing command for each active session.
        """
        return pulumi.get(self, "engine_config_pg_track_activity_query_size")

    @property
    @pulumi.getter(name="engineConfigPgTrackCommitTimestamp")
    def engine_config_pg_track_commit_timestamp(self) -> builtins.str:
        """
        Record commit time of transactions.
        """
        return pulumi.get(self, "engine_config_pg_track_commit_timestamp")

    @property
    @pulumi.getter(name="engineConfigPgTrackFunctions")
    def engine_config_pg_track_functions(self) -> builtins.str:
        """
        Enables tracking of function call counts and time used.
        """
        return pulumi.get(self, "engine_config_pg_track_functions")

    @property
    @pulumi.getter(name="engineConfigPgTrackIoTiming")
    def engine_config_pg_track_io_timing(self) -> builtins.str:
        """
        Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.
        """
        return pulumi.get(self, "engine_config_pg_track_io_timing")

    @property
    @pulumi.getter(name="engineConfigPgWalSenderTimeout")
    def engine_config_pg_wal_sender_timeout(self) -> builtins.int:
        """
        Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout.
        """
        return pulumi.get(self, "engine_config_pg_wal_sender_timeout")

    @property
    @pulumi.getter(name="engineConfigPgWalWriterDelay")
    def engine_config_pg_wal_writer_delay(self) -> builtins.int:
        """
        WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance.
        """
        return pulumi.get(self, "engine_config_pg_wal_writer_delay")

    @property
    @pulumi.getter(name="engineConfigPglookoutMaxFailoverReplicationTimeLag")
    def engine_config_pglookout_max_failover_replication_time_lag(self) -> builtins.int:
        """
        Number of seconds of master unavailability before triggering database failover to standby.
        """
        return pulumi.get(self, "engine_config_pglookout_max_failover_replication_time_lag")

    @property
    @pulumi.getter(name="engineConfigSharedBuffersPercentage")
    def engine_config_shared_buffers_percentage(self) -> builtins.float:
        """
        Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
        """
        return pulumi.get(self, "engine_config_shared_buffers_percentage")

    @property
    @pulumi.getter(name="engineConfigWorkMem")
    def engine_config_work_mem(self) -> builtins.int:
        """
        Sets the maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files, in MB. Default is 1MB + 0.075% of total RAM (up to 32MB).
        """
        return pulumi.get(self, "engine_config_work_mem")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> builtins.str:
        """
        The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
        """
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter(name="forkRestoreTime")
    def fork_restore_time(self) -> builtins.str:
        """
        The database timestamp from which it was restored.
        """
        return pulumi.get(self, "fork_restore_time")

    @property
    @pulumi.getter(name="forkSource")
    def fork_source(self) -> builtins.int:
        """
        The ID of the database that was forked from.
        """
        return pulumi.get(self, "fork_source")

    @property
    @pulumi.getter(name="hostPrimary")
    def host_primary(self) -> builtins.str:
        """
        The primary host for the Managed Database.
        """
        return pulumi.get(self, "host_primary")

    @property
    @pulumi.getter(name="hostSecondary")
    def host_secondary(self) -> builtins.str:
        """
        The secondary/private host for the managed database.
        """
        return pulumi.get(self, "host_secondary")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A unique, user-defined string referring to the Managed Database.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def members(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="oldestRestoreTime")
    def oldest_restore_time(self) -> builtins.str:
        return pulumi.get(self, "oldest_restore_time")

    @property
    @pulumi.getter(name="pendingUpdates")
    def pending_updates(self) -> Sequence['outputs.GetDatabasePostgresqlV2PendingUpdateResult']:
        return pulumi.get(self, "pending_updates")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        The back-end platform for relational databases used by the service.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The access port for this Managed Database.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region to use for the Managed Database.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> builtins.str:
        """
        The randomly-generated root password for the Managed Database instance.
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="rootUsername")
    def root_username(self) -> builtins.str:
        """
        The root username for the Managed Database instance.
        """
        return pulumi.get(self, "root_username")

    @property
    @pulumi.getter(name="sslConnection")
    def ssl_connection(self) -> builtins.bool:
        """
        Whether to require SSL credentials to establish a connection to the Managed Database.
        """
        return pulumi.get(self, "ssl_connection")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The operating status of the Managed Database.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def suspended(self) -> builtins.bool:
        """
        Whether this Managed Database is suspended.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The Linode Instance type used for the nodes of the Managed Database.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this Managed Database was last updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def updates(self) -> 'outputs.GetDatabasePostgresqlV2UpdatesResult':
        return pulumi.get(self, "updates")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The Managed Database engine version. (e.g. `13.2`)
        """
        return pulumi.get(self, "version")


class AwaitableGetDatabasePostgresqlV2Result(GetDatabasePostgresqlV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabasePostgresqlV2Result(
            allow_lists=self.allow_lists,
            ca_cert=self.ca_cert,
            cluster_size=self.cluster_size,
            created=self.created,
            encrypted=self.encrypted,
            engine=self.engine,
            engine_config_pg_autovacuum_analyze_scale_factor=self.engine_config_pg_autovacuum_analyze_scale_factor,
            engine_config_pg_autovacuum_analyze_threshold=self.engine_config_pg_autovacuum_analyze_threshold,
            engine_config_pg_autovacuum_max_workers=self.engine_config_pg_autovacuum_max_workers,
            engine_config_pg_autovacuum_naptime=self.engine_config_pg_autovacuum_naptime,
            engine_config_pg_autovacuum_vacuum_cost_delay=self.engine_config_pg_autovacuum_vacuum_cost_delay,
            engine_config_pg_autovacuum_vacuum_cost_limit=self.engine_config_pg_autovacuum_vacuum_cost_limit,
            engine_config_pg_autovacuum_vacuum_scale_factor=self.engine_config_pg_autovacuum_vacuum_scale_factor,
            engine_config_pg_autovacuum_vacuum_threshold=self.engine_config_pg_autovacuum_vacuum_threshold,
            engine_config_pg_bgwriter_delay=self.engine_config_pg_bgwriter_delay,
            engine_config_pg_bgwriter_flush_after=self.engine_config_pg_bgwriter_flush_after,
            engine_config_pg_bgwriter_lru_maxpages=self.engine_config_pg_bgwriter_lru_maxpages,
            engine_config_pg_bgwriter_lru_multiplier=self.engine_config_pg_bgwriter_lru_multiplier,
            engine_config_pg_deadlock_timeout=self.engine_config_pg_deadlock_timeout,
            engine_config_pg_default_toast_compression=self.engine_config_pg_default_toast_compression,
            engine_config_pg_idle_in_transaction_session_timeout=self.engine_config_pg_idle_in_transaction_session_timeout,
            engine_config_pg_jit=self.engine_config_pg_jit,
            engine_config_pg_max_files_per_process=self.engine_config_pg_max_files_per_process,
            engine_config_pg_max_locks_per_transaction=self.engine_config_pg_max_locks_per_transaction,
            engine_config_pg_max_logical_replication_workers=self.engine_config_pg_max_logical_replication_workers,
            engine_config_pg_max_parallel_workers=self.engine_config_pg_max_parallel_workers,
            engine_config_pg_max_parallel_workers_per_gather=self.engine_config_pg_max_parallel_workers_per_gather,
            engine_config_pg_max_pred_locks_per_transaction=self.engine_config_pg_max_pred_locks_per_transaction,
            engine_config_pg_max_replication_slots=self.engine_config_pg_max_replication_slots,
            engine_config_pg_max_slot_wal_keep_size=self.engine_config_pg_max_slot_wal_keep_size,
            engine_config_pg_max_stack_depth=self.engine_config_pg_max_stack_depth,
            engine_config_pg_max_standby_archive_delay=self.engine_config_pg_max_standby_archive_delay,
            engine_config_pg_max_standby_streaming_delay=self.engine_config_pg_max_standby_streaming_delay,
            engine_config_pg_max_wal_senders=self.engine_config_pg_max_wal_senders,
            engine_config_pg_max_worker_processes=self.engine_config_pg_max_worker_processes,
            engine_config_pg_password_encryption=self.engine_config_pg_password_encryption,
            engine_config_pg_pg_partman_bgw_interval=self.engine_config_pg_pg_partman_bgw_interval,
            engine_config_pg_pg_partman_bgw_role=self.engine_config_pg_pg_partman_bgw_role,
            engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan=self.engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan,
            engine_config_pg_pg_stat_monitor_pgsm_max_buckets=self.engine_config_pg_pg_stat_monitor_pgsm_max_buckets,
            engine_config_pg_pg_stat_statements_track=self.engine_config_pg_pg_stat_statements_track,
            engine_config_pg_stat_monitor_enable=self.engine_config_pg_stat_monitor_enable,
            engine_config_pg_temp_file_limit=self.engine_config_pg_temp_file_limit,
            engine_config_pg_timezone=self.engine_config_pg_timezone,
            engine_config_pg_track_activity_query_size=self.engine_config_pg_track_activity_query_size,
            engine_config_pg_track_commit_timestamp=self.engine_config_pg_track_commit_timestamp,
            engine_config_pg_track_functions=self.engine_config_pg_track_functions,
            engine_config_pg_track_io_timing=self.engine_config_pg_track_io_timing,
            engine_config_pg_wal_sender_timeout=self.engine_config_pg_wal_sender_timeout,
            engine_config_pg_wal_writer_delay=self.engine_config_pg_wal_writer_delay,
            engine_config_pglookout_max_failover_replication_time_lag=self.engine_config_pglookout_max_failover_replication_time_lag,
            engine_config_shared_buffers_percentage=self.engine_config_shared_buffers_percentage,
            engine_config_work_mem=self.engine_config_work_mem,
            engine_id=self.engine_id,
            fork_restore_time=self.fork_restore_time,
            fork_source=self.fork_source,
            host_primary=self.host_primary,
            host_secondary=self.host_secondary,
            id=self.id,
            label=self.label,
            members=self.members,
            oldest_restore_time=self.oldest_restore_time,
            pending_updates=self.pending_updates,
            platform=self.platform,
            port=self.port,
            region=self.region,
            root_password=self.root_password,
            root_username=self.root_username,
            ssl_connection=self.ssl_connection,
            status=self.status,
            suspended=self.suspended,
            type=self.type,
            updated=self.updated,
            updates=self.updates,
            version=self.version)


def get_database_postgresql_v2(id: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabasePostgresqlV2Result:
    """
    Provides information about a Linode PostgreSQL Database.
    For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).

    ## Example Usage

    Get information about a PostgreSQL database:

    ```python
    import pulumi
    import pulumi_linode as linode

    my_db = linode.get_database_postgresql_v2(id="12345")
    ```

    ## pending_updates

    The following arguments are exposed by each entry in the `pending_updates` attribute:

    * `deadline` - The time when a mandatory update needs to be applied.

    * `description` - A description of the update.

    * `planned_for` - The date and time a maintenance update will be applied.

    ## updates

    The following arguments are supported in the `updates` specification block:

    * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)

    * `duration` - The maximum maintenance window time in hours. (`1`..`3`)

    * `frequency` - The frequency at which maintenance occurs. (`weekly`)

    * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)


    :param builtins.str id: The ID of the PostgreSQL database.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2', __args__, opts=opts, typ=GetDatabasePostgresqlV2Result).value

    return AwaitableGetDatabasePostgresqlV2Result(
        allow_lists=pulumi.get(__ret__, 'allow_lists'),
        ca_cert=pulumi.get(__ret__, 'ca_cert'),
        cluster_size=pulumi.get(__ret__, 'cluster_size'),
        created=pulumi.get(__ret__, 'created'),
        encrypted=pulumi.get(__ret__, 'encrypted'),
        engine=pulumi.get(__ret__, 'engine'),
        engine_config_pg_autovacuum_analyze_scale_factor=pulumi.get(__ret__, 'engine_config_pg_autovacuum_analyze_scale_factor'),
        engine_config_pg_autovacuum_analyze_threshold=pulumi.get(__ret__, 'engine_config_pg_autovacuum_analyze_threshold'),
        engine_config_pg_autovacuum_max_workers=pulumi.get(__ret__, 'engine_config_pg_autovacuum_max_workers'),
        engine_config_pg_autovacuum_naptime=pulumi.get(__ret__, 'engine_config_pg_autovacuum_naptime'),
        engine_config_pg_autovacuum_vacuum_cost_delay=pulumi.get(__ret__, 'engine_config_pg_autovacuum_vacuum_cost_delay'),
        engine_config_pg_autovacuum_vacuum_cost_limit=pulumi.get(__ret__, 'engine_config_pg_autovacuum_vacuum_cost_limit'),
        engine_config_pg_autovacuum_vacuum_scale_factor=pulumi.get(__ret__, 'engine_config_pg_autovacuum_vacuum_scale_factor'),
        engine_config_pg_autovacuum_vacuum_threshold=pulumi.get(__ret__, 'engine_config_pg_autovacuum_vacuum_threshold'),
        engine_config_pg_bgwriter_delay=pulumi.get(__ret__, 'engine_config_pg_bgwriter_delay'),
        engine_config_pg_bgwriter_flush_after=pulumi.get(__ret__, 'engine_config_pg_bgwriter_flush_after'),
        engine_config_pg_bgwriter_lru_maxpages=pulumi.get(__ret__, 'engine_config_pg_bgwriter_lru_maxpages'),
        engine_config_pg_bgwriter_lru_multiplier=pulumi.get(__ret__, 'engine_config_pg_bgwriter_lru_multiplier'),
        engine_config_pg_deadlock_timeout=pulumi.get(__ret__, 'engine_config_pg_deadlock_timeout'),
        engine_config_pg_default_toast_compression=pulumi.get(__ret__, 'engine_config_pg_default_toast_compression'),
        engine_config_pg_idle_in_transaction_session_timeout=pulumi.get(__ret__, 'engine_config_pg_idle_in_transaction_session_timeout'),
        engine_config_pg_jit=pulumi.get(__ret__, 'engine_config_pg_jit'),
        engine_config_pg_max_files_per_process=pulumi.get(__ret__, 'engine_config_pg_max_files_per_process'),
        engine_config_pg_max_locks_per_transaction=pulumi.get(__ret__, 'engine_config_pg_max_locks_per_transaction'),
        engine_config_pg_max_logical_replication_workers=pulumi.get(__ret__, 'engine_config_pg_max_logical_replication_workers'),
        engine_config_pg_max_parallel_workers=pulumi.get(__ret__, 'engine_config_pg_max_parallel_workers'),
        engine_config_pg_max_parallel_workers_per_gather=pulumi.get(__ret__, 'engine_config_pg_max_parallel_workers_per_gather'),
        engine_config_pg_max_pred_locks_per_transaction=pulumi.get(__ret__, 'engine_config_pg_max_pred_locks_per_transaction'),
        engine_config_pg_max_replication_slots=pulumi.get(__ret__, 'engine_config_pg_max_replication_slots'),
        engine_config_pg_max_slot_wal_keep_size=pulumi.get(__ret__, 'engine_config_pg_max_slot_wal_keep_size'),
        engine_config_pg_max_stack_depth=pulumi.get(__ret__, 'engine_config_pg_max_stack_depth'),
        engine_config_pg_max_standby_archive_delay=pulumi.get(__ret__, 'engine_config_pg_max_standby_archive_delay'),
        engine_config_pg_max_standby_streaming_delay=pulumi.get(__ret__, 'engine_config_pg_max_standby_streaming_delay'),
        engine_config_pg_max_wal_senders=pulumi.get(__ret__, 'engine_config_pg_max_wal_senders'),
        engine_config_pg_max_worker_processes=pulumi.get(__ret__, 'engine_config_pg_max_worker_processes'),
        engine_config_pg_password_encryption=pulumi.get(__ret__, 'engine_config_pg_password_encryption'),
        engine_config_pg_pg_partman_bgw_interval=pulumi.get(__ret__, 'engine_config_pg_pg_partman_bgw_interval'),
        engine_config_pg_pg_partman_bgw_role=pulumi.get(__ret__, 'engine_config_pg_pg_partman_bgw_role'),
        engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan=pulumi.get(__ret__, 'engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan'),
        engine_config_pg_pg_stat_monitor_pgsm_max_buckets=pulumi.get(__ret__, 'engine_config_pg_pg_stat_monitor_pgsm_max_buckets'),
        engine_config_pg_pg_stat_statements_track=pulumi.get(__ret__, 'engine_config_pg_pg_stat_statements_track'),
        engine_config_pg_stat_monitor_enable=pulumi.get(__ret__, 'engine_config_pg_stat_monitor_enable'),
        engine_config_pg_temp_file_limit=pulumi.get(__ret__, 'engine_config_pg_temp_file_limit'),
        engine_config_pg_timezone=pulumi.get(__ret__, 'engine_config_pg_timezone'),
        engine_config_pg_track_activity_query_size=pulumi.get(__ret__, 'engine_config_pg_track_activity_query_size'),
        engine_config_pg_track_commit_timestamp=pulumi.get(__ret__, 'engine_config_pg_track_commit_timestamp'),
        engine_config_pg_track_functions=pulumi.get(__ret__, 'engine_config_pg_track_functions'),
        engine_config_pg_track_io_timing=pulumi.get(__ret__, 'engine_config_pg_track_io_timing'),
        engine_config_pg_wal_sender_timeout=pulumi.get(__ret__, 'engine_config_pg_wal_sender_timeout'),
        engine_config_pg_wal_writer_delay=pulumi.get(__ret__, 'engine_config_pg_wal_writer_delay'),
        engine_config_pglookout_max_failover_replication_time_lag=pulumi.get(__ret__, 'engine_config_pglookout_max_failover_replication_time_lag'),
        engine_config_shared_buffers_percentage=pulumi.get(__ret__, 'engine_config_shared_buffers_percentage'),
        engine_config_work_mem=pulumi.get(__ret__, 'engine_config_work_mem'),
        engine_id=pulumi.get(__ret__, 'engine_id'),
        fork_restore_time=pulumi.get(__ret__, 'fork_restore_time'),
        fork_source=pulumi.get(__ret__, 'fork_source'),
        host_primary=pulumi.get(__ret__, 'host_primary'),
        host_secondary=pulumi.get(__ret__, 'host_secondary'),
        id=pulumi.get(__ret__, 'id'),
        label=pulumi.get(__ret__, 'label'),
        members=pulumi.get(__ret__, 'members'),
        oldest_restore_time=pulumi.get(__ret__, 'oldest_restore_time'),
        pending_updates=pulumi.get(__ret__, 'pending_updates'),
        platform=pulumi.get(__ret__, 'platform'),
        port=pulumi.get(__ret__, 'port'),
        region=pulumi.get(__ret__, 'region'),
        root_password=pulumi.get(__ret__, 'root_password'),
        root_username=pulumi.get(__ret__, 'root_username'),
        ssl_connection=pulumi.get(__ret__, 'ssl_connection'),
        status=pulumi.get(__ret__, 'status'),
        suspended=pulumi.get(__ret__, 'suspended'),
        type=pulumi.get(__ret__, 'type'),
        updated=pulumi.get(__ret__, 'updated'),
        updates=pulumi.get(__ret__, 'updates'),
        version=pulumi.get(__ret__, 'version'))
def get_database_postgresql_v2_output(id: Optional[pulumi.Input[builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDatabasePostgresqlV2Result]:
    """
    Provides information about a Linode PostgreSQL Database.
    For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).

    ## Example Usage

    Get information about a PostgreSQL database:

    ```python
    import pulumi
    import pulumi_linode as linode

    my_db = linode.get_database_postgresql_v2(id="12345")
    ```

    ## pending_updates

    The following arguments are exposed by each entry in the `pending_updates` attribute:

    * `deadline` - The time when a mandatory update needs to be applied.

    * `description` - A description of the update.

    * `planned_for` - The date and time a maintenance update will be applied.

    ## updates

    The following arguments are supported in the `updates` specification block:

    * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)

    * `duration` - The maximum maintenance window time in hours. (`1`..`3`)

    * `frequency` - The frequency at which maintenance occurs. (`weekly`)

    * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)


    :param builtins.str id: The ID of the PostgreSQL database.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2', __args__, opts=opts, typ=GetDatabasePostgresqlV2Result)
    return __ret__.apply(lambda __response__: GetDatabasePostgresqlV2Result(
        allow_lists=pulumi.get(__response__, 'allow_lists'),
        ca_cert=pulumi.get(__response__, 'ca_cert'),
        cluster_size=pulumi.get(__response__, 'cluster_size'),
        created=pulumi.get(__response__, 'created'),
        encrypted=pulumi.get(__response__, 'encrypted'),
        engine=pulumi.get(__response__, 'engine'),
        engine_config_pg_autovacuum_analyze_scale_factor=pulumi.get(__response__, 'engine_config_pg_autovacuum_analyze_scale_factor'),
        engine_config_pg_autovacuum_analyze_threshold=pulumi.get(__response__, 'engine_config_pg_autovacuum_analyze_threshold'),
        engine_config_pg_autovacuum_max_workers=pulumi.get(__response__, 'engine_config_pg_autovacuum_max_workers'),
        engine_config_pg_autovacuum_naptime=pulumi.get(__response__, 'engine_config_pg_autovacuum_naptime'),
        engine_config_pg_autovacuum_vacuum_cost_delay=pulumi.get(__response__, 'engine_config_pg_autovacuum_vacuum_cost_delay'),
        engine_config_pg_autovacuum_vacuum_cost_limit=pulumi.get(__response__, 'engine_config_pg_autovacuum_vacuum_cost_limit'),
        engine_config_pg_autovacuum_vacuum_scale_factor=pulumi.get(__response__, 'engine_config_pg_autovacuum_vacuum_scale_factor'),
        engine_config_pg_autovacuum_vacuum_threshold=pulumi.get(__response__, 'engine_config_pg_autovacuum_vacuum_threshold'),
        engine_config_pg_bgwriter_delay=pulumi.get(__response__, 'engine_config_pg_bgwriter_delay'),
        engine_config_pg_bgwriter_flush_after=pulumi.get(__response__, 'engine_config_pg_bgwriter_flush_after'),
        engine_config_pg_bgwriter_lru_maxpages=pulumi.get(__response__, 'engine_config_pg_bgwriter_lru_maxpages'),
        engine_config_pg_bgwriter_lru_multiplier=pulumi.get(__response__, 'engine_config_pg_bgwriter_lru_multiplier'),
        engine_config_pg_deadlock_timeout=pulumi.get(__response__, 'engine_config_pg_deadlock_timeout'),
        engine_config_pg_default_toast_compression=pulumi.get(__response__, 'engine_config_pg_default_toast_compression'),
        engine_config_pg_idle_in_transaction_session_timeout=pulumi.get(__response__, 'engine_config_pg_idle_in_transaction_session_timeout'),
        engine_config_pg_jit=pulumi.get(__response__, 'engine_config_pg_jit'),
        engine_config_pg_max_files_per_process=pulumi.get(__response__, 'engine_config_pg_max_files_per_process'),
        engine_config_pg_max_locks_per_transaction=pulumi.get(__response__, 'engine_config_pg_max_locks_per_transaction'),
        engine_config_pg_max_logical_replication_workers=pulumi.get(__response__, 'engine_config_pg_max_logical_replication_workers'),
        engine_config_pg_max_parallel_workers=pulumi.get(__response__, 'engine_config_pg_max_parallel_workers'),
        engine_config_pg_max_parallel_workers_per_gather=pulumi.get(__response__, 'engine_config_pg_max_parallel_workers_per_gather'),
        engine_config_pg_max_pred_locks_per_transaction=pulumi.get(__response__, 'engine_config_pg_max_pred_locks_per_transaction'),
        engine_config_pg_max_replication_slots=pulumi.get(__response__, 'engine_config_pg_max_replication_slots'),
        engine_config_pg_max_slot_wal_keep_size=pulumi.get(__response__, 'engine_config_pg_max_slot_wal_keep_size'),
        engine_config_pg_max_stack_depth=pulumi.get(__response__, 'engine_config_pg_max_stack_depth'),
        engine_config_pg_max_standby_archive_delay=pulumi.get(__response__, 'engine_config_pg_max_standby_archive_delay'),
        engine_config_pg_max_standby_streaming_delay=pulumi.get(__response__, 'engine_config_pg_max_standby_streaming_delay'),
        engine_config_pg_max_wal_senders=pulumi.get(__response__, 'engine_config_pg_max_wal_senders'),
        engine_config_pg_max_worker_processes=pulumi.get(__response__, 'engine_config_pg_max_worker_processes'),
        engine_config_pg_password_encryption=pulumi.get(__response__, 'engine_config_pg_password_encryption'),
        engine_config_pg_pg_partman_bgw_interval=pulumi.get(__response__, 'engine_config_pg_pg_partman_bgw_interval'),
        engine_config_pg_pg_partman_bgw_role=pulumi.get(__response__, 'engine_config_pg_pg_partman_bgw_role'),
        engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan=pulumi.get(__response__, 'engine_config_pg_pg_stat_monitor_pgsm_enable_query_plan'),
        engine_config_pg_pg_stat_monitor_pgsm_max_buckets=pulumi.get(__response__, 'engine_config_pg_pg_stat_monitor_pgsm_max_buckets'),
        engine_config_pg_pg_stat_statements_track=pulumi.get(__response__, 'engine_config_pg_pg_stat_statements_track'),
        engine_config_pg_stat_monitor_enable=pulumi.get(__response__, 'engine_config_pg_stat_monitor_enable'),
        engine_config_pg_temp_file_limit=pulumi.get(__response__, 'engine_config_pg_temp_file_limit'),
        engine_config_pg_timezone=pulumi.get(__response__, 'engine_config_pg_timezone'),
        engine_config_pg_track_activity_query_size=pulumi.get(__response__, 'engine_config_pg_track_activity_query_size'),
        engine_config_pg_track_commit_timestamp=pulumi.get(__response__, 'engine_config_pg_track_commit_timestamp'),
        engine_config_pg_track_functions=pulumi.get(__response__, 'engine_config_pg_track_functions'),
        engine_config_pg_track_io_timing=pulumi.get(__response__, 'engine_config_pg_track_io_timing'),
        engine_config_pg_wal_sender_timeout=pulumi.get(__response__, 'engine_config_pg_wal_sender_timeout'),
        engine_config_pg_wal_writer_delay=pulumi.get(__response__, 'engine_config_pg_wal_writer_delay'),
        engine_config_pglookout_max_failover_replication_time_lag=pulumi.get(__response__, 'engine_config_pglookout_max_failover_replication_time_lag'),
        engine_config_shared_buffers_percentage=pulumi.get(__response__, 'engine_config_shared_buffers_percentage'),
        engine_config_work_mem=pulumi.get(__response__, 'engine_config_work_mem'),
        engine_id=pulumi.get(__response__, 'engine_id'),
        fork_restore_time=pulumi.get(__response__, 'fork_restore_time'),
        fork_source=pulumi.get(__response__, 'fork_source'),
        host_primary=pulumi.get(__response__, 'host_primary'),
        host_secondary=pulumi.get(__response__, 'host_secondary'),
        id=pulumi.get(__response__, 'id'),
        label=pulumi.get(__response__, 'label'),
        members=pulumi.get(__response__, 'members'),
        oldest_restore_time=pulumi.get(__response__, 'oldest_restore_time'),
        pending_updates=pulumi.get(__response__, 'pending_updates'),
        platform=pulumi.get(__response__, 'platform'),
        port=pulumi.get(__response__, 'port'),
        region=pulumi.get(__response__, 'region'),
        root_password=pulumi.get(__response__, 'root_password'),
        root_username=pulumi.get(__response__, 'root_username'),
        ssl_connection=pulumi.get(__response__, 'ssl_connection'),
        status=pulumi.get(__response__, 'status'),
        suspended=pulumi.get(__response__, 'suspended'),
        type=pulumi.get(__response__, 'type'),
        updated=pulumi.get(__response__, 'updated'),
        updates=pulumi.get(__response__, 'updates'),
        version=pulumi.get(__response__, 'version')))
