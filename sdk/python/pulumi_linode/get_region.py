# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRegionResult',
    'AwaitableGetRegionResult',
    'get_region',
    'get_region_output',
]

@pulumi.output_type
class GetRegionResult:
    """
    A collection of values returned by getRegion.
    """
    def __init__(__self__, capabilities=None, country=None, id=None, label=None, resolvers=None, status=None):
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if country and not isinstance(country, str):
            raise TypeError("Expected argument 'country' to be a str")
        pulumi.set(__self__, "country", country)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if label and not isinstance(label, str):
            raise TypeError("Expected argument 'label' to be a str")
        pulumi.set(__self__, "label", label)
        if resolvers and not isinstance(resolvers, list):
            raise TypeError("Expected argument 'resolvers' to be a list")
        pulumi.set(__self__, "resolvers", resolvers)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[str]:
        """
        A list of capabilities of this region.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        The country the region resides in.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Detailed location information for this Region, including city, state or region, and country.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def resolvers(self) -> Optional[Sequence['outputs.GetRegionResolverResult']]:
        return pulumi.get(self, "resolvers")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        This regionâ€™s current operational status (ok or outage).
        """
        return pulumi.get(self, "status")


class AwaitableGetRegionResult(GetRegionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegionResult(
            capabilities=self.capabilities,
            country=self.country,
            id=self.id,
            label=self.label,
            resolvers=self.resolvers,
            status=self.status)


def get_region(id: Optional[str] = None,
               resolvers: Optional[Sequence[pulumi.InputType['GetRegionResolverArgs']]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegionResult:
    """
    `get_region` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).

    ## Example Usage

    The following example shows how the resource might be used to obtain additional information about a Linode region.

    ```python
    import pulumi
    import pulumi_linode as linode

    region = linode.get_region(id="us-east")
    ```


    :param str id: The code name of the region to select.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['resolvers'] = resolvers
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('linode:index/getRegion:getRegion', __args__, opts=opts, typ=GetRegionResult).value

    return AwaitableGetRegionResult(
        capabilities=pulumi.get(__ret__, 'capabilities'),
        country=pulumi.get(__ret__, 'country'),
        id=pulumi.get(__ret__, 'id'),
        label=pulumi.get(__ret__, 'label'),
        resolvers=pulumi.get(__ret__, 'resolvers'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_region)
def get_region_output(id: Optional[pulumi.Input[str]] = None,
                      resolvers: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRegionResolverArgs']]]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegionResult]:
    """
    `get_region` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).

    ## Example Usage

    The following example shows how the resource might be used to obtain additional information about a Linode region.

    ```python
    import pulumi
    import pulumi_linode as linode

    region = linode.get_region(id="us-east")
    ```


    :param str id: The code name of the region to select.
    """
    ...
