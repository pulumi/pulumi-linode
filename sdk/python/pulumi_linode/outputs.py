# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'DatabaseMysqlUpdates',
    'DatabasePostgresqlUpdates',
    'FirewallDevice',
    'FirewallInbound',
    'FirewallOutbound',
    'InstanceAlerts',
    'InstanceBackups',
    'InstanceBackupsSchedule',
    'InstanceConfig',
    'InstanceConfigDevices',
    'InstanceConfigDevicesSda',
    'InstanceConfigDevicesSdb',
    'InstanceConfigDevicesSdc',
    'InstanceConfigDevicesSdd',
    'InstanceConfigDevicesSde',
    'InstanceConfigDevicesSdf',
    'InstanceConfigDevicesSdg',
    'InstanceConfigDevicesSdh',
    'InstanceConfigHelpers',
    'InstanceConfigInterface',
    'InstanceDisk',
    'InstanceInterface',
    'InstanceMetadata',
    'InstanceSpecs',
    'LkeClusterControlPlane',
    'LkeClusterPool',
    'LkeClusterPoolAutoscaler',
    'LkeClusterPoolNode',
    'NodeBalancerConfigNodeStatus',
    'NodeBalancerTransfer',
    'ObjectStorageBucketCert',
    'ObjectStorageBucketLifecycleRule',
    'ObjectStorageBucketLifecycleRuleExpiration',
    'ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration',
    'ObjectStorageKeyBucketAccess',
    'StackScriptUserDefinedField',
    'UserDomainGrant',
    'UserFirewallGrant',
    'UserGlobalGrants',
    'UserImageGrant',
    'UserLinodeGrant',
    'UserLongviewGrant',
    'UserNodebalancerGrant',
    'UserStackscriptGrant',
    'UserVolumeGrant',
    'GetAccountLoginsFilterResult',
    'GetAccountLoginsLoginResult',
    'GetDatabaseBackupsBackupResult',
    'GetDatabaseBackupsFilterResult',
    'GetDatabaseEnginesEngineResult',
    'GetDatabaseEnginesFilterResult',
    'GetDatabaseMysqlBackupsBackupResult',
    'GetDatabaseMysqlBackupsFilterResult',
    'GetDatabaseMysqlUpdateResult',
    'GetDatabasePostgresqlUpdateResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesFilterResult',
    'GetFirewallDeviceResult',
    'GetFirewallInboundResult',
    'GetFirewallOutboundResult',
    'GetFirewallsFilterResult',
    'GetFirewallsFirewallResult',
    'GetFirewallsFirewallDeviceResult',
    'GetFirewallsFirewallInboundResult',
    'GetFirewallsFirewallOutboundResult',
    'GetImagesFilterResult',
    'GetImagesImageResult',
    'GetInstanceBackupsAutomaticResult',
    'GetInstanceBackupsAutomaticDiskResult',
    'GetInstanceBackupsCurrentResult',
    'GetInstanceBackupsCurrentDiskResult',
    'GetInstanceBackupsInProgressResult',
    'GetInstanceBackupsInProgressDiskResult',
    'GetInstanceNetworkingIpv4Result',
    'GetInstanceNetworkingIpv4PrivateResult',
    'GetInstanceNetworkingIpv4PublicResult',
    'GetInstanceNetworkingIpv4ReservedResult',
    'GetInstanceNetworkingIpv4SharedResult',
    'GetInstanceNetworkingIpv6Result',
    'GetInstanceNetworkingIpv6GlobalResult',
    'GetInstanceNetworkingIpv6LinkLocalResult',
    'GetInstanceNetworkingIpv6SlaacResult',
    'GetInstanceTypeAddonsResult',
    'GetInstanceTypeAddonsBackupResult',
    'GetInstanceTypeAddonsBackupPriceResult',
    'GetInstanceTypeAddonsBackupRegionPriceResult',
    'GetInstanceTypePriceResult',
    'GetInstanceTypeRegionPriceResult',
    'GetInstanceTypesFilterResult',
    'GetInstanceTypesTypeResult',
    'GetInstanceTypesTypeAddonResult',
    'GetInstanceTypesTypeAddonBackupResult',
    'GetInstanceTypesTypeAddonBackupPriceResult',
    'GetInstanceTypesTypeAddonBackupRegionPriceResult',
    'GetInstanceTypesTypePriceResult',
    'GetInstanceTypesTypeRegionPriceResult',
    'GetInstancesFilterResult',
    'GetInstancesInstanceResult',
    'GetInstancesInstanceAlertsResult',
    'GetInstancesInstanceBackupResult',
    'GetInstancesInstanceBackupScheduleResult',
    'GetInstancesInstanceConfigResult',
    'GetInstancesInstanceConfigDeviceResult',
    'GetInstancesInstanceConfigDeviceSdaResult',
    'GetInstancesInstanceConfigDeviceSdbResult',
    'GetInstancesInstanceConfigDeviceSdcResult',
    'GetInstancesInstanceConfigDeviceSddResult',
    'GetInstancesInstanceConfigDeviceSdeResult',
    'GetInstancesInstanceConfigDeviceSdfResult',
    'GetInstancesInstanceConfigDeviceSdgResult',
    'GetInstancesInstanceConfigDeviceSdhResult',
    'GetInstancesInstanceConfigHelperResult',
    'GetInstancesInstanceConfigInterfaceResult',
    'GetInstancesInstanceDiskResult',
    'GetInstancesInstanceSpecResult',
    'GetKernelsFilterResult',
    'GetKernelsKernelResult',
    'GetLkeClusterControlPlaneResult',
    'GetLkeClusterPoolResult',
    'GetLkeClusterPoolAutoscalerResult',
    'GetLkeClusterPoolNodeResult',
    'GetLkeVersionsVersionResult',
    'GetNodeBalancerConfigNodeStatusResult',
    'GetNodeBalancerTransferResult',
    'GetNodebalancersFilterResult',
    'GetNodebalancersNodebalancerResult',
    'GetNodebalancersNodebalancerTransferResult',
    'GetProfileReferralsResult',
    'GetRegionResolverResult',
    'GetRegionsFilterResult',
    'GetRegionsRegionResult',
    'GetRegionsRegionResolverResult',
    'GetSshkeysFilterResult',
    'GetSshkeysSshkeyResult',
    'GetStackScriptUserDefinedFieldResult',
    'GetStackScriptsFilterResult',
    'GetStackScriptsStackscriptResult',
    'GetStackScriptsStackscriptUserDefinedFieldResult',
    'GetUserDatabaseGrantResult',
    'GetUserDomainGrantResult',
    'GetUserFirewallGrantResult',
    'GetUserGlobalGrantResult',
    'GetUserImageGrantResult',
    'GetUserLinodeGrantResult',
    'GetUserLongviewGrantResult',
    'GetUserNodebalancerGrantResult',
    'GetUserStackscriptGrantResult',
    'GetUserVolumeGrantResult',
    'GetUsersFilterResult',
    'GetUsersUserResult',
    'GetUsersUserDatabaseGrantResult',
    'GetUsersUserDomainGrantResult',
    'GetUsersUserFirewallGrantResult',
    'GetUsersUserGlobalGrantResult',
    'GetUsersUserImageGrantResult',
    'GetUsersUserLinodeGrantResult',
    'GetUsersUserLongviewGrantResult',
    'GetUsersUserNodebalancerGrantResult',
    'GetUsersUserStackscriptGrantResult',
    'GetUsersUserVolumeGrantResult',
    'GetVlansFilterResult',
    'GetVlansVlanResult',
    'GetVolumesFilterResult',
    'GetVolumesVolumeResult',
]

@pulumi.output_type
class DatabaseMysqlUpdates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"
        elif key == "weekOfMonth":
            suggest = "week_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseMysqlUpdates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseMysqlUpdates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseMysqlUpdates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: str,
                 duration: int,
                 frequency: str,
                 hour_of_day: int,
                 week_of_month: Optional[int] = None):
        DatabaseMysqlUpdates._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            duration=duration,
            frequency=frequency,
            hour_of_day=hour_of_day,
            week_of_month=week_of_month,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: str,
             duration: int,
             frequency: str,
             hour_of_day: int,
             week_of_month: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day_of_week", day_of_week)
        _setter("duration", duration)
        _setter("frequency", frequency)
        _setter("hour_of_day", hour_of_day)
        if week_of_month is not None:
            _setter("week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> int:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[int]:
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class DatabasePostgresqlUpdates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"
        elif key == "weekOfMonth":
            suggest = "week_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabasePostgresqlUpdates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabasePostgresqlUpdates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabasePostgresqlUpdates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: str,
                 duration: int,
                 frequency: str,
                 hour_of_day: int,
                 week_of_month: Optional[int] = None):
        DatabasePostgresqlUpdates._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            duration=duration,
            frequency=frequency,
            hour_of_day=hour_of_day,
            week_of_month=week_of_month,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: str,
             duration: int,
             frequency: str,
             hour_of_day: int,
             week_of_month: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day_of_week", day_of_week)
        _setter("duration", duration)
        _setter("frequency", frequency)
        _setter("hour_of_day", hour_of_day)
        if week_of_month is not None:
            _setter("week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> int:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[int]:
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class FirewallDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: Optional[int] = None,
                 id: Optional[int] = None,
                 label: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param int entity_id: The ID of the underlying entity this device references (i.e. the Linode's ID).
        :param int id: The ID of the Firewall Device.
        :param str label: This Firewall's unique label.
        :param str type: The type of Firewall Device.
        :param str url: The URL of the underlying entity this device references.
        """
        FirewallDevice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_id=entity_id,
            id=id,
            label=label,
            type=type,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_id: Optional[int] = None,
             id: Optional[int] = None,
             label: Optional[str] = None,
             type: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if entity_id is not None:
            _setter("entity_id", entity_id)
        if id is not None:
            _setter("id", id)
        if label is not None:
            _setter("label", label)
        if type is not None:
            _setter("type", type)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[int]:
        """
        The ID of the underlying entity this device references (i.e. the Linode's ID).
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the Firewall Device.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of Firewall Device.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The URL of the underlying entity this device references.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FirewallInbound(dict):
    def __init__(__self__, *,
                 action: str,
                 label: str,
                 protocol: str,
                 ipv4s: Optional[Sequence[str]] = None,
                 ipv6s: Optional[Sequence[str]] = None,
                 ports: Optional[str] = None):
        """
        :param str action: Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param str label: Used to identify this rule. For display purposes only.
        :param str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        :param Sequence[str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.
        :param Sequence[str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.
        :param str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        FirewallInbound._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            label=label,
            protocol=protocol,
            ipv4s=ipv4s,
            ipv6s=ipv6s,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             label: str,
             protocol: str,
             ipv4s: Optional[Sequence[str]] = None,
             ipv6s: Optional[Sequence[str]] = None,
             ports: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("label", label)
        _setter("protocol", protocol)
        if ipv4s is not None:
            _setter("ipv4s", ipv4s)
        if ipv6s is not None:
            _setter("ipv6s", ipv6s)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Used to identify this rule. For display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[Sequence[str]]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Optional[Sequence[str]]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class FirewallOutbound(dict):
    def __init__(__self__, *,
                 action: str,
                 label: str,
                 protocol: str,
                 ipv4s: Optional[Sequence[str]] = None,
                 ipv6s: Optional[Sequence[str]] = None,
                 ports: Optional[str] = None):
        """
        :param str action: Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param str label: This Firewall's unique label.
        :param str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        :param Sequence[str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.
        :param Sequence[str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.
        :param str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        FirewallOutbound._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            label=label,
            protocol=protocol,
            ipv4s=ipv4s,
            ipv6s=ipv6s,
            ports=ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             label: str,
             protocol: str,
             ipv4s: Optional[Sequence[str]] = None,
             ipv6s: Optional[Sequence[str]] = None,
             ports: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("label", label)
        _setter("protocol", protocol)
        if ipv4s is not None:
            _setter("ipv4s", ipv4s)
        if ipv6s is not None:
            _setter("ipv6s", ipv6s)
        if ports is not None:
            _setter("ports", ports)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[Sequence[str]]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Optional[Sequence[str]]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def ports(self) -> Optional[str]:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class InstanceAlerts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkIn":
            suggest = "network_in"
        elif key == "networkOut":
            suggest = "network_out"
        elif key == "transferQuota":
            suggest = "transfer_quota"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAlerts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAlerts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAlerts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[int] = None,
                 io: Optional[int] = None,
                 network_in: Optional[int] = None,
                 network_out: Optional[int] = None,
                 transfer_quota: Optional[int] = None):
        InstanceAlerts._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu=cpu,
            io=io,
            network_in=network_in,
            network_out=network_out,
            transfer_quota=transfer_quota,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu: Optional[int] = None,
             io: Optional[int] = None,
             network_in: Optional[int] = None,
             network_out: Optional[int] = None,
             transfer_quota: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cpu is not None:
            _setter("cpu", cpu)
        if io is not None:
            _setter("io", io)
        if network_in is not None:
            _setter("network_in", network_in)
        if network_out is not None:
            _setter("network_out", network_out)
        if transfer_quota is not None:
            _setter("transfer_quota", transfer_quota)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[int]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def io(self) -> Optional[int]:
        return pulumi.get(self, "io")

    @property
    @pulumi.getter(name="networkIn")
    def network_in(self) -> Optional[int]:
        return pulumi.get(self, "network_in")

    @property
    @pulumi.getter(name="networkOut")
    def network_out(self) -> Optional[int]:
        return pulumi.get(self, "network_out")

    @property
    @pulumi.getter(name="transferQuota")
    def transfer_quota(self) -> Optional[int]:
        return pulumi.get(self, "transfer_quota")


@pulumi.output_type
class InstanceBackups(dict):
    def __init__(__self__, *,
                 available: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 schedule: Optional['outputs.InstanceBackupsSchedule'] = None):
        """
        :param bool enabled: If this Linode has the Backup service enabled.
        """
        InstanceBackups._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available=available,
            enabled=enabled,
            schedule=schedule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available: Optional[bool] = None,
             enabled: Optional[bool] = None,
             schedule: Optional['outputs.InstanceBackupsSchedule'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if available is not None:
            _setter("available", available)
        if enabled is not None:
            _setter("enabled", enabled)
        if schedule is not None:
            _setter("schedule", schedule)

    @property
    @pulumi.getter
    def available(self) -> Optional[bool]:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        If this Linode has the Backup service enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.InstanceBackupsSchedule']:
        return pulumi.get(self, "schedule")


@pulumi.output_type
class InstanceBackupsSchedule(dict):
    def __init__(__self__, *,
                 day: Optional[str] = None,
                 window: Optional[str] = None):
        """
        :param str day: The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        :param str window: The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        InstanceBackupsSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day=day,
            window=window,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day: Optional[str] = None,
             window: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if day is not None:
            _setter("day", day)
        if window is not None:
            _setter("window", window)

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def window(self) -> Optional[str]:
        """
        The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        return pulumi.get(self, "window")


@pulumi.output_type
class InstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryLimit":
            suggest = "memory_limit"
        elif key == "rootDevice":
            suggest = "root_device"
        elif key == "runLevel":
            suggest = "run_level"
        elif key == "virtMode":
            suggest = "virt_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 comments: Optional[str] = None,
                 devices: Optional['outputs.InstanceConfigDevices'] = None,
                 helpers: Optional['outputs.InstanceConfigHelpers'] = None,
                 interfaces: Optional[Sequence['outputs.InstanceConfigInterface']] = None,
                 kernel: Optional[str] = None,
                 memory_limit: Optional[int] = None,
                 root_device: Optional[str] = None,
                 run_level: Optional[str] = None,
                 virt_mode: Optional[str] = None):
        """
        :param str label: The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        :param str comments: Arbitrary user comments about this `config`.
        :param 'InstanceConfigDevicesArgs' devices: A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
        :param 'InstanceConfigHelpersArgs' helpers: Helpers enabled when booting to this Linode Config.
        :param str kernel: A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).
        :param int memory_limit: Defaults to the total RAM of the Linode
               
               * `interface` - (Optional) A list of network interfaces to be assigned to the Linode.
        :param str root_device: The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `"/dev/sda"`
        :param str run_level: Defines the state of your Linode after booting. Defaults to `"default"`.
        :param str virt_mode: Controls the virtualization mode. Defaults to `"paravirt"`.
        """
        InstanceConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            comments=comments,
            devices=devices,
            helpers=helpers,
            interfaces=interfaces,
            kernel=kernel,
            memory_limit=memory_limit,
            root_device=root_device,
            run_level=run_level,
            virt_mode=virt_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             comments: Optional[str] = None,
             devices: Optional['outputs.InstanceConfigDevices'] = None,
             helpers: Optional['outputs.InstanceConfigHelpers'] = None,
             interfaces: Optional[Sequence['outputs.InstanceConfigInterface']] = None,
             kernel: Optional[str] = None,
             memory_limit: Optional[int] = None,
             root_device: Optional[str] = None,
             run_level: Optional[str] = None,
             virt_mode: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        if comments is not None:
            _setter("comments", comments)
        if devices is not None:
            _setter("devices", devices)
        if helpers is not None:
            _setter("helpers", helpers)
        if interfaces is not None:
            _setter("interfaces", interfaces)
        if kernel is not None:
            _setter("kernel", kernel)
        if memory_limit is not None:
            _setter("memory_limit", memory_limit)
        if root_device is not None:
            _setter("root_device", root_device)
        if run_level is not None:
            _setter("run_level", run_level)
        if virt_mode is not None:
            _setter("virt_mode", virt_mode)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        """
        Arbitrary user comments about this `config`.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def devices(self) -> Optional['outputs.InstanceConfigDevices']:
        """
        A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def helpers(self) -> Optional['outputs.InstanceConfigHelpers']:
        """
        Helpers enabled when booting to this Linode Config.
        """
        return pulumi.get(self, "helpers")

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.InstanceConfigInterface']]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def kernel(self) -> Optional[str]:
        """
        A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[int]:
        """
        Defaults to the total RAM of the Linode

        * `interface` - (Optional) A list of network interfaces to be assigned to the Linode.
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> Optional[str]:
        """
        The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `"/dev/sda"`
        """
        return pulumi.get(self, "root_device")

    @property
    @pulumi.getter(name="runLevel")
    def run_level(self) -> Optional[str]:
        """
        Defines the state of your Linode after booting. Defaults to `"default"`.
        """
        return pulumi.get(self, "run_level")

    @property
    @pulumi.getter(name="virtMode")
    def virt_mode(self) -> Optional[str]:
        """
        Controls the virtualization mode. Defaults to `"paravirt"`.
        """
        return pulumi.get(self, "virt_mode")


@pulumi.output_type
class InstanceConfigDevices(dict):
    def __init__(__self__, *,
                 sda: Optional['outputs.InstanceConfigDevicesSda'] = None,
                 sdb: Optional['outputs.InstanceConfigDevicesSdb'] = None,
                 sdc: Optional['outputs.InstanceConfigDevicesSdc'] = None,
                 sdd: Optional['outputs.InstanceConfigDevicesSdd'] = None,
                 sde: Optional['outputs.InstanceConfigDevicesSde'] = None,
                 sdf: Optional['outputs.InstanceConfigDevicesSdf'] = None,
                 sdg: Optional['outputs.InstanceConfigDevicesSdg'] = None,
                 sdh: Optional['outputs.InstanceConfigDevicesSdh'] = None):
        """
        :param 'InstanceConfigDevicesSdaArgs' sda: ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        """
        InstanceConfigDevices._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sda=sda,
            sdb=sdb,
            sdc=sdc,
            sdd=sdd,
            sde=sde,
            sdf=sdf,
            sdg=sdg,
            sdh=sdh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sda: Optional['outputs.InstanceConfigDevicesSda'] = None,
             sdb: Optional['outputs.InstanceConfigDevicesSdb'] = None,
             sdc: Optional['outputs.InstanceConfigDevicesSdc'] = None,
             sdd: Optional['outputs.InstanceConfigDevicesSdd'] = None,
             sde: Optional['outputs.InstanceConfigDevicesSde'] = None,
             sdf: Optional['outputs.InstanceConfigDevicesSdf'] = None,
             sdg: Optional['outputs.InstanceConfigDevicesSdg'] = None,
             sdh: Optional['outputs.InstanceConfigDevicesSdh'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sda is not None:
            _setter("sda", sda)
        if sdb is not None:
            _setter("sdb", sdb)
        if sdc is not None:
            _setter("sdc", sdc)
        if sdd is not None:
            _setter("sdd", sdd)
        if sde is not None:
            _setter("sde", sde)
        if sdf is not None:
            _setter("sdf", sdf)
        if sdg is not None:
            _setter("sdg", sdg)
        if sdh is not None:
            _setter("sdh", sdh)

    @property
    @pulumi.getter
    def sda(self) -> Optional['outputs.InstanceConfigDevicesSda']:
        """
        ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        """
        return pulumi.get(self, "sda")

    @property
    @pulumi.getter
    def sdb(self) -> Optional['outputs.InstanceConfigDevicesSdb']:
        return pulumi.get(self, "sdb")

    @property
    @pulumi.getter
    def sdc(self) -> Optional['outputs.InstanceConfigDevicesSdc']:
        return pulumi.get(self, "sdc")

    @property
    @pulumi.getter
    def sdd(self) -> Optional['outputs.InstanceConfigDevicesSdd']:
        return pulumi.get(self, "sdd")

    @property
    @pulumi.getter
    def sde(self) -> Optional['outputs.InstanceConfigDevicesSde']:
        return pulumi.get(self, "sde")

    @property
    @pulumi.getter
    def sdf(self) -> Optional['outputs.InstanceConfigDevicesSdf']:
        return pulumi.get(self, "sdf")

    @property
    @pulumi.getter
    def sdg(self) -> Optional['outputs.InstanceConfigDevicesSdg']:
        return pulumi.get(self, "sdg")

    @property
    @pulumi.getter
    def sdh(self) -> Optional['outputs.InstanceConfigDevicesSdh']:
        return pulumi.get(self, "sdh")


@pulumi.output_type
class InstanceConfigDevicesSda(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSda. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSda.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSda.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSda._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSdb._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSdc._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSdd._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSde(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSde. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSde.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSde.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSde._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSdf._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSdg._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "diskLabel":
            suggest = "disk_label"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[int] = None,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used.
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        InstanceConfigDevicesSdh._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: Optional[int] = None,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk_id is not None:
            _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[int]:
        """
        The Disk ID of the associated `disk_label`, if used.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigHelpers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "devtmpfsAutomount":
            suggest = "devtmpfs_automount"
        elif key == "modulesDep":
            suggest = "modules_dep"
        elif key == "updatedbDisabled":
            suggest = "updatedb_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigHelpers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigHelpers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigHelpers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 devtmpfs_automount: Optional[bool] = None,
                 distro: Optional[bool] = None,
                 modules_dep: Optional[bool] = None,
                 network: Optional[bool] = None,
                 updatedb_disabled: Optional[bool] = None):
        """
        :param bool distro: Controls the behavior of the Linode Config's Distribution Helper setting.
        :param bool modules_dep: Creates a modules dependency file for the Kernel you run.
        :param bool network: Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        :param bool updatedb_disabled: Disables updatedb cron job to avoid disk thrashing.
        """
        InstanceConfigHelpers._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devtmpfs_automount=devtmpfs_automount,
            distro=distro,
            modules_dep=modules_dep,
            network=network,
            updatedb_disabled=updatedb_disabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devtmpfs_automount: Optional[bool] = None,
             distro: Optional[bool] = None,
             modules_dep: Optional[bool] = None,
             network: Optional[bool] = None,
             updatedb_disabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if devtmpfs_automount is not None:
            _setter("devtmpfs_automount", devtmpfs_automount)
        if distro is not None:
            _setter("distro", distro)
        if modules_dep is not None:
            _setter("modules_dep", modules_dep)
        if network is not None:
            _setter("network", network)
        if updatedb_disabled is not None:
            _setter("updatedb_disabled", updatedb_disabled)

    @property
    @pulumi.getter(name="devtmpfsAutomount")
    def devtmpfs_automount(self) -> Optional[bool]:
        return pulumi.get(self, "devtmpfs_automount")

    @property
    @pulumi.getter
    def distro(self) -> Optional[bool]:
        """
        Controls the behavior of the Linode Config's Distribution Helper setting.
        """
        return pulumi.get(self, "distro")

    @property
    @pulumi.getter(name="modulesDep")
    def modules_dep(self) -> Optional[bool]:
        """
        Creates a modules dependency file for the Kernel you run.
        """
        return pulumi.get(self, "modules_dep")

    @property
    @pulumi.getter
    def network(self) -> Optional[bool]:
        """
        Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="updatedbDisabled")
    def updatedb_disabled(self) -> Optional[bool]:
        """
        Disables updatedb cron job to avoid disk thrashing.
        """
        return pulumi.get(self, "updatedb_disabled")


@pulumi.output_type
class InstanceConfigInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipamAddress":
            suggest = "ipam_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipam_address: Optional[str] = None,
                 label: Optional[str] = None,
                 purpose: Optional[str] = None):
        """
        :param str ipam_address: This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation.
        :param str label: The name of this interface. If the interface is a VLAN, a label is required.
        :param str purpose: The type of interface. (`public`, `vlan`)
        """
        InstanceConfigInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipam_address=ipam_address,
            label=label,
            purpose=purpose,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipam_address: Optional[str] = None,
             label: Optional[str] = None,
             purpose: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ipam_address is not None:
            _setter("ipam_address", ipam_address)
        if label is not None:
            _setter("label", label)
        if purpose is not None:
            _setter("purpose", purpose)

    @property
    @pulumi.getter(name="ipamAddress")
    def ipam_address(self) -> Optional[str]:
        """
        This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation.
        """
        return pulumi.get(self, "ipam_address")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The name of this interface. If the interface is a VLAN, a label is required.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        The type of interface. (`public`, `vlan`)
        """
        return pulumi.get(self, "purpose")


@pulumi.output_type
class InstanceDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizedKeys":
            suggest = "authorized_keys"
        elif key == "authorizedUsers":
            suggest = "authorized_users"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "rootPass":
            suggest = "root_pass"
        elif key == "stackscriptData":
            suggest = "stackscript_data"
        elif key == "stackscriptId":
            suggest = "stackscript_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 size: int,
                 authorized_keys: Optional[Sequence[str]] = None,
                 authorized_users: Optional[Sequence[str]] = None,
                 filesystem: Optional[str] = None,
                 id: Optional[int] = None,
                 image: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 root_pass: Optional[str] = None,
                 stackscript_data: Optional[Mapping[str, Any]] = None,
                 stackscript_id: Optional[int] = None):
        """
        :param str label: The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        :param int size: The size of the Disk in MB.
        :param Sequence[str] authorized_keys: A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
        :param Sequence[str] authorized_users: A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
        :param str filesystem: The Disk filesystem can be one of: `"raw"`, `"swap"`, `"ext3"`, `"ext4"`, or `"initrd"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
        :param int id: The ID of the disk in the Linode API.
        :param str image: An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
        :param bool read_only: If true, this Disk is read-only.
        :param str root_pass: The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in Pulumi state.*
        :param Mapping[str, Any] stackscript_data: An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
        :param int stackscript_id: The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
        """
        InstanceDisk._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            size=size,
            authorized_keys=authorized_keys,
            authorized_users=authorized_users,
            filesystem=filesystem,
            id=id,
            image=image,
            read_only=read_only,
            root_pass=root_pass,
            stackscript_data=stackscript_data,
            stackscript_id=stackscript_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             size: int,
             authorized_keys: Optional[Sequence[str]] = None,
             authorized_users: Optional[Sequence[str]] = None,
             filesystem: Optional[str] = None,
             id: Optional[int] = None,
             image: Optional[str] = None,
             read_only: Optional[bool] = None,
             root_pass: Optional[str] = None,
             stackscript_data: Optional[Mapping[str, Any]] = None,
             stackscript_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        _setter("size", size)
        if authorized_keys is not None:
            _setter("authorized_keys", authorized_keys)
        if authorized_users is not None:
            _setter("authorized_users", authorized_users)
        if filesystem is not None:
            _setter("filesystem", filesystem)
        if id is not None:
            _setter("id", id)
        if image is not None:
            _setter("image", image)
        if read_only is not None:
            _setter("read_only", read_only)
        if root_pass is not None:
            _setter("root_pass", root_pass)
        if stackscript_data is not None:
            _setter("stackscript_data", stackscript_data)
        if stackscript_id is not None:
            _setter("stackscript_id", stackscript_id)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the Disk in MB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="authorizedKeys")
    def authorized_keys(self) -> Optional[Sequence[str]]:
        """
        A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if `image` is provided. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "authorized_keys")

    @property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[Sequence[str]]:
        """
        A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "authorized_users")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[str]:
        """
        The Disk filesystem can be one of: `"raw"`, `"swap"`, `"ext3"`, `"ext4"`, or `"initrd"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the disk in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/. See /images for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/images). *Changing `image` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        If true, this Disk is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="rootPass")
    def root_pass(self) -> Optional[str]:
        """
        The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in Pulumi state.*
        """
        return pulumi.get(self, "root_pass")

    @property
    @pulumi.getter(name="stackscriptData")
    def stackscript_data(self) -> Optional[Mapping[str, Any]]:
        """
        An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "stackscript_data")

    @property
    @pulumi.getter(name="stackscriptId")
    def stackscript_id(self) -> Optional[int]:
        """
        The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "stackscript_id")


@pulumi.output_type
class InstanceInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipamAddress":
            suggest = "ipam_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipam_address: Optional[str] = None,
                 label: Optional[str] = None,
                 purpose: Optional[str] = None):
        """
        :param str ipam_address: This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation.
        :param str label: The name of this interface. If the interface is a VLAN, a label is required.
        :param str purpose: The type of interface. (`public`, `vlan`)
        """
        InstanceInterface._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipam_address=ipam_address,
            label=label,
            purpose=purpose,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipam_address: Optional[str] = None,
             label: Optional[str] = None,
             purpose: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ipam_address is not None:
            _setter("ipam_address", ipam_address)
        if label is not None:
            _setter("label", label)
        if purpose is not None:
            _setter("purpose", purpose)

    @property
    @pulumi.getter(name="ipamAddress")
    def ipam_address(self) -> Optional[str]:
        """
        This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation.
        """
        return pulumi.get(self, "ipam_address")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        The name of this interface. If the interface is a VLAN, a label is required.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        The type of interface. (`public`, `vlan`)
        """
        return pulumi.get(self, "purpose")


@pulumi.output_type
class InstanceMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_data: Optional[str] = None):
        InstanceMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            user_data=user_data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             user_data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if user_data is not None:
            _setter("user_data", user_data)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        return pulumi.get(self, "user_data")


@pulumi.output_type
class InstanceSpecs(dict):
    def __init__(__self__, *,
                 disk: Optional[int] = None,
                 memory: Optional[int] = None,
                 transfer: Optional[int] = None,
                 vcpus: Optional[int] = None):
        InstanceSpecs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk=disk,
            memory=memory,
            transfer=transfer,
            vcpus=vcpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk: Optional[int] = None,
             memory: Optional[int] = None,
             transfer: Optional[int] = None,
             vcpus: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disk is not None:
            _setter("disk", disk)
        if memory is not None:
            _setter("memory", memory)
        if transfer is not None:
            _setter("transfer", transfer)
        if vcpus is not None:
            _setter("vcpus", vcpus)

    @property
    @pulumi.getter
    def disk(self) -> Optional[int]:
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def memory(self) -> Optional[int]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def transfer(self) -> Optional[int]:
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[int]:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class LkeClusterControlPlane(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highAvailability":
            suggest = "high_availability"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LkeClusterControlPlane. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LkeClusterControlPlane.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LkeClusterControlPlane.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 high_availability: Optional[bool] = None):
        """
        :param bool high_availability: Defines whether High Availability is enabled for the cluster Control Plane. This is an **irreversible** change.
        """
        LkeClusterControlPlane._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            high_availability=high_availability,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             high_availability: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if high_availability is not None:
            _setter("high_availability", high_availability)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[bool]:
        """
        Defines whether High Availability is enabled for the cluster Control Plane. This is an **irreversible** change.
        """
        return pulumi.get(self, "high_availability")


@pulumi.output_type
class LkeClusterPool(dict):
    def __init__(__self__, *,
                 count: int,
                 type: str,
                 autoscaler: Optional['outputs.LkeClusterPoolAutoscaler'] = None,
                 id: Optional[int] = None,
                 nodes: Optional[Sequence['outputs.LkeClusterPoolNode']] = None):
        """
        :param int count: The number of nodes in the Node Pool.
               
               * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
        :param str type: A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        :param int id: The ID of the node.
        """
        LkeClusterPool._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
            type=type,
            autoscaler=autoscaler,
            id=id,
            nodes=nodes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: int,
             type: str,
             autoscaler: Optional['outputs.LkeClusterPoolAutoscaler'] = None,
             id: Optional[int] = None,
             nodes: Optional[Sequence['outputs.LkeClusterPoolNode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("count", count)
        _setter("type", type)
        if autoscaler is not None:
            _setter("autoscaler", autoscaler)
        if id is not None:
            _setter("id", id)
        if nodes is not None:
            _setter("nodes", nodes)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of nodes in the Node Pool.

        * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.LkeClusterPoolAutoscaler']:
        return pulumi.get(self, "autoscaler")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.LkeClusterPoolNode']]:
        return pulumi.get(self, "nodes")


@pulumi.output_type
class LkeClusterPoolAutoscaler(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        """
        :param int max: The maximum number of nodes to autoscale to.
        :param int min: The minimum number of nodes to autoscale to.
        """
        LkeClusterPoolAutoscaler._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        The maximum number of nodes to autoscale to.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        The minimum number of nodes to autoscale to.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class LkeClusterPoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LkeClusterPoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LkeClusterPoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LkeClusterPoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 instance_id: Optional[int] = None,
                 status: Optional[str] = None):
        """
        :param str id: The ID of the node.
        :param int instance_id: The ID of the underlying Linode instance.
        :param str status: The status of the node. (`ready`, `not_ready`)
        """
        LkeClusterPoolNode._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            instance_id=instance_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional[str] = None,
             instance_id: Optional[int] = None,
             status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if id is not None:
            _setter("id", id)
        if instance_id is not None:
            _setter("instance_id", instance_id)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[int]:
        """
        The ID of the underlying Linode instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the node. (`ready`, `not_ready`)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class NodeBalancerConfigNodeStatus(dict):
    def __init__(__self__, *,
                 down: Optional[int] = None,
                 up: Optional[int] = None):
        """
        :param int down: The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        :param int up: The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        NodeBalancerConfigNodeStatus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            down=down,
            up=up,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             down: Optional[int] = None,
             up: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if down is not None:
            _setter("down", down)
        if up is not None:
            _setter("up", up)

    @property
    @pulumi.getter
    def down(self) -> Optional[int]:
        """
        The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        """
        return pulumi.get(self, "down")

    @property
    @pulumi.getter
    def up(self) -> Optional[int]:
        """
        The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        return pulumi.get(self, "up")


@pulumi.output_type
class NodeBalancerTransfer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "in":
            suggest = "in_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeBalancerTransfer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeBalancerTransfer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeBalancerTransfer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_: float,
                 out: float,
                 total: float):
        """
        :param float in_: The total transfer, in MB, used by this NodeBalancer for the current month
        :param float out: The total inbound transfer, in MB, used for this NodeBalancer for the current month
        :param float total: The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        NodeBalancerTransfer._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            in_=in_,
            out=out,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             in_: float,
             out: float,
             total: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("in_", in_)
        _setter("out", out)
        _setter("total", total)

    @property
    @pulumi.getter(name="in")
    def in_(self) -> float:
        """
        The total transfer, in MB, used by this NodeBalancer for the current month
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def out(self) -> float:
        """
        The total inbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class ObjectStorageBucketCert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageBucketCert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageBucketCert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageBucketCert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate: str,
                 private_key: str):
        """
        :param str certificate: The Base64 encoded and PEM formatted SSL certificate.
        :param str private_key: The private key associated with the TLS/SSL certificate.
        """
        ObjectStorageBucketCert._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate=certificate,
            private_key=private_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate: str,
             private_key: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate", certificate)
        _setter("private_key", private_key)

    @property
    @pulumi.getter
    def certificate(self) -> str:
        """
        The Base64 encoded and PEM formatted SSL certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        """
        The private key associated with the TLS/SSL certificate.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class ObjectStorageBucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortIncompleteMultipartUploadDays":
            suggest = "abort_incomplete_multipart_upload_days"
        elif key == "noncurrentVersionExpiration":
            suggest = "noncurrent_version_expiration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageBucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageBucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageBucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 abort_incomplete_multipart_upload_days: Optional[int] = None,
                 expiration: Optional['outputs.ObjectStorageBucketLifecycleRuleExpiration'] = None,
                 id: Optional[str] = None,
                 noncurrent_version_expiration: Optional['outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration'] = None,
                 prefix: Optional[str] = None):
        """
        :param bool enabled: Specifies whether the lifecycle rule is active.
        :param int abort_incomplete_multipart_upload_days: Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
               
               * `expiration` - (Optional) Specifies a period in the object's expire.
               
               * `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.
        :param str id: The unique identifier for the rule.
        :param str prefix: The object key prefix identifying one or more objects to which the rule applies.
        """
        ObjectStorageBucketLifecycleRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            abort_incomplete_multipart_upload_days=abort_incomplete_multipart_upload_days,
            expiration=expiration,
            id=id,
            noncurrent_version_expiration=noncurrent_version_expiration,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             abort_incomplete_multipart_upload_days: Optional[int] = None,
             expiration: Optional['outputs.ObjectStorageBucketLifecycleRuleExpiration'] = None,
             id: Optional[str] = None,
             noncurrent_version_expiration: Optional['outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration'] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if abort_incomplete_multipart_upload_days is not None:
            _setter("abort_incomplete_multipart_upload_days", abort_incomplete_multipart_upload_days)
        if expiration is not None:
            _setter("expiration", expiration)
        if id is not None:
            _setter("id", id)
        if noncurrent_version_expiration is not None:
            _setter("noncurrent_version_expiration", noncurrent_version_expiration)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Specifies whether the lifecycle rule is active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    def abort_incomplete_multipart_upload_days(self) -> Optional[int]:
        """
        Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.

        * `expiration` - (Optional) Specifies a period in the object's expire.

        * `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.ObjectStorageBucketLifecycleRuleExpiration']:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique identifier for the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional['outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration']:
        return pulumi.get(self, "noncurrent_version_expiration")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        The object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class ObjectStorageBucketLifecycleRuleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiredObjectDeleteMarker":
            suggest = "expired_object_delete_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageBucketLifecycleRuleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageBucketLifecycleRuleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageBucketLifecycleRuleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 days: Optional[int] = None,
                 expired_object_delete_marker: Optional[bool] = None):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param bool expired_object_delete_marker: On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Linode Object Storage to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
        ObjectStorageBucketLifecycleRuleExpiration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date=date,
            days=days,
            expired_object_delete_marker=expired_object_delete_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date: Optional[str] = None,
             days: Optional[int] = None,
             expired_object_delete_marker: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date is not None:
            _setter("date", date)
        if days is not None:
            _setter("days", days)
        if expired_object_delete_marker is not None:
            _setter("expired_object_delete_marker", expired_object_delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="expiredObjectDeleteMarker")
    def expired_object_delete_marker(self) -> Optional[bool]:
        """
        On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Linode Object Storage to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
        return pulumi.get(self, "expired_object_delete_marker")


@pulumi.output_type
class ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration(dict):
    def __init__(__self__, *,
                 days: int):
        """
        :param int days: Specifies the number of days non-current object versions expire.
        """
        ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            days=days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             days: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("days", days)

    @property
    @pulumi.getter
    def days(self) -> int:
        """
        Specifies the number of days non-current object versions expire.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class ObjectStorageKeyBucketAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageKeyBucketAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageKeyBucketAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageKeyBucketAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 cluster: str,
                 permissions: str):
        """
        :param str bucket_name: The unique label of the bucket to which the key will grant limited access.
        :param str cluster: The Object Storage cluster where a bucket to which the key is granting access is hosted.
        :param str permissions: This Limited Access Key’s permissions for the selected bucket. *Changing `permissions` forces the creation of a new Object Storage Key.* (`read_write`, `read_only`)
        """
        ObjectStorageKeyBucketAccess._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            cluster=cluster,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: str,
             cluster: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket_name", bucket_name)
        _setter("cluster", cluster)
        _setter("permissions", permissions)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        The unique label of the bucket to which the key will grant limited access.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def cluster(self) -> str:
        """
        The Object Storage cluster where a bucket to which the key is granting access is hosted.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        This Limited Access Key’s permissions for the selected bucket. *Changing `permissions` forces the creation of a new Object Storage Key.* (`read_write`, `read_only`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class StackScriptUserDefinedField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manyOf":
            suggest = "many_of"
        elif key == "oneOf":
            suggest = "one_of"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackScriptUserDefinedField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackScriptUserDefinedField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackScriptUserDefinedField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: str,
                 example: str,
                 label: str,
                 many_of: str,
                 name: str,
                 one_of: str):
        """
        :param str default: The default value. If not specified, this value will be used.
        :param str example: An example value for the field.
        :param str label: The StackScript's label is for display purposes only.
        :param str many_of: A list of acceptable values for the field in any quantity, combination or order.
        :param str name: The name of the field.
        :param str one_of: A list of acceptable single values for the field.
        """
        StackScriptUserDefinedField._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            example=example,
            label=label,
            many_of=many_of,
            name=name,
            one_of=one_of,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: str,
             example: str,
             label: str,
             many_of: str,
             name: str,
             one_of: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default", default)
        _setter("example", example)
        _setter("label", label)
        _setter("many_of", many_of)
        _setter("name", name)
        _setter("one_of", one_of)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        The default value. If not specified, this value will be used.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def example(self) -> str:
        """
        An example value for the field.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The StackScript's label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="manyOf")
    def many_of(self) -> str:
        """
        A list of acceptable values for the field in any quantity, combination or order.
        """
        return pulumi.get(self, "many_of")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> str:
        """
        A list of acceptable single values for the field.
        """
        return pulumi.get(self, "one_of")


@pulumi.output_type
class UserDomainGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserDomainGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserFirewallGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserFirewallGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserGlobalGrants(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountAccess":
            suggest = "account_access"
        elif key == "addDatabases":
            suggest = "add_databases"
        elif key == "addDomains":
            suggest = "add_domains"
        elif key == "addFirewalls":
            suggest = "add_firewalls"
        elif key == "addImages":
            suggest = "add_images"
        elif key == "addLinodes":
            suggest = "add_linodes"
        elif key == "addLongview":
            suggest = "add_longview"
        elif key == "addNodebalancers":
            suggest = "add_nodebalancers"
        elif key == "addStackscripts":
            suggest = "add_stackscripts"
        elif key == "addVolumes":
            suggest = "add_volumes"
        elif key == "cancelAccount":
            suggest = "cancel_account"
        elif key == "longviewSubscription":
            suggest = "longview_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGlobalGrants. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGlobalGrants.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGlobalGrants.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_access: Optional[str] = None,
                 add_databases: Optional[bool] = None,
                 add_domains: Optional[bool] = None,
                 add_firewalls: Optional[bool] = None,
                 add_images: Optional[bool] = None,
                 add_linodes: Optional[bool] = None,
                 add_longview: Optional[bool] = None,
                 add_nodebalancers: Optional[bool] = None,
                 add_stackscripts: Optional[bool] = None,
                 add_volumes: Optional[bool] = None,
                 cancel_account: Optional[bool] = None,
                 longview_subscription: Optional[bool] = None):
        UserGlobalGrants._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_access=account_access,
            add_databases=add_databases,
            add_domains=add_domains,
            add_firewalls=add_firewalls,
            add_images=add_images,
            add_linodes=add_linodes,
            add_longview=add_longview,
            add_nodebalancers=add_nodebalancers,
            add_stackscripts=add_stackscripts,
            add_volumes=add_volumes,
            cancel_account=cancel_account,
            longview_subscription=longview_subscription,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_access: Optional[str] = None,
             add_databases: Optional[bool] = None,
             add_domains: Optional[bool] = None,
             add_firewalls: Optional[bool] = None,
             add_images: Optional[bool] = None,
             add_linodes: Optional[bool] = None,
             add_longview: Optional[bool] = None,
             add_nodebalancers: Optional[bool] = None,
             add_stackscripts: Optional[bool] = None,
             add_volumes: Optional[bool] = None,
             cancel_account: Optional[bool] = None,
             longview_subscription: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if account_access is not None:
            _setter("account_access", account_access)
        if add_databases is not None:
            _setter("add_databases", add_databases)
        if add_domains is not None:
            _setter("add_domains", add_domains)
        if add_firewalls is not None:
            _setter("add_firewalls", add_firewalls)
        if add_images is not None:
            _setter("add_images", add_images)
        if add_linodes is not None:
            _setter("add_linodes", add_linodes)
        if add_longview is not None:
            _setter("add_longview", add_longview)
        if add_nodebalancers is not None:
            _setter("add_nodebalancers", add_nodebalancers)
        if add_stackscripts is not None:
            _setter("add_stackscripts", add_stackscripts)
        if add_volumes is not None:
            _setter("add_volumes", add_volumes)
        if cancel_account is not None:
            _setter("cancel_account", cancel_account)
        if longview_subscription is not None:
            _setter("longview_subscription", longview_subscription)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> Optional[str]:
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="addDatabases")
    def add_databases(self) -> Optional[bool]:
        return pulumi.get(self, "add_databases")

    @property
    @pulumi.getter(name="addDomains")
    def add_domains(self) -> Optional[bool]:
        return pulumi.get(self, "add_domains")

    @property
    @pulumi.getter(name="addFirewalls")
    def add_firewalls(self) -> Optional[bool]:
        return pulumi.get(self, "add_firewalls")

    @property
    @pulumi.getter(name="addImages")
    def add_images(self) -> Optional[bool]:
        return pulumi.get(self, "add_images")

    @property
    @pulumi.getter(name="addLinodes")
    def add_linodes(self) -> Optional[bool]:
        return pulumi.get(self, "add_linodes")

    @property
    @pulumi.getter(name="addLongview")
    def add_longview(self) -> Optional[bool]:
        return pulumi.get(self, "add_longview")

    @property
    @pulumi.getter(name="addNodebalancers")
    def add_nodebalancers(self) -> Optional[bool]:
        return pulumi.get(self, "add_nodebalancers")

    @property
    @pulumi.getter(name="addStackscripts")
    def add_stackscripts(self) -> Optional[bool]:
        return pulumi.get(self, "add_stackscripts")

    @property
    @pulumi.getter(name="addVolumes")
    def add_volumes(self) -> Optional[bool]:
        return pulumi.get(self, "add_volumes")

    @property
    @pulumi.getter(name="cancelAccount")
    def cancel_account(self) -> Optional[bool]:
        return pulumi.get(self, "cancel_account")

    @property
    @pulumi.getter(name="longviewSubscription")
    def longview_subscription(self) -> Optional[bool]:
        return pulumi.get(self, "longview_subscription")


@pulumi.output_type
class UserImageGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserImageGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserLinodeGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserLinodeGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserLongviewGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserLongviewGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserNodebalancerGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserNodebalancerGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserStackscriptGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserStackscriptGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserVolumeGrant(dict):
    def __init__(__self__, *,
                 id: int,
                 permissions: str):
        UserVolumeGrant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetAccountLoginsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetAccountLoginsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetAccountLoginsLoginResult(dict):
    def __init__(__self__, *,
                 datetime: str,
                 id: int,
                 ip: str,
                 restricted: bool,
                 status: str,
                 username: str):
        """
        :param str datetime: When the login was initiated.
        :param int id: The unique ID of this login object.
        :param str ip: The remote IP address that requested the login.
        :param bool restricted: True if the User that was logged into was a restricted User, false otherwise.
        :param str username: The username of the User that was logged into.
        """
        GetAccountLoginsLoginResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datetime=datetime,
            id=id,
            ip=ip,
            restricted=restricted,
            status=status,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datetime: str,
             id: int,
             ip: str,
             restricted: bool,
             status: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("datetime", datetime)
        _setter("id", id)
        _setter("ip", ip)
        _setter("restricted", restricted)
        _setter("status", status)
        _setter("username", username)

    @property
    @pulumi.getter
    def datetime(self) -> str:
        """
        When the login was initiated.
        """
        return pulumi.get(self, "datetime")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID of this login object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        The remote IP address that requested the login.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def restricted(self) -> bool:
        """
        True if the User that was logged into was a restricted User, false otherwise.
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username of the User that was logged into.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetDatabaseBackupsBackupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 id: int,
                 label: str,
                 type: str):
        """
        :param str created: A time value given in a combined date and time format that represents when the database backup was created.
        :param int id: The ID of the database backup object.
        :param str label: The database backup’s label, for display purposes only.
        :param str type: The type of database backup, determined by how the backup was created.
        """
        GetDatabaseBackupsBackupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            id=id,
            label=label,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             id: int,
             label: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("id", id)
        _setter("label", label)
        _setter("type", type)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        A time value given in a combined date and time format that represents when the database backup was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the database backup object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The database backup’s label, for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of database backup, determined by how the backup was created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabaseBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetDatabaseBackupsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseEnginesEngineResult(dict):
    def __init__(__self__, *,
                 engine: str,
                 id: str,
                 version: str):
        """
        :param str engine: The Managed Database engine type.
        :param str id: The Managed Database engine ID in engine/version format.
        :param str version: The Managed Database engine version.
        """
        GetDatabaseEnginesEngineResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            engine=engine,
            id=id,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             engine: str,
             id: str,
             version: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("engine", engine)
        _setter("id", id)
        _setter("version", version)

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        The Managed Database engine type.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Managed Database engine ID in engine/version format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The Managed Database engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatabaseEnginesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetDatabaseEnginesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseMysqlBackupsBackupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 id: int,
                 label: str,
                 type: str):
        """
        :param str created: A time value given in a combined date and time format that represents when the database backup was created.
        :param int id: The ID of the database backup object.
        :param str label: The database backup’s label, for display purposes only.
        :param str type: The type of database backup, determined by how the backup was created.
        """
        GetDatabaseMysqlBackupsBackupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            id=id,
            label=label,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             id: int,
             label: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("id", id)
        _setter("label", label)
        _setter("type", type)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        A time value given in a combined date and time format that represents when the database backup was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the database backup object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The database backup’s label, for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of database backup, determined by how the backup was created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabaseMysqlBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetDatabaseMysqlBackupsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseMysqlUpdateResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 duration: int,
                 frequency: str,
                 hour_of_day: int,
                 week_of_month: int):
        GetDatabaseMysqlUpdateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            duration=duration,
            frequency=frequency,
            hour_of_day=hour_of_day,
            week_of_month=week_of_month,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: str,
             duration: int,
             frequency: str,
             hour_of_day: int,
             week_of_month: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day_of_week", day_of_week)
        _setter("duration", duration)
        _setter("frequency", frequency)
        _setter("hour_of_day", hour_of_day)
        _setter("week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> int:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> int:
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class GetDatabasePostgresqlUpdateResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 duration: int,
                 frequency: str,
                 hour_of_day: int,
                 week_of_month: int):
        GetDatabasePostgresqlUpdateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_week=day_of_week,
            duration=duration,
            frequency=frequency,
            hour_of_day=hour_of_day,
            week_of_month=week_of_month,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_week: str,
             duration: int,
             frequency: str,
             hour_of_day: int,
             week_of_month: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day_of_week", day_of_week)
        _setter("duration", duration)
        _setter("frequency", frequency)
        _setter("hour_of_day", hour_of_day)
        _setter("week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> int:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> int:
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 allow_lists: Sequence[str],
                 cluster_size: int,
                 created: str,
                 encrypted: bool,
                 engine: str,
                 host_primary: str,
                 host_secondary: str,
                 id: int,
                 instance_uri: str,
                 label: str,
                 region: str,
                 replication_type: str,
                 ssl_connection: bool,
                 status: str,
                 type: str,
                 updated: str,
                 version: str):
        """
        :param Sequence[str] allow_lists: A list of IP addresses that can access the Managed Database.
        :param int cluster_size: The number of Linode Instance nodes deployed to the Managed Database.
        :param str created: When this Managed Database was created.
        :param bool encrypted: Whether the Managed Databases is encrypted.
        :param str engine: The Managed Database engine.
        :param str host_primary: The primary host for the Managed Database.
        :param str host_secondary: The secondary/private network host for the Managed Database.
        :param int id: The ID of the Managed Database.
        :param str label: A unique, user-defined string referring to the Managed Database.
        :param str region: The region to use for the Managed Database.
        :param str replication_type: The replication method used for the Managed Database.
        :param bool ssl_connection: Whether to require SSL credentials to establish a connection to the Managed Database.
        :param str status: The operating status of the Managed Database.
        :param str type: The Linode Instance type used for the nodes of the  Managed Database instance.
        :param str updated: When this Managed Database was last updated.
        :param str version: The Managed Database engine version.
        """
        GetDatabasesDatabaseResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_lists=allow_lists,
            cluster_size=cluster_size,
            created=created,
            encrypted=encrypted,
            engine=engine,
            host_primary=host_primary,
            host_secondary=host_secondary,
            id=id,
            instance_uri=instance_uri,
            label=label,
            region=region,
            replication_type=replication_type,
            ssl_connection=ssl_connection,
            status=status,
            type=type,
            updated=updated,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_lists: Sequence[str],
             cluster_size: int,
             created: str,
             encrypted: bool,
             engine: str,
             host_primary: str,
             host_secondary: str,
             id: int,
             instance_uri: str,
             label: str,
             region: str,
             replication_type: str,
             ssl_connection: bool,
             status: str,
             type: str,
             updated: str,
             version: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allow_lists", allow_lists)
        _setter("cluster_size", cluster_size)
        _setter("created", created)
        _setter("encrypted", encrypted)
        _setter("engine", engine)
        _setter("host_primary", host_primary)
        _setter("host_secondary", host_secondary)
        _setter("id", id)
        _setter("instance_uri", instance_uri)
        _setter("label", label)
        _setter("region", region)
        _setter("replication_type", replication_type)
        _setter("ssl_connection", ssl_connection)
        _setter("status", status)
        _setter("type", type)
        _setter("updated", updated)
        _setter("version", version)

    @property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Sequence[str]:
        """
        A list of IP addresses that can access the Managed Database.
        """
        return pulumi.get(self, "allow_lists")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> int:
        """
        The number of Linode Instance nodes deployed to the Managed Database.
        """
        return pulumi.get(self, "cluster_size")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        When this Managed Database was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def encrypted(self) -> bool:
        """
        Whether the Managed Databases is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def engine(self) -> str:
        """
        The Managed Database engine.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="hostPrimary")
    def host_primary(self) -> str:
        """
        The primary host for the Managed Database.
        """
        return pulumi.get(self, "host_primary")

    @property
    @pulumi.getter(name="hostSecondary")
    def host_secondary(self) -> str:
        """
        The secondary/private network host for the Managed Database.
        """
        return pulumi.get(self, "host_secondary")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the Managed Database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceUri")
    def instance_uri(self) -> str:
        return pulumi.get(self, "instance_uri")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A unique, user-defined string referring to the Managed Database.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region to use for the Managed Database.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> str:
        """
        The replication method used for the Managed Database.
        """
        return pulumi.get(self, "replication_type")

    @property
    @pulumi.getter(name="sslConnection")
    def ssl_connection(self) -> bool:
        """
        Whether to require SSL credentials to establish a connection to the Managed Database.
        """
        return pulumi.get(self, "ssl_connection")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The operating status of the Managed Database.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Linode Instance type used for the nodes of the  Managed Database instance.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        When this Managed Database was last updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The Managed Database engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetDatabasesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetFirewallDeviceResult(dict):
    def __init__(__self__, *,
                 entity_id: int,
                 id: int,
                 label: str,
                 type: str,
                 url: str):
        """
        :param int entity_id: The ID of the underlying entity this device references (i.e. the Linode's ID).
        :param int id: The Firewall's ID.
        :param str label: The label of the underlying entity this device references.
        :param str type: The type of Firewall Device.
        :param str url: The URL of the underlying entity this device references.
        """
        GetFirewallDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_id=entity_id,
            id=id,
            label=label,
            type=type,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_id: int,
             id: int,
             label: str,
             type: str,
             url: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("entity_id", entity_id)
        _setter("id", id)
        _setter("label", label)
        _setter("type", type)
        _setter("url", url)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> int:
        """
        The ID of the underlying entity this device references (i.e. the Linode's ID).
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The Firewall's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the underlying entity this device references.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of Firewall Device.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL of the underlying entity this device references.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFirewallInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 ipv4s: Sequence[str],
                 ipv6s: Sequence[str],
                 label: str,
                 ports: str,
                 protocol: str):
        """
        :param str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param str label: The label of the underlying entity this device references.
        :param str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        GetFirewallInboundResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            ipv4s=ipv4s,
            ipv6s=ipv6s,
            label=label,
            ports=ports,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             ipv4s: Sequence[str],
             ipv6s: Sequence[str],
             label: str,
             ports: str,
             protocol: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("ipv4s", ipv4s)
        _setter("ipv6s", ipv6s)
        _setter("label", label)
        _setter("ports", ports)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the underlying entity this device references.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 ipv4s: Sequence[str],
                 ipv6s: Sequence[str],
                 label: str,
                 ports: str,
                 protocol: str):
        """
        :param str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param str label: The label of the underlying entity this device references.
        :param str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        GetFirewallOutboundResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            ipv4s=ipv4s,
            ipv6s=ipv6s,
            label=label,
            ports=ports,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             ipv4s: Sequence[str],
             ipv6s: Sequence[str],
             label: str,
             ports: str,
             protocol: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("ipv4s", ipv4s)
        _setter("ipv6s", ipv6s)
        _setter("label", label)
        _setter("ports", ports)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the underlying entity this device references.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetFirewallsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetFirewallsFirewallResult(dict):
    def __init__(__self__, *,
                 created: str,
                 disabled: bool,
                 id: int,
                 inbound_policy: str,
                 label: str,
                 linodes: Sequence[int],
                 nodebalancers: Sequence[int],
                 outbound_policy: str,
                 status: str,
                 tags: Sequence[str],
                 updated: str,
                 devices: Optional[Sequence['outputs.GetFirewallsFirewallDeviceResult']] = None,
                 inbounds: Optional[Sequence['outputs.GetFirewallsFirewallInboundResult']] = None,
                 outbounds: Optional[Sequence['outputs.GetFirewallsFirewallOutboundResult']] = None):
        """
        :param str created: When this firewall was created.
        :param bool disabled: If true, the Firewall is inactive.
        :param int id: The unique ID assigned to this Firewall.
        :param str inbound_policy: The default behavior for inbound traffic.
        :param str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        :param Sequence[int] linodes: The IDs of Linodes this firewall is applied to.
        :param str outbound_policy: The default behavior for outbound traffic.
        :param str status: The status of the firewall.
        :param Sequence[str] tags: An array of tags applied to this object. Tags are for organizational purposes only.
        :param str updated: When this firewall was last updated.
        """
        GetFirewallsFirewallResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            disabled=disabled,
            id=id,
            inbound_policy=inbound_policy,
            label=label,
            linodes=linodes,
            nodebalancers=nodebalancers,
            outbound_policy=outbound_policy,
            status=status,
            tags=tags,
            updated=updated,
            devices=devices,
            inbounds=inbounds,
            outbounds=outbounds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             disabled: bool,
             id: int,
             inbound_policy: str,
             label: str,
             linodes: Sequence[int],
             nodebalancers: Sequence[int],
             outbound_policy: str,
             status: str,
             tags: Sequence[str],
             updated: str,
             devices: Optional[Sequence['outputs.GetFirewallsFirewallDeviceResult']] = None,
             inbounds: Optional[Sequence['outputs.GetFirewallsFirewallInboundResult']] = None,
             outbounds: Optional[Sequence['outputs.GetFirewallsFirewallOutboundResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("disabled", disabled)
        _setter("id", id)
        _setter("inbound_policy", inbound_policy)
        _setter("label", label)
        _setter("linodes", linodes)
        _setter("nodebalancers", nodebalancers)
        _setter("outbound_policy", outbound_policy)
        _setter("status", status)
        _setter("tags", tags)
        _setter("updated", updated)
        if devices is not None:
            _setter("devices", devices)
        if inbounds is not None:
            _setter("inbounds", inbounds)
        if outbounds is not None:
            _setter("outbounds", outbounds)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        When this firewall was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        If true, the Firewall is inactive.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID assigned to this Firewall.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> str:
        """
        The default behavior for inbound traffic.
        """
        return pulumi.get(self, "inbound_policy")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def linodes(self) -> Sequence[int]:
        """
        The IDs of Linodes this firewall is applied to.
        """
        return pulumi.get(self, "linodes")

    @property
    @pulumi.getter
    def nodebalancers(self) -> Sequence[int]:
        return pulumi.get(self, "nodebalancers")

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> str:
        """
        The default behavior for outbound traffic.
        """
        return pulumi.get(self, "outbound_policy")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the firewall.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        An array of tags applied to this object. Tags are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        When this firewall was last updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.GetFirewallsFirewallDeviceResult']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def inbounds(self) -> Optional[Sequence['outputs.GetFirewallsFirewallInboundResult']]:
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Optional[Sequence['outputs.GetFirewallsFirewallOutboundResult']]:
        return pulumi.get(self, "outbounds")


@pulumi.output_type
class GetFirewallsFirewallDeviceResult(dict):
    def __init__(__self__, *,
                 entity_id: int,
                 id: int,
                 label: str,
                 type: str,
                 url: str):
        """
        :param int id: The unique ID assigned to this Firewall.
        :param str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        GetFirewallsFirewallDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_id=entity_id,
            id=id,
            label=label,
            type=type,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_id: int,
             id: int,
             label: str,
             type: str,
             url: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("entity_id", entity_id)
        _setter("id", id)
        _setter("label", label)
        _setter("type", type)
        _setter("url", url)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> int:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID assigned to this Firewall.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFirewallsFirewallInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 ipv4s: Sequence[str],
                 ipv6s: Sequence[str],
                 label: str,
                 ports: str,
                 protocol: str):
        """
        :param str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        GetFirewallsFirewallInboundResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            ipv4s=ipv4s,
            ipv6s=ipv6s,
            label=label,
            ports=ports,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             ipv4s: Sequence[str],
             ipv6s: Sequence[str],
             label: str,
             ports: str,
             protocol: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("ipv4s", ipv4s)
        _setter("ipv6s", ipv6s)
        _setter("label", label)
        _setter("ports", ports)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[str]:
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[str]:
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> str:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallsFirewallOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 ipv4s: Sequence[str],
                 ipv6s: Sequence[str],
                 label: str,
                 ports: str,
                 protocol: str):
        """
        :param str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        GetFirewallsFirewallOutboundResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            ipv4s=ipv4s,
            ipv6s=ipv6s,
            label=label,
            ports=ports,
            protocol=protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             ipv4s: Sequence[str],
             ipv6s: Sequence[str],
             label: str,
             ports: str,
             protocol: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("ipv4s", ipv4s)
        _setter("ipv6s", ipv6s)
        _setter("label", label)
        _setter("ports", ports)
        _setter("protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[str]:
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[str]:
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> str:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetImagesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence[str],
                 created: str,
                 created_by: str,
                 deprecated: bool,
                 description: str,
                 expiry: str,
                 id: str,
                 is_public: bool,
                 label: str,
                 size: int,
                 status: str,
                 type: str,
                 vendor: str):
        """
        :param str created: When this Image was created.
        :param str created_by: The name of the User who created this Image, or "linode" for official Images.
        :param bool deprecated: Whether or not this Image is deprecated. Will only be true for deprecated public Images.
        :param str description: A detailed description of this Image.
        :param str id: The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
        :param bool is_public: True if the Image is public.
        :param str label: A short description of the Image.
        :param int size: The minimum size this Image needs to deploy. Size is in MB. example: 2500
        :param str status: The current status of this image. (`creating`, `pending_upload`, `available`)
        :param str type: How the Image was created. Manual Images can be created at any time. "Automatic" Images are created automatically from a deleted Linode. (`manual`, `automatic`)
        :param str vendor: The upstream distribution vendor. `None` for private Images.
        """
        GetImagesImageResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capabilities=capabilities,
            created=created,
            created_by=created_by,
            deprecated=deprecated,
            description=description,
            expiry=expiry,
            id=id,
            is_public=is_public,
            label=label,
            size=size,
            status=status,
            type=type,
            vendor=vendor,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capabilities: Sequence[str],
             created: str,
             created_by: str,
             deprecated: bool,
             description: str,
             expiry: str,
             id: str,
             is_public: bool,
             label: str,
             size: int,
             status: str,
             type: str,
             vendor: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("capabilities", capabilities)
        _setter("created", created)
        _setter("created_by", created_by)
        _setter("deprecated", deprecated)
        _setter("description", description)
        _setter("expiry", expiry)
        _setter("id", id)
        _setter("is_public", is_public)
        _setter("label", label)
        _setter("size", size)
        _setter("status", status)
        _setter("type", type)
        _setter("vendor", vendor)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[str]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        When this Image was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The name of the User who created this Image, or "linode" for official Images.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        """
        Whether or not this Image is deprecated. Will only be true for deprecated public Images.
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A detailed description of this Image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expiry(self) -> str:
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        """
        True if the Image is public.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A short description of the Image.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The minimum size this Image needs to deploy. Size is in MB. example: 2500
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current status of this image. (`creating`, `pending_upload`, `available`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        How the Image was created. Manual Images can be created at any time. "Automatic" Images are created automatically from a deleted Linode. (`manual`, `automatic`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        """
        The upstream distribution vendor. `None` for private Images.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetInstanceBackupsAutomaticResult(dict):
    def __init__(__self__, *,
                 available: bool,
                 configs: Sequence[str],
                 created: str,
                 disks: Sequence['outputs.GetInstanceBackupsAutomaticDiskResult'],
                 finished: str,
                 id: int,
                 label: str,
                 status: str,
                 type: str,
                 updated: str):
        """
        :param Sequence[str] configs: A list of the labels of the Configuration profiles that are part of the Backup.
        :param str created: The date the Backup was taken.
        :param str finished: The date the Backup completed.
        :param int id: The unique ID of this Backup.
        :param str label: The label of this disk.
        :param str status: The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        :param str type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        :param str updated: The date the Backup was most recently updated.
        """
        GetInstanceBackupsAutomaticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available=available,
            configs=configs,
            created=created,
            disks=disks,
            finished=finished,
            id=id,
            label=label,
            status=status,
            type=type,
            updated=updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available: bool,
             configs: Sequence[str],
             created: str,
             disks: Sequence['outputs.GetInstanceBackupsAutomaticDiskResult'],
             finished: str,
             id: int,
             label: str,
             status: str,
             type: str,
             updated: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("available", available)
        _setter("configs", configs)
        _setter("created", created)
        _setter("disks", disks)
        _setter("finished", finished)
        _setter("id", id)
        _setter("label", label)
        _setter("status", status)
        _setter("type", type)
        _setter("updated", updated)

    @property
    @pulumi.getter
    def available(self) -> bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configs(self) -> Sequence[str]:
        """
        A list of the labels of the Configuration profiles that are part of the Backup.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date the Backup was taken.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstanceBackupsAutomaticDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def finished(self) -> str:
        """
        The date the Backup completed.
        """
        return pulumi.get(self, "finished")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID of this Backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        The date the Backup was most recently updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetInstanceBackupsAutomaticDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 label: str,
                 size: int):
        """
        :param str filesystem: The filesystem of this disk.
        :param str label: The label of this disk.
        :param int size: The size of this disk.
        """
        GetInstanceBackupsAutomaticDiskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filesystem=filesystem,
            label=label,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filesystem: str,
             label: str,
             size: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filesystem", filesystem)
        _setter("label", label)
        _setter("size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        """
        The filesystem of this disk.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of this disk.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstanceBackupsCurrentResult(dict):
    def __init__(__self__, *,
                 available: bool,
                 configs: Sequence[str],
                 created: str,
                 disks: Sequence['outputs.GetInstanceBackupsCurrentDiskResult'],
                 finished: str,
                 id: int,
                 label: str,
                 status: str,
                 type: str,
                 updated: str):
        """
        :param Sequence[str] configs: A list of the labels of the Configuration profiles that are part of the Backup.
        :param str created: The date the Backup was taken.
        :param str finished: The date the Backup completed.
        :param int id: The unique ID of this Backup.
        :param str label: The label of this disk.
        :param str status: The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        :param str type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        :param str updated: The date the Backup was most recently updated.
        """
        GetInstanceBackupsCurrentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available=available,
            configs=configs,
            created=created,
            disks=disks,
            finished=finished,
            id=id,
            label=label,
            status=status,
            type=type,
            updated=updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available: bool,
             configs: Sequence[str],
             created: str,
             disks: Sequence['outputs.GetInstanceBackupsCurrentDiskResult'],
             finished: str,
             id: int,
             label: str,
             status: str,
             type: str,
             updated: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("available", available)
        _setter("configs", configs)
        _setter("created", created)
        _setter("disks", disks)
        _setter("finished", finished)
        _setter("id", id)
        _setter("label", label)
        _setter("status", status)
        _setter("type", type)
        _setter("updated", updated)

    @property
    @pulumi.getter
    def available(self) -> bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configs(self) -> Sequence[str]:
        """
        A list of the labels of the Configuration profiles that are part of the Backup.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date the Backup was taken.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstanceBackupsCurrentDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def finished(self) -> str:
        """
        The date the Backup completed.
        """
        return pulumi.get(self, "finished")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID of this Backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        The date the Backup was most recently updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetInstanceBackupsCurrentDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 label: str,
                 size: int):
        """
        :param str filesystem: The filesystem of this disk.
        :param str label: The label of this disk.
        :param int size: The size of this disk.
        """
        GetInstanceBackupsCurrentDiskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filesystem=filesystem,
            label=label,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filesystem: str,
             label: str,
             size: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filesystem", filesystem)
        _setter("label", label)
        _setter("size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        """
        The filesystem of this disk.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of this disk.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstanceBackupsInProgressResult(dict):
    def __init__(__self__, *,
                 available: bool,
                 configs: Sequence[str],
                 created: str,
                 disks: Sequence['outputs.GetInstanceBackupsInProgressDiskResult'],
                 finished: str,
                 id: int,
                 label: str,
                 status: str,
                 type: str,
                 updated: str):
        """
        :param Sequence[str] configs: A list of the labels of the Configuration profiles that are part of the Backup.
        :param str created: The date the Backup was taken.
        :param str finished: The date the Backup completed.
        :param int id: The unique ID of this Backup.
        :param str label: The label of this disk.
        :param str status: The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        :param str type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        :param str updated: The date the Backup was most recently updated.
        """
        GetInstanceBackupsInProgressResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available=available,
            configs=configs,
            created=created,
            disks=disks,
            finished=finished,
            id=id,
            label=label,
            status=status,
            type=type,
            updated=updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available: bool,
             configs: Sequence[str],
             created: str,
             disks: Sequence['outputs.GetInstanceBackupsInProgressDiskResult'],
             finished: str,
             id: int,
             label: str,
             status: str,
             type: str,
             updated: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("available", available)
        _setter("configs", configs)
        _setter("created", created)
        _setter("disks", disks)
        _setter("finished", finished)
        _setter("id", id)
        _setter("label", label)
        _setter("status", status)
        _setter("type", type)
        _setter("updated", updated)

    @property
    @pulumi.getter
    def available(self) -> bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configs(self) -> Sequence[str]:
        """
        A list of the labels of the Configuration profiles that are part of the Backup.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date the Backup was taken.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstanceBackupsInProgressDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def finished(self) -> str:
        """
        The date the Backup completed.
        """
        return pulumi.get(self, "finished")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID of this Backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        The date the Backup was most recently updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetInstanceBackupsInProgressDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 label: str,
                 size: int):
        """
        :param str filesystem: The filesystem of this disk.
        :param str label: The label of this disk.
        :param int size: The size of this disk.
        """
        GetInstanceBackupsInProgressDiskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filesystem=filesystem,
            label=label,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filesystem: str,
             label: str,
             size: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filesystem", filesystem)
        _setter("label", label)
        _setter("size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        """
        The filesystem of this disk.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of this disk.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstanceNetworkingIpv4Result(dict):
    def __init__(__self__, *,
                 privates: Sequence['outputs.GetInstanceNetworkingIpv4PrivateResult'],
                 publics: Sequence['outputs.GetInstanceNetworkingIpv4PublicResult'],
                 reserveds: Sequence['outputs.GetInstanceNetworkingIpv4ReservedResult'],
                 shareds: Sequence['outputs.GetInstanceNetworkingIpv4SharedResult']):
        """
        :param Sequence['GetInstanceNetworkingIpv4PublicArgs'] publics: Whether this is a public or private IP address.
        """
        GetInstanceNetworkingIpv4Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            privates=privates,
            publics=publics,
            reserveds=reserveds,
            shareds=shareds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             privates: Sequence['outputs.GetInstanceNetworkingIpv4PrivateResult'],
             publics: Sequence['outputs.GetInstanceNetworkingIpv4PublicResult'],
             reserveds: Sequence['outputs.GetInstanceNetworkingIpv4ReservedResult'],
             shareds: Sequence['outputs.GetInstanceNetworkingIpv4SharedResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("privates", privates)
        _setter("publics", publics)
        _setter("reserveds", reserveds)
        _setter("shareds", shareds)

    @property
    @pulumi.getter
    def privates(self) -> Sequence['outputs.GetInstanceNetworkingIpv4PrivateResult']:
        return pulumi.get(self, "privates")

    @property
    @pulumi.getter
    def publics(self) -> Sequence['outputs.GetInstanceNetworkingIpv4PublicResult']:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "publics")

    @property
    @pulumi.getter
    def reserveds(self) -> Sequence['outputs.GetInstanceNetworkingIpv4ReservedResult']:
        return pulumi.get(self, "reserveds")

    @property
    @pulumi.getter
    def shareds(self) -> Sequence['outputs.GetInstanceNetworkingIpv4SharedResult']:
        return pulumi.get(self, "shareds")


@pulumi.output_type
class GetInstanceNetworkingIpv4PrivateResult(dict):
    def __init__(__self__, *,
                 address: str,
                 gateway: str,
                 linode_id: int,
                 prefix: int,
                 public: bool,
                 rdns: str,
                 region: str,
                 subnet_mask: str,
                 type: str):
        """
        :param str address: The address.
        :param str gateway: The default gateway for this address.
        :param int linode_id: The Linode instance's ID.
        :param int prefix: The network prefix.
        :param bool public: Whether this is a public or private IP address.
        :param str rdns: The reverse DNS assigned to this address.
        :param str region: (Filterable) The Region this address resides in.
        :param str subnet_mask: The subnet mask.
        :param str type: The type of address this is.
        """
        GetInstanceNetworkingIpv4PrivateResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            gateway=gateway,
            linode_id=linode_id,
            prefix=prefix,
            public=public,
            rdns=rdns,
            region=region,
            subnet_mask=subnet_mask,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             gateway: str,
             linode_id: int,
             prefix: int,
             public: bool,
             rdns: str,
             region: str,
             subnet_mask: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("gateway", gateway)
        _setter("linode_id", linode_id)
        _setter("prefix", prefix)
        _setter("public", public)
        _setter("rdns", rdns)
        _setter("region", region)
        _setter("subnet_mask", subnet_mask)
        _setter("type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceNetworkingIpv4PublicResult(dict):
    def __init__(__self__, *,
                 address: str,
                 gateway: str,
                 linode_id: int,
                 prefix: int,
                 public: bool,
                 rdns: str,
                 region: str,
                 subnet_mask: str,
                 type: str):
        """
        :param str address: The address.
        :param str gateway: The default gateway for this address.
        :param int linode_id: The Linode instance's ID.
        :param int prefix: The network prefix.
        :param bool public: Whether this is a public or private IP address.
        :param str rdns: The reverse DNS assigned to this address.
        :param str region: (Filterable) The Region this address resides in.
        :param str subnet_mask: The subnet mask.
        :param str type: The type of address this is.
        """
        GetInstanceNetworkingIpv4PublicResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            gateway=gateway,
            linode_id=linode_id,
            prefix=prefix,
            public=public,
            rdns=rdns,
            region=region,
            subnet_mask=subnet_mask,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             gateway: str,
             linode_id: int,
             prefix: int,
             public: bool,
             rdns: str,
             region: str,
             subnet_mask: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("gateway", gateway)
        _setter("linode_id", linode_id)
        _setter("prefix", prefix)
        _setter("public", public)
        _setter("rdns", rdns)
        _setter("region", region)
        _setter("subnet_mask", subnet_mask)
        _setter("type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceNetworkingIpv4ReservedResult(dict):
    def __init__(__self__, *,
                 address: str,
                 gateway: str,
                 linode_id: int,
                 prefix: int,
                 public: bool,
                 rdns: str,
                 region: str,
                 subnet_mask: str,
                 type: str):
        """
        :param str address: The address.
        :param str gateway: The default gateway for this address.
        :param int linode_id: The Linode instance's ID.
        :param int prefix: The network prefix.
        :param bool public: Whether this is a public or private IP address.
        :param str rdns: The reverse DNS assigned to this address.
        :param str region: (Filterable) The Region this address resides in.
        :param str subnet_mask: The subnet mask.
        :param str type: The type of address this is.
        """
        GetInstanceNetworkingIpv4ReservedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            gateway=gateway,
            linode_id=linode_id,
            prefix=prefix,
            public=public,
            rdns=rdns,
            region=region,
            subnet_mask=subnet_mask,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             gateway: str,
             linode_id: int,
             prefix: int,
             public: bool,
             rdns: str,
             region: str,
             subnet_mask: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("gateway", gateway)
        _setter("linode_id", linode_id)
        _setter("prefix", prefix)
        _setter("public", public)
        _setter("rdns", rdns)
        _setter("region", region)
        _setter("subnet_mask", subnet_mask)
        _setter("type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceNetworkingIpv4SharedResult(dict):
    def __init__(__self__, *,
                 address: str,
                 gateway: str,
                 linode_id: int,
                 prefix: int,
                 public: bool,
                 rdns: str,
                 region: str,
                 subnet_mask: str,
                 type: str):
        """
        :param str address: The address.
        :param str gateway: The default gateway for this address.
        :param int linode_id: The Linode instance's ID.
        :param int prefix: The network prefix.
        :param bool public: Whether this is a public or private IP address.
        :param str rdns: The reverse DNS assigned to this address.
        :param str region: (Filterable) The Region this address resides in.
        :param str subnet_mask: The subnet mask.
        :param str type: The type of address this is.
        """
        GetInstanceNetworkingIpv4SharedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            gateway=gateway,
            linode_id=linode_id,
            prefix=prefix,
            public=public,
            rdns=rdns,
            region=region,
            subnet_mask=subnet_mask,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             gateway: str,
             linode_id: int,
             prefix: int,
             public: bool,
             rdns: str,
             region: str,
             subnet_mask: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("gateway", gateway)
        _setter("linode_id", linode_id)
        _setter("prefix", prefix)
        _setter("public", public)
        _setter("rdns", rdns)
        _setter("region", region)
        _setter("subnet_mask", subnet_mask)
        _setter("type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceNetworkingIpv6Result(dict):
    def __init__(__self__, *,
                 globals: Sequence['outputs.GetInstanceNetworkingIpv6GlobalResult'],
                 link_local: 'outputs.GetInstanceNetworkingIpv6LinkLocalResult',
                 slaac: 'outputs.GetInstanceNetworkingIpv6SlaacResult'):
        GetInstanceNetworkingIpv6Result._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            globals=globals,
            link_local=link_local,
            slaac=slaac,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             globals: Sequence['outputs.GetInstanceNetworkingIpv6GlobalResult'],
             link_local: 'outputs.GetInstanceNetworkingIpv6LinkLocalResult',
             slaac: 'outputs.GetInstanceNetworkingIpv6SlaacResult',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("globals", globals)
        _setter("link_local", link_local)
        _setter("slaac", slaac)

    @property
    @pulumi.getter
    def globals(self) -> Sequence['outputs.GetInstanceNetworkingIpv6GlobalResult']:
        return pulumi.get(self, "globals")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> 'outputs.GetInstanceNetworkingIpv6LinkLocalResult':
        return pulumi.get(self, "link_local")

    @property
    @pulumi.getter
    def slaac(self) -> 'outputs.GetInstanceNetworkingIpv6SlaacResult':
        return pulumi.get(self, "slaac")


@pulumi.output_type
class GetInstanceNetworkingIpv6GlobalResult(dict):
    def __init__(__self__, *,
                 prefix: int,
                 range: str,
                 region: str,
                 route_target: str):
        """
        :param int prefix: The network prefix.
        :param str range: The IPv6 range of addresses in this pool.
        :param str region: (Filterable) The Region this address resides in.
        :param str route_target: (Nullable) The last address in this block of IPv6 addresses.
        """
        GetInstanceNetworkingIpv6GlobalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            range=range,
            region=region,
            route_target=route_target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: int,
             range: str,
             region: str,
             route_target: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("prefix", prefix)
        _setter("range", range)
        _setter("region", region)
        _setter("route_target", route_target)

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def range(self) -> str:
        """
        The IPv6 range of addresses in this pool.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        """
        (Nullable) The last address in this block of IPv6 addresses.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetInstanceNetworkingIpv6LinkLocalResult(dict):
    def __init__(__self__, *,
                 address: str,
                 gateway: str,
                 linode_id: int,
                 prefix: int,
                 public: bool,
                 rdns: str,
                 region: str,
                 subnet_mask: str,
                 type: str):
        """
        :param str address: The address.
        :param str gateway: The default gateway for this address.
        :param int linode_id: The Linode instance's ID.
        :param int prefix: The network prefix.
        :param bool public: Whether this is a public or private IP address.
        :param str rdns: The reverse DNS assigned to this address.
        :param str region: (Filterable) The Region this address resides in.
        :param str subnet_mask: The subnet mask.
        :param str type: The type of address this is.
        """
        GetInstanceNetworkingIpv6LinkLocalResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            gateway=gateway,
            linode_id=linode_id,
            prefix=prefix,
            public=public,
            rdns=rdns,
            region=region,
            subnet_mask=subnet_mask,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             gateway: str,
             linode_id: int,
             prefix: int,
             public: bool,
             rdns: str,
             region: str,
             subnet_mask: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("gateway", gateway)
        _setter("linode_id", linode_id)
        _setter("prefix", prefix)
        _setter("public", public)
        _setter("rdns", rdns)
        _setter("region", region)
        _setter("subnet_mask", subnet_mask)
        _setter("type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceNetworkingIpv6SlaacResult(dict):
    def __init__(__self__, *,
                 address: str,
                 gateway: str,
                 linode_id: int,
                 prefix: int,
                 public: bool,
                 rdns: str,
                 region: str,
                 subnet_mask: str,
                 type: str):
        """
        :param str address: The address.
        :param str gateway: The default gateway for this address.
        :param int linode_id: The Linode instance's ID.
        :param int prefix: The network prefix.
        :param bool public: Whether this is a public or private IP address.
        :param str rdns: The reverse DNS assigned to this address.
        :param str region: (Filterable) The Region this address resides in.
        :param str subnet_mask: The subnet mask.
        :param str type: The type of address this is.
        """
        GetInstanceNetworkingIpv6SlaacResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            gateway=gateway,
            linode_id=linode_id,
            prefix=prefix,
            public=public,
            rdns=rdns,
            region=region,
            subnet_mask=subnet_mask,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: str,
             gateway: str,
             linode_id: int,
             prefix: int,
             public: bool,
             rdns: str,
             region: str,
             subnet_mask: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address", address)
        _setter("gateway", gateway)
        _setter("linode_id", linode_id)
        _setter("prefix", prefix)
        _setter("public", public)
        _setter("rdns", rdns)
        _setter("region", region)
        _setter("subnet_mask", subnet_mask)
        _setter("type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetInstanceTypeAddonsResult(dict):
    def __init__(__self__, *,
                 backups: Sequence['outputs.GetInstanceTypeAddonsBackupResult']):
        GetInstanceTypeAddonsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backups=backups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backups: Sequence['outputs.GetInstanceTypeAddonsBackupResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("backups", backups)

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetInstanceTypeAddonsBackupResult']:
        return pulumi.get(self, "backups")


@pulumi.output_type
class GetInstanceTypeAddonsBackupResult(dict):
    def __init__(__self__, *,
                 prices: Sequence['outputs.GetInstanceTypeAddonsBackupPriceResult'],
                 region_prices: Sequence['outputs.GetInstanceTypeAddonsBackupRegionPriceResult']):
        GetInstanceTypeAddonsBackupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prices=prices,
            region_prices=region_prices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prices: Sequence['outputs.GetInstanceTypeAddonsBackupPriceResult'],
             region_prices: Sequence['outputs.GetInstanceTypeAddonsBackupRegionPriceResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("prices", prices)
        _setter("region_prices", region_prices)

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetInstanceTypeAddonsBackupPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetInstanceTypeAddonsBackupRegionPriceResult']:
        return pulumi.get(self, "region_prices")


@pulumi.output_type
class GetInstanceTypeAddonsBackupPriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 monthly: float):
        GetInstanceTypeAddonsBackupPriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypeAddonsBackupRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 id: str,
                 monthly: float):
        """
        :param str id: Label used to identify instance type
        """
        GetInstanceTypeAddonsBackupRegionPriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            id=id,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             id: str,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("id", id)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Label used to identify instance type
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 monthly: float):
        GetInstanceTypePriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 id: str,
                 monthly: float):
        """
        :param str id: Label used to identify instance type
        """
        GetInstanceTypeRegionPriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            id=id,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             id: str,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("id", id)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Label used to identify instance type
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetInstanceTypesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetInstanceTypesTypeResult(dict):
    def __init__(__self__, *,
                 addons: Sequence['outputs.GetInstanceTypesTypeAddonResult'],
                 class_: str,
                 disk: int,
                 id: str,
                 label: str,
                 memory: int,
                 network_out: int,
                 prices: Sequence['outputs.GetInstanceTypesTypePriceResult'],
                 region_prices: Sequence['outputs.GetInstanceTypesTypeRegionPriceResult'],
                 transfer: int,
                 vcpus: int):
        """
        :param str class_: The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
        :param int disk: The Disk size, in MB, of the Linode Type.
        :param str id: The ID representing the Linode Type.
        :param str label: The Linode Type's label is for display purposes only.
        :param int memory: The amount of RAM included in this Linode Type.
        :param int network_out: The Mbits outbound bandwidth allocation.
        :param int transfer: The monthly outbound transfer amount, in MB.
        :param int vcpus: The number of VCPU cores this Linode Type offers.
        """
        GetInstanceTypesTypeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addons=addons,
            class_=class_,
            disk=disk,
            id=id,
            label=label,
            memory=memory,
            network_out=network_out,
            prices=prices,
            region_prices=region_prices,
            transfer=transfer,
            vcpus=vcpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addons: Sequence['outputs.GetInstanceTypesTypeAddonResult'],
             class_: str,
             disk: int,
             id: str,
             label: str,
             memory: int,
             network_out: int,
             prices: Sequence['outputs.GetInstanceTypesTypePriceResult'],
             region_prices: Sequence['outputs.GetInstanceTypesTypeRegionPriceResult'],
             transfer: int,
             vcpus: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("addons", addons)
        _setter("class_", class_)
        _setter("disk", disk)
        _setter("id", id)
        _setter("label", label)
        _setter("memory", memory)
        _setter("network_out", network_out)
        _setter("prices", prices)
        _setter("region_prices", region_prices)
        _setter("transfer", transfer)
        _setter("vcpus", vcpus)

    @property
    @pulumi.getter
    def addons(self) -> Sequence['outputs.GetInstanceTypesTypeAddonResult']:
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter(name="class")
    def class_(self) -> str:
        """
        The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def disk(self) -> int:
        """
        The Disk size, in MB, of the Linode Type.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID representing the Linode Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The Linode Type's label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        The amount of RAM included in this Linode Type.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="networkOut")
    def network_out(self) -> int:
        """
        The Mbits outbound bandwidth allocation.
        """
        return pulumi.get(self, "network_out")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetInstanceTypesTypePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetInstanceTypesTypeRegionPriceResult']:
        return pulumi.get(self, "region_prices")

    @property
    @pulumi.getter
    def transfer(self) -> int:
        """
        The monthly outbound transfer amount, in MB.
        """
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> int:
        """
        The number of VCPU cores this Linode Type offers.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceTypesTypeAddonResult(dict):
    def __init__(__self__, *,
                 backups: Sequence['outputs.GetInstanceTypesTypeAddonBackupResult']):
        GetInstanceTypesTypeAddonResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backups=backups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backups: Sequence['outputs.GetInstanceTypesTypeAddonBackupResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("backups", backups)

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetInstanceTypesTypeAddonBackupResult']:
        return pulumi.get(self, "backups")


@pulumi.output_type
class GetInstanceTypesTypeAddonBackupResult(dict):
    def __init__(__self__, *,
                 prices: Sequence['outputs.GetInstanceTypesTypeAddonBackupPriceResult'],
                 region_prices: Sequence['outputs.GetInstanceTypesTypeAddonBackupRegionPriceResult']):
        GetInstanceTypesTypeAddonBackupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prices=prices,
            region_prices=region_prices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prices: Sequence['outputs.GetInstanceTypesTypeAddonBackupPriceResult'],
             region_prices: Sequence['outputs.GetInstanceTypesTypeAddonBackupRegionPriceResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("prices", prices)
        _setter("region_prices", region_prices)

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetInstanceTypesTypeAddonBackupPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetInstanceTypesTypeAddonBackupRegionPriceResult']:
        return pulumi.get(self, "region_prices")


@pulumi.output_type
class GetInstanceTypesTypeAddonBackupPriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 monthly: float):
        GetInstanceTypesTypeAddonBackupPriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesTypeAddonBackupRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 id: str,
                 monthly: float):
        """
        :param str id: The ID representing the Linode Type.
        """
        GetInstanceTypesTypeAddonBackupRegionPriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            id=id,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             id: str,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("id", id)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID representing the Linode Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 monthly: float):
        GetInstanceTypesTypePriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: float,
                 id: str,
                 monthly: float):
        """
        :param str id: The ID representing the Linode Type.
        """
        GetInstanceTypesTypeRegionPriceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hourly=hourly,
            id=id,
            monthly=monthly,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hourly: float,
             id: str,
             monthly: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hourly", hourly)
        _setter("id", id)
        _setter("monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID representing the Linode Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetInstancesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 alerts: 'outputs.GetInstancesInstanceAlertsResult',
                 backups: Sequence['outputs.GetInstancesInstanceBackupResult'],
                 boot_config_label: str,
                 configs: Sequence['outputs.GetInstancesInstanceConfigResult'],
                 disks: Sequence['outputs.GetInstancesInstanceDiskResult'],
                 group: str,
                 has_user_data: bool,
                 host_uuid: str,
                 id: int,
                 image: str,
                 ip_address: str,
                 ipv4s: Sequence[str],
                 ipv6: str,
                 label: str,
                 private_ip_address: str,
                 region: str,
                 specs: Sequence['outputs.GetInstancesInstanceSpecResult'],
                 status: str,
                 swap_size: int,
                 tags: Sequence[str],
                 type: str,
                 watchdog_enabled: bool):
        """
        :param str group: The display group of the Linode instance.
        :param int id: The ID of the disk in the Linode API.
        :param str image: An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*
        :param str ip_address: A string containing the Linode's public IP address.
        :param Sequence[str] ipv4s: This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
        :param str ipv6: This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.
        :param str label: (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        :param str private_ip_address: This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.
        :param str region: This is the location where the Linode is deployed. Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc. See all regions [here](https://api.linode.com/v4/regions).
        :param str status: The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)
        :param int swap_size: When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
        :param Sequence[str] tags: A list of tags applied to this object. Tags are for organizational purposes only.
        :param str type: The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `"g6-nanode-1"`, `"g6-standard-2"`, `"g6-highmem-16"`, `"g6-dedicated-16"`, etc. See all types [here](https://api.linode.com/v4/linode/types).
        :param bool watchdog_enabled: The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
        """
        GetInstancesInstanceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alerts=alerts,
            backups=backups,
            boot_config_label=boot_config_label,
            configs=configs,
            disks=disks,
            group=group,
            has_user_data=has_user_data,
            host_uuid=host_uuid,
            id=id,
            image=image,
            ip_address=ip_address,
            ipv4s=ipv4s,
            ipv6=ipv6,
            label=label,
            private_ip_address=private_ip_address,
            region=region,
            specs=specs,
            status=status,
            swap_size=swap_size,
            tags=tags,
            type=type,
            watchdog_enabled=watchdog_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alerts: 'outputs.GetInstancesInstanceAlertsResult',
             backups: Sequence['outputs.GetInstancesInstanceBackupResult'],
             boot_config_label: str,
             configs: Sequence['outputs.GetInstancesInstanceConfigResult'],
             disks: Sequence['outputs.GetInstancesInstanceDiskResult'],
             group: str,
             has_user_data: bool,
             host_uuid: str,
             id: int,
             image: str,
             ip_address: str,
             ipv4s: Sequence[str],
             ipv6: str,
             label: str,
             private_ip_address: str,
             region: str,
             specs: Sequence['outputs.GetInstancesInstanceSpecResult'],
             status: str,
             swap_size: int,
             tags: Sequence[str],
             type: str,
             watchdog_enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("alerts", alerts)
        _setter("backups", backups)
        _setter("boot_config_label", boot_config_label)
        _setter("configs", configs)
        _setter("disks", disks)
        _setter("group", group)
        _setter("has_user_data", has_user_data)
        _setter("host_uuid", host_uuid)
        _setter("id", id)
        _setter("image", image)
        _setter("ip_address", ip_address)
        _setter("ipv4s", ipv4s)
        _setter("ipv6", ipv6)
        _setter("label", label)
        _setter("private_ip_address", private_ip_address)
        _setter("region", region)
        _setter("specs", specs)
        _setter("status", status)
        _setter("swap_size", swap_size)
        _setter("tags", tags)
        _setter("type", type)
        _setter("watchdog_enabled", watchdog_enabled)

    @property
    @pulumi.getter
    def alerts(self) -> 'outputs.GetInstancesInstanceAlertsResult':
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetInstancesInstanceBackupResult']:
        return pulumi.get(self, "backups")

    @property
    @pulumi.getter(name="bootConfigLabel")
    def boot_config_label(self) -> str:
        return pulumi.get(self, "boot_config_label")

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetInstancesInstanceConfigResult']:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstancesInstanceDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The display group of the Linode instance.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="hasUserData")
    def has_user_data(self) -> bool:
        return pulumi.get(self, "has_user_data")

    @property
    @pulumi.getter(name="hostUuid")
    def host_uuid(self) -> str:
        return pulumi.get(self, "host_uuid")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the disk in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        A string containing the Linode's public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[str]:
        """
        This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        """
        This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> str:
        """
        This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        This is the location where the Linode is deployed. Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetInstancesInstanceSpecResult']:
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="swapSize")
    def swap_size(self) -> int:
        """
        When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
        """
        return pulumi.get(self, "swap_size")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        A list of tags applied to this object. Tags are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `"g6-nanode-1"`, `"g6-standard-2"`, `"g6-highmem-16"`, `"g6-dedicated-16"`, etc. See all types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="watchdogEnabled")
    def watchdog_enabled(self) -> bool:
        """
        The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
        """
        return pulumi.get(self, "watchdog_enabled")


@pulumi.output_type
class GetInstancesInstanceAlertsResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 io: int,
                 network_in: int,
                 network_out: int,
                 transfer_quota: int):
        GetInstancesInstanceAlertsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu=cpu,
            io=io,
            network_in=network_in,
            network_out=network_out,
            transfer_quota=transfer_quota,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu: int,
             io: int,
             network_in: int,
             network_out: int,
             transfer_quota: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cpu", cpu)
        _setter("io", io)
        _setter("network_in", network_in)
        _setter("network_out", network_out)
        _setter("transfer_quota", transfer_quota)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def io(self) -> int:
        return pulumi.get(self, "io")

    @property
    @pulumi.getter(name="networkIn")
    def network_in(self) -> int:
        return pulumi.get(self, "network_in")

    @property
    @pulumi.getter(name="networkOut")
    def network_out(self) -> int:
        return pulumi.get(self, "network_out")

    @property
    @pulumi.getter(name="transferQuota")
    def transfer_quota(self) -> int:
        return pulumi.get(self, "transfer_quota")


@pulumi.output_type
class GetInstancesInstanceBackupResult(dict):
    def __init__(__self__, *,
                 available: bool,
                 enabled: bool,
                 schedules: Sequence['outputs.GetInstancesInstanceBackupScheduleResult']):
        """
        :param bool enabled: If this Linode has the Backup service enabled.
        """
        GetInstancesInstanceBackupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available=available,
            enabled=enabled,
            schedules=schedules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available: bool,
             enabled: bool,
             schedules: Sequence['outputs.GetInstancesInstanceBackupScheduleResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("available", available)
        _setter("enabled", enabled)
        _setter("schedules", schedules)

    @property
    @pulumi.getter
    def available(self) -> bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        If this Linode has the Backup service enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetInstancesInstanceBackupScheduleResult']:
        return pulumi.get(self, "schedules")


@pulumi.output_type
class GetInstancesInstanceBackupScheduleResult(dict):
    def __init__(__self__, *,
                 day: str,
                 window: str):
        """
        :param str day: The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        :param str window: The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        GetInstancesInstanceBackupScheduleResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day=day,
            window=window,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day: str,
             window: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("day", day)
        _setter("window", window)

    @property
    @pulumi.getter
    def day(self) -> str:
        """
        The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def window(self) -> str:
        """
        The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        return pulumi.get(self, "window")


@pulumi.output_type
class GetInstancesInstanceConfigResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 devices: Sequence['outputs.GetInstancesInstanceConfigDeviceResult'],
                 helpers: Sequence['outputs.GetInstancesInstanceConfigHelperResult'],
                 interfaces: Sequence['outputs.GetInstancesInstanceConfigInterfaceResult'],
                 kernel: str,
                 label: str,
                 memory_limit: int,
                 root_device: str,
                 run_level: str,
                 virt_mode: str):
        """
        :param str comments: Arbitrary user comments about this `config`.
        :param Sequence['GetInstancesInstanceConfigDeviceArgs'] devices: A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
        :param Sequence['GetInstancesInstanceConfigHelperArgs'] helpers: Helpers enabled when booting to this Linode Config.
        :param str kernel: A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).
        :param str label: (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        :param int memory_limit: Defaults to the total RAM of the Linode
        :param str root_device: The root device to boot.
        :param str run_level: Defines the state of your Linode after booting.
        :param str virt_mode: Controls the virtualization mode.
        """
        GetInstancesInstanceConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comments=comments,
            devices=devices,
            helpers=helpers,
            interfaces=interfaces,
            kernel=kernel,
            label=label,
            memory_limit=memory_limit,
            root_device=root_device,
            run_level=run_level,
            virt_mode=virt_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comments: str,
             devices: Sequence['outputs.GetInstancesInstanceConfigDeviceResult'],
             helpers: Sequence['outputs.GetInstancesInstanceConfigHelperResult'],
             interfaces: Sequence['outputs.GetInstancesInstanceConfigInterfaceResult'],
             kernel: str,
             label: str,
             memory_limit: int,
             root_device: str,
             run_level: str,
             virt_mode: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("comments", comments)
        _setter("devices", devices)
        _setter("helpers", helpers)
        _setter("interfaces", interfaces)
        _setter("kernel", kernel)
        _setter("label", label)
        _setter("memory_limit", memory_limit)
        _setter("root_device", root_device)
        _setter("run_level", run_level)
        _setter("virt_mode", virt_mode)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Arbitrary user comments about this `config`.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceResult']:
        """
        A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def helpers(self) -> Sequence['outputs.GetInstancesInstanceConfigHelperResult']:
        """
        Helpers enabled when booting to this Linode Config.
        """
        return pulumi.get(self, "helpers")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetInstancesInstanceConfigInterfaceResult']:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def kernel(self) -> str:
        """
        A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> int:
        """
        Defaults to the total RAM of the Linode
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> str:
        """
        The root device to boot.
        """
        return pulumi.get(self, "root_device")

    @property
    @pulumi.getter(name="runLevel")
    def run_level(self) -> str:
        """
        Defines the state of your Linode after booting.
        """
        return pulumi.get(self, "run_level")

    @property
    @pulumi.getter(name="virtMode")
    def virt_mode(self) -> str:
        """
        Controls the virtualization mode.
        """
        return pulumi.get(self, "virt_mode")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceResult(dict):
    def __init__(__self__, *,
                 sdas: Sequence['outputs.GetInstancesInstanceConfigDeviceSdaResult'],
                 sdbs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdbResult'],
                 sdcs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdcResult'],
                 sdds: Sequence['outputs.GetInstancesInstanceConfigDeviceSddResult'],
                 sdes: Sequence['outputs.GetInstancesInstanceConfigDeviceSdeResult'],
                 sdfs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdfResult'],
                 sdgs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdgResult'],
                 sdhs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdhResult']):
        """
        :param Sequence['GetInstancesInstanceConfigDeviceSdaArgs'] sdas: ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        """
        GetInstancesInstanceConfigDeviceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sdas=sdas,
            sdbs=sdbs,
            sdcs=sdcs,
            sdds=sdds,
            sdes=sdes,
            sdfs=sdfs,
            sdgs=sdgs,
            sdhs=sdhs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sdas: Sequence['outputs.GetInstancesInstanceConfigDeviceSdaResult'],
             sdbs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdbResult'],
             sdcs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdcResult'],
             sdds: Sequence['outputs.GetInstancesInstanceConfigDeviceSddResult'],
             sdes: Sequence['outputs.GetInstancesInstanceConfigDeviceSdeResult'],
             sdfs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdfResult'],
             sdgs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdgResult'],
             sdhs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdhResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sdas", sdas)
        _setter("sdbs", sdbs)
        _setter("sdcs", sdcs)
        _setter("sdds", sdds)
        _setter("sdes", sdes)
        _setter("sdfs", sdfs)
        _setter("sdgs", sdgs)
        _setter("sdhs", sdhs)

    @property
    @pulumi.getter
    def sdas(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdaResult']:
        """
        ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        """
        return pulumi.get(self, "sdas")

    @property
    @pulumi.getter
    def sdbs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdbResult']:
        return pulumi.get(self, "sdbs")

    @property
    @pulumi.getter
    def sdcs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdcResult']:
        return pulumi.get(self, "sdcs")

    @property
    @pulumi.getter
    def sdds(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSddResult']:
        return pulumi.get(self, "sdds")

    @property
    @pulumi.getter
    def sdes(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdeResult']:
        return pulumi.get(self, "sdes")

    @property
    @pulumi.getter
    def sdfs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdfResult']:
        return pulumi.get(self, "sdfs")

    @property
    @pulumi.getter
    def sdgs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdgResult']:
        return pulumi.get(self, "sdgs")

    @property
    @pulumi.getter
    def sdhs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdhResult']:
        return pulumi.get(self, "sdhs")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdaResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdaResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdbResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdbResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdcResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdcResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSddResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSddResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdeResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdfResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdfResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdgResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdgResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdhResult(dict):
    def __init__(__self__, *,
                 disk_id: int,
                 disk_label: Optional[str] = None,
                 volume_id: Optional[int] = None):
        """
        :param int disk_id: The Disk ID of the associated `disk_label`, if used
        :param str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param int volume_id: The Volume ID to map to this `device` slot.
        """
        GetInstancesInstanceConfigDeviceSdhResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_id=disk_id,
            disk_label=disk_label,
            volume_id=volume_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_id: int,
             disk_label: Optional[str] = None,
             volume_id: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk_id", disk_id)
        if disk_label is not None:
            _setter("disk_label", disk_label)
        if volume_id is not None:
            _setter("volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigHelperResult(dict):
    def __init__(__self__, *,
                 devtmpfs_automount: bool,
                 distro: bool,
                 modules_dep: bool,
                 network: bool,
                 updatedb_disabled: bool):
        """
        :param bool distro: Controls the behavior of the Linode Config's Distribution Helper setting.
        :param bool modules_dep: Creates a modules dependency file for the Kernel you run.
        :param bool network: Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        :param bool updatedb_disabled: Disables updatedb cron job to avoid disk thrashing.
        """
        GetInstancesInstanceConfigHelperResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devtmpfs_automount=devtmpfs_automount,
            distro=distro,
            modules_dep=modules_dep,
            network=network,
            updatedb_disabled=updatedb_disabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devtmpfs_automount: bool,
             distro: bool,
             modules_dep: bool,
             network: bool,
             updatedb_disabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("devtmpfs_automount", devtmpfs_automount)
        _setter("distro", distro)
        _setter("modules_dep", modules_dep)
        _setter("network", network)
        _setter("updatedb_disabled", updatedb_disabled)

    @property
    @pulumi.getter(name="devtmpfsAutomount")
    def devtmpfs_automount(self) -> bool:
        return pulumi.get(self, "devtmpfs_automount")

    @property
    @pulumi.getter
    def distro(self) -> bool:
        """
        Controls the behavior of the Linode Config's Distribution Helper setting.
        """
        return pulumi.get(self, "distro")

    @property
    @pulumi.getter(name="modulesDep")
    def modules_dep(self) -> bool:
        """
        Creates a modules dependency file for the Kernel you run.
        """
        return pulumi.get(self, "modules_dep")

    @property
    @pulumi.getter
    def network(self) -> bool:
        """
        Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="updatedbDisabled")
    def updatedb_disabled(self) -> bool:
        """
        Disables updatedb cron job to avoid disk thrashing.
        """
        return pulumi.get(self, "updatedb_disabled")


@pulumi.output_type
class GetInstancesInstanceConfigInterfaceResult(dict):
    def __init__(__self__, *,
                 ipam_address: Optional[str] = None,
                 label: Optional[str] = None,
                 purpose: Optional[str] = None):
        """
        :param str ipam_address: (Optional) This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation.
        :param str label: (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        :param str purpose: (Required) The type of interface. (`public`, `vlan`)
        """
        GetInstancesInstanceConfigInterfaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipam_address=ipam_address,
            label=label,
            purpose=purpose,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipam_address: Optional[str] = None,
             label: Optional[str] = None,
             purpose: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ipam_address is not None:
            _setter("ipam_address", ipam_address)
        if label is not None:
            _setter("label", label)
        if purpose is not None:
            _setter("purpose", purpose)

    @property
    @pulumi.getter(name="ipamAddress")
    def ipam_address(self) -> Optional[str]:
        """
        (Optional) This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation.
        """
        return pulumi.get(self, "ipam_address")

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        (Required) The type of interface. (`public`, `vlan`)
        """
        return pulumi.get(self, "purpose")


@pulumi.output_type
class GetInstancesInstanceDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: str,
                 id: int,
                 label: str,
                 size: int):
        """
        :param str filesystem: The Disk filesystem can be one of: `"raw"`, `"swap"`, `"ext3"`, `"ext4"`, or `"initrd"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
        :param int id: The ID of the disk in the Linode API.
        :param str label: (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        :param int size: The size of the Disk in MB.
        """
        GetInstancesInstanceDiskResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filesystem=filesystem,
            id=id,
            label=label,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filesystem: str,
             id: int,
             label: str,
             size: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filesystem", filesystem)
        _setter("id", id)
        _setter("label", label)
        _setter("size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> str:
        """
        The Disk filesystem can be one of: `"raw"`, `"swap"`, `"ext3"`, `"ext4"`, or `"initrd"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the disk in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        (Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the Disk in MB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstancesInstanceSpecResult(dict):
    def __init__(__self__, *,
                 disk: int,
                 memory: int,
                 transfer: int,
                 vcpus: int):
        GetInstancesInstanceSpecResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk=disk,
            memory=memory,
            transfer=transfer,
            vcpus=vcpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk: int,
             memory: int,
             transfer: int,
             vcpus: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("disk", disk)
        _setter("memory", memory)
        _setter("transfer", transfer)
        _setter("vcpus", vcpus)

    @property
    @pulumi.getter
    def disk(self) -> int:
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def transfer(self) -> int:
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> int:
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetKernelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetKernelsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetKernelsKernelResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 built: str,
                 deprecated: bool,
                 id: str,
                 kvm: bool,
                 label: str,
                 pvops: bool,
                 version: str,
                 xen: bool):
        """
        :param str architecture: The architecture of this Kernel.
        :param bool deprecated: Whether or not this Kernel is deprecated.
        :param str id: The unique ID of this Kernel.
        :param bool kvm: If this Kernel is suitable for KVM Linodes.
        :param str label: The friendly name of this Kernel.
        :param bool pvops: If this Kernel is suitable for paravirtualized operations.
        :param str version: Linux Kernel version
        :param bool xen: If this Kernel is suitable for Xen Linodes.
        """
        GetKernelsKernelResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            architecture=architecture,
            built=built,
            deprecated=deprecated,
            id=id,
            kvm=kvm,
            label=label,
            pvops=pvops,
            version=version,
            xen=xen,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             architecture: str,
             built: str,
             deprecated: bool,
             id: str,
             kvm: bool,
             label: str,
             pvops: bool,
             version: str,
             xen: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("architecture", architecture)
        _setter("built", built)
        _setter("deprecated", deprecated)
        _setter("id", id)
        _setter("kvm", kvm)
        _setter("label", label)
        _setter("pvops", pvops)
        _setter("version", version)
        _setter("xen", xen)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture of this Kernel.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def built(self) -> str:
        return pulumi.get(self, "built")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        """
        Whether or not this Kernel is deprecated.
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of this Kernel.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kvm(self) -> bool:
        """
        If this Kernel is suitable for KVM Linodes.
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The friendly name of this Kernel.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def pvops(self) -> bool:
        """
        If this Kernel is suitable for paravirtualized operations.
        """
        return pulumi.get(self, "pvops")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Linux Kernel version
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def xen(self) -> bool:
        """
        If this Kernel is suitable for Xen Linodes.
        """
        return pulumi.get(self, "xen")


@pulumi.output_type
class GetLkeClusterControlPlaneResult(dict):
    def __init__(__self__, *,
                 high_availability: bool):
        GetLkeClusterControlPlaneResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            high_availability=high_availability,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             high_availability: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("high_availability", high_availability)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> bool:
        return pulumi.get(self, "high_availability")


@pulumi.output_type
class GetLkeClusterPoolResult(dict):
    def __init__(__self__, *,
                 autoscalers: Sequence['outputs.GetLkeClusterPoolAutoscalerResult'],
                 count: int,
                 id: int,
                 nodes: Sequence['outputs.GetLkeClusterPoolNodeResult'],
                 type: str):
        """
        :param Sequence['GetLkeClusterPoolAutoscalerArgs'] autoscalers: The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
        :param int count: The number of nodes in the Node Pool.
        :param int id: The LKE Cluster's ID.
        :param Sequence['GetLkeClusterPoolNodeArgs'] nodes: The nodes in the Node Pool.
        :param str type: The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        GetLkeClusterPoolResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            autoscalers=autoscalers,
            count=count,
            id=id,
            nodes=nodes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             autoscalers: Sequence['outputs.GetLkeClusterPoolAutoscalerResult'],
             count: int,
             id: int,
             nodes: Sequence['outputs.GetLkeClusterPoolNodeResult'],
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("autoscalers", autoscalers)
        _setter("count", count)
        _setter("id", id)
        _setter("nodes", nodes)
        _setter("type", type)

    @property
    @pulumi.getter
    def autoscalers(self) -> Sequence['outputs.GetLkeClusterPoolAutoscalerResult']:
        """
        The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
        """
        return pulumi.get(self, "autoscalers")

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of nodes in the Node Pool.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The LKE Cluster's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetLkeClusterPoolNodeResult']:
        """
        The nodes in the Node Pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLkeClusterPoolAutoscalerResult(dict):
    def __init__(__self__, *,
                 max: int,
                 min: int):
        """
        :param int max: The maximum number of nodes to autoscale to.
        :param int min: The minimum number of nodes to autoscale to.
        """
        GetLkeClusterPoolAutoscalerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        The maximum number of nodes to autoscale to.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        The minimum number of nodes to autoscale to.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetLkeClusterPoolNodeResult(dict):
    def __init__(__self__, *,
                 id: str,
                 instance_id: int,
                 status: str):
        """
        :param str id: The LKE Cluster's ID.
        :param int instance_id: The ID of the underlying Linode instance.
        :param str status: The status of the node. (`ready`, `not_ready`)
        """
        GetLkeClusterPoolNodeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            instance_id=instance_id,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             instance_id: int,
             status: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("instance_id", instance_id)
        _setter("status", status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The LKE Cluster's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> int:
        """
        The ID of the underlying Linode instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the node. (`ready`, `not_ready`)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLkeVersionsVersionResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
        """
        GetLkeVersionsVersionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetNodeBalancerConfigNodeStatusResult(dict):
    def __init__(__self__, *,
                 down: int,
                 up: int):
        """
        :param int down: The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        :param int up: The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        GetNodeBalancerConfigNodeStatusResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            down=down,
            up=up,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             down: int,
             up: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("down", down)
        _setter("up", up)

    @property
    @pulumi.getter
    def down(self) -> int:
        """
        The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        """
        return pulumi.get(self, "down")

    @property
    @pulumi.getter
    def up(self) -> int:
        """
        The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        return pulumi.get(self, "up")


@pulumi.output_type
class GetNodeBalancerTransferResult(dict):
    def __init__(__self__, *,
                 in_: float,
                 out: float,
                 total: float):
        """
        :param float in_: The total transfer, in MB, used by this NodeBalancer for the current month
        :param float out: The total inbound transfer, in MB, used for this NodeBalancer for the current month
        :param float total: The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        GetNodeBalancerTransferResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            in_=in_,
            out=out,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             in_: float,
             out: float,
             total: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("in_", in_)
        _setter("out", out)
        _setter("total", total)

    @property
    @pulumi.getter(name="in")
    def in_(self) -> float:
        """
        The total transfer, in MB, used by this NodeBalancer for the current month
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def out(self) -> float:
        """
        The total inbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetNodebalancersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetNodebalancersFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetNodebalancersNodebalancerResult(dict):
    def __init__(__self__, *,
                 client_conn_throttle: int,
                 created: str,
                 hostname: str,
                 id: int,
                 ipv4: str,
                 ipv6: str,
                 label: str,
                 region: str,
                 tags: Sequence[str],
                 transfers: Sequence['outputs.GetNodebalancersNodebalancerTransferResult'],
                 updated: str):
        """
        :param int client_conn_throttle: Throttle connections per second (0-20)
        :param str created: When this Linode NodeBalancer was created
        :param str hostname: This NodeBalancer's hostname, ending with .ip.linodeusercontent.com
        :param int id: The Linode NodeBalancer's unique ID
        :param str ipv4: The Public IPv4 Address of this NodeBalancer
        :param str ipv6: The Public IPv6 Address of this NodeBalancer
        :param str label: The label of the Linode NodeBalancer
        :param str region: The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
        :param Sequence[str] tags: A list of tags applied to this object. Tags are for organizational purposes only.
        :param str updated: When this Linode NodeBalancer was last updated
        """
        GetNodebalancersNodebalancerResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_conn_throttle=client_conn_throttle,
            created=created,
            hostname=hostname,
            id=id,
            ipv4=ipv4,
            ipv6=ipv6,
            label=label,
            region=region,
            tags=tags,
            transfers=transfers,
            updated=updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_conn_throttle: int,
             created: str,
             hostname: str,
             id: int,
             ipv4: str,
             ipv6: str,
             label: str,
             region: str,
             tags: Sequence[str],
             transfers: Sequence['outputs.GetNodebalancersNodebalancerTransferResult'],
             updated: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_conn_throttle", client_conn_throttle)
        _setter("created", created)
        _setter("hostname", hostname)
        _setter("id", id)
        _setter("ipv4", ipv4)
        _setter("ipv6", ipv6)
        _setter("label", label)
        _setter("region", region)
        _setter("tags", tags)
        _setter("transfers", transfers)
        _setter("updated", updated)

    @property
    @pulumi.getter(name="clientConnThrottle")
    def client_conn_throttle(self) -> int:
        """
        Throttle connections per second (0-20)
        """
        return pulumi.get(self, "client_conn_throttle")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        When this Linode NodeBalancer was created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        This NodeBalancer's hostname, ending with .ip.linodeusercontent.com
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The Linode NodeBalancer's unique ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        The Public IPv4 Address of this NodeBalancer
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        """
        The Public IPv6 Address of this NodeBalancer
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the Linode NodeBalancer
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        A list of tags applied to this object. Tags are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def transfers(self) -> Sequence['outputs.GetNodebalancersNodebalancerTransferResult']:
        return pulumi.get(self, "transfers")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        When this Linode NodeBalancer was last updated
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetNodebalancersNodebalancerTransferResult(dict):
    def __init__(__self__, *,
                 in_: float,
                 out: float,
                 total: float):
        """
        :param float in_: The total transfer, in MB, used by this NodeBalancer for the current month
        :param float out: The total inbound transfer, in MB, used for this NodeBalancer for the current month
        :param float total: The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        GetNodebalancersNodebalancerTransferResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            in_=in_,
            out=out,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             in_: float,
             out: float,
             total: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("in_", in_)
        _setter("out", out)
        _setter("total", total)

    @property
    @pulumi.getter(name="in")
    def in_(self) -> float:
        """
        The total transfer, in MB, used by this NodeBalancer for the current month
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def out(self) -> float:
        """
        The total inbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter
    def total(self) -> float:
        """
        The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetProfileReferralsResult(dict):
    def __init__(__self__, *,
                 code: str,
                 completed: int,
                 credit: float,
                 pending: int,
                 total: int,
                 url: str):
        GetProfileReferralsResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            completed=completed,
            credit=credit,
            pending=pending,
            total=total,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: str,
             completed: int,
             credit: float,
             pending: int,
             total: int,
             url: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("code", code)
        _setter("completed", completed)
        _setter("credit", credit)
        _setter("pending", pending)
        _setter("total", total)
        _setter("url", url)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def completed(self) -> int:
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter
    def credit(self) -> float:
        return pulumi.get(self, "credit")

    @property
    @pulumi.getter
    def pending(self) -> int:
        return pulumi.get(self, "pending")

    @property
    @pulumi.getter
    def total(self) -> int:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetRegionResolverResult(dict):
    def __init__(__self__, *,
                 ipv4: str,
                 ipv6: str):
        """
        :param str ipv4: The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        :param str ipv6: The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        GetRegionResolverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipv4=ipv4,
            ipv6=ipv6,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipv4: str,
             ipv6: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ipv4", ipv4)
        _setter("ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        """
        The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetRegionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetRegionsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence[str],
                 country: str,
                 id: str,
                 label: str,
                 status: str,
                 resolvers: Optional[Sequence['outputs.GetRegionsRegionResolverResult']] = None):
        """
        :param Sequence[str] capabilities: A list of capabilities of this region.
        :param str country: The country the region resides in.
        :param str label: Detailed location information for this Region, including city, state or region, and country.
        :param str status: This region’s current operational status (ok or outage).
        """
        GetRegionsRegionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            capabilities=capabilities,
            country=country,
            id=id,
            label=label,
            status=status,
            resolvers=resolvers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             capabilities: Sequence[str],
             country: str,
             id: str,
             label: str,
             status: str,
             resolvers: Optional[Sequence['outputs.GetRegionsRegionResolverResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("capabilities", capabilities)
        _setter("country", country)
        _setter("id", id)
        _setter("label", label)
        _setter("status", status)
        if resolvers is not None:
            _setter("resolvers", resolvers)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[str]:
        """
        A list of capabilities of this region.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def country(self) -> str:
        """
        The country the region resides in.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Detailed location information for this Region, including city, state or region, and country.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        This region’s current operational status (ok or outage).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def resolvers(self) -> Optional[Sequence['outputs.GetRegionsRegionResolverResult']]:
        return pulumi.get(self, "resolvers")


@pulumi.output_type
class GetRegionsRegionResolverResult(dict):
    def __init__(__self__, *,
                 ipv4: str,
                 ipv6: str):
        """
        :param str ipv4: The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        :param str ipv6: The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        GetRegionsRegionResolverResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ipv4=ipv4,
            ipv6=ipv6,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ipv4: str,
             ipv6: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ipv4", ipv4)
        _setter("ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        """
        The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetSshkeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetSshkeysFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetSshkeysSshkeyResult(dict):
    def __init__(__self__, *,
                 created: str,
                 label: str,
                 ssh_key: str,
                 id: Optional[str] = None):
        """
        :param str created: The date this key was added.
        :param str label: The label of the SSH Key.
        :param str ssh_key: The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
        :param str id: The ID of the SSH Key.
        """
        GetSshkeysSshkeyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            label=label,
            ssh_key=ssh_key,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             label: str,
             ssh_key: str,
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("label", label)
        _setter("ssh_key", ssh_key)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date this key was added.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label of the SSH Key.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> str:
        """
        The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
        """
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the SSH Key.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetStackScriptUserDefinedFieldResult(dict):
    def __init__(__self__, *,
                 default: str,
                 example: str,
                 label: str,
                 many_of: str,
                 name: str,
                 one_of: str):
        """
        :param str default: The default value. If not specified, this value will be used.
        :param str example: An example value for the field.
        :param str label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        :param str many_of: A list of acceptable values for the field in any quantity, combination or order.
        :param str name: The name of the field.
        :param str one_of: A list of acceptable single values for the field.
        """
        GetStackScriptUserDefinedFieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            example=example,
            label=label,
            many_of=many_of,
            name=name,
            one_of=one_of,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: str,
             example: str,
             label: str,
             many_of: str,
             name: str,
             one_of: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default", default)
        _setter("example", example)
        _setter("label", label)
        _setter("many_of", many_of)
        _setter("name", name)
        _setter("one_of", one_of)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        The default value. If not specified, this value will be used.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def example(self) -> str:
        """
        An example value for the field.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="manyOf")
    def many_of(self) -> str:
        """
        A list of acceptable values for the field in any quantity, combination or order.
        """
        return pulumi.get(self, "many_of")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> str:
        """
        A list of acceptable single values for the field.
        """
        return pulumi.get(self, "one_of")


@pulumi.output_type
class GetStackScriptsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetStackScriptsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetStackScriptsStackscriptResult(dict):
    def __init__(__self__, *,
                 created: str,
                 deployments_active: int,
                 deployments_total: int,
                 description: str,
                 id: str,
                 images: Sequence[str],
                 is_public: bool,
                 label: str,
                 rev_note: str,
                 script: str,
                 updated: str,
                 user_defined_fields: Sequence['outputs.GetStackScriptsStackscriptUserDefinedFieldResult'],
                 user_gravatar_id: str,
                 username: str):
        """
        :param str created: The date this StackScript was created.
        :param int deployments_active: Count of currently active, deployed Linodes created from this StackScript.
        :param int deployments_total: The total number of times this StackScript has been deployed.
        :param str description: A description for the StackScript.
        :param str id: The unique ID of the StackScript.
        :param Sequence[str] images: An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
        :param bool is_public: This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
        :param str label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        :param str rev_note: This field allows you to add notes for the set of revisions made to this StackScript.
        :param str script: The script to execute when provisioning a new Linode with this StackScript.
        :param str updated: The date this StackScript was updated.
        :param Sequence['GetStackScriptsStackscriptUserDefinedFieldArgs'] user_defined_fields: This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
        :param str user_gravatar_id: The Gravatar ID for the User who created the StackScript.
        :param str username: The User who created the StackScript.
        """
        GetStackScriptsStackscriptResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            deployments_active=deployments_active,
            deployments_total=deployments_total,
            description=description,
            id=id,
            images=images,
            is_public=is_public,
            label=label,
            rev_note=rev_note,
            script=script,
            updated=updated,
            user_defined_fields=user_defined_fields,
            user_gravatar_id=user_gravatar_id,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             deployments_active: int,
             deployments_total: int,
             description: str,
             id: str,
             images: Sequence[str],
             is_public: bool,
             label: str,
             rev_note: str,
             script: str,
             updated: str,
             user_defined_fields: Sequence['outputs.GetStackScriptsStackscriptUserDefinedFieldResult'],
             user_gravatar_id: str,
             username: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("deployments_active", deployments_active)
        _setter("deployments_total", deployments_total)
        _setter("description", description)
        _setter("id", id)
        _setter("images", images)
        _setter("is_public", is_public)
        _setter("label", label)
        _setter("rev_note", rev_note)
        _setter("script", script)
        _setter("updated", updated)
        _setter("user_defined_fields", user_defined_fields)
        _setter("user_gravatar_id", user_gravatar_id)
        _setter("username", username)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date this StackScript was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="deploymentsActive")
    def deployments_active(self) -> int:
        """
        Count of currently active, deployed Linodes created from this StackScript.
        """
        return pulumi.get(self, "deployments_active")

    @property
    @pulumi.getter(name="deploymentsTotal")
    def deployments_total(self) -> int:
        """
        The total number of times this StackScript has been deployed.
        """
        return pulumi.get(self, "deployments_total")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description for the StackScript.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the StackScript.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def images(self) -> Sequence[str]:
        """
        An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        """
        This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="revNote")
    def rev_note(self) -> str:
        """
        This field allows you to add notes for the set of revisions made to this StackScript.
        """
        return pulumi.get(self, "rev_note")

    @property
    @pulumi.getter
    def script(self) -> str:
        """
        The script to execute when provisioning a new Linode with this StackScript.
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        The date this StackScript was updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Sequence['outputs.GetStackScriptsStackscriptUserDefinedFieldResult']:
        """
        This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
        """
        return pulumi.get(self, "user_defined_fields")

    @property
    @pulumi.getter(name="userGravatarId")
    def user_gravatar_id(self) -> str:
        """
        The Gravatar ID for the User who created the StackScript.
        """
        return pulumi.get(self, "user_gravatar_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The User who created the StackScript.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetStackScriptsStackscriptUserDefinedFieldResult(dict):
    def __init__(__self__, *,
                 default: str,
                 example: str,
                 label: str,
                 many_of: str,
                 name: str,
                 one_of: str):
        """
        :param str default: The default value. If not specified, this value will be used.
        :param str example: An example value for the field.
        :param str label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        :param str many_of: A list of acceptable values for the field in any quantity, combination or order.
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param str one_of: A list of acceptable single values for the field.
        """
        GetStackScriptsStackscriptUserDefinedFieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            example=example,
            label=label,
            many_of=many_of,
            name=name,
            one_of=one_of,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: str,
             example: str,
             label: str,
             many_of: str,
             name: str,
             one_of: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default", default)
        _setter("example", example)
        _setter("label", label)
        _setter("many_of", many_of)
        _setter("name", name)
        _setter("one_of", one_of)

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        The default value. If not specified, this value will be used.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def example(self) -> str:
        """
        An example value for the field.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="manyOf")
    def many_of(self) -> str:
        """
        A list of acceptable values for the field in any quantity, combination or order.
        """
        return pulumi.get(self, "many_of")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> str:
        """
        A list of acceptable single values for the field.
        """
        return pulumi.get(self, "one_of")


@pulumi.output_type
class GetUserDatabaseGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserDatabaseGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserDomainGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserDomainGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserFirewallGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserFirewallGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserGlobalGrantResult(dict):
    def __init__(__self__, *,
                 account_access: str,
                 add_databases: bool,
                 add_domains: bool,
                 add_firewalls: bool,
                 add_images: bool,
                 add_linodes: bool,
                 add_longview: bool,
                 add_nodebalancers: bool,
                 add_stackscripts: bool,
                 add_volumes: bool,
                 cancel_account: bool,
                 longview_subscription: bool):
        """
        :param str account_access: The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        :param bool add_databases: If true, this User may add Managed Databases.
        :param bool add_domains: If true, this User may add Domains.
        :param bool add_firewalls: If true, this User may add Firewalls.
        :param bool add_images: If true, this User may add Images.
        :param bool add_linodes: If true, this User may create Linodes.
        :param bool add_longview: If true, this User may create Longview clients and view the current plan.
        :param bool add_nodebalancers: If true, this User may add NodeBalancers.
        :param bool add_volumes: If true, this User may add Volumes.
        :param bool cancel_account: If true, this User may cancel the entire Account.
        :param bool longview_subscription: If true, this User may manage the Account’s Longview subscription.
        """
        GetUserGlobalGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_access=account_access,
            add_databases=add_databases,
            add_domains=add_domains,
            add_firewalls=add_firewalls,
            add_images=add_images,
            add_linodes=add_linodes,
            add_longview=add_longview,
            add_nodebalancers=add_nodebalancers,
            add_stackscripts=add_stackscripts,
            add_volumes=add_volumes,
            cancel_account=cancel_account,
            longview_subscription=longview_subscription,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_access: str,
             add_databases: bool,
             add_domains: bool,
             add_firewalls: bool,
             add_images: bool,
             add_linodes: bool,
             add_longview: bool,
             add_nodebalancers: bool,
             add_stackscripts: bool,
             add_volumes: bool,
             cancel_account: bool,
             longview_subscription: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("account_access", account_access)
        _setter("add_databases", add_databases)
        _setter("add_domains", add_domains)
        _setter("add_firewalls", add_firewalls)
        _setter("add_images", add_images)
        _setter("add_linodes", add_linodes)
        _setter("add_longview", add_longview)
        _setter("add_nodebalancers", add_nodebalancers)
        _setter("add_stackscripts", add_stackscripts)
        _setter("add_volumes", add_volumes)
        _setter("cancel_account", cancel_account)
        _setter("longview_subscription", longview_subscription)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> str:
        """
        The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="addDatabases")
    def add_databases(self) -> bool:
        """
        If true, this User may add Managed Databases.
        """
        return pulumi.get(self, "add_databases")

    @property
    @pulumi.getter(name="addDomains")
    def add_domains(self) -> bool:
        """
        If true, this User may add Domains.
        """
        return pulumi.get(self, "add_domains")

    @property
    @pulumi.getter(name="addFirewalls")
    def add_firewalls(self) -> bool:
        """
        If true, this User may add Firewalls.
        """
        return pulumi.get(self, "add_firewalls")

    @property
    @pulumi.getter(name="addImages")
    def add_images(self) -> bool:
        """
        If true, this User may add Images.
        """
        return pulumi.get(self, "add_images")

    @property
    @pulumi.getter(name="addLinodes")
    def add_linodes(self) -> bool:
        """
        If true, this User may create Linodes.
        """
        return pulumi.get(self, "add_linodes")

    @property
    @pulumi.getter(name="addLongview")
    def add_longview(self) -> bool:
        """
        If true, this User may create Longview clients and view the current plan.
        """
        return pulumi.get(self, "add_longview")

    @property
    @pulumi.getter(name="addNodebalancers")
    def add_nodebalancers(self) -> bool:
        """
        If true, this User may add NodeBalancers.
        """
        return pulumi.get(self, "add_nodebalancers")

    @property
    @pulumi.getter(name="addStackscripts")
    def add_stackscripts(self) -> bool:
        return pulumi.get(self, "add_stackscripts")

    @property
    @pulumi.getter(name="addVolumes")
    def add_volumes(self) -> bool:
        """
        If true, this User may add Volumes.
        """
        return pulumi.get(self, "add_volumes")

    @property
    @pulumi.getter(name="cancelAccount")
    def cancel_account(self) -> bool:
        """
        If true, this User may cancel the entire Account.
        """
        return pulumi.get(self, "cancel_account")

    @property
    @pulumi.getter(name="longviewSubscription")
    def longview_subscription(self) -> bool:
        """
        If true, this User may manage the Account’s Longview subscription.
        """
        return pulumi.get(self, "longview_subscription")


@pulumi.output_type
class GetUserImageGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserImageGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserLinodeGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserLinodeGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserLongviewGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserLongviewGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserNodebalancerGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserNodebalancerGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserStackscriptGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserStackscriptGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserVolumeGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        GetUserVolumeGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetUsersFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 database_grants: Sequence['outputs.GetUsersUserDatabaseGrantResult'],
                 domain_grants: Sequence['outputs.GetUsersUserDomainGrantResult'],
                 email: str,
                 firewall_grants: Sequence['outputs.GetUsersUserFirewallGrantResult'],
                 global_grants: Sequence['outputs.GetUsersUserGlobalGrantResult'],
                 id: str,
                 image_grants: Sequence['outputs.GetUsersUserImageGrantResult'],
                 linode_grants: Sequence['outputs.GetUsersUserLinodeGrantResult'],
                 longview_grants: Sequence['outputs.GetUsersUserLongviewGrantResult'],
                 nodebalancer_grants: Sequence['outputs.GetUsersUserNodebalancerGrantResult'],
                 password_created: str,
                 restricted: bool,
                 ssh_keys: Sequence[str],
                 stackscript_grants: Sequence['outputs.GetUsersUserStackscriptGrantResult'],
                 tfa_enabled: bool,
                 username: str,
                 verified_phone_number: str,
                 volume_grants: Sequence['outputs.GetUsersUserVolumeGrantResult']):
        """
        :param str email: The email address for this User, for account management communications, and may be used for other communications as configured.
        :param str id: The ID of entity this grant applies to.
        :param str password_created: The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
        :param bool restricted: If true, this User must be granted access to perform actions or access entities on this Account.
        :param Sequence[str] ssh_keys: A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
        :param bool tfa_enabled: A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
        :param str username: This User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
        :param str verified_phone_number: The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
        """
        GetUsersUserResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_grants=database_grants,
            domain_grants=domain_grants,
            email=email,
            firewall_grants=firewall_grants,
            global_grants=global_grants,
            id=id,
            image_grants=image_grants,
            linode_grants=linode_grants,
            longview_grants=longview_grants,
            nodebalancer_grants=nodebalancer_grants,
            password_created=password_created,
            restricted=restricted,
            ssh_keys=ssh_keys,
            stackscript_grants=stackscript_grants,
            tfa_enabled=tfa_enabled,
            username=username,
            verified_phone_number=verified_phone_number,
            volume_grants=volume_grants,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_grants: Sequence['outputs.GetUsersUserDatabaseGrantResult'],
             domain_grants: Sequence['outputs.GetUsersUserDomainGrantResult'],
             email: str,
             firewall_grants: Sequence['outputs.GetUsersUserFirewallGrantResult'],
             global_grants: Sequence['outputs.GetUsersUserGlobalGrantResult'],
             id: str,
             image_grants: Sequence['outputs.GetUsersUserImageGrantResult'],
             linode_grants: Sequence['outputs.GetUsersUserLinodeGrantResult'],
             longview_grants: Sequence['outputs.GetUsersUserLongviewGrantResult'],
             nodebalancer_grants: Sequence['outputs.GetUsersUserNodebalancerGrantResult'],
             password_created: str,
             restricted: bool,
             ssh_keys: Sequence[str],
             stackscript_grants: Sequence['outputs.GetUsersUserStackscriptGrantResult'],
             tfa_enabled: bool,
             username: str,
             verified_phone_number: str,
             volume_grants: Sequence['outputs.GetUsersUserVolumeGrantResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database_grants", database_grants)
        _setter("domain_grants", domain_grants)
        _setter("email", email)
        _setter("firewall_grants", firewall_grants)
        _setter("global_grants", global_grants)
        _setter("id", id)
        _setter("image_grants", image_grants)
        _setter("linode_grants", linode_grants)
        _setter("longview_grants", longview_grants)
        _setter("nodebalancer_grants", nodebalancer_grants)
        _setter("password_created", password_created)
        _setter("restricted", restricted)
        _setter("ssh_keys", ssh_keys)
        _setter("stackscript_grants", stackscript_grants)
        _setter("tfa_enabled", tfa_enabled)
        _setter("username", username)
        _setter("verified_phone_number", verified_phone_number)
        _setter("volume_grants", volume_grants)

    @property
    @pulumi.getter(name="databaseGrants")
    def database_grants(self) -> Sequence['outputs.GetUsersUserDatabaseGrantResult']:
        return pulumi.get(self, "database_grants")

    @property
    @pulumi.getter(name="domainGrants")
    def domain_grants(self) -> Sequence['outputs.GetUsersUserDomainGrantResult']:
        return pulumi.get(self, "domain_grants")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address for this User, for account management communications, and may be used for other communications as configured.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firewallGrants")
    def firewall_grants(self) -> Sequence['outputs.GetUsersUserFirewallGrantResult']:
        return pulumi.get(self, "firewall_grants")

    @property
    @pulumi.getter(name="globalGrants")
    def global_grants(self) -> Sequence['outputs.GetUsersUserGlobalGrantResult']:
        return pulumi.get(self, "global_grants")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageGrants")
    def image_grants(self) -> Sequence['outputs.GetUsersUserImageGrantResult']:
        return pulumi.get(self, "image_grants")

    @property
    @pulumi.getter(name="linodeGrants")
    def linode_grants(self) -> Sequence['outputs.GetUsersUserLinodeGrantResult']:
        return pulumi.get(self, "linode_grants")

    @property
    @pulumi.getter(name="longviewGrants")
    def longview_grants(self) -> Sequence['outputs.GetUsersUserLongviewGrantResult']:
        return pulumi.get(self, "longview_grants")

    @property
    @pulumi.getter(name="nodebalancerGrants")
    def nodebalancer_grants(self) -> Sequence['outputs.GetUsersUserNodebalancerGrantResult']:
        return pulumi.get(self, "nodebalancer_grants")

    @property
    @pulumi.getter(name="passwordCreated")
    def password_created(self) -> str:
        """
        The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
        """
        return pulumi.get(self, "password_created")

    @property
    @pulumi.getter
    def restricted(self) -> bool:
        """
        If true, this User must be granted access to perform actions or access entities on this Account.
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Sequence[str]:
        """
        A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter(name="stackscriptGrants")
    def stackscript_grants(self) -> Sequence['outputs.GetUsersUserStackscriptGrantResult']:
        return pulumi.get(self, "stackscript_grants")

    @property
    @pulumi.getter(name="tfaEnabled")
    def tfa_enabled(self) -> bool:
        """
        A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
        """
        return pulumi.get(self, "tfa_enabled")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        This User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="verifiedPhoneNumber")
    def verified_phone_number(self) -> str:
        """
        The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
        """
        return pulumi.get(self, "verified_phone_number")

    @property
    @pulumi.getter(name="volumeGrants")
    def volume_grants(self) -> Sequence['outputs.GetUsersUserVolumeGrantResult']:
        return pulumi.get(self, "volume_grants")


@pulumi.output_type
class GetUsersUserDatabaseGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserDatabaseGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserDomainGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserDomainGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserFirewallGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserFirewallGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserGlobalGrantResult(dict):
    def __init__(__self__, *,
                 account_access: str,
                 add_databases: bool,
                 add_domains: bool,
                 add_firewalls: bool,
                 add_images: bool,
                 add_linodes: bool,
                 add_longview: bool,
                 add_nodebalancers: bool,
                 add_stackscripts: bool,
                 add_volumes: bool,
                 cancel_account: bool,
                 longview_subscription: bool):
        """
        :param str account_access: The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        :param bool add_databases: If true, this User may add Managed Databases.
        :param bool add_domains: If true, this User may add Domains.
        :param bool add_firewalls: If true, this User may add Firewalls.
        :param bool add_images: If true, this User may add Images.
        :param bool add_linodes: If true, this User may create Linodes.
        :param bool add_longview: If true, this User may create Longview clients and view the current plan.
        :param bool add_nodebalancers: If true, this User may add NodeBalancers.
        :param bool add_volumes: If true, this User may add Volumes.
        :param bool cancel_account: If true, this User may cancel the entire Account.
        :param bool longview_subscription: If true, this User may manage the Account’s Longview subscription.
        """
        GetUsersUserGlobalGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_access=account_access,
            add_databases=add_databases,
            add_domains=add_domains,
            add_firewalls=add_firewalls,
            add_images=add_images,
            add_linodes=add_linodes,
            add_longview=add_longview,
            add_nodebalancers=add_nodebalancers,
            add_stackscripts=add_stackscripts,
            add_volumes=add_volumes,
            cancel_account=cancel_account,
            longview_subscription=longview_subscription,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_access: str,
             add_databases: bool,
             add_domains: bool,
             add_firewalls: bool,
             add_images: bool,
             add_linodes: bool,
             add_longview: bool,
             add_nodebalancers: bool,
             add_stackscripts: bool,
             add_volumes: bool,
             cancel_account: bool,
             longview_subscription: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("account_access", account_access)
        _setter("add_databases", add_databases)
        _setter("add_domains", add_domains)
        _setter("add_firewalls", add_firewalls)
        _setter("add_images", add_images)
        _setter("add_linodes", add_linodes)
        _setter("add_longview", add_longview)
        _setter("add_nodebalancers", add_nodebalancers)
        _setter("add_stackscripts", add_stackscripts)
        _setter("add_volumes", add_volumes)
        _setter("cancel_account", cancel_account)
        _setter("longview_subscription", longview_subscription)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> str:
        """
        The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="addDatabases")
    def add_databases(self) -> bool:
        """
        If true, this User may add Managed Databases.
        """
        return pulumi.get(self, "add_databases")

    @property
    @pulumi.getter(name="addDomains")
    def add_domains(self) -> bool:
        """
        If true, this User may add Domains.
        """
        return pulumi.get(self, "add_domains")

    @property
    @pulumi.getter(name="addFirewalls")
    def add_firewalls(self) -> bool:
        """
        If true, this User may add Firewalls.
        """
        return pulumi.get(self, "add_firewalls")

    @property
    @pulumi.getter(name="addImages")
    def add_images(self) -> bool:
        """
        If true, this User may add Images.
        """
        return pulumi.get(self, "add_images")

    @property
    @pulumi.getter(name="addLinodes")
    def add_linodes(self) -> bool:
        """
        If true, this User may create Linodes.
        """
        return pulumi.get(self, "add_linodes")

    @property
    @pulumi.getter(name="addLongview")
    def add_longview(self) -> bool:
        """
        If true, this User may create Longview clients and view the current plan.
        """
        return pulumi.get(self, "add_longview")

    @property
    @pulumi.getter(name="addNodebalancers")
    def add_nodebalancers(self) -> bool:
        """
        If true, this User may add NodeBalancers.
        """
        return pulumi.get(self, "add_nodebalancers")

    @property
    @pulumi.getter(name="addStackscripts")
    def add_stackscripts(self) -> bool:
        return pulumi.get(self, "add_stackscripts")

    @property
    @pulumi.getter(name="addVolumes")
    def add_volumes(self) -> bool:
        """
        If true, this User may add Volumes.
        """
        return pulumi.get(self, "add_volumes")

    @property
    @pulumi.getter(name="cancelAccount")
    def cancel_account(self) -> bool:
        """
        If true, this User may cancel the entire Account.
        """
        return pulumi.get(self, "cancel_account")

    @property
    @pulumi.getter(name="longviewSubscription")
    def longview_subscription(self) -> bool:
        """
        If true, this User may manage the Account’s Longview subscription.
        """
        return pulumi.get(self, "longview_subscription")


@pulumi.output_type
class GetUsersUserImageGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserImageGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserLinodeGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserLinodeGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserLongviewGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserLongviewGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserNodebalancerGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserNodebalancerGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserStackscriptGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserStackscriptGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserVolumeGrantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 permissions: str):
        """
        :param int id: The ID of entity this grant applies to.
        :param str label: The current label of the entity this grant applies to, for display purposes.
        :param str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        GetUsersUserVolumeGrantResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            permissions=permissions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: int,
             label: str,
             permissions: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetVlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetVlansFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVlansVlanResult(dict):
    def __init__(__self__, *,
                 created: str,
                 label: str,
                 linodes: Sequence[int],
                 region: str):
        """
        :param str created: When the VLAN was created.
        :param str label: The unique label of the VLAN.
        :param Sequence[int] linodes: The running Linodes currently attached to the VLAN.
        :param str region: The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
        """
        GetVlansVlanResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            label=label,
            linodes=linodes,
            region=region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             label: str,
             linodes: Sequence[int],
             region: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("label", label)
        _setter("linodes", linodes)
        _setter("region", region)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        When the VLAN was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The unique label of the VLAN.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def linodes(self) -> Sequence[int]:
        """
        The running Linodes currently attached to the VLAN.
        """
        return pulumi.get(self, "linodes")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 match_by: Optional[str] = None):
        """
        :param str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[str] values: A list of values for the filter to allow. These values should all be in string form.
        :param str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        GetVolumesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            match_by=match_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             match_by: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)
        if match_by is not None:
            _setter("match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 created: str,
                 filesystem_path: str,
                 id: int,
                 label: str,
                 linode_id: int,
                 region: str,
                 size: int,
                 status: str,
                 tags: Sequence[str],
                 updated: str):
        """
        :param str created: When this Volume was created.
        :param str filesystem_path: The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
        :param int id: The unique ID of this Volume.
        :param str label: This Volume's label is for display purposes only.
        :param int linode_id: If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
        :param str region: The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
        :param int size: The Volume's size, in GiB.
        :param str status: The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
        :param Sequence[str] tags: An array of tags applied to this object.
        :param str updated: When this Volume was last updated.
        """
        GetVolumesVolumeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            filesystem_path=filesystem_path,
            id=id,
            label=label,
            linode_id=linode_id,
            region=region,
            size=size,
            status=status,
            tags=tags,
            updated=updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: str,
             filesystem_path: str,
             id: int,
             label: str,
             linode_id: int,
             region: str,
             size: int,
             status: str,
             tags: Sequence[str],
             updated: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("created", created)
        _setter("filesystem_path", filesystem_path)
        _setter("id", id)
        _setter("label", label)
        _setter("linode_id", linode_id)
        _setter("region", region)
        _setter("size", size)
        _setter("status", status)
        _setter("tags", tags)
        _setter("updated", updated)

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        When this Volume was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="filesystemPath")
    def filesystem_path(self) -> str:
        """
        The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
        """
        return pulumi.get(self, "filesystem_path")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique ID of this Volume.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        This Volume's label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> int:
        """
        If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The Volume's size, in GiB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        An array of tags applied to this object.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> str:
        """
        When this Volume was last updated.
        """
        return pulumi.get(self, "updated")


