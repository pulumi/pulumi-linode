# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'DatabaseMysqlUpdates',
    'DatabaseMysqlV2PendingUpdate',
    'DatabaseMysqlV2Timeouts',
    'DatabaseMysqlV2Updates',
    'DatabasePostgresqlUpdates',
    'DatabasePostgresqlV2PendingUpdate',
    'DatabasePostgresqlV2Timeouts',
    'DatabasePostgresqlV2Updates',
    'FirewallDevice',
    'FirewallInbound',
    'FirewallOutbound',
    'ImageReplication',
    'ImageTimeouts',
    'InstanceAlerts',
    'InstanceBackups',
    'InstanceBackupsSchedule',
    'InstanceConfig',
    'InstanceConfigDevice',
    'InstanceConfigDevices',
    'InstanceConfigDevicesSda',
    'InstanceConfigDevicesSdb',
    'InstanceConfigDevicesSdc',
    'InstanceConfigDevicesSdd',
    'InstanceConfigDevicesSde',
    'InstanceConfigDevicesSdf',
    'InstanceConfigDevicesSdg',
    'InstanceConfigDevicesSdh',
    'InstanceConfigHelper',
    'InstanceConfigHelpers',
    'InstanceConfigInterface',
    'InstanceConfigInterfaceIpv4',
    'InstanceDisk',
    'InstanceDiskTimeouts',
    'InstanceInterface',
    'InstanceInterfaceIpv4',
    'InstanceIpVpcNat11',
    'InstanceMetadata',
    'InstancePlacementGroup',
    'InstanceSpecs',
    'LkeClusterControlPlane',
    'LkeClusterControlPlaneAcl',
    'LkeClusterControlPlaneAclAddress',
    'LkeClusterPool',
    'LkeClusterPoolAutoscaler',
    'LkeClusterPoolNode',
    'LkeClusterPoolTaint',
    'LkeNodePoolAutoscaler',
    'LkeNodePoolNode',
    'LkeNodePoolTaint',
    'NetworkingIpAssignmentAssignment',
    'NodeBalancerConfigNodeStatus',
    'NodeBalancerFirewall',
    'NodeBalancerFirewallInbound',
    'NodeBalancerFirewallOutbound',
    'NodeBalancerTransfer',
    'ObjectStorageBucketCert',
    'ObjectStorageBucketLifecycleRule',
    'ObjectStorageBucketLifecycleRuleExpiration',
    'ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration',
    'ObjectStorageKeyBucketAccess',
    'ObjectStorageKeyRegionsDetail',
    'PlacementGroupMember',
    'RdnsTimeouts',
    'ReservedIpAssignmentVpcNat11',
    'StackScriptUserDefinedField',
    'UserDomainGrant',
    'UserFirewallGrant',
    'UserGlobalGrants',
    'UserImageGrant',
    'UserLinodeGrant',
    'UserLongviewGrant',
    'UserNodebalancerGrant',
    'UserPlacementGroupGrant',
    'UserStackscriptGrant',
    'UserVolumeGrant',
    'UserVpcGrant',
    'VolumeTimeouts',
    'VpcSubnetLinode',
    'VpcSubnetLinodeInterface',
    'GetAccountAvailabilitiesAvailabilityResult',
    'GetAccountAvailabilitiesFilterResult',
    'GetAccountLoginsFilterResult',
    'GetAccountLoginsLoginResult',
    'GetChildAccountsChildAccountResult',
    'GetChildAccountsFilterResult',
    'GetDatabaseBackupsBackupResult',
    'GetDatabaseBackupsFilterResult',
    'GetDatabaseEnginesEngineResult',
    'GetDatabaseEnginesFilterResult',
    'GetDatabaseMysqlBackupsBackupResult',
    'GetDatabaseMysqlBackupsFilterResult',
    'GetDatabaseMysqlUpdateResult',
    'GetDatabaseMysqlV2PendingUpdateResult',
    'GetDatabaseMysqlV2UpdatesResult',
    'GetDatabasePostgresqlUpdateResult',
    'GetDatabasePostgresqlV2PendingUpdateResult',
    'GetDatabasePostgresqlV2UpdatesResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesFilterResult',
    'GetDomainsDomainResult',
    'GetDomainsFilterResult',
    'GetFirewallDeviceResult',
    'GetFirewallInboundResult',
    'GetFirewallOutboundResult',
    'GetFirewallsFilterResult',
    'GetFirewallsFirewallResult',
    'GetFirewallsFirewallDeviceResult',
    'GetFirewallsFirewallInboundResult',
    'GetFirewallsFirewallOutboundResult',
    'GetImageReplicationResult',
    'GetImagesFilterResult',
    'GetImagesImageResult',
    'GetImagesImageReplicationResult',
    'GetInstanceBackupsAutomaticResult',
    'GetInstanceBackupsAutomaticDiskResult',
    'GetInstanceBackupsCurrentResult',
    'GetInstanceBackupsCurrentDiskResult',
    'GetInstanceBackupsInProgressResult',
    'GetInstanceBackupsInProgressDiskResult',
    'GetInstanceNetworkingIpv4Result',
    'GetInstanceNetworkingIpv4PrivateResult',
    'GetInstanceNetworkingIpv4PrivateVpcNat11Result',
    'GetInstanceNetworkingIpv4PublicResult',
    'GetInstanceNetworkingIpv4PublicVpcNat11Result',
    'GetInstanceNetworkingIpv4ReservedResult',
    'GetInstanceNetworkingIpv4ReservedVpcNat11Result',
    'GetInstanceNetworkingIpv4SharedResult',
    'GetInstanceNetworkingIpv4SharedVpcNat11Result',
    'GetInstanceNetworkingIpv4VpcResult',
    'GetInstanceNetworkingIpv6Result',
    'GetInstanceNetworkingIpv6GlobalResult',
    'GetInstanceNetworkingIpv6LinkLocalResult',
    'GetInstanceNetworkingIpv6LinkLocalVpcNat11Result',
    'GetInstanceNetworkingIpv6SlaacResult',
    'GetInstanceNetworkingIpv6SlaacVpcNat11Result',
    'GetInstanceTypeAddonsResult',
    'GetInstanceTypeAddonsBackupResult',
    'GetInstanceTypeAddonsBackupPriceResult',
    'GetInstanceTypeAddonsBackupRegionPriceResult',
    'GetInstanceTypePriceResult',
    'GetInstanceTypeRegionPriceResult',
    'GetInstanceTypesFilterResult',
    'GetInstanceTypesTypeResult',
    'GetInstanceTypesTypeAddonResult',
    'GetInstanceTypesTypeAddonBackupResult',
    'GetInstanceTypesTypeAddonBackupPriceResult',
    'GetInstanceTypesTypeAddonBackupRegionPriceResult',
    'GetInstanceTypesTypePriceResult',
    'GetInstanceTypesTypeRegionPriceResult',
    'GetInstancesFilterResult',
    'GetInstancesInstanceResult',
    'GetInstancesInstanceAlertsResult',
    'GetInstancesInstanceBackupResult',
    'GetInstancesInstanceBackupScheduleResult',
    'GetInstancesInstanceConfigResult',
    'GetInstancesInstanceConfigDeviceResult',
    'GetInstancesInstanceConfigDeviceSdaResult',
    'GetInstancesInstanceConfigDeviceSdbResult',
    'GetInstancesInstanceConfigDeviceSdcResult',
    'GetInstancesInstanceConfigDeviceSddResult',
    'GetInstancesInstanceConfigDeviceSdeResult',
    'GetInstancesInstanceConfigDeviceSdfResult',
    'GetInstancesInstanceConfigDeviceSdgResult',
    'GetInstancesInstanceConfigDeviceSdhResult',
    'GetInstancesInstanceConfigHelperResult',
    'GetInstancesInstanceConfigInterfaceResult',
    'GetInstancesInstanceConfigInterfaceIpv4Result',
    'GetInstancesInstanceDiskResult',
    'GetInstancesInstancePlacementGroupResult',
    'GetInstancesInstanceSpecResult',
    'GetIpv6RangesFilterResult',
    'GetIpv6RangesRangeResult',
    'GetKernelsFilterResult',
    'GetKernelsKernelResult',
    'GetLkeClusterControlPlaneResult',
    'GetLkeClusterControlPlaneAclResult',
    'GetLkeClusterControlPlaneAclAddressResult',
    'GetLkeClusterPoolResult',
    'GetLkeClusterPoolAutoscalerResult',
    'GetLkeClusterPoolDiskResult',
    'GetLkeClusterPoolNodeResult',
    'GetLkeClusterPoolTaintResult',
    'GetLkeClustersFilterResult',
    'GetLkeClustersLkeClusterResult',
    'GetLkeClustersLkeClusterControlPlaneResult',
    'GetLkeTypesFilterResult',
    'GetLkeTypesTypeResult',
    'GetLkeTypesTypePriceResult',
    'GetLkeTypesTypeRegionPriceResult',
    'GetLkeVersionsVersionResult',
    'GetNbTypesFilterResult',
    'GetNbTypesTypeResult',
    'GetNbTypesTypePriceResult',
    'GetNbTypesTypeRegionPriceResult',
    'GetNetworkTransferPricesFilterResult',
    'GetNetworkTransferPricesTypeResult',
    'GetNetworkTransferPricesTypePriceResult',
    'GetNetworkTransferPricesTypeRegionPriceResult',
    'GetNetworkingIpsFilterResult',
    'GetNetworkingIpsIpAddressResult',
    'GetNodeBalancerConfigNodeStatusResult',
    'GetNodeBalancerFirewallResult',
    'GetNodeBalancerFirewallInboundResult',
    'GetNodeBalancerFirewallOutboundResult',
    'GetNodeBalancerTransferResult',
    'GetNodebalancerConfigsFilterResult',
    'GetNodebalancerConfigsNodebalancerConfigResult',
    'GetNodebalancerConfigsNodebalancerConfigNodeStatusResult',
    'GetNodebalancersFilterResult',
    'GetNodebalancersNodebalancerResult',
    'GetNodebalancersNodebalancerTransferResult',
    'GetObjectStorageEndpointsEndpointResult',
    'GetObjectStorageEndpointsFilterResult',
    'GetPlacementGroupMemberResult',
    'GetPlacementGroupMigrationsResult',
    'GetPlacementGroupMigrationsInboundResult',
    'GetPlacementGroupMigrationsOutboundResult',
    'GetPlacementGroupsFilterResult',
    'GetPlacementGroupsPlacementGroupResult',
    'GetPlacementGroupsPlacementGroupMemberResult',
    'GetPlacementGroupsPlacementGroupMigrationsResult',
    'GetPlacementGroupsPlacementGroupMigrationsInboundResult',
    'GetPlacementGroupsPlacementGroupMigrationsOutboundResult',
    'GetProfileReferralsResult',
    'GetRegionPlacementGroupLimitResult',
    'GetRegionResolverResult',
    'GetRegionsFilterResult',
    'GetRegionsRegionResult',
    'GetRegionsRegionPlacementGroupLimitResult',
    'GetRegionsRegionResolverResult',
    'GetSshkeysFilterResult',
    'GetSshkeysSshkeyResult',
    'GetStackScriptUserDefinedFieldResult',
    'GetStackScriptsFilterResult',
    'GetStackScriptsStackscriptResult',
    'GetStackScriptsStackscriptUserDefinedFieldResult',
    'GetUserDatabaseGrantResult',
    'GetUserDomainGrantResult',
    'GetUserFirewallGrantResult',
    'GetUserGlobalGrantResult',
    'GetUserImageGrantResult',
    'GetUserLinodeGrantResult',
    'GetUserLongviewGrantResult',
    'GetUserNodebalancerGrantResult',
    'GetUserPlacementGroupGrantResult',
    'GetUserStackscriptGrantResult',
    'GetUserVolumeGrantResult',
    'GetUserVpcGrantResult',
    'GetUsersFilterResult',
    'GetUsersUserResult',
    'GetUsersUserDatabaseGrantResult',
    'GetUsersUserDomainGrantResult',
    'GetUsersUserFirewallGrantResult',
    'GetUsersUserGlobalGrantResult',
    'GetUsersUserImageGrantResult',
    'GetUsersUserLinodeGrantResult',
    'GetUsersUserLongviewGrantResult',
    'GetUsersUserNodebalancerGrantResult',
    'GetUsersUserPlacementGroupGrantResult',
    'GetUsersUserStackscriptGrantResult',
    'GetUsersUserVolumeGrantResult',
    'GetUsersUserVpcGrantResult',
    'GetVlansFilterResult',
    'GetVlansVlanResult',
    'GetVolumeTypesFilterResult',
    'GetVolumeTypesTypeResult',
    'GetVolumeTypesTypePriceResult',
    'GetVolumeTypesTypeRegionPriceResult',
    'GetVolumesFilterResult',
    'GetVolumesVolumeResult',
    'GetVpcIpsFilterResult',
    'GetVpcIpsVpcIpResult',
    'GetVpcSubnetLinodeResult',
    'GetVpcSubnetLinodeInterfaceResult',
    'GetVpcSubnetsFilterResult',
    'GetVpcSubnetsVpcSubnetResult',
    'GetVpcSubnetsVpcSubnetLinodeResult',
    'GetVpcSubnetsVpcSubnetLinodeInterfaceResult',
    'GetVpcsFilterResult',
    'GetVpcsVpcResult',
]

@pulumi.output_type
class DatabaseMysqlUpdates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"
        elif key == "weekOfMonth":
            suggest = "week_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseMysqlUpdates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseMysqlUpdates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseMysqlUpdates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: builtins.str,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int,
                 week_of_month: Optional[builtins.int] = None):
        """
        :param builtins.str day_of_week: The day to perform maintenance.
        :param builtins.int duration: The maximum maintenance window time in hours.
        :param builtins.str frequency: Whether maintenance occurs on a weekly or monthly basis.
        :param builtins.int hour_of_day: The hour to begin maintenance based in UTC time.
        :param builtins.int week_of_month: The week of the month to perform monthly frequency updates. Required for monthly frequency updates.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.str:
        """
        The day to perform maintenance.
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        """
        The maximum maintenance window time in hours.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        """
        Whether maintenance occurs on a weekly or monthly basis.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        """
        The hour to begin maintenance based in UTC time.
        """
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[builtins.int]:
        """
        The week of the month to perform monthly frequency updates. Required for monthly frequency updates.
        """
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class DatabaseMysqlV2PendingUpdate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "plannedFor":
            suggest = "planned_for"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseMysqlV2PendingUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseMysqlV2PendingUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseMysqlV2PendingUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deadline: builtins.str,
                 description: builtins.str,
                 planned_for: builtins.str):
        pulumi.set(__self__, "deadline", deadline)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "planned_for", planned_for)

    @property
    @pulumi.getter
    def deadline(self) -> builtins.str:
        return pulumi.get(self, "deadline")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="plannedFor")
    def planned_for(self) -> builtins.str:
        return pulumi.get(self, "planned_for")


@pulumi.output_type
class DatabaseMysqlV2Timeouts(dict):
    def __init__(__self__, *,
                 create: Optional[builtins.str] = None,
                 delete: Optional[builtins.str] = None,
                 update: Optional[builtins.str] = None):
        """
        :param builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class DatabaseMysqlV2Updates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseMysqlV2Updates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseMysqlV2Updates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseMysqlV2Updates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: builtins.int,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.int:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        return pulumi.get(self, "hour_of_day")


@pulumi.output_type
class DatabasePostgresqlUpdates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"
        elif key == "weekOfMonth":
            suggest = "week_of_month"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabasePostgresqlUpdates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabasePostgresqlUpdates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabasePostgresqlUpdates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: builtins.str,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int,
                 week_of_month: Optional[builtins.int] = None):
        """
        :param builtins.str day_of_week: The day to perform maintenance.
        :param builtins.int duration: The maximum maintenance window time in hours.
        :param builtins.str frequency: Whether maintenance occurs on a weekly or monthly basis.
        :param builtins.int hour_of_day: The hour to begin maintenance based in UTC time.
        :param builtins.int week_of_month: The week of the month to perform monthly frequency updates. Required for monthly frequency updates.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.str:
        """
        The day to perform maintenance.
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        """
        The maximum maintenance window time in hours.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        """
        Whether maintenance occurs on a weekly or monthly basis.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        """
        The hour to begin maintenance based in UTC time.
        """
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[builtins.int]:
        """
        The week of the month to perform monthly frequency updates. Required for monthly frequency updates.
        """
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class DatabasePostgresqlV2PendingUpdate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "plannedFor":
            suggest = "planned_for"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabasePostgresqlV2PendingUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabasePostgresqlV2PendingUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabasePostgresqlV2PendingUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deadline: builtins.str,
                 description: builtins.str,
                 planned_for: builtins.str):
        pulumi.set(__self__, "deadline", deadline)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "planned_for", planned_for)

    @property
    @pulumi.getter
    def deadline(self) -> builtins.str:
        return pulumi.get(self, "deadline")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="plannedFor")
    def planned_for(self) -> builtins.str:
        return pulumi.get(self, "planned_for")


@pulumi.output_type
class DatabasePostgresqlV2Timeouts(dict):
    def __init__(__self__, *,
                 create: Optional[builtins.str] = None,
                 delete: Optional[builtins.str] = None,
                 update: Optional[builtins.str] = None):
        """
        :param builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class DatabasePostgresqlV2Updates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabasePostgresqlV2Updates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabasePostgresqlV2Updates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabasePostgresqlV2Updates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: builtins.int,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.int:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        return pulumi.get(self, "hour_of_day")


@pulumi.output_type
class FirewallDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_id: builtins.int,
                 id: builtins.int,
                 label: builtins.str,
                 type: builtins.str,
                 url: builtins.str):
        """
        :param builtins.int entity_id: The ID of the underlying entity this device references (i.e. the Linode's ID).
        :param builtins.int id: The ID of the Firewall Device.
        :param builtins.str label: This Firewall's unique label.
        :param builtins.str type: The type of Firewall Device.
        :param builtins.str url: The URL of the underlying entity this device references.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> builtins.int:
        """
        The ID of the underlying entity this device references (i.e. the Linode's ID).
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Firewall Device.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Firewall Device.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The URL of the underlying entity this device references.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class FirewallInbound(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 label: builtins.str,
                 protocol: builtins.str,
                 description: Optional[builtins.str] = None,
                 ipv4s: Optional[Sequence[builtins.str]] = None,
                 ipv6s: Optional[Sequence[builtins.str]] = None,
                 ports: Optional[builtins.str] = None):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param builtins.str label: Used to identify this rule. For display purposes only.
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        :param builtins.str description: Used to describe this rule. For display purposes only.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv4s is not None:
            pulumi.set(__self__, "ipv4s", ipv4s)
        if ipv6s is not None:
            pulumi.set(__self__, "ipv6s", ipv6s)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        Used to identify this rule. For display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Used to describe this rule. For display purposes only.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def ports(self) -> Optional[builtins.str]:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class FirewallOutbound(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 label: builtins.str,
                 protocol: builtins.str,
                 description: Optional[builtins.str] = None,
                 ipv4s: Optional[Sequence[builtins.str]] = None,
                 ipv6s: Optional[Sequence[builtins.str]] = None,
                 ports: Optional[builtins.str] = None):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param builtins.str label: This Firewall's unique label.
        :param builtins.str protocol: The network protocol this rule controls.
        :param builtins.str description: Used to describe this rule. For display purposes only.
        :param Sequence[builtins.str] ipv4s: A list of CIDR blocks or 0.0.0.0/0 (to allow all) this rule applies to.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks this rule applies to.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ipv4s is not None:
            pulumi.set(__self__, "ipv4s", ipv4s)
        if ipv6s is not None:
            pulumi.set(__self__, "ipv6s", ipv6s)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        This Firewall's unique label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Used to describe this rule. For display purposes only.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of CIDR blocks or 0.0.0.0/0 (to allow all) this rule applies to.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of IPv6 addresses or networks this rule applies to.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def ports(self) -> Optional[builtins.str]:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class ImageReplication(dict):
    def __init__(__self__, *,
                 region: builtins.str,
                 status: builtins.str):
        """
        :param builtins.str region: The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).
        :param builtins.str status: The status of an image replica.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of an image replica.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ImageTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[builtins.str] = None):
        """
        :param builtins.str create: Used when creating the instance image (until the instance is available)
        """
        if create is not None:
            pulumi.set(__self__, "create", create)

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        Used when creating the instance image (until the instance is available)
        """
        return pulumi.get(self, "create")


@pulumi.output_type
class InstanceAlerts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkIn":
            suggest = "network_in"
        elif key == "networkOut":
            suggest = "network_out"
        elif key == "transferQuota":
            suggest = "transfer_quota"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAlerts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAlerts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAlerts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: Optional[builtins.int] = None,
                 io: Optional[builtins.int] = None,
                 network_in: Optional[builtins.int] = None,
                 network_out: Optional[builtins.int] = None,
                 transfer_quota: Optional[builtins.int] = None):
        """
        :param builtins.int cpu: The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.
        :param builtins.int io: The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.
        :param builtins.int network_in: The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        :param builtins.int network_out: The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        :param builtins.int transfer_quota: The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if io is not None:
            pulumi.set(__self__, "io", io)
        if network_in is not None:
            pulumi.set(__self__, "network_in", network_in)
        if network_out is not None:
            pulumi.set(__self__, "network_out", network_out)
        if transfer_quota is not None:
            pulumi.set(__self__, "transfer_quota", transfer_quota)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[builtins.int]:
        """
        The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def io(self) -> Optional[builtins.int]:
        """
        The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.
        """
        return pulumi.get(self, "io")

    @property
    @pulumi.getter(name="networkIn")
    def network_in(self) -> Optional[builtins.int]:
        """
        The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        """
        return pulumi.get(self, "network_in")

    @property
    @pulumi.getter(name="networkOut")
    def network_out(self) -> Optional[builtins.int]:
        """
        The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        """
        return pulumi.get(self, "network_out")

    @property
    @pulumi.getter(name="transferQuota")
    def transfer_quota(self) -> Optional[builtins.int]:
        """
        The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.
        """
        return pulumi.get(self, "transfer_quota")


@pulumi.output_type
class InstanceBackups(dict):
    def __init__(__self__, *,
                 available: Optional[builtins.bool] = None,
                 enabled: Optional[builtins.bool] = None,
                 schedule: Optional['outputs.InstanceBackupsSchedule'] = None):
        """
        :param builtins.bool available: Whether this Backup is available for restoration.
        :param builtins.bool enabled: If this Linode has the Backup service enabled.
        """
        if available is not None:
            pulumi.set(__self__, "available", available)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def available(self) -> Optional[builtins.bool]:
        """
        Whether this Backup is available for restoration.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        If this Linode has the Backup service enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.InstanceBackupsSchedule']:
        return pulumi.get(self, "schedule")


@pulumi.output_type
class InstanceBackupsSchedule(dict):
    def __init__(__self__, *,
                 day: Optional[builtins.str] = None,
                 window: Optional[builtins.str] = None):
        """
        :param builtins.str day: The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        :param builtins.str window: The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def day(self) -> Optional[builtins.str]:
        """
        The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def window(self) -> Optional[builtins.str]:
        """
        The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        return pulumi.get(self, "window")


@pulumi.output_type
class InstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryLimit":
            suggest = "memory_limit"
        elif key == "rootDevice":
            suggest = "root_device"
        elif key == "runLevel":
            suggest = "run_level"
        elif key == "virtMode":
            suggest = "virt_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: builtins.str,
                 comments: Optional[builtins.str] = None,
                 devices: Optional['outputs.InstanceConfigDevices'] = None,
                 helpers: Optional['outputs.InstanceConfigHelpers'] = None,
                 id: Optional[builtins.int] = None,
                 interfaces: Optional[Sequence['outputs.InstanceConfigInterface']] = None,
                 kernel: Optional[builtins.str] = None,
                 memory_limit: Optional[builtins.int] = None,
                 root_device: Optional[builtins.str] = None,
                 run_level: Optional[builtins.str] = None,
                 virt_mode: Optional[builtins.str] = None):
        """
        :param builtins.str label: The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        :param builtins.str comments: Optional field for arbitrary User comments on this Config.
        :param 'InstanceConfigDevicesArgs' devices: Device sda-sdh can be either a Disk or Volume identified by disk_label or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigHelpersArgs' helpers: Helpers enabled when booting to this Linode Config.
        :param builtins.int id: The ID of the Placement Group.
        :param Sequence['InstanceConfigInterfaceArgs'] interfaces: An array of Network Interfaces for this Linode’s Configuration Profile.
        :param builtins.str kernel: A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
        :param builtins.int memory_limit: Defaults to the total RAM of the Linode
        :param builtins.str root_device: The root device to boot. The corresponding disk must be attached.
        :param builtins.str run_level: Defines the state of your Linode after booting. Defaults to default.
        :param builtins.str virt_mode: Controls the virtualization mode. Defaults to paravirt.
        """
        pulumi.set(__self__, "label", label)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if helpers is not None:
            pulumi.set(__self__, "helpers", helpers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interfaces is not None:
            pulumi.set(__self__, "interfaces", interfaces)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if root_device is not None:
            pulumi.set(__self__, "root_device", root_device)
        if run_level is not None:
            pulumi.set(__self__, "run_level", run_level)
        if virt_mode is not None:
            pulumi.set(__self__, "virt_mode", virt_mode)

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def comments(self) -> Optional[builtins.str]:
        """
        Optional field for arbitrary User comments on this Config.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def devices(self) -> Optional['outputs.InstanceConfigDevices']:
        """
        Device sda-sdh can be either a Disk or Volume identified by disk_label or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def helpers(self) -> Optional['outputs.InstanceConfigHelpers']:
        """
        Helpers enabled when booting to this Linode Config.
        """
        return pulumi.get(self, "helpers")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        The ID of the Placement Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Optional[Sequence['outputs.InstanceConfigInterface']]:
        """
        An array of Network Interfaces for this Linode’s Configuration Profile.
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def kernel(self) -> Optional[builtins.str]:
        """
        A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[builtins.int]:
        """
        Defaults to the total RAM of the Linode
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> Optional[builtins.str]:
        """
        The root device to boot. The corresponding disk must be attached.
        """
        return pulumi.get(self, "root_device")

    @property
    @pulumi.getter(name="runLevel")
    def run_level(self) -> Optional[builtins.str]:
        """
        Defines the state of your Linode after booting. Defaults to default.
        """
        return pulumi.get(self, "run_level")

    @property
    @pulumi.getter(name="virtMode")
    def virt_mode(self) -> Optional[builtins.str]:
        """
        Controls the virtualization mode. Defaults to paravirt.
        """
        return pulumi.get(self, "virt_mode")


@pulumi.output_type
class InstanceConfigDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: builtins.str,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.str device_name: The Disk ID to map to this disk slot
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        pulumi.set(__self__, "device_name", device_name)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> builtins.str:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevices(dict):
    def __init__(__self__, *,
                 sda: Optional['outputs.InstanceConfigDevicesSda'] = None,
                 sdb: Optional['outputs.InstanceConfigDevicesSdb'] = None,
                 sdc: Optional['outputs.InstanceConfigDevicesSdc'] = None,
                 sdd: Optional['outputs.InstanceConfigDevicesSdd'] = None,
                 sde: Optional['outputs.InstanceConfigDevicesSde'] = None,
                 sdf: Optional['outputs.InstanceConfigDevicesSdf'] = None,
                 sdg: Optional['outputs.InstanceConfigDevicesSdg'] = None,
                 sdh: Optional['outputs.InstanceConfigDevicesSdh'] = None):
        """
        :param 'InstanceConfigDevicesSdaArgs' sda: ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        :param 'InstanceConfigDevicesSdbArgs' sdb: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigDevicesSdcArgs' sdc: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigDevicesSddArgs' sdd: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigDevicesSdeArgs' sde: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigDevicesSdfArgs' sdf: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigDevicesSdgArgs' sdg: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param 'InstanceConfigDevicesSdhArgs' sdh: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        if sda is not None:
            pulumi.set(__self__, "sda", sda)
        if sdb is not None:
            pulumi.set(__self__, "sdb", sdb)
        if sdc is not None:
            pulumi.set(__self__, "sdc", sdc)
        if sdd is not None:
            pulumi.set(__self__, "sdd", sdd)
        if sde is not None:
            pulumi.set(__self__, "sde", sde)
        if sdf is not None:
            pulumi.set(__self__, "sdf", sdf)
        if sdg is not None:
            pulumi.set(__self__, "sdg", sdg)
        if sdh is not None:
            pulumi.set(__self__, "sdh", sdh)

    @property
    @pulumi.getter
    def sda(self) -> Optional['outputs.InstanceConfigDevicesSda']:
        """
        ... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        """
        return pulumi.get(self, "sda")

    @property
    @pulumi.getter
    def sdb(self) -> Optional['outputs.InstanceConfigDevicesSdb']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdb")

    @property
    @pulumi.getter
    def sdc(self) -> Optional['outputs.InstanceConfigDevicesSdc']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdc")

    @property
    @pulumi.getter
    def sdd(self) -> Optional['outputs.InstanceConfigDevicesSdd']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdd")

    @property
    @pulumi.getter
    def sde(self) -> Optional['outputs.InstanceConfigDevicesSde']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sde")

    @property
    @pulumi.getter
    def sdf(self) -> Optional['outputs.InstanceConfigDevicesSdf']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdf")

    @property
    @pulumi.getter
    def sdg(self) -> Optional['outputs.InstanceConfigDevicesSdg']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdg")

    @property
    @pulumi.getter
    def sdh(self) -> Optional['outputs.InstanceConfigDevicesSdh']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdh")


@pulumi.output_type
class InstanceConfigDevicesSda(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSda. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSda.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSda.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this `device` slot
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this `device` slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSde(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSde. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSde.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSde.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigDevicesSdh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigDevicesSdh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigDevicesSdh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigDevicesSdh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: Optional[builtins.int] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID to map to this disk slot
        :param builtins.int volume_id: The Block Storage volume ID to map to this disk slot
        """
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[builtins.int]:
        """
        The Disk ID to map to this disk slot
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Block Storage volume ID to map to this disk slot
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class InstanceConfigHelper(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "devtmpfsAutomount":
            suggest = "devtmpfs_automount"
        elif key == "modulesDep":
            suggest = "modules_dep"
        elif key == "updatedbDisabled":
            suggest = "updatedb_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigHelper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigHelper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigHelper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 devtmpfs_automount: Optional[builtins.bool] = None,
                 distro: Optional[builtins.bool] = None,
                 modules_dep: Optional[builtins.bool] = None,
                 network: Optional[builtins.bool] = None,
                 updatedb_disabled: Optional[builtins.bool] = None):
        """
        :param builtins.bool devtmpfs_automount: Populates the /dev directory early during boot without udev. (default `true`)
        :param builtins.bool distro: Helps maintain correct inittab/upstart console device. (default `true`)
        :param builtins.bool modules_dep: Creates a modules dependency file for the Kernel you run. (default `true`)
        :param builtins.bool network: Automatically configures static networking. (default `true`)
        :param builtins.bool updatedb_disabled: Disables updatedb cron job to avoid disk thrashing. (default `true`)
        """
        if devtmpfs_automount is not None:
            pulumi.set(__self__, "devtmpfs_automount", devtmpfs_automount)
        if distro is not None:
            pulumi.set(__self__, "distro", distro)
        if modules_dep is not None:
            pulumi.set(__self__, "modules_dep", modules_dep)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if updatedb_disabled is not None:
            pulumi.set(__self__, "updatedb_disabled", updatedb_disabled)

    @property
    @pulumi.getter(name="devtmpfsAutomount")
    def devtmpfs_automount(self) -> Optional[builtins.bool]:
        """
        Populates the /dev directory early during boot without udev. (default `true`)
        """
        return pulumi.get(self, "devtmpfs_automount")

    @property
    @pulumi.getter
    def distro(self) -> Optional[builtins.bool]:
        """
        Helps maintain correct inittab/upstart console device. (default `true`)
        """
        return pulumi.get(self, "distro")

    @property
    @pulumi.getter(name="modulesDep")
    def modules_dep(self) -> Optional[builtins.bool]:
        """
        Creates a modules dependency file for the Kernel you run. (default `true`)
        """
        return pulumi.get(self, "modules_dep")

    @property
    @pulumi.getter
    def network(self) -> Optional[builtins.bool]:
        """
        Automatically configures static networking. (default `true`)
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="updatedbDisabled")
    def updatedb_disabled(self) -> Optional[builtins.bool]:
        """
        Disables updatedb cron job to avoid disk thrashing. (default `true`)
        """
        return pulumi.get(self, "updatedb_disabled")


@pulumi.output_type
class InstanceConfigHelpers(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "devtmpfsAutomount":
            suggest = "devtmpfs_automount"
        elif key == "modulesDep":
            suggest = "modules_dep"
        elif key == "updatedbDisabled":
            suggest = "updatedb_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigHelpers. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigHelpers.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigHelpers.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 devtmpfs_automount: Optional[builtins.bool] = None,
                 distro: Optional[builtins.bool] = None,
                 modules_dep: Optional[builtins.bool] = None,
                 network: Optional[builtins.bool] = None,
                 updatedb_disabled: Optional[builtins.bool] = None):
        """
        :param builtins.bool devtmpfs_automount: Populates the /dev directory early during boot without udev. Defaults to false.
        :param builtins.bool distro: Controls the behavior of the Linode Config's Distribution Helper setting.
        :param builtins.bool modules_dep: Creates a modules dependency file for the Kernel you run.
        :param builtins.bool network: Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        :param builtins.bool updatedb_disabled: Disables updatedb cron job to avoid disk thrashing.
        """
        if devtmpfs_automount is not None:
            pulumi.set(__self__, "devtmpfs_automount", devtmpfs_automount)
        if distro is not None:
            pulumi.set(__self__, "distro", distro)
        if modules_dep is not None:
            pulumi.set(__self__, "modules_dep", modules_dep)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if updatedb_disabled is not None:
            pulumi.set(__self__, "updatedb_disabled", updatedb_disabled)

    @property
    @pulumi.getter(name="devtmpfsAutomount")
    def devtmpfs_automount(self) -> Optional[builtins.bool]:
        """
        Populates the /dev directory early during boot without udev. Defaults to false.
        """
        return pulumi.get(self, "devtmpfs_automount")

    @property
    @pulumi.getter
    def distro(self) -> Optional[builtins.bool]:
        """
        Controls the behavior of the Linode Config's Distribution Helper setting.
        """
        return pulumi.get(self, "distro")

    @property
    @pulumi.getter(name="modulesDep")
    def modules_dep(self) -> Optional[builtins.bool]:
        """
        Creates a modules dependency file for the Kernel you run.
        """
        return pulumi.get(self, "modules_dep")

    @property
    @pulumi.getter
    def network(self) -> Optional[builtins.bool]:
        """
        Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="updatedbDisabled")
    def updatedb_disabled(self) -> Optional[builtins.bool]:
        """
        Disables updatedb cron job to avoid disk thrashing.
        """
        return pulumi.get(self, "updatedb_disabled")


@pulumi.output_type
class InstanceConfigInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "ipamAddress":
            suggest = "ipam_address"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceConfigInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceConfigInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceConfigInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 purpose: builtins.str,
                 active: Optional[builtins.bool] = None,
                 id: Optional[builtins.int] = None,
                 ip_ranges: Optional[Sequence[builtins.str]] = None,
                 ipam_address: Optional[builtins.str] = None,
                 ipv4: Optional['outputs.InstanceConfigInterfaceIpv4'] = None,
                 label: Optional[builtins.str] = None,
                 primary: Optional[builtins.bool] = None,
                 subnet_id: Optional[builtins.int] = None,
                 vpc_id: Optional[builtins.int] = None):
        """
        :param builtins.str purpose: The type of interface. (`public`, `vlan`, `vpc`)
        :param builtins.bool active: Whether this interface is currently booted and active.
        :param builtins.int id: The ID of the interface.
        :param Sequence[builtins.str] ip_ranges: IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.
        :param builtins.str ipam_address: This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.
        :param 'InstanceConfigInterfaceIpv4Args' ipv4: The IPv4 configuration of the VPC interface.This attribute is only allowed for VPC interfaces.
        :param builtins.str label: The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.
        :param builtins.bool primary: Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.
               
               * `ipv4` - (Optional) The IPv4 configuration of the VPC interface. This field is currently only allowed for interfaces with the `vpc` purpose.
               
               The following computed attribute is available in a VPC interface:
        :param builtins.int subnet_id: The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.
        :param builtins.int vpc_id: The ID of VPC which this interface is attached to.
        """
        pulumi.set(__self__, "purpose", purpose)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipam_address is not None:
            pulumi.set(__self__, "ipam_address", ipam_address)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def purpose(self) -> builtins.str:
        """
        The type of interface. (`public`, `vlan`, `vpc`)
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def active(self) -> Optional[builtins.bool]:
        """
        Whether this interface is currently booted and active.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        The ID of the interface.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[builtins.str]]:
        """
        IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.
        """
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="ipamAddress")
    def ipam_address(self) -> Optional[builtins.str]:
        """
        This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.
        """
        return pulumi.get(self, "ipam_address")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional['outputs.InstanceConfigInterfaceIpv4']:
        """
        The IPv4 configuration of the VPC interface.This attribute is only allowed for VPC interfaces.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def label(self) -> Optional[builtins.str]:
        """
        The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def primary(self) -> Optional[builtins.bool]:
        """
        Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.

        * `ipv4` - (Optional) The IPv4 configuration of the VPC interface. This field is currently only allowed for interfaces with the `vpc` purpose.

        The following computed attribute is available in a VPC interface:
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.int]:
        """
        The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[builtins.int]:
        """
        The ID of VPC which this interface is attached to.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class InstanceConfigInterfaceIpv4(dict):
    def __init__(__self__, *,
                 nat11: Optional[builtins.str] = None,
                 vpc: Optional[builtins.str] = None):
        """
        :param builtins.str nat11: The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.
        :param builtins.str vpc: The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.
        """
        if nat11 is not None:
            pulumi.set(__self__, "nat11", nat11)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def nat11(self) -> Optional[builtins.str]:
        """
        The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.
        """
        return pulumi.get(self, "nat11")

    @property
    @pulumi.getter
    def vpc(self) -> Optional[builtins.str]:
        """
        The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class InstanceDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizedKeys":
            suggest = "authorized_keys"
        elif key == "authorizedUsers":
            suggest = "authorized_users"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "rootPass":
            suggest = "root_pass"
        elif key == "stackscriptData":
            suggest = "stackscript_data"
        elif key == "stackscriptId":
            suggest = "stackscript_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: builtins.str,
                 size: builtins.int,
                 authorized_keys: Optional[Sequence[builtins.str]] = None,
                 authorized_users: Optional[Sequence[builtins.str]] = None,
                 filesystem: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None,
                 image: Optional[builtins.str] = None,
                 read_only: Optional[builtins.bool] = None,
                 root_pass: Optional[builtins.str] = None,
                 stackscript_data: Optional[Mapping[str, builtins.str]] = None,
                 stackscript_id: Optional[builtins.int] = None):
        """
        :param builtins.str label: The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        :param builtins.int size: The size of the Disk in MB.
        :param Sequence[builtins.str] authorized_keys: A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.
        :param Sequence[builtins.str] authorized_users: A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.
        :param builtins.str filesystem: The Disk filesystem can be one of: raw, swap, ext3, ext4, initrd (max 32mb)
        :param builtins.int id: The ID of the Placement Group.
        :param builtins.str image: An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.
        :param builtins.bool read_only: If true, this Disk is read-only.
        :param builtins.str root_pass: The password that will be initialially assigned to the 'root' user account.
        :param Mapping[str, builtins.str] stackscript_data: An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.
        :param builtins.int stackscript_id: The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size", size)
        if authorized_keys is not None:
            pulumi.set(__self__, "authorized_keys", authorized_keys)
        if authorized_users is not None:
            pulumi.set(__self__, "authorized_users", authorized_users)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if root_pass is not None:
            pulumi.set(__self__, "root_pass", root_pass)
        if stackscript_data is not None:
            pulumi.set(__self__, "stackscript_data", stackscript_data)
        if stackscript_id is not None:
            pulumi.set(__self__, "stackscript_id", stackscript_id)

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The size of the Disk in MB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="authorizedKeys")
    def authorized_keys(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.
        """
        return pulumi.get(self, "authorized_keys")

    @property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[Sequence[builtins.str]]:
        """
        A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.
        """
        return pulumi.get(self, "authorized_users")

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[builtins.str]:
        """
        The Disk filesystem can be one of: raw, swap, ext3, ext4, initrd (max 32mb)
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        The ID of the Placement Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> Optional[builtins.str]:
        """
        An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[builtins.bool]:
        """
        If true, this Disk is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="rootPass")
    def root_pass(self) -> Optional[builtins.str]:
        """
        The password that will be initialially assigned to the 'root' user account.
        """
        return pulumi.get(self, "root_pass")

    @property
    @pulumi.getter(name="stackscriptData")
    def stackscript_data(self) -> Optional[Mapping[str, builtins.str]]:
        """
        An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.
        """
        return pulumi.get(self, "stackscript_data")

    @property
    @pulumi.getter(name="stackscriptId")
    def stackscript_id(self) -> Optional[builtins.int]:
        """
        The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript.
        """
        return pulumi.get(self, "stackscript_id")


@pulumi.output_type
class InstanceDiskTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[builtins.str] = None,
                 delete: Optional[builtins.str] = None,
                 update: Optional[builtins.str] = None):
        """
        :param builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class InstanceInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "ipamAddress":
            suggest = "ipam_address"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 purpose: builtins.str,
                 active: Optional[builtins.bool] = None,
                 id: Optional[builtins.int] = None,
                 ip_ranges: Optional[Sequence[builtins.str]] = None,
                 ipam_address: Optional[builtins.str] = None,
                 ipv4: Optional['outputs.InstanceInterfaceIpv4'] = None,
                 label: Optional[builtins.str] = None,
                 primary: Optional[builtins.bool] = None,
                 subnet_id: Optional[builtins.int] = None,
                 vpc_id: Optional[builtins.int] = None):
        """
        :param builtins.str purpose: The type of interface. (`public`, `vlan`, `vpc`)
        :param builtins.bool active: Whether this interface is currently booted and active.
        :param builtins.int id: The ID of the Placement Group.
        :param Sequence[builtins.str] ip_ranges: IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.
        :param builtins.str ipam_address: This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.
        :param 'InstanceInterfaceIpv4Args' ipv4: A set of reserved IPv4 addresses to assign to this Linode on creation.
               
               * **NOTE: IP reservation is not currently available to all users.**
        :param builtins.str label: The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.
        :param builtins.bool primary: Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.
               
               * `ipv4` - (Optional) The IPv4 configuration of the VPC interface. This field is currently only allowed for interfaces with the `vpc` purpose.
               
               The following computed attribute is available in a VPC interface:
        :param builtins.int subnet_id: The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.
        :param builtins.int vpc_id: The ID of VPC which this interface is attached to.
        """
        pulumi.set(__self__, "purpose", purpose)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipam_address is not None:
            pulumi.set(__self__, "ipam_address", ipam_address)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def purpose(self) -> builtins.str:
        """
        The type of interface. (`public`, `vlan`, `vpc`)
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def active(self) -> Optional[builtins.bool]:
        """
        Whether this interface is currently booted and active.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        The ID of the Placement Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[builtins.str]]:
        """
        IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.
        """
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="ipamAddress")
    def ipam_address(self) -> Optional[builtins.str]:
        """
        This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.
        """
        return pulumi.get(self, "ipam_address")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional['outputs.InstanceInterfaceIpv4']:
        """
        A set of reserved IPv4 addresses to assign to this Linode on creation.

        * **NOTE: IP reservation is not currently available to all users.**
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def label(self) -> Optional[builtins.str]:
        """
        The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def primary(self) -> Optional[builtins.bool]:
        """
        Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.

        * `ipv4` - (Optional) The IPv4 configuration of the VPC interface. This field is currently only allowed for interfaces with the `vpc` purpose.

        The following computed attribute is available in a VPC interface:
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.int]:
        """
        The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[builtins.int]:
        """
        The ID of VPC which this interface is attached to.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class InstanceInterfaceIpv4(dict):
    def __init__(__self__, *,
                 nat11: Optional[builtins.str] = None,
                 vpc: Optional[builtins.str] = None):
        """
        :param builtins.str nat11: The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.
        :param builtins.str vpc: The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.
        """
        if nat11 is not None:
            pulumi.set(__self__, "nat11", nat11)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def nat11(self) -> Optional[builtins.str]:
        """
        The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.
        """
        return pulumi.get(self, "nat11")

    @property
    @pulumi.getter
    def vpc(self) -> Optional[builtins.str]:
        """
        The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class InstanceIpVpcNat11(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceIpVpcNat11. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceIpVpcNat11.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceIpVpcNat11.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The resulting IPv4 address.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The resulting IPv4 address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class InstanceMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_data: Optional[builtins.str] = None):
        """
        :param builtins.str user_data: The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.
        """
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[builtins.str]:
        """
        The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class InstancePlacementGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compliantOnly":
            suggest = "compliant_only"
        elif key == "placementGroupPolicy":
            suggest = "placement_group_policy"
        elif key == "placementGroupType":
            suggest = "placement_group_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePlacementGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePlacementGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePlacementGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.int,
                 compliant_only: Optional[builtins.bool] = None,
                 label: Optional[builtins.str] = None,
                 placement_group_policy: Optional[builtins.str] = None,
                 placement_group_type: Optional[builtins.str] = None):
        """
        :param builtins.int id: The ID of the Placement Group.
        :param builtins.str label: The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        :param builtins.str placement_group_policy: Whether the Placement Group enforces strict compliance.
        :param builtins.str placement_group_type: The placement group type enforced by the Placement Group.
        """
        pulumi.set(__self__, "id", id)
        if compliant_only is not None:
            pulumi.set(__self__, "compliant_only", compliant_only)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if placement_group_policy is not None:
            pulumi.set(__self__, "placement_group_policy", placement_group_policy)
        if placement_group_type is not None:
            pulumi.set(__self__, "placement_group_type", placement_group_type)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Placement Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="compliantOnly")
    def compliant_only(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "compliant_only")

    @property
    @pulumi.getter
    def label(self) -> Optional[builtins.str]:
        """
        The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="placementGroupPolicy")
    def placement_group_policy(self) -> Optional[builtins.str]:
        """
        Whether the Placement Group enforces strict compliance.
        """
        return pulumi.get(self, "placement_group_policy")

    @property
    @pulumi.getter(name="placementGroupType")
    def placement_group_type(self) -> Optional[builtins.str]:
        """
        The placement group type enforced by the Placement Group.
        """
        return pulumi.get(self, "placement_group_type")


@pulumi.output_type
class InstanceSpecs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceleratedDevices":
            suggest = "accelerated_devices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSpecs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSpecs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSpecs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accelerated_devices: Optional[builtins.int] = None,
                 disk: Optional[builtins.int] = None,
                 gpus: Optional[builtins.int] = None,
                 memory: Optional[builtins.int] = None,
                 transfer: Optional[builtins.int] = None,
                 vcpus: Optional[builtins.int] = None):
        """
        :param builtins.int accelerated_devices: The number of VPUs this Linode has access to.
        :param builtins.int disk: The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
        :param builtins.int gpus: The number of GPUs this Linode has access to.
        :param builtins.int memory: The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
        :param builtins.int transfer: The amount of network transfer this Linode is allotted each month.
        :param builtins.int vcpus: The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
        """
        if accelerated_devices is not None:
            pulumi.set(__self__, "accelerated_devices", accelerated_devices)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if transfer is not None:
            pulumi.set(__self__, "transfer", transfer)
        if vcpus is not None:
            pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="acceleratedDevices")
    def accelerated_devices(self) -> Optional[builtins.int]:
        """
        The number of VPUs this Linode has access to.
        """
        return pulumi.get(self, "accelerated_devices")

    @property
    @pulumi.getter
    def disk(self) -> Optional[builtins.int]:
        """
        The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[builtins.int]:
        """
        The number of GPUs this Linode has access to.
        """
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def memory(self) -> Optional[builtins.int]:
        """
        The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def transfer(self) -> Optional[builtins.int]:
        """
        The amount of network transfer this Linode is allotted each month.
        """
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> Optional[builtins.int]:
        """
        The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class LkeClusterControlPlane(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highAvailability":
            suggest = "high_availability"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LkeClusterControlPlane. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LkeClusterControlPlane.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LkeClusterControlPlane.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl: Optional['outputs.LkeClusterControlPlaneAcl'] = None,
                 high_availability: Optional[builtins.bool] = None):
        """
        :param 'LkeClusterControlPlaneAclArgs' acl: Defines the ACL configuration for an LKE cluster's control plane.
        :param builtins.bool high_availability: Defines whether High Availability is enabled for the cluster Control Plane. This is an **irreversible** change.
               
               * `acl` - (Optional) Defines the ACL configuration for an LKE cluster's control plane.
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)

    @property
    @pulumi.getter
    def acl(self) -> Optional['outputs.LkeClusterControlPlaneAcl']:
        """
        Defines the ACL configuration for an LKE cluster's control plane.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[builtins.bool]:
        """
        Defines whether High Availability is enabled for the cluster Control Plane. This is an **irreversible** change.

        * `acl` - (Optional) Defines the ACL configuration for an LKE cluster's control plane.
        """
        return pulumi.get(self, "high_availability")


@pulumi.output_type
class LkeClusterControlPlaneAcl(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence['outputs.LkeClusterControlPlaneAclAddress']] = None,
                 enabled: Optional[builtins.bool] = None):
        """
        :param Sequence['LkeClusterControlPlaneAclAddressArgs'] addresses: A list of ip addresses to allow.
        :param builtins.bool enabled: Defines default policy. A value of true results in a default policy of DENY. A value of false results in default policy of ALLOW, and has the same effect as delete the ACL configuration.
               
               * `addresses` - (Optional) A list of ip addresses to allow.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.LkeClusterControlPlaneAclAddress']]:
        """
        A list of ip addresses to allow.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        """
        Defines default policy. A value of true results in a default policy of DENY. A value of false results in default policy of ALLOW, and has the same effect as delete the ACL configuration.

        * `addresses` - (Optional) A list of ip addresses to allow.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LkeClusterControlPlaneAclAddress(dict):
    def __init__(__self__, *,
                 ipv4s: Optional[Sequence[builtins.str]] = None,
                 ipv6s: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] ipv4s: A set of individual ipv4 addresses or CIDRs to ALLOW.
        :param Sequence[builtins.str] ipv6s: A set of individual ipv6 addresses or CIDRs to ALLOW.
        """
        if ipv4s is not None:
            pulumi.set(__self__, "ipv4s", ipv4s)
        if ipv6s is not None:
            pulumi.set(__self__, "ipv6s", ipv6s)

    @property
    @pulumi.getter
    def ipv4s(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of individual ipv4 addresses or CIDRs to ALLOW.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of individual ipv6 addresses or CIDRs to ALLOW.
        """
        return pulumi.get(self, "ipv6s")


@pulumi.output_type
class LkeClusterPool(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskEncryption":
            suggest = "disk_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LkeClusterPool. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LkeClusterPool.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LkeClusterPool.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 autoscaler: Optional['outputs.LkeClusterPoolAutoscaler'] = None,
                 count: Optional[builtins.int] = None,
                 disk_encryption: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None,
                 labels: Optional[Mapping[str, builtins.str]] = None,
                 nodes: Optional[Sequence['outputs.LkeClusterPoolNode']] = None,
                 tags: Optional[Sequence[builtins.str]] = None,
                 taints: Optional[Sequence['outputs.LkeClusterPoolTaint']] = None):
        """
        :param builtins.str type: A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        :param 'LkeClusterPoolAutoscalerArgs' autoscaler: When specified, the number of nodes autoscales within the defined minimum and maximum values.
        :param builtins.int count: The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
               
               * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
        :param builtins.str disk_encryption: The disk encryption policy for nodes in this pool.
        :param builtins.int id: The ID of the node.
        :param Mapping[str, builtins.str] labels: Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
        :param Sequence['LkeClusterPoolNodeArgs'] nodes: The nodes in the node pool.
        :param Sequence[builtins.str] tags: An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
        :param Sequence['LkeClusterPoolTaintArgs'] taints: Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
        """
        pulumi.set(__self__, "type", type)
        if autoscaler is not None:
            pulumi.set(__self__, "autoscaler", autoscaler)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if disk_encryption is not None:
            pulumi.set(__self__, "disk_encryption", disk_encryption)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def autoscaler(self) -> Optional['outputs.LkeClusterPoolAutoscaler']:
        """
        When specified, the number of nodes autoscales within the defined minimum and maximum values.
        """
        return pulumi.get(self, "autoscaler")

    @property
    @pulumi.getter
    def count(self) -> Optional[builtins.int]:
        """
        The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.

        * `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> Optional[builtins.str]:
        """
        The disk encryption policy for nodes in this pool.
        """
        return pulumi.get(self, "disk_encryption")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.LkeClusterPoolNode']]:
        """
        The nodes in the node pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[builtins.str]]:
        """
        An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.LkeClusterPoolTaint']]:
        """
        Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class LkeClusterPoolAutoscaler(dict):
    def __init__(__self__, *,
                 max: builtins.int,
                 min: builtins.int):
        """
        :param builtins.int max: The maximum number of nodes to autoscale to.
        :param builtins.int min: The minimum number of nodes to autoscale to.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> builtins.int:
        """
        The maximum number of nodes to autoscale to.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> builtins.int:
        """
        The minimum number of nodes to autoscale to.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class LkeClusterPoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LkeClusterPoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LkeClusterPoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LkeClusterPoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 instance_id: Optional[builtins.int] = None,
                 status: Optional[builtins.str] = None):
        """
        :param builtins.str id: The ID of the node.
        :param builtins.int instance_id: The ID of the underlying Linode instance.
        :param builtins.str status: The status of the node. (`ready`, `not_ready`)
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.int]:
        """
        The ID of the underlying Linode instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The status of the node. (`ready`, `not_ready`)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class LkeClusterPoolTaint(dict):
    def __init__(__self__, *,
                 effect: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str effect: The Kubernetes taint effect.
        :param builtins.str key: The Kubernetes taint key.
        :param builtins.str value: The Kubernetes taint value.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        """
        The Kubernetes taint effect.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The Kubernetes taint key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The Kubernetes taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LkeNodePoolAutoscaler(dict):
    def __init__(__self__, *,
                 max: builtins.int,
                 min: builtins.int):
        """
        :param builtins.int max: The maximum number of nodes to autoscale to.
        :param builtins.int min: The minimum number of nodes to autoscale to.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> builtins.int:
        """
        The maximum number of nodes to autoscale to.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> builtins.int:
        """
        The minimum number of nodes to autoscale to.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class LkeNodePoolNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LkeNodePoolNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LkeNodePoolNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LkeNodePoolNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: builtins.str,
                 instance_id: builtins.int,
                 status: builtins.str):
        """
        :param builtins.str id: The ID of the node.
        :param builtins.int instance_id: The ID of the underlying Linode instance.
        :param builtins.str status: The status of the node. (`ready`, `not_ready`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.int:
        """
        The ID of the underlying Linode instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the node. (`ready`, `not_ready`)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class LkeNodePoolTaint(dict):
    def __init__(__self__, *,
                 effect: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str effect: The Kubernetes taint effect. Accepted values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`. For the descriptions of these values, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
        :param builtins.str key: The Kubernetes taint key.
        :param builtins.str value: The Kubernetes taint value.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        """
        The Kubernetes taint effect. Accepted values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`. For the descriptions of these values, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The Kubernetes taint key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The Kubernetes taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetworkingIpAssignmentAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linodeId":
            suggest = "linode_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkingIpAssignmentAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkingIpAssignmentAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkingIpAssignmentAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: builtins.str,
                 linode_id: builtins.int):
        """
        :param builtins.str address: The IPv4 address or IPv6 range to assign.
        :param builtins.int linode_id: The ID of the Linode to which the IP address will be assigned.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The IPv4 address or IPv6 range to assign.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The ID of the Linode to which the IP address will be assigned.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class NodeBalancerConfigNodeStatus(dict):
    def __init__(__self__, *,
                 down: builtins.int,
                 up: builtins.int):
        """
        :param builtins.int down: The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        :param builtins.int up: The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        pulumi.set(__self__, "down", down)
        pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def down(self) -> builtins.int:
        """
        The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        """
        return pulumi.get(self, "down")

    @property
    @pulumi.getter
    def up(self) -> builtins.int:
        """
        The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        return pulumi.get(self, "up")


@pulumi.output_type
class NodeBalancerFirewall(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inboundPolicy":
            suggest = "inbound_policy"
        elif key == "outboundPolicy":
            suggest = "outbound_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeBalancerFirewall. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeBalancerFirewall.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeBalancerFirewall.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: builtins.str,
                 id: builtins.int,
                 inbound_policy: builtins.str,
                 inbounds: Sequence['outputs.NodeBalancerFirewallInbound'],
                 label: builtins.str,
                 outbound_policy: builtins.str,
                 outbounds: Sequence['outputs.NodeBalancerFirewallOutbound'],
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 updated: builtins.str):
        """
        :param builtins.str created: When this firewall was created.
        :param builtins.int id: (Required) The Firewall's ID.
        :param builtins.str inbound_policy: The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
        :param builtins.str label: The label of the Linode NodeBalancer
        :param builtins.str outbound_policy: The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
        :param builtins.str status: The status of the firewall. (`enabled`, `disabled`, `deleted`)
        :param Sequence[builtins.str] tags: A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.str updated: When this firewall was last updated.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inbound_policy", inbound_policy)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "outbound_policy", outbound_policy)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this firewall was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (Required) The Firewall's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> builtins.str:
        """
        The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "inbound_policy")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.NodeBalancerFirewallInbound']:
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Linode NodeBalancer
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> builtins.str:
        """
        The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "outbound_policy")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.NodeBalancerFirewallOutbound']:
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the firewall. (`enabled`, `disabled`, `deleted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this firewall was last updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class NodeBalancerFirewallInbound(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 description: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param builtins.str label: The label of the Linode NodeBalancer
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Linode NodeBalancer
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class NodeBalancerFirewallOutbound(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 description: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param builtins.str label: The label of the Linode NodeBalancer
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Linode NodeBalancer
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class NodeBalancerTransfer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "in":
            suggest = "in_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodeBalancerTransfer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodeBalancerTransfer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodeBalancerTransfer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_: builtins.float,
                 out: builtins.float,
                 total: builtins.float):
        """
        :param builtins.float in_: The total transfer, in MB, used by this NodeBalancer for the current month
        :param builtins.float out: The total inbound transfer, in MB, used for this NodeBalancer for the current month
        :param builtins.float total: The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        pulumi.set(__self__, "in_", in_)
        pulumi.set(__self__, "out", out)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="in")
    def in_(self) -> builtins.float:
        """
        The total transfer, in MB, used by this NodeBalancer for the current month
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def out(self) -> builtins.float:
        """
        The total inbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter
    def total(self) -> builtins.float:
        """
        The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class ObjectStorageBucketCert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageBucketCert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageBucketCert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageBucketCert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate: builtins.str,
                 private_key: builtins.str):
        """
        :param builtins.str certificate: The Base64 encoded and PEM formatted SSL certificate.
        :param builtins.str private_key: The private key associated with the TLS/SSL certificate.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter
    def certificate(self) -> builtins.str:
        """
        The Base64 encoded and PEM formatted SSL certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> builtins.str:
        """
        The private key associated with the TLS/SSL certificate.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class ObjectStorageBucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortIncompleteMultipartUploadDays":
            suggest = "abort_incomplete_multipart_upload_days"
        elif key == "noncurrentVersionExpiration":
            suggest = "noncurrent_version_expiration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageBucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageBucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageBucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: builtins.bool,
                 abort_incomplete_multipart_upload_days: Optional[builtins.int] = None,
                 expiration: Optional['outputs.ObjectStorageBucketLifecycleRuleExpiration'] = None,
                 id: Optional[builtins.str] = None,
                 noncurrent_version_expiration: Optional['outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration'] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.bool enabled: Specifies whether the lifecycle rule is active.
        :param builtins.int abort_incomplete_multipart_upload_days: Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
               
               * `expiration` - (Optional) Specifies a period in the object's expire.
               
               * `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.
        :param 'ObjectStorageBucketLifecycleRuleExpirationArgs' expiration: Specifies a period in the object's expire.
        :param builtins.str id: The unique identifier for the rule.
        :param 'ObjectStorageBucketLifecycleRuleNoncurrentVersionExpirationArgs' noncurrent_version_expiration: Specifies when non-current object versions expire.
        :param builtins.str prefix: The object key prefix identifying one or more objects to which the rule applies.
        """
        pulumi.set(__self__, "enabled", enabled)
        if abort_incomplete_multipart_upload_days is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload_days", abort_incomplete_multipart_upload_days)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if noncurrent_version_expiration is not None:
            pulumi.set(__self__, "noncurrent_version_expiration", noncurrent_version_expiration)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Specifies whether the lifecycle rule is active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    def abort_incomplete_multipart_upload_days(self) -> Optional[builtins.int]:
        """
        Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.

        * `expiration` - (Optional) Specifies a period in the object's expire.

        * `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.ObjectStorageBucketLifecycleRuleExpiration']:
        """
        Specifies a period in the object's expire.
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The unique identifier for the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional['outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration']:
        """
        Specifies when non-current object versions expire.
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        The object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class ObjectStorageBucketLifecycleRuleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiredObjectDeleteMarker":
            suggest = "expired_object_delete_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageBucketLifecycleRuleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageBucketLifecycleRuleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageBucketLifecycleRuleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[builtins.str] = None,
                 days: Optional[builtins.int] = None,
                 expired_object_delete_marker: Optional[builtins.bool] = None):
        """
        :param builtins.str date: Specifies the date after which you want the corresponding action to take effect.
        :param builtins.int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param builtins.bool expired_object_delete_marker: On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Linode Object Storage to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if expired_object_delete_marker is not None:
            pulumi.set(__self__, "expired_object_delete_marker", expired_object_delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[builtins.int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="expiredObjectDeleteMarker")
    def expired_object_delete_marker(self) -> Optional[builtins.bool]:
        """
        On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Linode Object Storage to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.
        """
        return pulumi.get(self, "expired_object_delete_marker")


@pulumi.output_type
class ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration(dict):
    def __init__(__self__, *,
                 days: builtins.int):
        """
        :param builtins.int days: Specifies the number of days non-current object versions expire.
        """
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        """
        Specifies the number of days non-current object versions expire.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class ObjectStorageKeyBucketAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageKeyBucketAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageKeyBucketAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageKeyBucketAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: builtins.str,
                 permissions: builtins.str,
                 cluster: Optional[builtins.str] = None,
                 region: Optional[builtins.str] = None):
        """
        :param builtins.str bucket_name: The unique label of the bucket to which the key will grant limited access.
        :param builtins.str permissions: This Limited Access Key’s permissions for the selected bucket. *Changing `permissions` forces the creation of a new Object Storage Key.* (`read_write`, `read_only`)
        :param builtins.str cluster: The Object Storage cluster where the bucket resides. Deprecated in favor of `region`.
        :param builtins.str region: The region where the bucket resides.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "permissions", permissions)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> builtins.str:
        """
        The unique label of the bucket to which the key will grant limited access.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        This Limited Access Key’s permissions for the selected bucket. *Changing `permissions` forces the creation of a new Object Storage Key.* (`read_write`, `read_only`)
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    @_utilities.deprecated("""The `cluster` attribute in a `bucket_access` block has been deprecated in favor of `region` attribute. A cluster value can be converted to a region value by removing -x at the end, for example, a cluster value `us-mia-1` can be converted to region value `us-mia`""")
    def cluster(self) -> Optional[builtins.str]:
        """
        The Object Storage cluster where the bucket resides. Deprecated in favor of `region`.
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        """
        The region where the bucket resides.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class ObjectStorageKeyRegionsDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointType":
            suggest = "endpoint_type"
        elif key == "s3Endpoint":
            suggest = "s3_endpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObjectStorageKeyRegionsDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObjectStorageKeyRegionsDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObjectStorageKeyRegionsDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_type: builtins.str,
                 id: builtins.str,
                 s3_endpoint: builtins.str):
        """
        :param builtins.str endpoint_type: The type of `s3_endpoint` available to the user in this region. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.
        :param builtins.str id: The ID of the region.
        :param builtins.str s3_endpoint: The S3-compatible hostname you can use to access the Object Storage buckets in this region.
        """
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "s3_endpoint", s3_endpoint)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> builtins.str:
        """
        The type of `s3_endpoint` available to the user in this region. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> builtins.str:
        """
        The S3-compatible hostname you can use to access the Object Storage buckets in this region.
        """
        return pulumi.get(self, "s3_endpoint")


@pulumi.output_type
class PlacementGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isCompliant":
            suggest = "is_compliant"
        elif key == "linodeId":
            suggest = "linode_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlacementGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlacementGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlacementGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_compliant: builtins.bool,
                 linode_id: builtins.int):
        """
        :param builtins.bool is_compliant: Whether this Linode is currently compliant with the group's placement group type.
        :param builtins.int linode_id: The ID of the Linode.
        """
        pulumi.set(__self__, "is_compliant", is_compliant)
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> builtins.bool:
        """
        Whether this Linode is currently compliant with the group's placement group type.
        """
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The ID of the Linode.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class RdnsTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[builtins.str] = None,
                 update: Optional[builtins.str] = None):
        """
        :param builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def update(self) -> Optional[builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class ReservedIpAssignmentVpcNat11(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReservedIpAssignmentVpcNat11. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReservedIpAssignmentVpcNat11.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReservedIpAssignmentVpcNat11.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class StackScriptUserDefinedField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manyOf":
            suggest = "many_of"
        elif key == "oneOf":
            suggest = "one_of"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StackScriptUserDefinedField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StackScriptUserDefinedField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StackScriptUserDefinedField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: builtins.str,
                 example: builtins.str,
                 label: builtins.str,
                 many_of: builtins.str,
                 name: builtins.str,
                 one_of: builtins.str):
        """
        :param builtins.str default: The default value. If not specified, this value will be used.
        :param builtins.str example: An example value for the field.
        :param builtins.str label: The StackScript's label is for display purposes only.
        :param builtins.str many_of: A list of acceptable values for the field in any quantity, combination or order.
        :param builtins.str name: The name of the field.
        :param builtins.str one_of: A list of acceptable single values for the field.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "many_of", many_of)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "one_of", one_of)

    @property
    @pulumi.getter
    def default(self) -> builtins.str:
        """
        The default value. If not specified, this value will be used.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def example(self) -> builtins.str:
        """
        An example value for the field.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The StackScript's label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="manyOf")
    def many_of(self) -> builtins.str:
        """
        A list of acceptable values for the field in any quantity, combination or order.
        """
        return pulumi.get(self, "many_of")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> builtins.str:
        """
        A list of acceptable single values for the field.
        """
        return pulumi.get(self, "one_of")


@pulumi.output_type
class UserDomainGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserFirewallGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserGlobalGrants(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountAccess":
            suggest = "account_access"
        elif key == "addDatabases":
            suggest = "add_databases"
        elif key == "addDomains":
            suggest = "add_domains"
        elif key == "addFirewalls":
            suggest = "add_firewalls"
        elif key == "addImages":
            suggest = "add_images"
        elif key == "addLinodes":
            suggest = "add_linodes"
        elif key == "addLongview":
            suggest = "add_longview"
        elif key == "addNodebalancers":
            suggest = "add_nodebalancers"
        elif key == "addPlacementGroups":
            suggest = "add_placement_groups"
        elif key == "addStackscripts":
            suggest = "add_stackscripts"
        elif key == "addVolumes":
            suggest = "add_volumes"
        elif key == "addVpcs":
            suggest = "add_vpcs"
        elif key == "cancelAccount":
            suggest = "cancel_account"
        elif key == "longviewSubscription":
            suggest = "longview_subscription"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGlobalGrants. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGlobalGrants.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGlobalGrants.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_access: Optional[builtins.str] = None,
                 add_databases: Optional[builtins.bool] = None,
                 add_domains: Optional[builtins.bool] = None,
                 add_firewalls: Optional[builtins.bool] = None,
                 add_images: Optional[builtins.bool] = None,
                 add_linodes: Optional[builtins.bool] = None,
                 add_longview: Optional[builtins.bool] = None,
                 add_nodebalancers: Optional[builtins.bool] = None,
                 add_placement_groups: Optional[builtins.bool] = None,
                 add_stackscripts: Optional[builtins.bool] = None,
                 add_volumes: Optional[builtins.bool] = None,
                 add_vpcs: Optional[builtins.bool] = None,
                 cancel_account: Optional[builtins.bool] = None,
                 longview_subscription: Optional[builtins.bool] = None):
        """
        :param builtins.str account_access: The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
        :param builtins.bool add_databases: If true, this User may add Databases.
        :param builtins.bool add_domains: If true, this User may add Domains.
        :param builtins.bool add_firewalls: If true, this User may add Firewalls.
        :param builtins.bool add_images: If true, this User may add Images.
        :param builtins.bool add_linodes: If true, this User may create Linodes.
        :param builtins.bool add_longview: If true, this User may create Longview clients and view the current plan.
        :param builtins.bool add_nodebalancers: If true, this User may add NodeBalancers.
        :param builtins.bool add_placement_groups: If true, this User may add Placement Groups.
        :param builtins.bool add_stackscripts: If true, this User may add StackScripts.
        :param builtins.bool add_volumes: If true, this User may add Volumes.
        :param builtins.bool add_vpcs: If true, this User may add Virtual Private Clouds (VPCs).
        :param builtins.bool cancel_account: If true, this User may cancel the entire Account.
        :param builtins.bool longview_subscription: If true, this User may manage the Account’s Longview subscription.
        """
        if account_access is not None:
            pulumi.set(__self__, "account_access", account_access)
        if add_databases is not None:
            pulumi.set(__self__, "add_databases", add_databases)
        if add_domains is not None:
            pulumi.set(__self__, "add_domains", add_domains)
        if add_firewalls is not None:
            pulumi.set(__self__, "add_firewalls", add_firewalls)
        if add_images is not None:
            pulumi.set(__self__, "add_images", add_images)
        if add_linodes is not None:
            pulumi.set(__self__, "add_linodes", add_linodes)
        if add_longview is not None:
            pulumi.set(__self__, "add_longview", add_longview)
        if add_nodebalancers is not None:
            pulumi.set(__self__, "add_nodebalancers", add_nodebalancers)
        if add_placement_groups is not None:
            pulumi.set(__self__, "add_placement_groups", add_placement_groups)
        if add_stackscripts is not None:
            pulumi.set(__self__, "add_stackscripts", add_stackscripts)
        if add_volumes is not None:
            pulumi.set(__self__, "add_volumes", add_volumes)
        if add_vpcs is not None:
            pulumi.set(__self__, "add_vpcs", add_vpcs)
        if cancel_account is not None:
            pulumi.set(__self__, "cancel_account", cancel_account)
        if longview_subscription is not None:
            pulumi.set(__self__, "longview_subscription", longview_subscription)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> Optional[builtins.str]:
        """
        The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
        """
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="addDatabases")
    def add_databases(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Databases.
        """
        return pulumi.get(self, "add_databases")

    @property
    @pulumi.getter(name="addDomains")
    def add_domains(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Domains.
        """
        return pulumi.get(self, "add_domains")

    @property
    @pulumi.getter(name="addFirewalls")
    def add_firewalls(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Firewalls.
        """
        return pulumi.get(self, "add_firewalls")

    @property
    @pulumi.getter(name="addImages")
    def add_images(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Images.
        """
        return pulumi.get(self, "add_images")

    @property
    @pulumi.getter(name="addLinodes")
    def add_linodes(self) -> Optional[builtins.bool]:
        """
        If true, this User may create Linodes.
        """
        return pulumi.get(self, "add_linodes")

    @property
    @pulumi.getter(name="addLongview")
    def add_longview(self) -> Optional[builtins.bool]:
        """
        If true, this User may create Longview clients and view the current plan.
        """
        return pulumi.get(self, "add_longview")

    @property
    @pulumi.getter(name="addNodebalancers")
    def add_nodebalancers(self) -> Optional[builtins.bool]:
        """
        If true, this User may add NodeBalancers.
        """
        return pulumi.get(self, "add_nodebalancers")

    @property
    @pulumi.getter(name="addPlacementGroups")
    def add_placement_groups(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Placement Groups.
        """
        return pulumi.get(self, "add_placement_groups")

    @property
    @pulumi.getter(name="addStackscripts")
    def add_stackscripts(self) -> Optional[builtins.bool]:
        """
        If true, this User may add StackScripts.
        """
        return pulumi.get(self, "add_stackscripts")

    @property
    @pulumi.getter(name="addVolumes")
    def add_volumes(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Volumes.
        """
        return pulumi.get(self, "add_volumes")

    @property
    @pulumi.getter(name="addVpcs")
    def add_vpcs(self) -> Optional[builtins.bool]:
        """
        If true, this User may add Virtual Private Clouds (VPCs).
        """
        return pulumi.get(self, "add_vpcs")

    @property
    @pulumi.getter(name="cancelAccount")
    def cancel_account(self) -> Optional[builtins.bool]:
        """
        If true, this User may cancel the entire Account.
        """
        return pulumi.get(self, "cancel_account")

    @property
    @pulumi.getter(name="longviewSubscription")
    def longview_subscription(self) -> Optional[builtins.bool]:
        """
        If true, this User may manage the Account’s Longview subscription.
        """
        return pulumi.get(self, "longview_subscription")


@pulumi.output_type
class UserImageGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserLinodeGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserLongviewGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserNodebalancerGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserPlacementGroupGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserStackscriptGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserVolumeGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class UserVpcGrant(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of the entity this grant applies to.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class VolumeTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[builtins.str] = None,
                 delete: Optional[builtins.str] = None,
                 update: Optional[builtins.str] = None):
        """
        :param builtins.str create: Used when creating the volume (until the volume is reaches the initial `active` state)
        :param builtins.str delete: Used when deleting the volume
        :param builtins.str update: Used when updating the volume when necessary during update - e.g. when resizing the volume
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[builtins.str]:
        """
        Used when creating the volume (until the volume is reaches the initial `active` state)
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[builtins.str]:
        """
        Used when deleting the volume
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[builtins.str]:
        """
        Used when updating the volume when necessary during update - e.g. when resizing the volume
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class VpcSubnetLinode(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 interfaces: Sequence['outputs.VpcSubnetLinodeInterface']):
        """
        :param builtins.int id: The ID of the VPC Subnet.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interfaces", interfaces)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the VPC Subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.VpcSubnetLinodeInterface']:
        return pulumi.get(self, "interfaces")


@pulumi.output_type
class VpcSubnetLinodeInterface(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 id: builtins.int):
        """
        :param builtins.int id: The ID of the VPC Subnet.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the VPC Subnet.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAccountAvailabilitiesAvailabilityResult(dict):
    def __init__(__self__, *,
                 availables: Sequence[builtins.str],
                 region: builtins.str,
                 unavailables: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] availables: A set of services which are available for the given region.
        :param builtins.str region: The region this availability entry refers to.
        :param Sequence[builtins.str] unavailables: A set of services that are unavailable for the given region.
        """
        pulumi.set(__self__, "availables", availables)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "unavailables", unavailables)

    @property
    @pulumi.getter
    def availables(self) -> Sequence[builtins.str]:
        """
        A set of services which are available for the given region.
        """
        return pulumi.get(self, "availables")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region this availability entry refers to.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def unavailables(self) -> Sequence[builtins.str]:
        """
        A set of services that are unavailable for the given region.
        """
        return pulumi.get(self, "unavailables")


@pulumi.output_type
class GetAccountAvailabilitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetAccountLoginsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetAccountLoginsLoginResult(dict):
    def __init__(__self__, *,
                 datetime: builtins.str,
                 id: builtins.int,
                 ip: builtins.str,
                 restricted: builtins.bool,
                 status: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str datetime: When the login was initiated.
        :param builtins.int id: The unique ID of this login object.
        :param builtins.str ip: The remote IP address that requested the login.
        :param builtins.bool restricted: True if the User that was logged into was a restricted User, false otherwise.
        :param builtins.str status: Whether the login attempt succeeded or failed.
        :param builtins.str username: The username of the User that was logged into.
        """
        pulumi.set(__self__, "datetime", datetime)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "restricted", restricted)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def datetime(self) -> builtins.str:
        """
        When the login was initiated.
        """
        return pulumi.get(self, "datetime")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID of this login object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> builtins.str:
        """
        The remote IP address that requested the login.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def restricted(self) -> builtins.bool:
        """
        True if the User that was logged into was a restricted User, false otherwise.
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Whether the login attempt succeeded or failed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        The username of the User that was logged into.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetChildAccountsChildAccountResult(dict):
    def __init__(__self__, *,
                 active_since: builtins.str,
                 address1: builtins.str,
                 address2: builtins.str,
                 balance: builtins.float,
                 capabilities: Sequence[builtins.str],
                 city: builtins.str,
                 company: builtins.str,
                 country: builtins.str,
                 email: builtins.str,
                 euuid: builtins.str,
                 first_name: builtins.str,
                 id: builtins.str,
                 last_name: builtins.str,
                 phone: builtins.str,
                 state: builtins.str,
                 zip: builtins.str):
        """
        :param builtins.str active_since: When this account was first activated
        :param builtins.str address1: First line of this Account's billing address.
        :param builtins.str address2: Second line of this Account's billing address.
        :param builtins.float balance: This Account's balance, in US dollars.
        :param Sequence[builtins.str] capabilities: A set containing all the capabilities of this Account.
        :param builtins.str city: The city for this Account's billing address.
        :param builtins.str company: The company name associated with this Account.
        :param builtins.str country: The two-letter country code of this Account's billing address.
        :param builtins.str email: The email address for this Account, for account management communications, and may be used for other communications as configured.
        :param builtins.str euuid: The unique ID of this Account.
        :param builtins.str first_name: The first name of the person associated with this Account.
        :param builtins.str id: The Email of the Account.
        :param builtins.str last_name: The last name of the person associated with this Account.
        :param builtins.str phone: The phone number associated with this Account.
        :param builtins.str state: If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.
        :param builtins.str zip: The zip code of this Account's billing address.
        """
        pulumi.set(__self__, "active_since", active_since)
        pulumi.set(__self__, "address1", address1)
        pulumi.set(__self__, "address2", address2)
        pulumi.set(__self__, "balance", balance)
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "company", company)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "euuid", euuid)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "phone", phone)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "zip", zip)

    @property
    @pulumi.getter(name="activeSince")
    def active_since(self) -> builtins.str:
        """
        When this account was first activated
        """
        return pulumi.get(self, "active_since")

    @property
    @pulumi.getter
    def address1(self) -> builtins.str:
        """
        First line of this Account's billing address.
        """
        return pulumi.get(self, "address1")

    @property
    @pulumi.getter
    def address2(self) -> builtins.str:
        """
        Second line of this Account's billing address.
        """
        return pulumi.get(self, "address2")

    @property
    @pulumi.getter
    def balance(self) -> builtins.float:
        """
        This Account's balance, in US dollars.
        """
        return pulumi.get(self, "balance")

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[builtins.str]:
        """
        A set containing all the capabilities of this Account.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def city(self) -> builtins.str:
        """
        The city for this Account's billing address.
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def company(self) -> builtins.str:
        """
        The company name associated with this Account.
        """
        return pulumi.get(self, "company")

    @property
    @pulumi.getter
    def country(self) -> builtins.str:
        """
        The two-letter country code of this Account's billing address.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        """
        The email address for this Account, for account management communications, and may be used for other communications as configured.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def euuid(self) -> builtins.str:
        """
        The unique ID of this Account.
        """
        return pulumi.get(self, "euuid")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> builtins.str:
        """
        The first name of the person associated with this Account.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The Email of the Account.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> builtins.str:
        """
        The last name of the person associated with this Account.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def phone(self) -> builtins.str:
        """
        The phone number associated with this Account.
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def zip(self) -> builtins.str:
        """
        The zip code of this Account's billing address.
        """
        return pulumi.get(self, "zip")


@pulumi.output_type
class GetChildAccountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseBackupsBackupResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str created: A time value given in a combined date and time format that represents when the database backup was created.
        :param builtins.int id: The ID of the database backup object.
        :param builtins.str label: The database backup’s label, for display purposes only.
        :param builtins.str type: The type of database backup, determined by how the backup was created.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        A time value given in a combined date and time format that represents when the database backup was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the database backup object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The database backup’s label, for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of database backup, determined by how the backup was created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabaseBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseEnginesEngineResult(dict):
    def __init__(__self__, *,
                 engine: builtins.str,
                 id: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str engine: The Managed Database engine type.
        :param builtins.str id: The Managed Database engine ID in engine/version format.
        :param builtins.str version: The Managed Database engine version.
        """
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The Managed Database engine type.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The Managed Database engine ID in engine/version format.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The Managed Database engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatabaseEnginesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseMysqlBackupsBackupResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str created: A time value given in a combined date and time format that represents when the database backup was created.
        :param builtins.int id: The ID of the database backup object.
        :param builtins.str label: The database backup’s label, for display purposes only.
        :param builtins.str type: The type of database backup, determined by how the backup was created.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        A time value given in a combined date and time format that represents when the database backup was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the database backup object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The database backup’s label, for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of database backup, determined by how the backup was created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabaseMysqlBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDatabaseMysqlUpdateResult(dict):
    def __init__(__self__, *,
                 day_of_week: builtins.str,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int,
                 week_of_month: builtins.int):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)
        pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> builtins.int:
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class GetDatabaseMysqlV2PendingUpdateResult(dict):
    def __init__(__self__, *,
                 deadline: builtins.str,
                 description: builtins.str,
                 planned_for: builtins.str):
        pulumi.set(__self__, "deadline", deadline)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "planned_for", planned_for)

    @property
    @pulumi.getter
    def deadline(self) -> builtins.str:
        return pulumi.get(self, "deadline")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="plannedFor")
    def planned_for(self) -> builtins.str:
        return pulumi.get(self, "planned_for")


@pulumi.output_type
class GetDatabaseMysqlV2UpdatesResult(dict):
    def __init__(__self__, *,
                 day_of_week: builtins.int,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.int:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        return pulumi.get(self, "hour_of_day")


@pulumi.output_type
class GetDatabasePostgresqlUpdateResult(dict):
    def __init__(__self__, *,
                 day_of_week: builtins.str,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int,
                 week_of_month: builtins.int):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)
        pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.str:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> builtins.int:
        return pulumi.get(self, "week_of_month")


@pulumi.output_type
class GetDatabasePostgresqlV2PendingUpdateResult(dict):
    def __init__(__self__, *,
                 deadline: builtins.str,
                 description: builtins.str,
                 planned_for: builtins.str):
        pulumi.set(__self__, "deadline", deadline)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "planned_for", planned_for)

    @property
    @pulumi.getter
    def deadline(self) -> builtins.str:
        return pulumi.get(self, "deadline")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="plannedFor")
    def planned_for(self) -> builtins.str:
        return pulumi.get(self, "planned_for")


@pulumi.output_type
class GetDatabasePostgresqlV2UpdatesResult(dict):
    def __init__(__self__, *,
                 day_of_week: builtins.int,
                 duration: builtins.int,
                 frequency: builtins.str,
                 hour_of_day: builtins.int):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "hour_of_day", hour_of_day)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> builtins.int:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> builtins.int:
        return pulumi.get(self, "hour_of_day")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 allow_lists: Sequence[builtins.str],
                 cluster_size: builtins.int,
                 created: builtins.str,
                 encrypted: builtins.bool,
                 engine: builtins.str,
                 host_primary: builtins.str,
                 host_secondary: builtins.str,
                 id: builtins.int,
                 instance_uri: builtins.str,
                 label: builtins.str,
                 region: builtins.str,
                 replication_type: builtins.str,
                 ssl_connection: builtins.bool,
                 status: builtins.str,
                 type: builtins.str,
                 updated: builtins.str,
                 version: builtins.str):
        """
        :param Sequence[builtins.str] allow_lists: A list of IP addresses that can access the Managed Database.
        :param builtins.int cluster_size: The number of Linode Instance nodes deployed to the Managed Database.
        :param builtins.str created: When this Managed Database was created.
        :param builtins.bool encrypted: Whether the Managed Databases is encrypted.
        :param builtins.str engine: The Managed Database engine.
        :param builtins.str host_primary: The primary host for the Managed Database.
        :param builtins.str host_secondary: The secondary/private network host for the Managed Database.
        :param builtins.int id: The ID of the Managed Database.
        :param builtins.str instance_uri: he API route for the database instance.
        :param builtins.str label: A unique, user-defined string referring to the Managed Database.
        :param builtins.str region: The region to use for the Managed Database.
        :param builtins.str replication_type: The replication method used for the Managed Database.
        :param builtins.bool ssl_connection: Whether to require SSL credentials to establish a connection to the Managed Database.
        :param builtins.str status: The operating status of the Managed Database.
        :param builtins.str type: The Linode Instance type used for the nodes of the  Managed Database instance.
        :param builtins.str updated: When this Managed Database was last updated.
        :param builtins.str version: The Managed Database engine version.
        """
        pulumi.set(__self__, "allow_lists", allow_lists)
        pulumi.set(__self__, "cluster_size", cluster_size)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "host_primary", host_primary)
        pulumi.set(__self__, "host_secondary", host_secondary)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_uri", instance_uri)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replication_type", replication_type)
        pulumi.set(__self__, "ssl_connection", ssl_connection)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated", updated)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="allowLists")
    def allow_lists(self) -> Sequence[builtins.str]:
        """
        A list of IP addresses that can access the Managed Database.
        """
        return pulumi.get(self, "allow_lists")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> builtins.int:
        """
        The number of Linode Instance nodes deployed to the Managed Database.
        """
        return pulumi.get(self, "cluster_size")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this Managed Database was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def encrypted(self) -> builtins.bool:
        """
        Whether the Managed Databases is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def engine(self) -> builtins.str:
        """
        The Managed Database engine.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="hostPrimary")
    def host_primary(self) -> builtins.str:
        """
        The primary host for the Managed Database.
        """
        return pulumi.get(self, "host_primary")

    @property
    @pulumi.getter(name="hostSecondary")
    def host_secondary(self) -> builtins.str:
        """
        The secondary/private network host for the Managed Database.
        """
        return pulumi.get(self, "host_secondary")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Managed Database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceUri")
    def instance_uri(self) -> builtins.str:
        """
        he API route for the database instance.
        """
        return pulumi.get(self, "instance_uri")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A unique, user-defined string referring to the Managed Database.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region to use for the Managed Database.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicationType")
    def replication_type(self) -> builtins.str:
        """
        The replication method used for the Managed Database.
        """
        return pulumi.get(self, "replication_type")

    @property
    @pulumi.getter(name="sslConnection")
    def ssl_connection(self) -> builtins.bool:
        """
        Whether to require SSL credentials to establish a connection to the Managed Database.
        """
        return pulumi.get(self, "ssl_connection")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The operating status of the Managed Database.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The Linode Instance type used for the nodes of the  Managed Database instance.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this Managed Database was last updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The Managed Database engine version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetDomainsDomainResult(dict):
    def __init__(__self__, *,
                 axfr_ips: Sequence[builtins.str],
                 description: builtins.str,
                 expire_sec: builtins.int,
                 group: builtins.str,
                 master_ips: Sequence[builtins.str],
                 refresh_sec: builtins.int,
                 retry_sec: builtins.int,
                 soa_email: builtins.str,
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 ttl_sec: builtins.int,
                 type: builtins.str,
                 domain: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None):
        """
        :param Sequence[builtins.str] axfr_ips: The list of IPs that may perform a zone transfer for this Domain.
        :param builtins.str description: A description for this Domain.
        :param builtins.int expire_sec: The amount of time in seconds that may pass before this Domain is no longer authoritative.
        :param builtins.str group: The group this Domain belongs to.
        :param Sequence[builtins.str] master_ips: The IP addresses representing the master DNS for this Domain.
        :param builtins.int refresh_sec: The amount of time in seconds before this Domain should be refreshed.
        :param builtins.int retry_sec: The interval, in seconds, at which a failed refresh should be retried.
        :param builtins.str soa_email: Start of Authority email address.
        :param builtins.str status: Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
        :param Sequence[builtins.str] tags: An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.int ttl_sec: 'Time to Live'-the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
        :param builtins.str type: If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
        :param builtins.str domain: The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
        :param builtins.int id: The unique ID of this Domain.
        """
        pulumi.set(__self__, "axfr_ips", axfr_ips)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expire_sec", expire_sec)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "master_ips", master_ips)
        pulumi.set(__self__, "refresh_sec", refresh_sec)
        pulumi.set(__self__, "retry_sec", retry_sec)
        pulumi.set(__self__, "soa_email", soa_email)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "ttl_sec", ttl_sec)
        pulumi.set(__self__, "type", type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="axfrIps")
    def axfr_ips(self) -> Sequence[builtins.str]:
        """
        The list of IPs that may perform a zone transfer for this Domain.
        """
        return pulumi.get(self, "axfr_ips")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A description for this Domain.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expireSec")
    def expire_sec(self) -> builtins.int:
        """
        The amount of time in seconds that may pass before this Domain is no longer authoritative.
        """
        return pulumi.get(self, "expire_sec")

    @property
    @pulumi.getter
    def group(self) -> builtins.str:
        """
        The group this Domain belongs to.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="masterIps")
    def master_ips(self) -> Sequence[builtins.str]:
        """
        The IP addresses representing the master DNS for this Domain.
        """
        return pulumi.get(self, "master_ips")

    @property
    @pulumi.getter(name="refreshSec")
    def refresh_sec(self) -> builtins.int:
        """
        The amount of time in seconds before this Domain should be refreshed.
        """
        return pulumi.get(self, "refresh_sec")

    @property
    @pulumi.getter(name="retrySec")
    def retry_sec(self) -> builtins.int:
        """
        The interval, in seconds, at which a failed refresh should be retried.
        """
        return pulumi.get(self, "retry_sec")

    @property
    @pulumi.getter(name="soaEmail")
    def soa_email(self) -> builtins.str:
        """
        Start of Authority email address.
        """
        return pulumi.get(self, "soa_email")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="ttlSec")
    def ttl_sec(self) -> builtins.int:
        """
        'Time to Live'-the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
        """
        return pulumi.get(self, "ttl_sec")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def domain(self) -> Optional[builtins.str]:
        """
        The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        The unique ID of this Domain.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDomainsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetFirewallDeviceResult(dict):
    def __init__(__self__, *,
                 entity_id: builtins.int,
                 id: builtins.int,
                 label: builtins.str,
                 type: builtins.str,
                 url: builtins.str):
        """
        :param builtins.int entity_id: The ID of the underlying entity this device references (i.e. the Linode's ID).
        :param builtins.int id: The Firewall's ID.
        :param builtins.str label: The label of the underlying entity this device references.
        :param builtins.str type: The type of Firewall Device.
        :param builtins.str url: The URL of the underlying entity this device references.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> builtins.int:
        """
        The ID of the underlying entity this device references (i.e. the Linode's ID).
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The Firewall's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the underlying entity this device references.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Firewall Device.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The URL of the underlying entity this device references.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFirewallInboundResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 description: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param builtins.str label: The label of the underlying entity this device references.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the underlying entity this device references.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallOutboundResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 description: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param builtins.str label: The label of the underlying entity this device references.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the underlying entity this device references.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetFirewallsFirewallResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 disabled: builtins.bool,
                 id: builtins.int,
                 inbound_policy: builtins.str,
                 label: builtins.str,
                 linodes: Sequence[builtins.int],
                 nodebalancers: Sequence[builtins.int],
                 outbound_policy: builtins.str,
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 updated: builtins.str,
                 devices: Optional[Sequence['outputs.GetFirewallsFirewallDeviceResult']] = None,
                 inbounds: Optional[Sequence['outputs.GetFirewallsFirewallInboundResult']] = None,
                 outbounds: Optional[Sequence['outputs.GetFirewallsFirewallOutboundResult']] = None):
        """
        :param builtins.str created: When this firewall was created.
        :param builtins.bool disabled: If true, the Firewall is inactive.
        :param builtins.int id: The unique ID assigned to this Firewall.
        :param builtins.str inbound_policy: The default behavior for inbound traffic.
        :param builtins.str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        :param Sequence[builtins.int] linodes: The IDs of Linodes this firewall is applied to.
        :param Sequence[builtins.int] nodebalancers: The IDs of NodeBalancers assigned to this Firewall..
        :param builtins.str outbound_policy: The default behavior for outbound traffic.
        :param builtins.str status: The status of the firewall.
        :param Sequence[builtins.str] tags: An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.str updated: When this firewall was last updated.
        :param Sequence['GetFirewallsFirewallDeviceArgs'] devices: The devices associated with this firewall.
        :param Sequence['GetFirewallsFirewallInboundArgs'] inbounds: A set of firewall rules that specify what inbound network traffic is allowed.
        :param Sequence['GetFirewallsFirewallOutboundArgs'] outbounds: A set of firewall rules that specify what outbound network traffic is allowed.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inbound_policy", inbound_policy)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "linodes", linodes)
        pulumi.set(__self__, "nodebalancers", nodebalancers)
        pulumi.set(__self__, "outbound_policy", outbound_policy)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated", updated)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if inbounds is not None:
            pulumi.set(__self__, "inbounds", inbounds)
        if outbounds is not None:
            pulumi.set(__self__, "outbounds", outbounds)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this firewall was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disabled(self) -> builtins.bool:
        """
        If true, the Firewall is inactive.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID assigned to this Firewall.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> builtins.str:
        """
        The default behavior for inbound traffic.
        """
        return pulumi.get(self, "inbound_policy")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def linodes(self) -> Sequence[builtins.int]:
        """
        The IDs of Linodes this firewall is applied to.
        """
        return pulumi.get(self, "linodes")

    @property
    @pulumi.getter
    def nodebalancers(self) -> Sequence[builtins.int]:
        """
        The IDs of NodeBalancers assigned to this Firewall..
        """
        return pulumi.get(self, "nodebalancers")

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> builtins.str:
        """
        The default behavior for outbound traffic.
        """
        return pulumi.get(self, "outbound_policy")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the firewall.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this firewall was last updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.GetFirewallsFirewallDeviceResult']]:
        """
        The devices associated with this firewall.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def inbounds(self) -> Optional[Sequence['outputs.GetFirewallsFirewallInboundResult']]:
        """
        A set of firewall rules that specify what inbound network traffic is allowed.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Optional[Sequence['outputs.GetFirewallsFirewallOutboundResult']]:
        """
        A set of firewall rules that specify what outbound network traffic is allowed.
        """
        return pulumi.get(self, "outbounds")


@pulumi.output_type
class GetFirewallsFirewallDeviceResult(dict):
    def __init__(__self__, *,
                 entity_id: builtins.int,
                 id: builtins.int,
                 label: builtins.str,
                 type: builtins.str,
                 url: builtins.str):
        """
        :param builtins.int entity_id: The ID of the underlying entity this device references (i.e. the Linode's ID).
        :param builtins.int id: The unique ID assigned to this Firewall.
        :param builtins.str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        :param builtins.str type: The type of Firewall Device.
        :param builtins.str url: The URL of the underlying entity this device references.
        """
        pulumi.set(__self__, "entity_id", entity_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> builtins.int:
        """
        The ID of the underlying entity this device references (i.e. the Linode's ID).
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID assigned to this Firewall.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of Firewall Device.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The URL of the underlying entity this device references.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetFirewallsFirewallInboundResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks in IP/mask format.
        :param builtins.str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (TCP, UDP, ICMP)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (TCP, UDP, ICMP)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetFirewallsFirewallOutboundResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks in IP/mask format.
        :param builtins.str label: The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (TCP, UDP, ICMP)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (TCP, UDP, ICMP)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetImageReplicationResult(dict):
    def __init__(__self__, *,
                 region: builtins.str,
                 status: builtins.str):
        """
        :param builtins.str region: The region of an image replica.
        :param builtins.str status: The status of an image replica.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region of an image replica.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of an image replica.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence[builtins.str],
                 created: builtins.str,
                 created_by: builtins.str,
                 deprecated: builtins.bool,
                 description: builtins.str,
                 expiry: builtins.str,
                 id: builtins.str,
                 is_public: builtins.bool,
                 label: builtins.str,
                 size: builtins.int,
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 total_size: builtins.int,
                 type: builtins.str,
                 vendor: builtins.str,
                 replications: Optional[Sequence['outputs.GetImagesImageReplicationResult']] = None):
        """
        :param Sequence[builtins.str] capabilities: The capabilities of this Image.
        :param builtins.str created: When this Image was created.
        :param builtins.str created_by: The name of the User who created this Image, or "linode" for official Images.
        :param builtins.bool deprecated: Whether or not this Image is deprecated. Will only be true for deprecated public Images.
        :param builtins.str description: A detailed description of this Image.
        :param builtins.str expiry: Only Images created automatically (from a deleted Linode; type=automatic) will expire.
        :param builtins.str id: The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
        :param builtins.bool is_public: True if the Image is public.
        :param builtins.str label: A short description of the Image.
        :param builtins.int size: The minimum size this Image needs to deploy. Size is in MB. example: 2500
        :param builtins.str status: The status of an image replica.
        :param Sequence[builtins.str] tags: A list of customized tags.
        :param builtins.int total_size: The total size of the image in all available regions.
        :param builtins.str type: How the Image was created. Manual Images can be created at any time. "Automatic" Images are created automatically from a deleted Linode. (`manual`, `automatic`)
        :param builtins.str vendor: The upstream distribution vendor. `None` for private Images.
        :param Sequence['GetImagesImageReplicationArgs'] replications: A list of image replication regions and corresponding status.
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expiry", expiry)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "total_size", total_size)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vendor", vendor)
        if replications is not None:
            pulumi.set(__self__, "replications", replications)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[builtins.str]:
        """
        The capabilities of this Image.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this Image was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The name of the User who created this Image, or "linode" for official Images.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def deprecated(self) -> builtins.bool:
        """
        Whether or not this Image is deprecated. Will only be true for deprecated public Images.
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A detailed description of this Image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expiry(self) -> builtins.str:
        """
        Only Images created automatically (from a deleted Linode; type=automatic) will expire.
        """
        return pulumi.get(self, "expiry")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> builtins.bool:
        """
        True if the Image is public.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A short description of the Image.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The minimum size this Image needs to deploy. Size is in MB. example: 2500
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of an image replica.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        A list of customized tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> builtins.int:
        """
        The total size of the image in all available regions.
        """
        return pulumi.get(self, "total_size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        How the Image was created. Manual Images can be created at any time. "Automatic" Images are created automatically from a deleted Linode. (`manual`, `automatic`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vendor(self) -> builtins.str:
        """
        The upstream distribution vendor. `None` for private Images.
        """
        return pulumi.get(self, "vendor")

    @property
    @pulumi.getter
    def replications(self) -> Optional[Sequence['outputs.GetImagesImageReplicationResult']]:
        """
        A list of image replication regions and corresponding status.
        """
        return pulumi.get(self, "replications")


@pulumi.output_type
class GetImagesImageReplicationResult(dict):
    def __init__(__self__, *,
                 region: builtins.str,
                 status: builtins.str):
        """
        :param builtins.str region: The region of an image replica.
        :param builtins.str status: The status of an image replica.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region of an image replica.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of an image replica.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstanceBackupsAutomaticResult(dict):
    def __init__(__self__, *,
                 available: builtins.bool,
                 configs: Sequence[builtins.str],
                 created: builtins.str,
                 disks: Sequence['outputs.GetInstanceBackupsAutomaticDiskResult'],
                 finished: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 status: builtins.str,
                 type: builtins.str,
                 updated: builtins.str):
        """
        :param Sequence[builtins.str] configs: A list of the labels of the Configuration profiles that are part of the Backup.
        :param builtins.str created: The date the Backup was taken.
        :param builtins.str finished: The date the Backup completed.
        :param builtins.int id: The unique ID of this Backup.
        :param builtins.str label: The label of this disk.
        :param builtins.str status: The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        :param builtins.str type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        :param builtins.str updated: The date the Backup was most recently updated.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "finished", finished)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def available(self) -> builtins.bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configs(self) -> Sequence[builtins.str]:
        """
        A list of the labels of the Configuration profiles that are part of the Backup.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date the Backup was taken.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstanceBackupsAutomaticDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def finished(self) -> builtins.str:
        """
        The date the Backup completed.
        """
        return pulumi.get(self, "finished")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID of this Backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        The date the Backup was most recently updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetInstanceBackupsAutomaticDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: builtins.str,
                 label: builtins.str,
                 size: builtins.int):
        """
        :param builtins.str filesystem: The filesystem of this disk.
        :param builtins.str label: The label of this disk.
        :param builtins.int size: The size of this disk.
        """
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> builtins.str:
        """
        The filesystem of this disk.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The size of this disk.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstanceBackupsCurrentResult(dict):
    def __init__(__self__, *,
                 available: builtins.bool,
                 configs: Sequence[builtins.str],
                 created: builtins.str,
                 disks: Sequence['outputs.GetInstanceBackupsCurrentDiskResult'],
                 finished: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 status: builtins.str,
                 type: builtins.str,
                 updated: builtins.str):
        """
        :param Sequence[builtins.str] configs: A list of the labels of the Configuration profiles that are part of the Backup.
        :param builtins.str created: The date the Backup was taken.
        :param builtins.str finished: The date the Backup completed.
        :param builtins.int id: The unique ID of this Backup.
        :param builtins.str label: The label of this disk.
        :param builtins.str status: The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        :param builtins.str type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        :param builtins.str updated: The date the Backup was most recently updated.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "finished", finished)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def available(self) -> builtins.bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configs(self) -> Sequence[builtins.str]:
        """
        A list of the labels of the Configuration profiles that are part of the Backup.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date the Backup was taken.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstanceBackupsCurrentDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def finished(self) -> builtins.str:
        """
        The date the Backup completed.
        """
        return pulumi.get(self, "finished")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID of this Backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        The date the Backup was most recently updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetInstanceBackupsCurrentDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: builtins.str,
                 label: builtins.str,
                 size: builtins.int):
        """
        :param builtins.str filesystem: The filesystem of this disk.
        :param builtins.str label: The label of this disk.
        :param builtins.int size: The size of this disk.
        """
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> builtins.str:
        """
        The filesystem of this disk.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The size of this disk.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstanceBackupsInProgressResult(dict):
    def __init__(__self__, *,
                 available: builtins.bool,
                 configs: Sequence[builtins.str],
                 created: builtins.str,
                 disks: Sequence['outputs.GetInstanceBackupsInProgressDiskResult'],
                 finished: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 status: builtins.str,
                 type: builtins.str,
                 updated: builtins.str):
        """
        :param Sequence[builtins.str] configs: A list of the labels of the Configuration profiles that are part of the Backup.
        :param builtins.str created: The date the Backup was taken.
        :param builtins.str finished: The date the Backup completed.
        :param builtins.int id: The unique ID of this Backup.
        :param builtins.str label: The label of this disk.
        :param builtins.str status: The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        :param builtins.str type: This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        :param builtins.str updated: The date the Backup was most recently updated.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "finished", finished)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def available(self) -> builtins.bool:
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def configs(self) -> Sequence[builtins.str]:
        """
        A list of the labels of the Configuration profiles that are part of the Backup.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date the Backup was taken.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstanceBackupsInProgressDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def finished(self) -> builtins.str:
        """
        The date the Backup completed.
        """
        return pulumi.get(self, "finished")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID of this Backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        The date the Backup was most recently updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetInstanceBackupsInProgressDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: builtins.str,
                 label: builtins.str,
                 size: builtins.int):
        """
        :param builtins.str filesystem: The filesystem of this disk.
        :param builtins.str label: The label of this disk.
        :param builtins.int size: The size of this disk.
        """
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> builtins.str:
        """
        The filesystem of this disk.
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of this disk.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The size of this disk.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstanceNetworkingIpv4Result(dict):
    def __init__(__self__, *,
                 privates: Sequence['outputs.GetInstanceNetworkingIpv4PrivateResult'],
                 publics: Sequence['outputs.GetInstanceNetworkingIpv4PublicResult'],
                 reserveds: Sequence['outputs.GetInstanceNetworkingIpv4ReservedResult'],
                 shareds: Sequence['outputs.GetInstanceNetworkingIpv4SharedResult'],
                 vpcs: Sequence['outputs.GetInstanceNetworkingIpv4VpcResult']):
        """
        :param Sequence['GetInstanceNetworkingIpv4PublicArgs'] publics: Whether this is a public or private IP address.
        """
        pulumi.set(__self__, "privates", privates)
        pulumi.set(__self__, "publics", publics)
        pulumi.set(__self__, "reserveds", reserveds)
        pulumi.set(__self__, "shareds", shareds)
        pulumi.set(__self__, "vpcs", vpcs)

    @property
    @pulumi.getter
    def privates(self) -> Sequence['outputs.GetInstanceNetworkingIpv4PrivateResult']:
        return pulumi.get(self, "privates")

    @property
    @pulumi.getter
    def publics(self) -> Sequence['outputs.GetInstanceNetworkingIpv4PublicResult']:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "publics")

    @property
    @pulumi.getter
    def reserveds(self) -> Sequence['outputs.GetInstanceNetworkingIpv4ReservedResult']:
        return pulumi.get(self, "reserveds")

    @property
    @pulumi.getter
    def shareds(self) -> Sequence['outputs.GetInstanceNetworkingIpv4SharedResult']:
        return pulumi.get(self, "shareds")

    @property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetInstanceNetworkingIpv4VpcResult']:
        return pulumi.get(self, "vpcs")


@pulumi.output_type
class GetInstanceNetworkingIpv4PrivateResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 subnet_mask: builtins.str,
                 type: builtins.str,
                 vpc_nat11: 'outputs.GetInstanceNetworkingIpv4PrivateVpcNat11Result'):
        """
        :param builtins.str address: The address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.int prefix: The network prefix.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.str type: The type of address this is.
        :param 'GetInstanceNetworkingIpv4PrivateVpcNat11Args' vpc_nat11: IPv4 address configured as a 1:1 NAT for this Interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_nat11", vpc_nat11)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcNat11")
    def vpc_nat11(self) -> 'outputs.GetInstanceNetworkingIpv4PrivateVpcNat11Result':
        """
        IPv4 address configured as a 1:1 NAT for this Interface.
        """
        return pulumi.get(self, "vpc_nat11")


@pulumi.output_type
class GetInstanceNetworkingIpv4PrivateVpcNat11Result(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The address.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceNetworkingIpv4PublicResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 subnet_mask: builtins.str,
                 type: builtins.str,
                 vpc_nat11: 'outputs.GetInstanceNetworkingIpv4PublicVpcNat11Result'):
        """
        :param builtins.str address: The address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.int prefix: The network prefix.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.str type: The type of address this is.
        :param 'GetInstanceNetworkingIpv4PublicVpcNat11Args' vpc_nat11: IPv4 address configured as a 1:1 NAT for this Interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_nat11", vpc_nat11)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcNat11")
    def vpc_nat11(self) -> 'outputs.GetInstanceNetworkingIpv4PublicVpcNat11Result':
        """
        IPv4 address configured as a 1:1 NAT for this Interface.
        """
        return pulumi.get(self, "vpc_nat11")


@pulumi.output_type
class GetInstanceNetworkingIpv4PublicVpcNat11Result(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The address.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceNetworkingIpv4ReservedResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 subnet_mask: builtins.str,
                 type: builtins.str,
                 vpc_nat11: 'outputs.GetInstanceNetworkingIpv4ReservedVpcNat11Result'):
        """
        :param builtins.str address: The address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.int prefix: The network prefix.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.str type: The type of address this is.
        :param 'GetInstanceNetworkingIpv4ReservedVpcNat11Args' vpc_nat11: IPv4 address configured as a 1:1 NAT for this Interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_nat11", vpc_nat11)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcNat11")
    def vpc_nat11(self) -> 'outputs.GetInstanceNetworkingIpv4ReservedVpcNat11Result':
        """
        IPv4 address configured as a 1:1 NAT for this Interface.
        """
        return pulumi.get(self, "vpc_nat11")


@pulumi.output_type
class GetInstanceNetworkingIpv4ReservedVpcNat11Result(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The address.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceNetworkingIpv4SharedResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 subnet_mask: builtins.str,
                 type: builtins.str,
                 vpc_nat11: 'outputs.GetInstanceNetworkingIpv4SharedVpcNat11Result'):
        """
        :param builtins.str address: The address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.int prefix: The network prefix.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.str type: The type of address this is.
        :param 'GetInstanceNetworkingIpv4SharedVpcNat11Args' vpc_nat11: IPv4 address configured as a 1:1 NAT for this Interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_nat11", vpc_nat11)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcNat11")
    def vpc_nat11(self) -> 'outputs.GetInstanceNetworkingIpv4SharedVpcNat11Result':
        """
        IPv4 address configured as a 1:1 NAT for this Interface.
        """
        return pulumi.get(self, "vpc_nat11")


@pulumi.output_type
class GetInstanceNetworkingIpv4SharedVpcNat11Result(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The address.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceNetworkingIpv4VpcResult(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 address: builtins.str,
                 address_range: builtins.str,
                 config_id: builtins.int,
                 gateway: builtins.str,
                 interface_id: builtins.int,
                 linode_id: builtins.int,
                 nat11: builtins.str,
                 prefix: builtins.int,
                 region: builtins.str,
                 subnet_id: builtins.int,
                 subnet_mask: builtins.str,
                 vpc_id: builtins.int):
        """
        :param builtins.bool active: Returns `true` if the VPC interface is in use, meaning that the Linode was powered on using the `config_id` to which the interface belongs. Otherwise returns `false`.
        :param builtins.str address: The address.
        :param builtins.str address_range: A range of IPv4 addresses configured for this VPC interface. it will be `null` if it's a single `address`.
        :param builtins.int config_id: The globally general entity identifier for the Linode configuration profile where the VPC is included.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int interface_id: The globally general API entity identifier for the Linode interface.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.str nat11: The public IP address used for NAT 1:1 with the VPC. This is `null` if the VPC interface uses an `address_range` or NAT 1:1 isn't used.
        :param builtins.int prefix: The network prefix.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_range", address_range)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "nat11", nat11)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        """
        Returns `true` if the VPC interface is in use, meaning that the Linode was powered on using the `config_id` to which the interface belongs. Otherwise returns `false`.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressRange")
    def address_range(self) -> builtins.str:
        """
        A range of IPv4 addresses configured for this VPC interface. it will be `null` if it's a single `address`.
        """
        return pulumi.get(self, "address_range")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> builtins.int:
        """
        The globally general entity identifier for the Linode configuration profile where the VPC is included.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> builtins.int:
        """
        The globally general API entity identifier for the Linode interface.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def nat11(self) -> builtins.str:
        """
        The public IP address used for NAT 1:1 with the VPC. This is `null` if the VPC interface uses an `address_range` or NAT 1:1 isn't used.
        """
        return pulumi.get(self, "nat11")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceNetworkingIpv6Result(dict):
    def __init__(__self__, *,
                 globals: Sequence['outputs.GetInstanceNetworkingIpv6GlobalResult'],
                 link_local: 'outputs.GetInstanceNetworkingIpv6LinkLocalResult',
                 slaac: 'outputs.GetInstanceNetworkingIpv6SlaacResult'):
        pulumi.set(__self__, "globals", globals)
        pulumi.set(__self__, "link_local", link_local)
        pulumi.set(__self__, "slaac", slaac)

    @property
    @pulumi.getter
    def globals(self) -> Sequence['outputs.GetInstanceNetworkingIpv6GlobalResult']:
        return pulumi.get(self, "globals")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> 'outputs.GetInstanceNetworkingIpv6LinkLocalResult':
        return pulumi.get(self, "link_local")

    @property
    @pulumi.getter
    def slaac(self) -> 'outputs.GetInstanceNetworkingIpv6SlaacResult':
        return pulumi.get(self, "slaac")


@pulumi.output_type
class GetInstanceNetworkingIpv6GlobalResult(dict):
    def __init__(__self__, *,
                 prefix: builtins.int,
                 range: builtins.str,
                 region: builtins.str,
                 route_target: builtins.str):
        """
        :param builtins.int prefix: The network prefix.
        :param builtins.str range: The IPv6 range of addresses in this pool.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str route_target: (Nullable) The last address in this block of IPv6 addresses.
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def range(self) -> builtins.str:
        """
        The IPv6 range of addresses in this pool.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> builtins.str:
        """
        (Nullable) The last address in this block of IPv6 addresses.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetInstanceNetworkingIpv6LinkLocalResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 subnet_mask: builtins.str,
                 type: builtins.str,
                 vpc_nat11: 'outputs.GetInstanceNetworkingIpv6LinkLocalVpcNat11Result'):
        """
        :param builtins.str address: The address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.int prefix: The network prefix.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.str type: The type of address this is.
        :param 'GetInstanceNetworkingIpv6LinkLocalVpcNat11Args' vpc_nat11: IPv4 address configured as a 1:1 NAT for this Interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_nat11", vpc_nat11)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcNat11")
    def vpc_nat11(self) -> 'outputs.GetInstanceNetworkingIpv6LinkLocalVpcNat11Result':
        """
        IPv4 address configured as a 1:1 NAT for this Interface.
        """
        return pulumi.get(self, "vpc_nat11")


@pulumi.output_type
class GetInstanceNetworkingIpv6LinkLocalVpcNat11Result(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The address.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceNetworkingIpv6SlaacResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 subnet_mask: builtins.str,
                 type: builtins.str,
                 vpc_nat11: 'outputs.GetInstanceNetworkingIpv6SlaacVpcNat11Result'):
        """
        :param builtins.str address: The address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The Linode instance's ID.
        :param builtins.int prefix: The network prefix.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address.
        :param builtins.str region: (Filterable) The Region this address resides in.
        :param builtins.str subnet_mask: The subnet mask.
        :param builtins.str type: The type of address this is.
        :param 'GetInstanceNetworkingIpv6SlaacVpcNat11Args' vpc_nat11: IPv4 address configured as a 1:1 NAT for this Interface.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_nat11", vpc_nat11)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The Linode instance's ID.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The network prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (Filterable) The Region this address resides in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The subnet mask.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcNat11")
    def vpc_nat11(self) -> 'outputs.GetInstanceNetworkingIpv6SlaacVpcNat11Result':
        """
        IPv4 address configured as a 1:1 NAT for this Interface.
        """
        return pulumi.get(self, "vpc_nat11")


@pulumi.output_type
class GetInstanceNetworkingIpv6SlaacVpcNat11Result(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 subnet_id: builtins.int,
                 vpc_id: builtins.int):
        """
        :param builtins.str address: The address.
        :param builtins.int subnet_id: The unique globally general API entity identifier for the VPC subnet.
        :param builtins.int vpc_id: The unique globally general API entity identifier for the VPC.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The unique globally general API entity identifier for the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceTypeAddonsResult(dict):
    def __init__(__self__, *,
                 backups: Sequence['outputs.GetInstanceTypeAddonsBackupResult']):
        pulumi.set(__self__, "backups", backups)

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetInstanceTypeAddonsBackupResult']:
        return pulumi.get(self, "backups")


@pulumi.output_type
class GetInstanceTypeAddonsBackupResult(dict):
    def __init__(__self__, *,
                 prices: Sequence['outputs.GetInstanceTypeAddonsBackupPriceResult'],
                 region_prices: Sequence['outputs.GetInstanceTypeAddonsBackupRegionPriceResult']):
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetInstanceTypeAddonsBackupPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetInstanceTypeAddonsBackupRegionPriceResult']:
        return pulumi.get(self, "region_prices")


@pulumi.output_type
class GetInstanceTypeAddonsBackupPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: The cost (in US dollars) per hour to add Backups service.
        :param builtins.float monthly: The cost (in US dollars) per month to add Backups service.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        The cost (in US dollars) per hour to add Backups service.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        The cost (in US dollars) per month to add Backups service.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypeAddonsBackupRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: Label used to identify instance type
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Label used to identify instance type
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: Cost (in US dollars) per hour.
        :param builtins.float monthly: Cost (in US dollars) per month.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        Cost (in US dollars) per hour.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        Cost (in US dollars) per month.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: Label used to identify instance type
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Label used to identify instance type
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetInstanceTypesTypeResult(dict):
    def __init__(__self__, *,
                 accelerated_devices: builtins.int,
                 addons: Sequence['outputs.GetInstanceTypesTypeAddonResult'],
                 class_: builtins.str,
                 disk: builtins.int,
                 id: builtins.str,
                 label: builtins.str,
                 memory: builtins.int,
                 network_out: builtins.int,
                 prices: Sequence['outputs.GetInstanceTypesTypePriceResult'],
                 region_prices: Sequence['outputs.GetInstanceTypesTypeRegionPriceResult'],
                 transfer: builtins.int,
                 vcpus: builtins.int):
        """
        :param builtins.int accelerated_devices: The number of VPUs this Linode Type offers.
        :param Sequence['GetInstanceTypesTypeAddonArgs'] addons: Information about the optional Backup service offered for Linodes.
        :param builtins.str class_: The class of the Linode Type. See all classes [here](https://techdocs.akamai.com/linode-api/reference/get-linode-types).
        :param builtins.int disk: The Disk size, in MB, of the Linode Type.
        :param builtins.str id: The ID representing the Linode Type.
        :param builtins.str label: The Linode Type's label is for display purposes only.
        :param builtins.int memory: The amount of RAM included in this Linode Type.
        :param builtins.int network_out: The Mbits outbound bandwidth allocation.
        :param Sequence['GetInstanceTypesTypePriceArgs'] prices: Cost in US dollars, broken down into hourly and monthly charges.
        :param Sequence['GetInstanceTypesTypeRegionPriceArgs'] region_prices: A list of region-specific prices for this plan.
        :param builtins.int transfer: The monthly outbound transfer amount, in MB.
        :param builtins.int vcpus: The number of VCPU cores this Linode Type offers.
        """
        pulumi.set(__self__, "accelerated_devices", accelerated_devices)
        pulumi.set(__self__, "addons", addons)
        pulumi.set(__self__, "class_", class_)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "network_out", network_out)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)
        pulumi.set(__self__, "transfer", transfer)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="acceleratedDevices")
    def accelerated_devices(self) -> builtins.int:
        """
        The number of VPUs this Linode Type offers.
        """
        return pulumi.get(self, "accelerated_devices")

    @property
    @pulumi.getter
    def addons(self) -> Sequence['outputs.GetInstanceTypesTypeAddonResult']:
        """
        Information about the optional Backup service offered for Linodes.
        """
        return pulumi.get(self, "addons")

    @property
    @pulumi.getter(name="class")
    def class_(self) -> builtins.str:
        """
        The class of the Linode Type. See all classes [here](https://techdocs.akamai.com/linode-api/reference/get-linode-types).
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def disk(self) -> builtins.int:
        """
        The Disk size, in MB, of the Linode Type.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Linode Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Linode Type's label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def memory(self) -> builtins.int:
        """
        The amount of RAM included in this Linode Type.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="networkOut")
    def network_out(self) -> builtins.int:
        """
        The Mbits outbound bandwidth allocation.
        """
        return pulumi.get(self, "network_out")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetInstanceTypesTypePriceResult']:
        """
        Cost in US dollars, broken down into hourly and monthly charges.
        """
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetInstanceTypesTypeRegionPriceResult']:
        """
        A list of region-specific prices for this plan.
        """
        return pulumi.get(self, "region_prices")

    @property
    @pulumi.getter
    def transfer(self) -> builtins.int:
        """
        The monthly outbound transfer amount, in MB.
        """
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.int:
        """
        The number of VCPU cores this Linode Type offers.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetInstanceTypesTypeAddonResult(dict):
    def __init__(__self__, *,
                 backups: Sequence['outputs.GetInstanceTypesTypeAddonBackupResult']):
        pulumi.set(__self__, "backups", backups)

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetInstanceTypesTypeAddonBackupResult']:
        return pulumi.get(self, "backups")


@pulumi.output_type
class GetInstanceTypesTypeAddonBackupResult(dict):
    def __init__(__self__, *,
                 prices: Sequence['outputs.GetInstanceTypesTypeAddonBackupPriceResult'],
                 region_prices: Sequence['outputs.GetInstanceTypesTypeAddonBackupRegionPriceResult']):
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetInstanceTypesTypeAddonBackupPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetInstanceTypesTypeAddonBackupRegionPriceResult']:
        return pulumi.get(self, "region_prices")


@pulumi.output_type
class GetInstanceTypesTypeAddonBackupPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: The cost (in US dollars) per hour to add Backups service.
        :param builtins.float monthly: The cost (in US dollars) per month to add Backups service.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        The cost (in US dollars) per hour to add Backups service.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        The cost (in US dollars) per month to add Backups service.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesTypeAddonBackupRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: The ID representing the Linode Type.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Linode Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: Cost (in US dollars) per hour.
        :param builtins.float monthly: Cost (in US dollars) per month.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        Cost (in US dollars) per hour.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        Cost (in US dollars) per month.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstanceTypesTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: The ID representing the Linode Type.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Linode Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 alerts: 'outputs.GetInstancesInstanceAlertsResult',
                 backups: Sequence['outputs.GetInstancesInstanceBackupResult'],
                 boot_config_label: builtins.str,
                 capabilities: Sequence[builtins.str],
                 configs: Sequence['outputs.GetInstancesInstanceConfigResult'],
                 disk_encryption: builtins.str,
                 disks: Sequence['outputs.GetInstancesInstanceDiskResult'],
                 group: builtins.str,
                 has_user_data: builtins.bool,
                 host_uuid: builtins.str,
                 id: builtins.int,
                 image: builtins.str,
                 ip_address: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6: builtins.str,
                 label: builtins.str,
                 lke_cluster_id: builtins.int,
                 placement_groups: Sequence['outputs.GetInstancesInstancePlacementGroupResult'],
                 private_ip_address: builtins.str,
                 region: builtins.str,
                 specs: Sequence['outputs.GetInstancesInstanceSpecResult'],
                 status: builtins.str,
                 swap_size: builtins.int,
                 tags: Sequence[builtins.str],
                 type: builtins.str,
                 watchdog_enabled: builtins.bool):
        """
        :param Sequence['GetInstancesInstanceBackupArgs'] backups: Information about this Linode's backups status.
        :param builtins.str boot_config_label: The Label of the Instance Config that should be used to boot the Linode instance.
        :param Sequence[builtins.str] capabilities: A list of capabilities of this Linode instance.
        :param Sequence['GetInstancesInstanceConfigArgs'] configs: Configuration profiles define the VM settings and boot behavior of the Linode Instance.
        :param builtins.str disk_encryption: The disk encryption policy for this instance.
        :param Sequence['GetInstancesInstanceDiskArgs'] disks: Disks associated with this Linode.
        :param builtins.str group: The display group of the Linode instance.
        :param builtins.bool has_user_data: Whether this Instance was created with user-data.
        :param builtins.str host_uuid: The Linode’s host machine, as a UUID.
        :param builtins.int id: The ID of the Placement Group in the Linode API.
        :param builtins.str image: An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian12`, `linode/fedora39`, `linode/ubuntu22.04`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://techdocs.akamai.com/linode-api/reference/get-images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*
        :param builtins.str ip_address: A string containing the Linode's public IP address.
        :param Sequence[builtins.str] ipv4s: This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
        :param builtins.str ipv6: This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.
        :param builtins.str label: The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        :param builtins.int lke_cluster_id: If applicable, the ID of the LKE cluster this instance is a part of.
        :param builtins.str private_ip_address: This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.
        :param builtins.str region: This is the location where the Linode is deployed. Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc. See all regions [here](https://api.linode.com/v4/regions).
        :param builtins.str status: The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)
        :param builtins.int swap_size: When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
        :param Sequence[builtins.str] tags: A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.str type: The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `"g6-nanode-1"`, `"g6-standard-2"`, `"g6-highmem-16"`, `"g6-dedicated-16"`, etc. See all types [here](https://api.linode.com/v4/linode/types).
        :param builtins.bool watchdog_enabled: The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
        """
        pulumi.set(__self__, "alerts", alerts)
        pulumi.set(__self__, "backups", backups)
        pulumi.set(__self__, "boot_config_label", boot_config_label)
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "disk_encryption", disk_encryption)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "has_user_data", has_user_data)
        pulumi.set(__self__, "host_uuid", host_uuid)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "lke_cluster_id", lke_cluster_id)
        pulumi.set(__self__, "placement_groups", placement_groups)
        pulumi.set(__self__, "private_ip_address", private_ip_address)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "specs", specs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "swap_size", swap_size)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "watchdog_enabled", watchdog_enabled)

    @property
    @pulumi.getter
    def alerts(self) -> 'outputs.GetInstancesInstanceAlertsResult':
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter
    def backups(self) -> Sequence['outputs.GetInstancesInstanceBackupResult']:
        """
        Information about this Linode's backups status.
        """
        return pulumi.get(self, "backups")

    @property
    @pulumi.getter(name="bootConfigLabel")
    def boot_config_label(self) -> builtins.str:
        """
        The Label of the Instance Config that should be used to boot the Linode instance.
        """
        return pulumi.get(self, "boot_config_label")

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[builtins.str]:
        """
        A list of capabilities of this Linode instance.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetInstancesInstanceConfigResult']:
        """
        Configuration profiles define the VM settings and boot behavior of the Linode Instance.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> builtins.str:
        """
        The disk encryption policy for this instance.
        """
        return pulumi.get(self, "disk_encryption")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetInstancesInstanceDiskResult']:
        """
        Disks associated with this Linode.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def group(self) -> builtins.str:
        """
        The display group of the Linode instance.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="hasUserData")
    def has_user_data(self) -> builtins.bool:
        """
        Whether this Instance was created with user-data.
        """
        return pulumi.get(self, "has_user_data")

    @property
    @pulumi.getter(name="hostUuid")
    def host_uuid(self) -> builtins.str:
        """
        The Linode’s host machine, as a UUID.
        """
        return pulumi.get(self, "host_uuid")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Placement Group in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian12`, `linode/fedora39`, `linode/ubuntu22.04`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://techdocs.akamai.com/linode-api/reference/get-images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> builtins.str:
        """
        A string containing the Linode's public IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6(self) -> builtins.str:
        """
        This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="lkeClusterId")
    def lke_cluster_id(self) -> builtins.int:
        """
        If applicable, the ID of the LKE cluster this instance is a part of.
        """
        return pulumi.get(self, "lke_cluster_id")

    @property
    @pulumi.getter(name="placementGroups")
    def placement_groups(self) -> Sequence['outputs.GetInstancesInstancePlacementGroupResult']:
        return pulumi.get(self, "placement_groups")

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> builtins.str:
        """
        This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.
        """
        return pulumi.get(self, "private_ip_address")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        This is the location where the Linode is deployed. Examples are `"us-east"`, `"us-west"`, `"ap-south"`, etc. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def specs(self) -> Sequence['outputs.GetInstancesInstanceSpecResult']:
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="swapSize")
    def swap_size(self) -> builtins.int:
        """
        When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.
        """
        return pulumi.get(self, "swap_size")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `"g6-nanode-1"`, `"g6-standard-2"`, `"g6-highmem-16"`, `"g6-dedicated-16"`, etc. See all types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="watchdogEnabled")
    def watchdog_enabled(self) -> builtins.bool:
        """
        The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.
        """
        return pulumi.get(self, "watchdog_enabled")


@pulumi.output_type
class GetInstancesInstanceAlertsResult(dict):
    def __init__(__self__, *,
                 cpu: builtins.int,
                 io: builtins.int,
                 network_in: builtins.int,
                 network_out: builtins.int,
                 transfer_quota: builtins.int):
        """
        :param builtins.int cpu: The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.
        :param builtins.int io: The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.
        :param builtins.int network_in: The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        :param builtins.int network_out: The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        :param builtins.int transfer_quota: The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "io", io)
        pulumi.set(__self__, "network_in", network_in)
        pulumi.set(__self__, "network_out", network_out)
        pulumi.set(__self__, "transfer_quota", transfer_quota)

    @property
    @pulumi.getter
    def cpu(self) -> builtins.int:
        """
        The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def io(self) -> builtins.int:
        """
        The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.
        """
        return pulumi.get(self, "io")

    @property
    @pulumi.getter(name="networkIn")
    def network_in(self) -> builtins.int:
        """
        The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        """
        return pulumi.get(self, "network_in")

    @property
    @pulumi.getter(name="networkOut")
    def network_out(self) -> builtins.int:
        """
        The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
        """
        return pulumi.get(self, "network_out")

    @property
    @pulumi.getter(name="transferQuota")
    def transfer_quota(self) -> builtins.int:
        """
        The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.
        """
        return pulumi.get(self, "transfer_quota")


@pulumi.output_type
class GetInstancesInstanceBackupResult(dict):
    def __init__(__self__, *,
                 available: builtins.bool,
                 enabled: builtins.bool,
                 schedules: Sequence['outputs.GetInstancesInstanceBackupScheduleResult']):
        """
        :param builtins.bool available: Whether this Backup is available for restoration.
        :param builtins.bool enabled: If this Linode has the Backup service enabled.
        """
        pulumi.set(__self__, "available", available)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter
    def available(self) -> builtins.bool:
        """
        Whether this Backup is available for restoration.
        """
        return pulumi.get(self, "available")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        If this Linode has the Backup service enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetInstancesInstanceBackupScheduleResult']:
        return pulumi.get(self, "schedules")


@pulumi.output_type
class GetInstancesInstanceBackupScheduleResult(dict):
    def __init__(__self__, *,
                 day: builtins.str,
                 window: builtins.str):
        """
        :param builtins.str day: The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        :param builtins.str window: The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def day(self) -> builtins.str:
        """
        The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as "Scheduling" until the day is automatically selected.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def window(self) -> builtins.str:
        """
        The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.
        """
        return pulumi.get(self, "window")


@pulumi.output_type
class GetInstancesInstanceConfigResult(dict):
    def __init__(__self__, *,
                 comments: builtins.str,
                 devices: Sequence['outputs.GetInstancesInstanceConfigDeviceResult'],
                 helpers: Sequence['outputs.GetInstancesInstanceConfigHelperResult'],
                 id: builtins.int,
                 interfaces: Sequence['outputs.GetInstancesInstanceConfigInterfaceResult'],
                 kernel: builtins.str,
                 label: builtins.str,
                 memory_limit: builtins.int,
                 root_device: builtins.str,
                 run_level: builtins.str,
                 virt_mode: builtins.str):
        """
        :param builtins.str comments: Arbitrary user comments about this `config`.
        :param Sequence['GetInstancesInstanceConfigDeviceArgs'] devices: A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
        :param Sequence['GetInstancesInstanceConfigHelperArgs'] helpers: Helpers enabled when booting to this Linode Config.
        :param builtins.int id: The ID of the Placement Group in the Linode API.
        :param Sequence['GetInstancesInstanceConfigInterfaceArgs'] interfaces: An array of Network Interfaces for this Linode’s Configuration Profile.
        :param builtins.str kernel: A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://techdocs.akamai.com/linode-api/reference/get-kernels)).
        :param builtins.str label: The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        :param builtins.int memory_limit: Defaults to the total RAM of the Linode
        :param builtins.str root_device: The root device to boot.
        :param builtins.str run_level: Defines the state of your Linode after booting.
        :param builtins.str virt_mode: Controls the virtualization mode.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "helpers", helpers)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "kernel", kernel)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "memory_limit", memory_limit)
        pulumi.set(__self__, "root_device", root_device)
        pulumi.set(__self__, "run_level", run_level)
        pulumi.set(__self__, "virt_mode", virt_mode)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        Arbitrary user comments about this `config`.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceResult']:
        """
        A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def helpers(self) -> Sequence['outputs.GetInstancesInstanceConfigHelperResult']:
        """
        Helpers enabled when booting to this Linode Config.
        """
        return pulumi.get(self, "helpers")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Placement Group in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetInstancesInstanceConfigInterfaceResult']:
        """
        An array of Network Interfaces for this Linode’s Configuration Profile.
        """
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter
    def kernel(self) -> builtins.str:
        """
        A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://techdocs.akamai.com/linode-api/reference/get-kernels)).
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> builtins.int:
        """
        Defaults to the total RAM of the Linode
        """
        return pulumi.get(self, "memory_limit")

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> builtins.str:
        """
        The root device to boot.
        """
        return pulumi.get(self, "root_device")

    @property
    @pulumi.getter(name="runLevel")
    def run_level(self) -> builtins.str:
        """
        Defines the state of your Linode after booting.
        """
        return pulumi.get(self, "run_level")

    @property
    @pulumi.getter(name="virtMode")
    def virt_mode(self) -> builtins.str:
        """
        Controls the virtualization mode.
        """
        return pulumi.get(self, "virt_mode")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceResult(dict):
    def __init__(__self__, *,
                 sdas: Sequence['outputs.GetInstancesInstanceConfigDeviceSdaResult'],
                 sdbs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdbResult'],
                 sdcs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdcResult'],
                 sdds: Sequence['outputs.GetInstancesInstanceConfigDeviceSddResult'],
                 sdes: Sequence['outputs.GetInstancesInstanceConfigDeviceSdeResult'],
                 sdfs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdfResult'],
                 sdgs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdgResult'],
                 sdhs: Sequence['outputs.GetInstancesInstanceConfigDeviceSdhResult']):
        """
        :param Sequence['GetInstancesInstanceConfigDeviceSdaArgs'] sdas: ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        :param Sequence['GetInstancesInstanceConfigDeviceSdbArgs'] sdbs: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param Sequence['GetInstancesInstanceConfigDeviceSdcArgs'] sdcs: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param Sequence['GetInstancesInstanceConfigDeviceSddArgs'] sdds: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param Sequence['GetInstancesInstanceConfigDeviceSdeArgs'] sdes: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param Sequence['GetInstancesInstanceConfigDeviceSdfArgs'] sdfs: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param Sequence['GetInstancesInstanceConfigDeviceSdgArgs'] sdgs: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        :param Sequence['GetInstancesInstanceConfigDeviceSdhArgs'] sdhs: Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        pulumi.set(__self__, "sdas", sdas)
        pulumi.set(__self__, "sdbs", sdbs)
        pulumi.set(__self__, "sdcs", sdcs)
        pulumi.set(__self__, "sdds", sdds)
        pulumi.set(__self__, "sdes", sdes)
        pulumi.set(__self__, "sdfs", sdfs)
        pulumi.set(__self__, "sdgs", sdgs)
        pulumi.set(__self__, "sdhs", sdhs)

    @property
    @pulumi.getter
    def sdas(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdaResult']:
        """
        ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        """
        return pulumi.get(self, "sdas")

    @property
    @pulumi.getter
    def sdbs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdbResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdbs")

    @property
    @pulumi.getter
    def sdcs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdcResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdcs")

    @property
    @pulumi.getter
    def sdds(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSddResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdds")

    @property
    @pulumi.getter
    def sdes(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdeResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdes")

    @property
    @pulumi.getter
    def sdfs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdfResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdfs")

    @property
    @pulumi.getter
    def sdgs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdgResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdgs")

    @property
    @pulumi.getter
    def sdhs(self) -> Sequence['outputs.GetInstancesInstanceConfigDeviceSdhResult']:
        """
        Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        """
        return pulumi.get(self, "sdhs")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdaResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdbResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdcResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSddResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdeResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdfResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdgResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigDeviceSdhResult(dict):
    def __init__(__self__, *,
                 disk_id: builtins.int,
                 disk_label: Optional[builtins.str] = None,
                 volume_id: Optional[builtins.int] = None):
        """
        :param builtins.int disk_id: The Disk ID of the associated `disk_label`, if used
        :param builtins.str disk_label: The `label` of the `disk` to map to this `device` slot.
        :param builtins.int volume_id: The Volume ID to map to this `device` slot.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_label is not None:
            pulumi.set(__self__, "disk_label", disk_label)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> builtins.int:
        """
        The Disk ID of the associated `disk_label`, if used
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskLabel")
    def disk_label(self) -> Optional[builtins.str]:
        """
        The `label` of the `disk` to map to this `device` slot.
        """
        return pulumi.get(self, "disk_label")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[builtins.int]:
        """
        The Volume ID to map to this `device` slot.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetInstancesInstanceConfigHelperResult(dict):
    def __init__(__self__, *,
                 devtmpfs_automount: builtins.bool,
                 distro: builtins.bool,
                 modules_dep: builtins.bool,
                 network: builtins.bool,
                 updatedb_disabled: builtins.bool):
        """
        :param builtins.bool devtmpfs_automount: Populates the /dev directory early during boot without udev. Defaults to false.
        :param builtins.bool distro: Controls the behavior of the Linode Config's Distribution Helper setting.
        :param builtins.bool modules_dep: Creates a modules dependency file for the Kernel you run.
        :param builtins.bool network: Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        :param builtins.bool updatedb_disabled: Disables updatedb cron job to avoid disk thrashing.
        """
        pulumi.set(__self__, "devtmpfs_automount", devtmpfs_automount)
        pulumi.set(__self__, "distro", distro)
        pulumi.set(__self__, "modules_dep", modules_dep)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "updatedb_disabled", updatedb_disabled)

    @property
    @pulumi.getter(name="devtmpfsAutomount")
    def devtmpfs_automount(self) -> builtins.bool:
        """
        Populates the /dev directory early during boot without udev. Defaults to false.
        """
        return pulumi.get(self, "devtmpfs_automount")

    @property
    @pulumi.getter
    def distro(self) -> builtins.bool:
        """
        Controls the behavior of the Linode Config's Distribution Helper setting.
        """
        return pulumi.get(self, "distro")

    @property
    @pulumi.getter(name="modulesDep")
    def modules_dep(self) -> builtins.bool:
        """
        Creates a modules dependency file for the Kernel you run.
        """
        return pulumi.get(self, "modules_dep")

    @property
    @pulumi.getter
    def network(self) -> builtins.bool:
        """
        Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="updatedbDisabled")
    def updatedb_disabled(self) -> builtins.bool:
        """
        Disables updatedb cron job to avoid disk thrashing.
        """
        return pulumi.get(self, "updatedb_disabled")


@pulumi.output_type
class GetInstancesInstanceConfigInterfaceResult(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 id: builtins.int,
                 ipv4: 'outputs.GetInstancesInstanceConfigInterfaceIpv4Result',
                 purpose: builtins.str,
                 vpc_id: builtins.int,
                 ip_ranges: Optional[Sequence[builtins.str]] = None,
                 ipam_address: Optional[builtins.str] = None,
                 label: Optional[builtins.str] = None,
                 primary: Optional[builtins.bool] = None,
                 subnet_id: Optional[builtins.int] = None):
        """
        :param builtins.bool active: Whether this interface is currently booted and active.
        :param builtins.int id: The ID of the Placement Group in the Linode API.
        :param 'GetInstancesInstanceConfigInterfaceIpv4Args' ipv4: This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
        :param builtins.str purpose: The type of interface. (`public`, `vlan`, `vpc`)
        :param builtins.int vpc_id: The ID of VPC which this interface is attached to.
        :param Sequence[builtins.str] ip_ranges: IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.
        :param builtins.str ipam_address: This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.
        :param builtins.str label: The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        :param builtins.bool primary: Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.
        :param builtins.int subnet_id: The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "purpose", purpose)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ipam_address is not None:
            pulumi.set(__self__, "ipam_address", ipam_address)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        """
        Whether this interface is currently booted and active.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Placement Group in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4(self) -> 'outputs.GetInstancesInstanceConfigInterfaceIpv4Result':
        """
        This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def purpose(self) -> builtins.str:
        """
        The type of interface. (`public`, `vlan`, `vpc`)
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The ID of VPC which this interface is attached to.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[builtins.str]]:
        """
        IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.
        """
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="ipamAddress")
    def ipam_address(self) -> Optional[builtins.str]:
        """
        This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.
        """
        return pulumi.get(self, "ipam_address")

    @property
    @pulumi.getter
    def label(self) -> Optional[builtins.str]:
        """
        The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def primary(self) -> Optional[builtins.bool]:
        """
        Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.int]:
        """
        The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstancesInstanceConfigInterfaceIpv4Result(dict):
    def __init__(__self__, *,
                 nat11: builtins.str,
                 vpc: builtins.str):
        """
        :param builtins.str nat11: The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.
        :param builtins.str vpc: The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.
        """
        pulumi.set(__self__, "nat11", nat11)
        pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter
    def nat11(self) -> builtins.str:
        """
        The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.
        """
        return pulumi.get(self, "nat11")

    @property
    @pulumi.getter
    def vpc(self) -> builtins.str:
        """
        The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.
        """
        return pulumi.get(self, "vpc")


@pulumi.output_type
class GetInstancesInstanceDiskResult(dict):
    def __init__(__self__, *,
                 filesystem: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 size: builtins.int):
        """
        :param builtins.str filesystem: The Disk filesystem can be one of: `"raw"`, `"swap"`, `"ext3"`, `"ext4"`, or `"initrd"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
        :param builtins.int id: The ID of the Placement Group in the Linode API.
        :param builtins.str label: The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        :param builtins.int size: The size of the Disk in MB.
        """
        pulumi.set(__self__, "filesystem", filesystem)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def filesystem(self) -> builtins.str:
        """
        The Disk filesystem can be one of: `"raw"`, `"swap"`, `"ext3"`, `"ext4"`, or `"initrd"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).
        """
        return pulumi.get(self, "filesystem")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Placement Group in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The size of the Disk in MB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetInstancesInstancePlacementGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 placement_group_policy: builtins.str,
                 placement_group_type: builtins.str):
        """
        :param builtins.int id: The ID of the Placement Group in the Linode API.
        :param builtins.str label: The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        :param builtins.str placement_group_policy: Whether Linodes must be able to become compliant during assignment. (Default `strict`)
        :param builtins.str placement_group_type: The placement group type to use when placing Linodes in this group.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "placement_group_policy", placement_group_policy)
        pulumi.set(__self__, "placement_group_type", placement_group_type)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the Placement Group in the Linode API.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="placementGroupPolicy")
    def placement_group_policy(self) -> builtins.str:
        """
        Whether Linodes must be able to become compliant during assignment. (Default `strict`)
        """
        return pulumi.get(self, "placement_group_policy")

    @property
    @pulumi.getter(name="placementGroupType")
    def placement_group_type(self) -> builtins.str:
        """
        The placement group type to use when placing Linodes in this group.
        """
        return pulumi.get(self, "placement_group_type")


@pulumi.output_type
class GetInstancesInstanceSpecResult(dict):
    def __init__(__self__, *,
                 accelerated_devices: builtins.int,
                 disk: builtins.int,
                 gpus: builtins.int,
                 memory: builtins.int,
                 transfer: builtins.int,
                 vcpus: builtins.int):
        """
        :param builtins.int accelerated_devices: The number of VPUs this Linode has access to.
        :param builtins.int disk: The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
        :param builtins.int gpus: The number of GPUs this Linode has access to.
        :param builtins.int memory: The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
        :param builtins.int transfer: The amount of network transfer this Linode is allotted each month.
        :param builtins.int vcpus: The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
        """
        pulumi.set(__self__, "accelerated_devices", accelerated_devices)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "gpus", gpus)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "transfer", transfer)
        pulumi.set(__self__, "vcpus", vcpus)

    @property
    @pulumi.getter(name="acceleratedDevices")
    def accelerated_devices(self) -> builtins.int:
        """
        The number of VPUs this Linode has access to.
        """
        return pulumi.get(self, "accelerated_devices")

    @property
    @pulumi.getter
    def disk(self) -> builtins.int:
        """
        The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.
        """
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter
    def gpus(self) -> builtins.int:
        """
        The number of GPUs this Linode has access to.
        """
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def memory(self) -> builtins.int:
        """
        The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def transfer(self) -> builtins.int:
        """
        The amount of network transfer this Linode is allotted each month.
        """
        return pulumi.get(self, "transfer")

    @property
    @pulumi.getter
    def vcpus(self) -> builtins.int:
        """
        The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetIpv6RangesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetIpv6RangesRangeResult(dict):
    def __init__(__self__, *,
                 prefix: builtins.int,
                 range: builtins.str,
                 region: builtins.str,
                 route_target: builtins.str):
        """
        :param builtins.int prefix: The prefix length of the address, denoting how many addresses can be assigned from this range.
        :param builtins.str range: The IPv6 address of this range.
        :param builtins.str region: The region for this range of IPv6 addresses.
        :param builtins.str route_target: The IPv6 SLAAC address.
        """
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The prefix length of the address, denoting how many addresses can be assigned from this range.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def range(self) -> builtins.str:
        """
        The IPv6 address of this range.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region for this range of IPv6 addresses.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> builtins.str:
        """
        The IPv6 SLAAC address.
        """
        return pulumi.get(self, "route_target")


@pulumi.output_type
class GetKernelsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetKernelsKernelResult(dict):
    def __init__(__self__, *,
                 architecture: builtins.str,
                 built: builtins.str,
                 deprecated: builtins.bool,
                 id: builtins.str,
                 kvm: builtins.bool,
                 label: builtins.str,
                 pvops: builtins.bool,
                 version: builtins.str,
                 xen: builtins.bool):
        """
        :param builtins.str architecture: The architecture of this Kernel.
        :param builtins.str built: The date on which this Kernel was built.
        :param builtins.bool deprecated: Whether or not this Kernel is deprecated.
        :param builtins.str id: The unique ID of this Kernel.
        :param builtins.bool kvm: If this Kernel is suitable for KVM Linodes.
        :param builtins.str label: The friendly name of this Kernel.
        :param builtins.bool pvops: If this Kernel is suitable for paravirtualized operations.
        :param builtins.str version: Linux Kernel version
        :param builtins.bool xen: If this Kernel is suitable for Xen Linodes.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "built", built)
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kvm", kvm)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "pvops", pvops)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "xen", xen)

    @property
    @pulumi.getter
    def architecture(self) -> builtins.str:
        """
        The architecture of this Kernel.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter
    def built(self) -> builtins.str:
        """
        The date on which this Kernel was built.
        """
        return pulumi.get(self, "built")

    @property
    @pulumi.getter
    def deprecated(self) -> builtins.bool:
        """
        Whether or not this Kernel is deprecated.
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique ID of this Kernel.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kvm(self) -> builtins.bool:
        """
        If this Kernel is suitable for KVM Linodes.
        """
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The friendly name of this Kernel.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def pvops(self) -> builtins.bool:
        """
        If this Kernel is suitable for paravirtualized operations.
        """
        return pulumi.get(self, "pvops")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Linux Kernel version
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def xen(self) -> builtins.bool:
        """
        If this Kernel is suitable for Xen Linodes.
        """
        return pulumi.get(self, "xen")


@pulumi.output_type
class GetLkeClusterControlPlaneResult(dict):
    def __init__(__self__, *,
                 high_availability: builtins.bool,
                 acls: Optional[Sequence['outputs.GetLkeClusterControlPlaneAclResult']] = None):
        """
        :param builtins.bool high_availability: Whether High Availability is enabled for the cluster Control Plane.
        :param Sequence['GetLkeClusterControlPlaneAclArgs'] acls: The ACL configuration for an LKE cluster's control plane.
        """
        pulumi.set(__self__, "high_availability", high_availability)
        if acls is not None:
            pulumi.set(__self__, "acls", acls)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> builtins.bool:
        """
        Whether High Availability is enabled for the cluster Control Plane.
        """
        return pulumi.get(self, "high_availability")

    @property
    @pulumi.getter
    def acls(self) -> Optional[Sequence['outputs.GetLkeClusterControlPlaneAclResult']]:
        """
        The ACL configuration for an LKE cluster's control plane.
        """
        return pulumi.get(self, "acls")


@pulumi.output_type
class GetLkeClusterControlPlaneAclResult(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 addresses: Optional[Sequence['outputs.GetLkeClusterControlPlaneAclAddressResult']] = None):
        """
        :param builtins.bool enabled: The default policy. A value of true means a default policy of DENY. A value of false means a default policy of ALLOW.
        :param Sequence['GetLkeClusterControlPlaneAclAddressArgs'] addresses: A list of ip addresses to allow.
        """
        pulumi.set(__self__, "enabled", enabled)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        The default policy. A value of true means a default policy of DENY. A value of false means a default policy of ALLOW.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence['outputs.GetLkeClusterControlPlaneAclAddressResult']]:
        """
        A list of ip addresses to allow.
        """
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GetLkeClusterControlPlaneAclAddressResult(dict):
    def __init__(__self__, *,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] ipv4s: A set of individual ipv4 addresses or CIDRs to ALLOW.
        :param Sequence[builtins.str] ipv6s: A set of individual ipv6 addresses or CIDRs to ALLOW.
        """
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A set of individual ipv4 addresses or CIDRs to ALLOW.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A set of individual ipv6 addresses or CIDRs to ALLOW.
        """
        return pulumi.get(self, "ipv6s")


@pulumi.output_type
class GetLkeClusterPoolResult(dict):
    def __init__(__self__, *,
                 count: builtins.int,
                 disk_encryption: builtins.str,
                 id: builtins.int,
                 labels: Mapping[str, builtins.str],
                 tags: Sequence[builtins.str],
                 taints: Sequence['outputs.GetLkeClusterPoolTaintResult'],
                 type: builtins.str,
                 autoscalers: Optional[Sequence['outputs.GetLkeClusterPoolAutoscalerResult']] = None,
                 disks: Optional[Sequence['outputs.GetLkeClusterPoolDiskResult']] = None,
                 nodes: Optional[Sequence['outputs.GetLkeClusterPoolNodeResult']] = None):
        """
        :param builtins.int count: The number of nodes in the Node Pool.
        :param builtins.str disk_encryption: The disk encryption policy for nodes in this pool.
        :param builtins.int id: The LKE Cluster's ID.
        :param Mapping[str, builtins.str] labels: Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
        :param Sequence[builtins.str] tags: An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param Sequence['GetLkeClusterPoolTaintArgs'] taints: Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
        :param builtins.str type: The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        :param Sequence['GetLkeClusterPoolAutoscalerArgs'] autoscalers: The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
        :param Sequence['GetLkeClusterPoolDiskArgs'] disks: This Node Pool’s custom disk layout.
        :param Sequence['GetLkeClusterPoolNodeArgs'] nodes: The nodes in the Node Pool.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_encryption", disk_encryption)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "taints", taints)
        pulumi.set(__self__, "type", type)
        if autoscalers is not None:
            pulumi.set(__self__, "autoscalers", autoscalers)
        if disks is not None:
            pulumi.set(__self__, "disks", disks)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def count(self) -> builtins.int:
        """
        The number of nodes in the Node Pool.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskEncryption")
    def disk_encryption(self) -> builtins.str:
        """
        The disk encryption policy for nodes in this pool.
        """
        return pulumi.get(self, "disk_encryption")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The LKE Cluster's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, builtins.str]:
        """
        Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def taints(self) -> Sequence['outputs.GetLkeClusterPoolTaintResult']:
        """
        Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
        """
        return pulumi.get(self, "taints")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def autoscalers(self) -> Optional[Sequence['outputs.GetLkeClusterPoolAutoscalerResult']]:
        """
        The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.
        """
        return pulumi.get(self, "autoscalers")

    @property
    @pulumi.getter
    def disks(self) -> Optional[Sequence['outputs.GetLkeClusterPoolDiskResult']]:
        """
        This Node Pool’s custom disk layout.
        """
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.GetLkeClusterPoolNodeResult']]:
        """
        The nodes in the Node Pool.
        """
        return pulumi.get(self, "nodes")


@pulumi.output_type
class GetLkeClusterPoolAutoscalerResult(dict):
    def __init__(__self__, *,
                 enabled: builtins.bool,
                 max: builtins.int,
                 min: builtins.int):
        """
        :param builtins.bool enabled: The default policy. A value of true means a default policy of DENY. A value of false means a default policy of ALLOW.
        :param builtins.int max: The maximum number of nodes to autoscale to.
        :param builtins.int min: The minimum number of nodes to autoscale to.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        The default policy. A value of true means a default policy of DENY. A value of false means a default policy of ALLOW.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def max(self) -> builtins.int:
        """
        The maximum number of nodes to autoscale to.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> builtins.int:
        """
        The minimum number of nodes to autoscale to.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetLkeClusterPoolDiskResult(dict):
    def __init__(__self__, *,
                 size: builtins.int,
                 type: builtins.str):
        """
        :param builtins.int size: The size of this custom disk partition in MB.
        :param builtins.str type: The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The size of this custom disk partition in MB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLkeClusterPoolNodeResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 instance_id: builtins.int,
                 status: builtins.str):
        """
        :param builtins.str id: The LKE Cluster's ID.
        :param builtins.int instance_id: The ID of the underlying Linode instance.
        :param builtins.str status: The status of the node. (`ready`, `not_ready`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The LKE Cluster's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.int:
        """
        The ID of the underlying Linode instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the node. (`ready`, `not_ready`)
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLkeClusterPoolTaintResult(dict):
    def __init__(__self__, *,
                 effect: builtins.str,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str effect: The Kubernetes taint effect. The accepted values are `NoSchedule`, `PreferNoSchedule` and `NoExecute`. For the descriptions of these values, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
        :param builtins.str key: The Kubernetes taint key.
        :param builtins.str value: The Kubernetes taint value.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> builtins.str:
        """
        The Kubernetes taint effect. The accepted values are `NoSchedule`, `PreferNoSchedule` and `NoExecute`. For the descriptions of these values, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The Kubernetes taint key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The Kubernetes taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLkeClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetLkeClustersLkeClusterResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 id: builtins.int,
                 k8s_version: builtins.str,
                 label: builtins.str,
                 region: builtins.str,
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 tier: builtins.str,
                 updated: builtins.str,
                 control_plane: Optional['outputs.GetLkeClustersLkeClusterControlPlaneResult'] = None):
        """
        :param builtins.str created: When this Kubernetes cluster was created.
        :param builtins.int id: The LKE Cluster's ID.
        :param builtins.str k8s_version: The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
        :param builtins.str label: The unique label for the cluster.
        :param builtins.str region: This Kubernetes cluster's location.
        :param builtins.str status: The status of the cluster.
        :param Sequence[builtins.str] tags: An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.str tier: The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
        :param builtins.str updated: When this Kubernetes cluster was updated.
        :param 'GetLkeClustersLkeClusterControlPlaneArgs' control_plane: Defines settings for the Kubernetes Control Plane.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "k8s_version", k8s_version)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tier", tier)
        pulumi.set(__self__, "updated", updated)
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this Kubernetes cluster was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The LKE Cluster's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> builtins.str:
        """
        The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The unique label for the cluster.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        This Kubernetes cluster's location.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tier(self) -> builtins.str:
        """
        The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)
        """
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this Kubernetes cluster was updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional['outputs.GetLkeClustersLkeClusterControlPlaneResult']:
        """
        Defines settings for the Kubernetes Control Plane.
        """
        return pulumi.get(self, "control_plane")


@pulumi.output_type
class GetLkeClustersLkeClusterControlPlaneResult(dict):
    def __init__(__self__, *,
                 high_availability: builtins.bool):
        """
        :param builtins.bool high_availability: Whether High Availability is enabled for the cluster Control Plane.
        """
        pulumi.set(__self__, "high_availability", high_availability)

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> builtins.bool:
        """
        Whether High Availability is enabled for the cluster Control Plane.
        """
        return pulumi.get(self, "high_availability")


@pulumi.output_type
class GetLkeTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetLkeTypesTypeResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 label: builtins.str,
                 prices: Sequence['outputs.GetLkeTypesTypePriceResult'],
                 region_prices: Sequence['outputs.GetLkeTypesTypeRegionPriceResult'],
                 transfer: builtins.int):
        """
        :param builtins.str id: The ID representing the Kubernetes type.
        :param builtins.str label: The Kubernetes type label is for display purposes only.
        :param Sequence['GetLkeTypesTypePriceArgs'] prices: Cost in US dollars, broken down into hourly and monthly charges.
        :param Sequence['GetLkeTypesTypeRegionPriceArgs'] region_prices: A list of region-specific prices for this LKE Type.
        :param builtins.int transfer: The monthly outbound transfer amount, in MB.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)
        pulumi.set(__self__, "transfer", transfer)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Kubernetes type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Kubernetes type label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetLkeTypesTypePriceResult']:
        """
        Cost in US dollars, broken down into hourly and monthly charges.
        """
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetLkeTypesTypeRegionPriceResult']:
        """
        A list of region-specific prices for this LKE Type.
        """
        return pulumi.get(self, "region_prices")

    @property
    @pulumi.getter
    def transfer(self) -> builtins.int:
        """
        The monthly outbound transfer amount, in MB.
        """
        return pulumi.get(self, "transfer")


@pulumi.output_type
class GetLkeTypesTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: Cost (in US dollars) per hour.
        :param builtins.float monthly: Cost (in US dollars) per month.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        Cost (in US dollars) per hour.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        Cost (in US dollars) per month.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetLkeTypesTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: The ID representing the Kubernetes type.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Kubernetes type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetLkeVersionsVersionResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 tier: builtins.str):
        """
        :param builtins.str id: The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
        :param builtins.str tier: The tier (`standard` or `enterprise`) of Linode LKE Versions to fetch.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tier(self) -> builtins.str:
        """
        The tier (`standard` or `enterprise`) of Linode LKE Versions to fetch.
        """
        return pulumi.get(self, "tier")


@pulumi.output_type
class GetNbTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the attribute to filter on.
        :param Sequence[builtins.str] values: The value(s) to be used in the filter.
        :param builtins.str match_by: The type of comparison to use for this filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the attribute to filter on.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        The value(s) to be used in the filter.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The type of comparison to use for this filter.
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetNbTypesTypeResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 label: builtins.str,
                 prices: Sequence['outputs.GetNbTypesTypePriceResult'],
                 region_prices: Sequence['outputs.GetNbTypesTypeRegionPriceResult'],
                 transfer: builtins.int):
        """
        :param builtins.str id: The unique ID assigned to this Node Balancer Type.
        :param builtins.str label: The Node Balancer Type's label.
        :param Sequence['GetNbTypesTypePriceArgs'] prices: Cost in US dollars, broken down into hourly and monthly charges.
        :param Sequence['GetNbTypesTypeRegionPriceArgs'] region_prices: A list of region-specific prices for this Node Balancer Type.
        :param builtins.int transfer: The monthly outbound transfer amount, in MB.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)
        pulumi.set(__self__, "transfer", transfer)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique ID assigned to this Node Balancer Type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Node Balancer Type's label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetNbTypesTypePriceResult']:
        """
        Cost in US dollars, broken down into hourly and monthly charges.
        """
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetNbTypesTypeRegionPriceResult']:
        """
        A list of region-specific prices for this Node Balancer Type.
        """
        return pulumi.get(self, "region_prices")

    @property
    @pulumi.getter
    def transfer(self) -> builtins.int:
        """
        The monthly outbound transfer amount, in MB.
        """
        return pulumi.get(self, "transfer")


@pulumi.output_type
class GetNbTypesTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetNbTypesTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetNetworkTransferPricesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetNetworkTransferPricesTypeResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 label: builtins.str,
                 prices: Sequence['outputs.GetNetworkTransferPricesTypePriceResult'],
                 region_prices: Sequence['outputs.GetNetworkTransferPricesTypeRegionPriceResult'],
                 transfer: builtins.int):
        """
        :param builtins.str id: The ID representing the Network Transfer Price.
        :param builtins.str label: The Network Transfer Price label is for display purposes only.
        :param Sequence['GetNetworkTransferPricesTypePriceArgs'] prices: Cost in US dollars, broken down into hourly and monthly charges.
        :param Sequence['GetNetworkTransferPricesTypeRegionPriceArgs'] region_prices: A list of region-specific prices for this Network Transfer Price.
        :param builtins.int transfer: The monthly outbound transfer amount, in MB.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)
        pulumi.set(__self__, "transfer", transfer)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Network Transfer Price.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Network Transfer Price label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetNetworkTransferPricesTypePriceResult']:
        """
        Cost in US dollars, broken down into hourly and monthly charges.
        """
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetNetworkTransferPricesTypeRegionPriceResult']:
        """
        A list of region-specific prices for this Network Transfer Price.
        """
        return pulumi.get(self, "region_prices")

    @property
    @pulumi.getter
    def transfer(self) -> builtins.int:
        """
        The monthly outbound transfer amount, in MB.
        """
        return pulumi.get(self, "transfer")


@pulumi.output_type
class GetNetworkTransferPricesTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: Cost (in US dollars) per hour.
        :param builtins.float monthly: Cost (in US dollars) per month.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        Cost (in US dollars) per hour.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        Cost (in US dollars) per month.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetNetworkTransferPricesTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: The ID representing the Network Transfer Price.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Network Transfer Price.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetNetworkingIpsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetNetworkingIpsIpAddressResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 gateway: builtins.str,
                 linode_id: builtins.int,
                 prefix: builtins.int,
                 public: builtins.bool,
                 rdns: builtins.str,
                 region: builtins.str,
                 reserved: builtins.bool,
                 subnet_mask: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str address: The IP address.
        :param builtins.str gateway: The default gateway for this address.
        :param builtins.int linode_id: The ID of the Linode this address currently belongs to.
        :param builtins.int prefix: The number of bits set in the subnet mask.
        :param builtins.bool public: Whether this is a public or private IP address.
        :param builtins.str rdns: The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
        :param builtins.str region: The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
        :param builtins.bool reserved: Whether this IP address is a reserved IP.
        :param builtins.str subnet_mask: The mask that separates host bits from network bits for this address.
        :param builtins.str type: The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "public", public)
        pulumi.set(__self__, "rdns", rdns)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "reserved", reserved)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The IP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for this address.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The ID of the Linode this address currently belongs to.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The number of bits set in the subnet mask.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def public(self) -> builtins.bool:
        """
        Whether this is a public or private IP address.
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter
    def rdns(self) -> builtins.str:
        """
        The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
        """
        return pulumi.get(self, "rdns")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def reserved(self) -> builtins.bool:
        """
        Whether this IP address is a reserved IP.
        """
        return pulumi.get(self, "reserved")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The mask that separates host bits from network bits for this address.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNodeBalancerConfigNodeStatusResult(dict):
    def __init__(__self__, *,
                 down: builtins.int,
                 up: builtins.int):
        """
        :param builtins.int down: The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        :param builtins.int up: The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        pulumi.set(__self__, "down", down)
        pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def down(self) -> builtins.int:
        """
        The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        """
        return pulumi.get(self, "down")

    @property
    @pulumi.getter
    def up(self) -> builtins.int:
        """
        The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        return pulumi.get(self, "up")


@pulumi.output_type
class GetNodeBalancerFirewallResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 id: builtins.int,
                 inbound_policy: builtins.str,
                 label: builtins.str,
                 outbound_policy: builtins.str,
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 updated: builtins.str,
                 inbounds: Optional[Sequence['outputs.GetNodeBalancerFirewallInboundResult']] = None,
                 outbounds: Optional[Sequence['outputs.GetNodeBalancerFirewallOutboundResult']] = None):
        """
        :param builtins.str created: When this firewall was created.
        :param builtins.int id: The NodeBalancer's ID.
        :param builtins.str inbound_policy: The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
        :param builtins.str label: Used to identify this rule. For display purposes only.
        :param builtins.str outbound_policy: The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
        :param builtins.str status: The status of the firewall. (`enabled`, `disabled`, `deleted`)
        :param Sequence[builtins.str] tags: The tags applied to the firewall. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.str updated: When this firewall was last updated.
        :param Sequence['GetNodeBalancerFirewallInboundArgs'] inbounds: A set of firewall rules that specify what inbound network traffic is allowed.
        :param Sequence['GetNodeBalancerFirewallOutboundArgs'] outbounds: A set of firewall rules that specify what outbound network traffic is allowed.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inbound_policy", inbound_policy)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "outbound_policy", outbound_policy)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated", updated)
        if inbounds is not None:
            pulumi.set(__self__, "inbounds", inbounds)
        if outbounds is not None:
            pulumi.set(__self__, "outbounds", outbounds)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this firewall was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The NodeBalancer's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inboundPolicy")
    def inbound_policy(self) -> builtins.str:
        """
        The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "inbound_policy")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        Used to identify this rule. For display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="outboundPolicy")
    def outbound_policy(self) -> builtins.str:
        """
        The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
        """
        return pulumi.get(self, "outbound_policy")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The status of the firewall. (`enabled`, `disabled`, `deleted`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        The tags applied to the firewall. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this firewall was last updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter
    def inbounds(self) -> Optional[Sequence['outputs.GetNodeBalancerFirewallInboundResult']]:
        """
        A set of firewall rules that specify what inbound network traffic is allowed.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Optional[Sequence['outputs.GetNodeBalancerFirewallOutboundResult']]:
        """
        A set of firewall rules that specify what outbound network traffic is allowed.
        """
        return pulumi.get(self, "outbounds")


@pulumi.output_type
class GetNodeBalancerFirewallInboundResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param builtins.str label: Used to identify this rule. For display purposes only.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        Used to identify this rule. For display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetNodeBalancerFirewallOutboundResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 ipv4s: Sequence[builtins.str],
                 ipv6s: Sequence[builtins.str],
                 label: builtins.str,
                 ports: builtins.str,
                 protocol: builtins.str):
        """
        :param builtins.str action: Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        :param Sequence[builtins.str] ipv4s: A list of IPv4 addresses or networks. Must be in IP/mask format.
        :param Sequence[builtins.str] ipv6s: A list of IPv6 addresses or networks. Must be in IP/mask format.
        :param builtins.str label: Used to identify this rule. For display purposes only.
        :param builtins.str ports: A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        :param builtins.str protocol: The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ipv4s", ipv4s)
        pulumi.set(__self__, "ipv6s", ipv6s)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ipv4s(self) -> Sequence[builtins.str]:
        """
        A list of IPv4 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv4s")

    @property
    @pulumi.getter
    def ipv6s(self) -> Sequence[builtins.str]:
        """
        A list of IPv6 addresses or networks. Must be in IP/mask format.
        """
        return pulumi.get(self, "ipv6s")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        Used to identify this rule. For display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def ports(self) -> builtins.str:
        """
        A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetNodeBalancerTransferResult(dict):
    def __init__(__self__, *,
                 in_: builtins.float,
                 out: builtins.float,
                 total: builtins.float):
        """
        :param builtins.float in_: The total transfer, in MB, used by this NodeBalancer for the current month
        :param builtins.float out: The total inbound transfer, in MB, used for this NodeBalancer for the current month
        :param builtins.float total: The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        pulumi.set(__self__, "in_", in_)
        pulumi.set(__self__, "out", out)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="in")
    def in_(self) -> builtins.float:
        """
        The total transfer, in MB, used by this NodeBalancer for the current month
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def out(self) -> builtins.float:
        """
        The total inbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter
    def total(self) -> builtins.float:
        """
        The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetNodebalancerConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetNodebalancerConfigsNodebalancerConfigResult(dict):
    def __init__(__self__, *,
                 algorithm: builtins.str,
                 check: builtins.str,
                 check_attempts: builtins.int,
                 check_body: builtins.str,
                 check_interval: builtins.int,
                 check_passive: builtins.bool,
                 check_path: builtins.str,
                 check_timeout: builtins.int,
                 cipher_suite: builtins.str,
                 id: builtins.int,
                 node_statuses: Sequence['outputs.GetNodebalancerConfigsNodebalancerConfigNodeStatusResult'],
                 nodebalancer_id: builtins.int,
                 port: builtins.int,
                 protocol: builtins.str,
                 proxy_protocol: builtins.str,
                 ssl_commonname: builtins.str,
                 ssl_fingerprint: builtins.str,
                 stickiness: builtins.str):
        """
        :param builtins.str algorithm: What algorithm this NodeBalancer should use for routing traffic to backends (`roundrobin`, `leastconn`, `source`)
        :param builtins.str check: The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)
        :param builtins.int check_attempts: How many times to attempt a check before considering a backend to be down. (1-30)
        :param builtins.str check_body: This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down
        :param builtins.int check_interval: How often, in seconds, to check that backends are up and serving requests.
        :param builtins.bool check_passive: If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
        :param builtins.str check_path: The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
        :param builtins.int check_timeout: How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
        :param builtins.str cipher_suite: What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary. (`recommended`, `legacy`)
        :param builtins.int id: The config's ID.
        :param Sequence['GetNodebalancerConfigsNodebalancerConfigNodeStatusArgs'] node_statuses: A structure containing information about the health of the backends for this port. This information is updated periodically as checks are performed against backends.
        :param builtins.int nodebalancer_id: The ID of the NodeBalancer to access.
               
               * `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.
        :param builtins.int port: The TCP port this Config is for.
        :param builtins.str protocol: The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)
        :param builtins.str proxy_protocol: The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, and `v2`) (Defaults to `none`)
        :param builtins.str ssl_commonname: The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
        :param builtins.str ssl_fingerprint: The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
        :param builtins.str stickiness: Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "check_attempts", check_attempts)
        pulumi.set(__self__, "check_body", check_body)
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "check_passive", check_passive)
        pulumi.set(__self__, "check_path", check_path)
        pulumi.set(__self__, "check_timeout", check_timeout)
        pulumi.set(__self__, "cipher_suite", cipher_suite)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "node_statuses", node_statuses)
        pulumi.set(__self__, "nodebalancer_id", nodebalancer_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "proxy_protocol", proxy_protocol)
        pulumi.set(__self__, "ssl_commonname", ssl_commonname)
        pulumi.set(__self__, "ssl_fingerprint", ssl_fingerprint)
        pulumi.set(__self__, "stickiness", stickiness)

    @property
    @pulumi.getter
    def algorithm(self) -> builtins.str:
        """
        What algorithm this NodeBalancer should use for routing traffic to backends (`roundrobin`, `leastconn`, `source`)
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter
    def check(self) -> builtins.str:
        """
        The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)
        """
        return pulumi.get(self, "check")

    @property
    @pulumi.getter(name="checkAttempts")
    def check_attempts(self) -> builtins.int:
        """
        How many times to attempt a check before considering a backend to be down. (1-30)
        """
        return pulumi.get(self, "check_attempts")

    @property
    @pulumi.getter(name="checkBody")
    def check_body(self) -> builtins.str:
        """
        This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down
        """
        return pulumi.get(self, "check_body")

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> builtins.int:
        """
        How often, in seconds, to check that backends are up and serving requests.
        """
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter(name="checkPassive")
    def check_passive(self) -> builtins.bool:
        """
        If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
        """
        return pulumi.get(self, "check_passive")

    @property
    @pulumi.getter(name="checkPath")
    def check_path(self) -> builtins.str:
        """
        The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
        """
        return pulumi.get(self, "check_path")

    @property
    @pulumi.getter(name="checkTimeout")
    def check_timeout(self) -> builtins.int:
        """
        How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
        """
        return pulumi.get(self, "check_timeout")

    @property
    @pulumi.getter(name="cipherSuite")
    def cipher_suite(self) -> builtins.str:
        """
        What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary. (`recommended`, `legacy`)
        """
        return pulumi.get(self, "cipher_suite")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The config's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nodeStatuses")
    def node_statuses(self) -> Sequence['outputs.GetNodebalancerConfigsNodebalancerConfigNodeStatusResult']:
        """
        A structure containing information about the health of the backends for this port. This information is updated periodically as checks are performed against backends.
        """
        return pulumi.get(self, "node_statuses")

    @property
    @pulumi.getter(name="nodebalancerId")
    def nodebalancer_id(self) -> builtins.int:
        """
        The ID of the NodeBalancer to access.

        * `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.
        """
        return pulumi.get(self, "nodebalancer_id")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The TCP port this Config is for.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyProtocol")
    def proxy_protocol(self) -> builtins.str:
        """
        The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, and `v2`) (Defaults to `none`)
        """
        return pulumi.get(self, "proxy_protocol")

    @property
    @pulumi.getter(name="sslCommonname")
    def ssl_commonname(self) -> builtins.str:
        """
        The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
        """
        return pulumi.get(self, "ssl_commonname")

    @property
    @pulumi.getter(name="sslFingerprint")
    def ssl_fingerprint(self) -> builtins.str:
        """
        The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
        """
        return pulumi.get(self, "ssl_fingerprint")

    @property
    @pulumi.getter
    def stickiness(self) -> builtins.str:
        """
        Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)
        """
        return pulumi.get(self, "stickiness")


@pulumi.output_type
class GetNodebalancerConfigsNodebalancerConfigNodeStatusResult(dict):
    def __init__(__self__, *,
                 down: builtins.int,
                 up: builtins.int):
        """
        :param builtins.int down: The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        :param builtins.int up: The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        pulumi.set(__self__, "down", down)
        pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def down(self) -> builtins.int:
        """
        The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.
        """
        return pulumi.get(self, "down")

    @property
    @pulumi.getter
    def up(self) -> builtins.int:
        """
        The number of backends considered to be 'UP' and healthy, and that are serving requests.
        """
        return pulumi.get(self, "up")


@pulumi.output_type
class GetNodebalancersFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetNodebalancersNodebalancerResult(dict):
    def __init__(__self__, *,
                 client_conn_throttle: builtins.int,
                 created: builtins.str,
                 hostname: builtins.str,
                 id: builtins.int,
                 ipv4: builtins.str,
                 ipv6: builtins.str,
                 label: builtins.str,
                 region: builtins.str,
                 tags: Sequence[builtins.str],
                 transfers: Sequence['outputs.GetNodebalancersNodebalancerTransferResult'],
                 updated: builtins.str):
        """
        :param builtins.int client_conn_throttle: Throttle connections per second (0-20)
        :param builtins.str created: When this Linode NodeBalancer was created
        :param builtins.str hostname: This NodeBalancer's hostname, ending with .ip.linodeusercontent.com
        :param builtins.int id: The Linode NodeBalancer's unique ID
        :param builtins.str ipv4: The Public IPv4 Address of this NodeBalancer
        :param builtins.str ipv6: The Public IPv6 Address of this NodeBalancer
        :param builtins.str label: The label of the Linode NodeBalancer
        :param builtins.str region: The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
        :param Sequence[builtins.str] tags: A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param Sequence['GetNodebalancersNodebalancerTransferArgs'] transfers: Information about the amount of transfer this NodeBalancer has had so far this month.
        :param builtins.str updated: When this Linode NodeBalancer was last updated
        """
        pulumi.set(__self__, "client_conn_throttle", client_conn_throttle)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "transfers", transfers)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter(name="clientConnThrottle")
    def client_conn_throttle(self) -> builtins.int:
        """
        Throttle connections per second (0-20)
        """
        return pulumi.get(self, "client_conn_throttle")

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this Linode NodeBalancer was created
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def hostname(self) -> builtins.str:
        """
        This NodeBalancer's hostname, ending with .ip.linodeusercontent.com
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The Linode NodeBalancer's unique ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4(self) -> builtins.str:
        """
        The Public IPv4 Address of this NodeBalancer
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> builtins.str:
        """
        The Public IPv6 Address of this NodeBalancer
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Linode NodeBalancer
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def transfers(self) -> Sequence['outputs.GetNodebalancersNodebalancerTransferResult']:
        """
        Information about the amount of transfer this NodeBalancer has had so far this month.
        """
        return pulumi.get(self, "transfers")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this Linode NodeBalancer was last updated
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetNodebalancersNodebalancerTransferResult(dict):
    def __init__(__self__, *,
                 in_: builtins.float,
                 out: builtins.float,
                 total: builtins.float):
        """
        :param builtins.float in_: The total transfer, in MB, used by this NodeBalancer for the current month
        :param builtins.float out: The total inbound transfer, in MB, used for this NodeBalancer for the current month
        :param builtins.float total: The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        pulumi.set(__self__, "in_", in_)
        pulumi.set(__self__, "out", out)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="in")
    def in_(self) -> builtins.float:
        """
        The total transfer, in MB, used by this NodeBalancer for the current month
        """
        return pulumi.get(self, "in_")

    @property
    @pulumi.getter
    def out(self) -> builtins.float:
        """
        The total inbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "out")

    @property
    @pulumi.getter
    def total(self) -> builtins.float:
        """
        The total outbound transfer, in MB, used for this NodeBalancer for the current month
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetObjectStorageEndpointsEndpointResult(dict):
    def __init__(__self__, *,
                 endpoint_type: builtins.str,
                 region: builtins.str,
                 s3_endpoint: builtins.str):
        """
        :param builtins.str endpoint_type: The type of `s3_endpoint` available to the active `user`. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.
        :param builtins.str region: The Akamai cloud computing region, represented by its slug value. The [list regions](https://techdocs.akamai.com/linode-api/reference/get-regions) API is available to see all regions available.
        :param builtins.str s3_endpoint: Your s3 endpoint URL, based on the `endpoint_type` and `region`. Output as null if you haven't assigned an endpoint for your user in this region with the specific endpoint type.
        """
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "s3_endpoint", s3_endpoint)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> builtins.str:
        """
        The type of `s3_endpoint` available to the active `user`. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.
        """
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The Akamai cloud computing region, represented by its slug value. The [list regions](https://techdocs.akamai.com/linode-api/reference/get-regions) API is available to see all regions available.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> builtins.str:
        """
        Your s3 endpoint URL, based on the `endpoint_type` and `region`. Output as null if you haven't assigned an endpoint for your user in this region with the specific endpoint type.
        """
        return pulumi.get(self, "s3_endpoint")


@pulumi.output_type
class GetObjectStorageEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetPlacementGroupMemberResult(dict):
    def __init__(__self__, *,
                 is_compliant: builtins.bool,
                 linode_id: builtins.int):
        """
        :param builtins.bool is_compliant: Whether this Linode is currently compliant with the group's placement group type.
        :param builtins.int linode_id: The ID of the Linode.
        """
        pulumi.set(__self__, "is_compliant", is_compliant)
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> builtins.bool:
        """
        Whether this Linode is currently compliant with the group's placement group type.
        """
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The ID of the Linode.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class GetPlacementGroupMigrationsResult(dict):
    def __init__(__self__, *,
                 inbounds: Sequence['outputs.GetPlacementGroupMigrationsInboundResult'],
                 outbounds: Sequence['outputs.GetPlacementGroupMigrationsOutboundResult']):
        """
        :param Sequence['GetPlacementGroupMigrationsInboundArgs'] inbounds: A list of the Linodes the system is migrating into the placement group.
        :param Sequence['GetPlacementGroupMigrationsOutboundArgs'] outbounds: A list of the Linodes the system is migrating out of the placement group.
        """
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetPlacementGroupMigrationsInboundResult']:
        """
        A list of the Linodes the system is migrating into the placement group.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetPlacementGroupMigrationsOutboundResult']:
        """
        A list of the Linodes the system is migrating out of the placement group.
        """
        return pulumi.get(self, "outbounds")


@pulumi.output_type
class GetPlacementGroupMigrationsInboundResult(dict):
    def __init__(__self__, *,
                 linode_id: builtins.int):
        """
        :param builtins.int linode_id: The ID of the Linode.
        """
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The ID of the Linode.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class GetPlacementGroupMigrationsOutboundResult(dict):
    def __init__(__self__, *,
                 linode_id: builtins.int):
        """
        :param builtins.int linode_id: The ID of the Linode.
        """
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The ID of the Linode.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class GetPlacementGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetPlacementGroupsPlacementGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 is_compliant: builtins.bool,
                 label: builtins.str,
                 placement_group_policy: builtins.str,
                 placement_group_type: builtins.str,
                 region: builtins.str,
                 members: Optional[Sequence['outputs.GetPlacementGroupsPlacementGroupMemberResult']] = None,
                 migrations: Optional['outputs.GetPlacementGroupsPlacementGroupMigrationsResult'] = None):
        """
        :param builtins.int id: The ID of the placement group.
        :param builtins.bool is_compliant: Whether this Linode is currently compliant with the group's placement group type.
        :param builtins.str label: The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        :param builtins.str placement_group_policy: Whether Linodes must be able to become compliant during assignment. (Default `strict`)
        :param builtins.str placement_group_type: The placement group type to use when placing Linodes in this group.
        :param builtins.str region: The region of the Placement Group.
        :param Sequence['GetPlacementGroupsPlacementGroupMemberArgs'] members: A set of Linodes currently assigned to this Placement Group.
        :param 'GetPlacementGroupsPlacementGroupMigrationsArgs' migrations: Any Linodes that are being migrated to or from the placement group.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_compliant", is_compliant)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "placement_group_policy", placement_group_policy)
        pulumi.set(__self__, "placement_group_type", placement_group_type)
        pulumi.set(__self__, "region", region)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if migrations is not None:
            pulumi.set(__self__, "migrations", migrations)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the placement group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> builtins.bool:
        """
        Whether this Linode is currently compliant with the group's placement group type.
        """
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="placementGroupPolicy")
    def placement_group_policy(self) -> builtins.str:
        """
        Whether Linodes must be able to become compliant during assignment. (Default `strict`)
        """
        return pulumi.get(self, "placement_group_policy")

    @property
    @pulumi.getter(name="placementGroupType")
    def placement_group_type(self) -> builtins.str:
        """
        The placement group type to use when placing Linodes in this group.
        """
        return pulumi.get(self, "placement_group_type")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region of the Placement Group.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetPlacementGroupsPlacementGroupMemberResult']]:
        """
        A set of Linodes currently assigned to this Placement Group.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def migrations(self) -> Optional['outputs.GetPlacementGroupsPlacementGroupMigrationsResult']:
        """
        Any Linodes that are being migrated to or from the placement group.
        """
        return pulumi.get(self, "migrations")


@pulumi.output_type
class GetPlacementGroupsPlacementGroupMemberResult(dict):
    def __init__(__self__, *,
                 is_compliant: builtins.bool,
                 linode_id: builtins.int):
        """
        :param builtins.bool is_compliant: Whether this Linode is currently compliant with the group's placement group type.
        :param builtins.int linode_id: The unique identifier for the Linode being migrated out of the placement group.
        """
        pulumi.set(__self__, "is_compliant", is_compliant)
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="isCompliant")
    def is_compliant(self) -> builtins.bool:
        """
        Whether this Linode is currently compliant with the group's placement group type.
        """
        return pulumi.get(self, "is_compliant")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The unique identifier for the Linode being migrated out of the placement group.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class GetPlacementGroupsPlacementGroupMigrationsResult(dict):
    def __init__(__self__, *,
                 inbounds: Sequence['outputs.GetPlacementGroupsPlacementGroupMigrationsInboundResult'],
                 outbounds: Sequence['outputs.GetPlacementGroupsPlacementGroupMigrationsOutboundResult']):
        """
        :param Sequence['GetPlacementGroupsPlacementGroupMigrationsInboundArgs'] inbounds: A list of the Linodes the system is migrating into the placement group.
        :param Sequence['GetPlacementGroupsPlacementGroupMigrationsOutboundArgs'] outbounds: A list of the Linodes the system is migrating out of the placement group.
        """
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetPlacementGroupsPlacementGroupMigrationsInboundResult']:
        """
        A list of the Linodes the system is migrating into the placement group.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetPlacementGroupsPlacementGroupMigrationsOutboundResult']:
        """
        A list of the Linodes the system is migrating out of the placement group.
        """
        return pulumi.get(self, "outbounds")


@pulumi.output_type
class GetPlacementGroupsPlacementGroupMigrationsInboundResult(dict):
    def __init__(__self__, *,
                 linode_id: builtins.int):
        """
        :param builtins.int linode_id: The unique identifier for the Linode being migrated out of the placement group.
        """
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The unique identifier for the Linode being migrated out of the placement group.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class GetPlacementGroupsPlacementGroupMigrationsOutboundResult(dict):
    def __init__(__self__, *,
                 linode_id: builtins.int):
        """
        :param builtins.int linode_id: The unique identifier for the Linode being migrated out of the placement group.
        """
        pulumi.set(__self__, "linode_id", linode_id)

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The unique identifier for the Linode being migrated out of the placement group.
        """
        return pulumi.get(self, "linode_id")


@pulumi.output_type
class GetProfileReferralsResult(dict):
    def __init__(__self__, *,
                 code: builtins.str,
                 completed: builtins.int,
                 credit: builtins.float,
                 pending: builtins.int,
                 total: builtins.int,
                 url: builtins.str):
        """
        :param builtins.str code: The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
        :param builtins.int completed: The number of completed signups with the referral code.
        :param builtins.float credit: The amount of account credit in US Dollars issued to the account through the referral program.
        :param builtins.int pending: The number of pending signups for the referral code. To receive credit the signups must be completed.
        :param builtins.int total: The number of users who have signed up with the referral code.
        :param builtins.str url: The referral URL.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "completed", completed)
        pulumi.set(__self__, "credit", credit)
        pulumi.set(__self__, "pending", pending)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def code(self) -> builtins.str:
        """
        The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def completed(self) -> builtins.int:
        """
        The number of completed signups with the referral code.
        """
        return pulumi.get(self, "completed")

    @property
    @pulumi.getter
    def credit(self) -> builtins.float:
        """
        The amount of account credit in US Dollars issued to the account through the referral program.
        """
        return pulumi.get(self, "credit")

    @property
    @pulumi.getter
    def pending(self) -> builtins.int:
        """
        The number of pending signups for the referral code. To receive credit the signups must be completed.
        """
        return pulumi.get(self, "pending")

    @property
    @pulumi.getter
    def total(self) -> builtins.int:
        """
        The number of users who have signed up with the referral code.
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The referral URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetRegionPlacementGroupLimitResult(dict):
    def __init__(__self__, *,
                 maximum_linodes_per_pg: builtins.int,
                 maximum_pgs_per_customer: builtins.int):
        """
        :param builtins.int maximum_linodes_per_pg: The maximum number of Linodes allowed to be assigned to a placement group in this region.
        :param builtins.int maximum_pgs_per_customer: The maximum number of placement groups allowed for the current user in this region.
        """
        pulumi.set(__self__, "maximum_linodes_per_pg", maximum_linodes_per_pg)
        pulumi.set(__self__, "maximum_pgs_per_customer", maximum_pgs_per_customer)

    @property
    @pulumi.getter(name="maximumLinodesPerPg")
    def maximum_linodes_per_pg(self) -> builtins.int:
        """
        The maximum number of Linodes allowed to be assigned to a placement group in this region.
        """
        return pulumi.get(self, "maximum_linodes_per_pg")

    @property
    @pulumi.getter(name="maximumPgsPerCustomer")
    def maximum_pgs_per_customer(self) -> builtins.int:
        """
        The maximum number of placement groups allowed for the current user in this region.
        """
        return pulumi.get(self, "maximum_pgs_per_customer")


@pulumi.output_type
class GetRegionResolverResult(dict):
    def __init__(__self__, *,
                 ipv4: builtins.str,
                 ipv6: builtins.str):
        """
        :param builtins.str ipv4: The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        :param builtins.str ipv6: The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> builtins.str:
        """
        The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> builtins.str:
        """
        The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetRegionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 capabilities: Sequence[builtins.str],
                 country: builtins.str,
                 id: builtins.str,
                 label: builtins.str,
                 placement_group_limits: Sequence['outputs.GetRegionsRegionPlacementGroupLimitResult'],
                 site_type: builtins.str,
                 status: builtins.str,
                 resolvers: Optional[Sequence['outputs.GetRegionsRegionResolverResult']] = None):
        """
        :param Sequence[builtins.str] capabilities: A list of capabilities of this region.
        :param builtins.str country: The country the region resides in.
        :param builtins.str id: The unique ID of this Region.
        :param builtins.str label: Detailed location information for this Region, including city, state or region, and country.
        :param Sequence['GetRegionsRegionPlacementGroupLimitArgs'] placement_group_limits: Information about placement groups limits for this region.
        :param builtins.str site_type: The type of this region.
        :param builtins.str status: This region’s current operational status (ok or outage).
        """
        pulumi.set(__self__, "capabilities", capabilities)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "placement_group_limits", placement_group_limits)
        pulumi.set(__self__, "site_type", site_type)
        pulumi.set(__self__, "status", status)
        if resolvers is not None:
            pulumi.set(__self__, "resolvers", resolvers)

    @property
    @pulumi.getter
    def capabilities(self) -> Sequence[builtins.str]:
        """
        A list of capabilities of this region.
        """
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter
    def country(self) -> builtins.str:
        """
        The country the region resides in.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique ID of this Region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        Detailed location information for this Region, including city, state or region, and country.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="placementGroupLimits")
    def placement_group_limits(self) -> Sequence['outputs.GetRegionsRegionPlacementGroupLimitResult']:
        """
        Information about placement groups limits for this region.
        """
        return pulumi.get(self, "placement_group_limits")

    @property
    @pulumi.getter(name="siteType")
    def site_type(self) -> builtins.str:
        """
        The type of this region.
        """
        return pulumi.get(self, "site_type")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        This region’s current operational status (ok or outage).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def resolvers(self) -> Optional[Sequence['outputs.GetRegionsRegionResolverResult']]:
        return pulumi.get(self, "resolvers")


@pulumi.output_type
class GetRegionsRegionPlacementGroupLimitResult(dict):
    def __init__(__self__, *,
                 maximum_linodes_per_pg: builtins.int,
                 maximum_pgs_per_customer: builtins.int):
        """
        :param builtins.int maximum_linodes_per_pg: The maximum number of Linodes allowed to be assigned to a placement group in this region.
        :param builtins.int maximum_pgs_per_customer: The maximum number of placement groups allowed for the current user in this region.
        """
        pulumi.set(__self__, "maximum_linodes_per_pg", maximum_linodes_per_pg)
        pulumi.set(__self__, "maximum_pgs_per_customer", maximum_pgs_per_customer)

    @property
    @pulumi.getter(name="maximumLinodesPerPg")
    def maximum_linodes_per_pg(self) -> builtins.int:
        """
        The maximum number of Linodes allowed to be assigned to a placement group in this region.
        """
        return pulumi.get(self, "maximum_linodes_per_pg")

    @property
    @pulumi.getter(name="maximumPgsPerCustomer")
    def maximum_pgs_per_customer(self) -> builtins.int:
        """
        The maximum number of placement groups allowed for the current user in this region.
        """
        return pulumi.get(self, "maximum_pgs_per_customer")


@pulumi.output_type
class GetRegionsRegionResolverResult(dict):
    def __init__(__self__, *,
                 ipv4: builtins.str,
                 ipv6: builtins.str):
        """
        :param builtins.str ipv4: The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        :param builtins.str ipv6: The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)

    @property
    @pulumi.getter
    def ipv4(self) -> builtins.str:
        """
        The IPv4 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> builtins.str:
        """
        The IPv6 addresses for this region’s DNS resolvers, separated by commas.
        """
        return pulumi.get(self, "ipv6")


@pulumi.output_type
class GetSshkeysFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetSshkeysSshkeyResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 label: builtins.str,
                 ssh_key: builtins.str,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str created: The date this key was added.
        :param builtins.str label: The label of the SSH Key.
        :param builtins.str ssh_key: The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
        :param builtins.str id: The ID of the SSH Key.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "ssh_key", ssh_key)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date this key was added.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the SSH Key.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> builtins.str:
        """
        The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
        """
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the SSH Key.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetStackScriptUserDefinedFieldResult(dict):
    def __init__(__self__, *,
                 default: builtins.str,
                 example: builtins.str,
                 label: builtins.str,
                 many_of: builtins.str,
                 name: builtins.str,
                 one_of: builtins.str):
        """
        :param builtins.str default: The default value. If not specified, this value will be used.
        :param builtins.str example: An example value for the field.
        :param builtins.str label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        :param builtins.str many_of: A list of acceptable values for the field in any quantity, combination or order.
        :param builtins.str name: The name of the field.
        :param builtins.str one_of: A list of acceptable single values for the field.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "many_of", many_of)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "one_of", one_of)

    @property
    @pulumi.getter
    def default(self) -> builtins.str:
        """
        The default value. If not specified, this value will be used.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def example(self) -> builtins.str:
        """
        An example value for the field.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="manyOf")
    def many_of(self) -> builtins.str:
        """
        A list of acceptable values for the field in any quantity, combination or order.
        """
        return pulumi.get(self, "many_of")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> builtins.str:
        """
        A list of acceptable single values for the field.
        """
        return pulumi.get(self, "one_of")


@pulumi.output_type
class GetStackScriptsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetStackScriptsStackscriptResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 deployments_active: builtins.int,
                 deployments_total: builtins.int,
                 description: builtins.str,
                 id: builtins.str,
                 images: Sequence[builtins.str],
                 is_public: builtins.bool,
                 label: builtins.str,
                 rev_note: builtins.str,
                 script: builtins.str,
                 updated: builtins.str,
                 user_defined_fields: Sequence['outputs.GetStackScriptsStackscriptUserDefinedFieldResult'],
                 user_gravatar_id: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str created: The date this StackScript was created.
        :param builtins.int deployments_active: Count of currently active, deployed Linodes created from this StackScript.
        :param builtins.int deployments_total: The total number of times this StackScript has been deployed.
        :param builtins.str description: A description for the StackScript.
        :param builtins.str id: The unique ID of the StackScript.
        :param Sequence[builtins.str] images: An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
        :param builtins.bool is_public: This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
        :param builtins.str label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        :param builtins.str rev_note: This field allows you to add notes for the set of revisions made to this StackScript.
        :param builtins.str script: The script to execute when provisioning a new Linode with this StackScript.
        :param builtins.str updated: The date this StackScript was updated.
        :param Sequence['GetStackScriptsStackscriptUserDefinedFieldArgs'] user_defined_fields: This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
        :param builtins.str user_gravatar_id: The Gravatar ID for the User who created the StackScript.
        :param builtins.str username: The User who created the StackScript.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "deployments_active", deployments_active)
        pulumi.set(__self__, "deployments_total", deployments_total)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "rev_note", rev_note)
        pulumi.set(__self__, "script", script)
        pulumi.set(__self__, "updated", updated)
        pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        pulumi.set(__self__, "user_gravatar_id", user_gravatar_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date this StackScript was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="deploymentsActive")
    def deployments_active(self) -> builtins.int:
        """
        Count of currently active, deployed Linodes created from this StackScript.
        """
        return pulumi.get(self, "deployments_active")

    @property
    @pulumi.getter(name="deploymentsTotal")
    def deployments_total(self) -> builtins.int:
        """
        The total number of times this StackScript has been deployed.
        """
        return pulumi.get(self, "deployments_total")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A description for the StackScript.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique ID of the StackScript.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def images(self) -> Sequence[builtins.str]:
        """
        An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> builtins.bool:
        """
        This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="revNote")
    def rev_note(self) -> builtins.str:
        """
        This field allows you to add notes for the set of revisions made to this StackScript.
        """
        return pulumi.get(self, "rev_note")

    @property
    @pulumi.getter
    def script(self) -> builtins.str:
        """
        The script to execute when provisioning a new Linode with this StackScript.
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        The date this StackScript was updated.
        """
        return pulumi.get(self, "updated")

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Sequence['outputs.GetStackScriptsStackscriptUserDefinedFieldResult']:
        """
        This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
        """
        return pulumi.get(self, "user_defined_fields")

    @property
    @pulumi.getter(name="userGravatarId")
    def user_gravatar_id(self) -> builtins.str:
        """
        The Gravatar ID for the User who created the StackScript.
        """
        return pulumi.get(self, "user_gravatar_id")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        The User who created the StackScript.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetStackScriptsStackscriptUserDefinedFieldResult(dict):
    def __init__(__self__, *,
                 default: builtins.str,
                 example: builtins.str,
                 label: builtins.str,
                 many_of: builtins.str,
                 name: builtins.str,
                 one_of: builtins.str):
        """
        :param builtins.str default: The default value. If not specified, this value will be used.
        :param builtins.str example: An example value for the field.
        :param builtins.str label: A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        :param builtins.str many_of: A list of acceptable values for the field in any quantity, combination or order.
        :param builtins.str name: The name of the field.
        :param builtins.str one_of: A list of acceptable single values for the field.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "many_of", many_of)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "one_of", one_of)

    @property
    @pulumi.getter
    def default(self) -> builtins.str:
        """
        The default value. If not specified, this value will be used.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def example(self) -> builtins.str:
        """
        An example value for the field.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        A human-readable label for the field that will serve as the input prompt for entering the value during deployment.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="manyOf")
    def many_of(self) -> builtins.str:
        """
        A list of acceptable values for the field in any quantity, combination or order.
        """
        return pulumi.get(self, "many_of")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oneOf")
    def one_of(self) -> builtins.str:
        """
        A list of acceptable single values for the field.
        """
        return pulumi.get(self, "one_of")


@pulumi.output_type
class GetUserDatabaseGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserDomainGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserFirewallGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserGlobalGrantResult(dict):
    def __init__(__self__, *,
                 account_access: builtins.str,
                 add_databases: builtins.bool,
                 add_domains: builtins.bool,
                 add_firewalls: builtins.bool,
                 add_images: builtins.bool,
                 add_linodes: builtins.bool,
                 add_longview: builtins.bool,
                 add_nodebalancers: builtins.bool,
                 add_placement_groups: builtins.bool,
                 add_stackscripts: builtins.bool,
                 add_volumes: builtins.bool,
                 add_vpcs: builtins.bool,
                 cancel_account: builtins.bool,
                 longview_subscription: builtins.bool):
        """
        :param builtins.str account_access: The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        :param builtins.bool add_databases: If true, this User may add Managed Databases.
        :param builtins.bool add_domains: If true, this User may add Domains.
        :param builtins.bool add_firewalls: If true, this User may add Firewalls.
        :param builtins.bool add_images: If true, this User may add Images.
        :param builtins.bool add_linodes: If true, this User may create Linodes.
        :param builtins.bool add_longview: If true, this User may create Longview clients and view the current plan.
        :param builtins.bool add_nodebalancers: If true, this User may add NodeBalancers.
        :param builtins.bool add_placement_groups: If true, this User may add Placement Groups.
        :param builtins.bool add_volumes: If true, this User may add Volumes.
        :param builtins.bool add_vpcs: If true, this User may add Virtual Private Clouds (VPCs).
        :param builtins.bool cancel_account: If true, this User may cancel the entire Account.
        :param builtins.bool longview_subscription: If true, this User may manage the Account’s Longview subscription.
        """
        pulumi.set(__self__, "account_access", account_access)
        pulumi.set(__self__, "add_databases", add_databases)
        pulumi.set(__self__, "add_domains", add_domains)
        pulumi.set(__self__, "add_firewalls", add_firewalls)
        pulumi.set(__self__, "add_images", add_images)
        pulumi.set(__self__, "add_linodes", add_linodes)
        pulumi.set(__self__, "add_longview", add_longview)
        pulumi.set(__self__, "add_nodebalancers", add_nodebalancers)
        pulumi.set(__self__, "add_placement_groups", add_placement_groups)
        pulumi.set(__self__, "add_stackscripts", add_stackscripts)
        pulumi.set(__self__, "add_volumes", add_volumes)
        pulumi.set(__self__, "add_vpcs", add_vpcs)
        pulumi.set(__self__, "cancel_account", cancel_account)
        pulumi.set(__self__, "longview_subscription", longview_subscription)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> builtins.str:
        """
        The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="addDatabases")
    def add_databases(self) -> builtins.bool:
        """
        If true, this User may add Managed Databases.
        """
        return pulumi.get(self, "add_databases")

    @property
    @pulumi.getter(name="addDomains")
    def add_domains(self) -> builtins.bool:
        """
        If true, this User may add Domains.
        """
        return pulumi.get(self, "add_domains")

    @property
    @pulumi.getter(name="addFirewalls")
    def add_firewalls(self) -> builtins.bool:
        """
        If true, this User may add Firewalls.
        """
        return pulumi.get(self, "add_firewalls")

    @property
    @pulumi.getter(name="addImages")
    def add_images(self) -> builtins.bool:
        """
        If true, this User may add Images.
        """
        return pulumi.get(self, "add_images")

    @property
    @pulumi.getter(name="addLinodes")
    def add_linodes(self) -> builtins.bool:
        """
        If true, this User may create Linodes.
        """
        return pulumi.get(self, "add_linodes")

    @property
    @pulumi.getter(name="addLongview")
    def add_longview(self) -> builtins.bool:
        """
        If true, this User may create Longview clients and view the current plan.
        """
        return pulumi.get(self, "add_longview")

    @property
    @pulumi.getter(name="addNodebalancers")
    def add_nodebalancers(self) -> builtins.bool:
        """
        If true, this User may add NodeBalancers.
        """
        return pulumi.get(self, "add_nodebalancers")

    @property
    @pulumi.getter(name="addPlacementGroups")
    def add_placement_groups(self) -> builtins.bool:
        """
        If true, this User may add Placement Groups.
        """
        return pulumi.get(self, "add_placement_groups")

    @property
    @pulumi.getter(name="addStackscripts")
    def add_stackscripts(self) -> builtins.bool:
        return pulumi.get(self, "add_stackscripts")

    @property
    @pulumi.getter(name="addVolumes")
    def add_volumes(self) -> builtins.bool:
        """
        If true, this User may add Volumes.
        """
        return pulumi.get(self, "add_volumes")

    @property
    @pulumi.getter(name="addVpcs")
    def add_vpcs(self) -> builtins.bool:
        """
        If true, this User may add Virtual Private Clouds (VPCs).
        """
        return pulumi.get(self, "add_vpcs")

    @property
    @pulumi.getter(name="cancelAccount")
    def cancel_account(self) -> builtins.bool:
        """
        If true, this User may cancel the entire Account.
        """
        return pulumi.get(self, "cancel_account")

    @property
    @pulumi.getter(name="longviewSubscription")
    def longview_subscription(self) -> builtins.bool:
        """
        If true, this User may manage the Account’s Longview subscription.
        """
        return pulumi.get(self, "longview_subscription")


@pulumi.output_type
class GetUserImageGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserLinodeGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserLongviewGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserNodebalancerGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserPlacementGroupGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserStackscriptGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserVolumeGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUserVpcGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 database_grants: Sequence['outputs.GetUsersUserDatabaseGrantResult'],
                 domain_grants: Sequence['outputs.GetUsersUserDomainGrantResult'],
                 email: builtins.str,
                 firewall_grants: Sequence['outputs.GetUsersUserFirewallGrantResult'],
                 global_grants: Sequence['outputs.GetUsersUserGlobalGrantResult'],
                 id: builtins.str,
                 image_grants: Sequence['outputs.GetUsersUserImageGrantResult'],
                 linode_grants: Sequence['outputs.GetUsersUserLinodeGrantResult'],
                 longview_grants: Sequence['outputs.GetUsersUserLongviewGrantResult'],
                 nodebalancer_grants: Sequence['outputs.GetUsersUserNodebalancerGrantResult'],
                 password_created: builtins.str,
                 placement_group_grants: Sequence['outputs.GetUsersUserPlacementGroupGrantResult'],
                 restricted: builtins.bool,
                 ssh_keys: Sequence[builtins.str],
                 stackscript_grants: Sequence['outputs.GetUsersUserStackscriptGrantResult'],
                 tfa_enabled: builtins.bool,
                 user_type: builtins.str,
                 username: builtins.str,
                 verified_phone_number: builtins.str,
                 volume_grants: Sequence['outputs.GetUsersUserVolumeGrantResult'],
                 vpc_grants: Sequence['outputs.GetUsersUserVpcGrantResult']):
        """
        :param Sequence['GetUsersUserDatabaseGrantArgs'] database_grants: A set containing all of the user's active grants.
        :param Sequence['GetUsersUserDomainGrantArgs'] domain_grants: A set containing all of the user's active grants.
        :param builtins.str email: The email address for this User, for account management communications, and may be used for other communications as configured.
        :param Sequence['GetUsersUserFirewallGrantArgs'] firewall_grants: A set containing all of the user's active grants.
        :param Sequence['GetUsersUserGlobalGrantArgs'] global_grants: A structure containing the Account-level grants a User has.
        :param builtins.str id: The ID of entity this grant applies to.
        :param Sequence['GetUsersUserImageGrantArgs'] image_grants: A set containing all of the user's active grants.
        :param Sequence['GetUsersUserLinodeGrantArgs'] linode_grants: A set containing all of the user's active grants.
        :param Sequence['GetUsersUserLongviewGrantArgs'] longview_grants: A set containing all of the user's active grants.
        :param Sequence['GetUsersUserNodebalancerGrantArgs'] nodebalancer_grants: A set containing all of the user's active grants.
        :param builtins.str password_created: The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
        :param Sequence['GetUsersUserPlacementGroupGrantArgs'] placement_group_grants: A set containing all of the user's active grants.
        :param builtins.bool restricted: If true, this User must be granted access to perform actions or access entities on this Account.
        :param Sequence[builtins.str] ssh_keys: A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
        :param Sequence['GetUsersUserStackscriptGrantArgs'] stackscript_grants: A set containing all of the user's active grants.
        :param builtins.bool tfa_enabled: A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
        :param builtins.str user_type: The type of this user.
        :param builtins.str username: This User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
        :param builtins.str verified_phone_number: The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
        :param Sequence['GetUsersUserVolumeGrantArgs'] volume_grants: A set containing all of the user's active grants.
        :param Sequence['GetUsersUserVpcGrantArgs'] vpc_grants: A set containing all of the user's active grants.
        """
        pulumi.set(__self__, "database_grants", database_grants)
        pulumi.set(__self__, "domain_grants", domain_grants)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "firewall_grants", firewall_grants)
        pulumi.set(__self__, "global_grants", global_grants)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_grants", image_grants)
        pulumi.set(__self__, "linode_grants", linode_grants)
        pulumi.set(__self__, "longview_grants", longview_grants)
        pulumi.set(__self__, "nodebalancer_grants", nodebalancer_grants)
        pulumi.set(__self__, "password_created", password_created)
        pulumi.set(__self__, "placement_group_grants", placement_group_grants)
        pulumi.set(__self__, "restricted", restricted)
        pulumi.set(__self__, "ssh_keys", ssh_keys)
        pulumi.set(__self__, "stackscript_grants", stackscript_grants)
        pulumi.set(__self__, "tfa_enabled", tfa_enabled)
        pulumi.set(__self__, "user_type", user_type)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "verified_phone_number", verified_phone_number)
        pulumi.set(__self__, "volume_grants", volume_grants)
        pulumi.set(__self__, "vpc_grants", vpc_grants)

    @property
    @pulumi.getter(name="databaseGrants")
    def database_grants(self) -> Sequence['outputs.GetUsersUserDatabaseGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "database_grants")

    @property
    @pulumi.getter(name="domainGrants")
    def domain_grants(self) -> Sequence['outputs.GetUsersUserDomainGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "domain_grants")

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        """
        The email address for this User, for account management communications, and may be used for other communications as configured.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firewallGrants")
    def firewall_grants(self) -> Sequence['outputs.GetUsersUserFirewallGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "firewall_grants")

    @property
    @pulumi.getter(name="globalGrants")
    def global_grants(self) -> Sequence['outputs.GetUsersUserGlobalGrantResult']:
        """
        A structure containing the Account-level grants a User has.
        """
        return pulumi.get(self, "global_grants")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageGrants")
    def image_grants(self) -> Sequence['outputs.GetUsersUserImageGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "image_grants")

    @property
    @pulumi.getter(name="linodeGrants")
    def linode_grants(self) -> Sequence['outputs.GetUsersUserLinodeGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "linode_grants")

    @property
    @pulumi.getter(name="longviewGrants")
    def longview_grants(self) -> Sequence['outputs.GetUsersUserLongviewGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "longview_grants")

    @property
    @pulumi.getter(name="nodebalancerGrants")
    def nodebalancer_grants(self) -> Sequence['outputs.GetUsersUserNodebalancerGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "nodebalancer_grants")

    @property
    @pulumi.getter(name="passwordCreated")
    def password_created(self) -> builtins.str:
        """
        The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
        """
        return pulumi.get(self, "password_created")

    @property
    @pulumi.getter(name="placementGroupGrants")
    def placement_group_grants(self) -> Sequence['outputs.GetUsersUserPlacementGroupGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "placement_group_grants")

    @property
    @pulumi.getter
    def restricted(self) -> builtins.bool:
        """
        If true, this User must be granted access to perform actions or access entities on this Account.
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Sequence[builtins.str]:
        """
        A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter(name="stackscriptGrants")
    def stackscript_grants(self) -> Sequence['outputs.GetUsersUserStackscriptGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "stackscript_grants")

    @property
    @pulumi.getter(name="tfaEnabled")
    def tfa_enabled(self) -> builtins.bool:
        """
        A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
        """
        return pulumi.get(self, "tfa_enabled")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> builtins.str:
        """
        The type of this user.
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        This User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="verifiedPhoneNumber")
    def verified_phone_number(self) -> builtins.str:
        """
        The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
        """
        return pulumi.get(self, "verified_phone_number")

    @property
    @pulumi.getter(name="volumeGrants")
    def volume_grants(self) -> Sequence['outputs.GetUsersUserVolumeGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "volume_grants")

    @property
    @pulumi.getter(name="vpcGrants")
    def vpc_grants(self) -> Sequence['outputs.GetUsersUserVpcGrantResult']:
        """
        A set containing all of the user's active grants.
        """
        return pulumi.get(self, "vpc_grants")


@pulumi.output_type
class GetUsersUserDatabaseGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserDomainGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserFirewallGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserGlobalGrantResult(dict):
    def __init__(__self__, *,
                 account_access: builtins.str,
                 add_databases: builtins.bool,
                 add_domains: builtins.bool,
                 add_firewalls: builtins.bool,
                 add_images: builtins.bool,
                 add_linodes: builtins.bool,
                 add_longview: builtins.bool,
                 add_nodebalancers: builtins.bool,
                 add_placement_groups: builtins.bool,
                 add_stackscripts: builtins.bool,
                 add_volumes: builtins.bool,
                 add_vpcs: builtins.bool,
                 cancel_account: builtins.bool,
                 longview_subscription: builtins.bool):
        """
        :param builtins.str account_access: The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        :param builtins.bool add_databases: If true, this User may add Managed Databases.
        :param builtins.bool add_domains: If true, this User may add Domains.
        :param builtins.bool add_firewalls: If true, this User may add Firewalls.
        :param builtins.bool add_images: If true, this User may add Images.
        :param builtins.bool add_linodes: If true, this User may create Linodes.
        :param builtins.bool add_longview: If true, this User may create Longview clients and view the current plan.
        :param builtins.bool add_nodebalancers: If true, this User may add NodeBalancers.
        :param builtins.bool add_placement_groups: If true, this User may add Placement Groups.
        :param builtins.bool add_volumes: If true, this User may add Volumes.
        :param builtins.bool add_vpcs: If true, this User may add Virtual Private Clouds (VPCs).
        :param builtins.bool cancel_account: If true, this User may cancel the entire Account.
        :param builtins.bool longview_subscription: If true, this User may manage the Account’s Longview subscription.
        """
        pulumi.set(__self__, "account_access", account_access)
        pulumi.set(__self__, "add_databases", add_databases)
        pulumi.set(__self__, "add_domains", add_domains)
        pulumi.set(__self__, "add_firewalls", add_firewalls)
        pulumi.set(__self__, "add_images", add_images)
        pulumi.set(__self__, "add_linodes", add_linodes)
        pulumi.set(__self__, "add_longview", add_longview)
        pulumi.set(__self__, "add_nodebalancers", add_nodebalancers)
        pulumi.set(__self__, "add_placement_groups", add_placement_groups)
        pulumi.set(__self__, "add_stackscripts", add_stackscripts)
        pulumi.set(__self__, "add_volumes", add_volumes)
        pulumi.set(__self__, "add_vpcs", add_vpcs)
        pulumi.set(__self__, "cancel_account", cancel_account)
        pulumi.set(__self__, "longview_subscription", longview_subscription)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> builtins.str:
        """
        The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)
        """
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="addDatabases")
    def add_databases(self) -> builtins.bool:
        """
        If true, this User may add Managed Databases.
        """
        return pulumi.get(self, "add_databases")

    @property
    @pulumi.getter(name="addDomains")
    def add_domains(self) -> builtins.bool:
        """
        If true, this User may add Domains.
        """
        return pulumi.get(self, "add_domains")

    @property
    @pulumi.getter(name="addFirewalls")
    def add_firewalls(self) -> builtins.bool:
        """
        If true, this User may add Firewalls.
        """
        return pulumi.get(self, "add_firewalls")

    @property
    @pulumi.getter(name="addImages")
    def add_images(self) -> builtins.bool:
        """
        If true, this User may add Images.
        """
        return pulumi.get(self, "add_images")

    @property
    @pulumi.getter(name="addLinodes")
    def add_linodes(self) -> builtins.bool:
        """
        If true, this User may create Linodes.
        """
        return pulumi.get(self, "add_linodes")

    @property
    @pulumi.getter(name="addLongview")
    def add_longview(self) -> builtins.bool:
        """
        If true, this User may create Longview clients and view the current plan.
        """
        return pulumi.get(self, "add_longview")

    @property
    @pulumi.getter(name="addNodebalancers")
    def add_nodebalancers(self) -> builtins.bool:
        """
        If true, this User may add NodeBalancers.
        """
        return pulumi.get(self, "add_nodebalancers")

    @property
    @pulumi.getter(name="addPlacementGroups")
    def add_placement_groups(self) -> builtins.bool:
        """
        If true, this User may add Placement Groups.
        """
        return pulumi.get(self, "add_placement_groups")

    @property
    @pulumi.getter(name="addStackscripts")
    def add_stackscripts(self) -> builtins.bool:
        return pulumi.get(self, "add_stackscripts")

    @property
    @pulumi.getter(name="addVolumes")
    def add_volumes(self) -> builtins.bool:
        """
        If true, this User may add Volumes.
        """
        return pulumi.get(self, "add_volumes")

    @property
    @pulumi.getter(name="addVpcs")
    def add_vpcs(self) -> builtins.bool:
        """
        If true, this User may add Virtual Private Clouds (VPCs).
        """
        return pulumi.get(self, "add_vpcs")

    @property
    @pulumi.getter(name="cancelAccount")
    def cancel_account(self) -> builtins.bool:
        """
        If true, this User may cancel the entire Account.
        """
        return pulumi.get(self, "cancel_account")

    @property
    @pulumi.getter(name="longviewSubscription")
    def longview_subscription(self) -> builtins.bool:
        """
        If true, this User may manage the Account’s Longview subscription.
        """
        return pulumi.get(self, "longview_subscription")


@pulumi.output_type
class GetUsersUserImageGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserLinodeGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserLongviewGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserNodebalancerGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserPlacementGroupGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserStackscriptGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserVolumeGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetUsersUserVpcGrantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 label: builtins.str,
                 permissions: builtins.str):
        """
        :param builtins.int id: The ID of entity this grant applies to.
        :param builtins.str label: The current label of the entity this grant applies to, for display purposes.
        :param builtins.str permissions: The level of access this User has to this entity. If null, this User has no access.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of entity this grant applies to.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The current label of the entity this grant applies to, for display purposes.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def permissions(self) -> builtins.str:
        """
        The level of access this User has to this entity. If null, this User has no access.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetVlansFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVlansVlanResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 label: builtins.str,
                 linodes: Sequence[builtins.int],
                 region: builtins.str):
        """
        :param builtins.str created: When the VLAN was created.
        :param builtins.str label: The unique label of the VLAN.
        :param Sequence[builtins.int] linodes: The running Linodes currently attached to the VLAN.
        :param builtins.str region: The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "linodes", linodes)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When the VLAN was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The unique label of the VLAN.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def linodes(self) -> Sequence[builtins.int]:
        """
        The running Linodes currently attached to the VLAN.
        """
        return pulumi.get(self, "linodes")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetVolumeTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVolumeTypesTypeResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 label: builtins.str,
                 prices: Sequence['outputs.GetVolumeTypesTypePriceResult'],
                 region_prices: Sequence['outputs.GetVolumeTypesTypeRegionPriceResult'],
                 transfer: builtins.int):
        """
        :param builtins.str id: The ID representing the Volume type.
        :param builtins.str label: The Volume type label is for display purposes only.
        :param Sequence['GetVolumeTypesTypePriceArgs'] prices: Cost in US dollars, broken down into hourly and monthly charges.
        :param Sequence['GetVolumeTypesTypeRegionPriceArgs'] region_prices: A list of region-specific prices for this Volume Type.
        :param builtins.int transfer: The monthly outbound transfer amount, in MB.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "region_prices", region_prices)
        pulumi.set(__self__, "transfer", transfer)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Volume type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The Volume type label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetVolumeTypesTypePriceResult']:
        """
        Cost in US dollars, broken down into hourly and monthly charges.
        """
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="regionPrices")
    def region_prices(self) -> Sequence['outputs.GetVolumeTypesTypeRegionPriceResult']:
        """
        A list of region-specific prices for this Volume Type.
        """
        return pulumi.get(self, "region_prices")

    @property
    @pulumi.getter
    def transfer(self) -> builtins.int:
        """
        The monthly outbound transfer amount, in MB.
        """
        return pulumi.get(self, "transfer")


@pulumi.output_type
class GetVolumeTypesTypePriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 monthly: builtins.float):
        """
        :param builtins.float hourly: Cost (in US dollars) per hour.
        :param builtins.float monthly: Cost (in US dollars) per month.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        """
        Cost (in US dollars) per hour.
        """
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        """
        Cost (in US dollars) per month.
        """
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetVolumeTypesTypeRegionPriceResult(dict):
    def __init__(__self__, *,
                 hourly: builtins.float,
                 id: builtins.str,
                 monthly: builtins.float):
        """
        :param builtins.str id: The ID representing the Volume type.
        """
        pulumi.set(__self__, "hourly", hourly)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def hourly(self) -> builtins.float:
        return pulumi.get(self, "hourly")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID representing the Volume type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def monthly(self) -> builtins.float:
        return pulumi.get(self, "monthly")


@pulumi.output_type
class GetVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 encryption: builtins.str,
                 filesystem_path: builtins.str,
                 id: builtins.int,
                 label: builtins.str,
                 linode_id: builtins.int,
                 region: builtins.str,
                 size: builtins.int,
                 status: builtins.str,
                 tags: Sequence[builtins.str],
                 updated: builtins.str):
        """
        :param builtins.str created: When this Volume was created.
        :param builtins.str encryption: Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.
        :param builtins.str filesystem_path: The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
        :param builtins.int id: The unique ID of this Volume.
        :param builtins.str label: This Volume's label is for display purposes only.
        :param builtins.int linode_id: If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
        :param builtins.str region: The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
        :param builtins.int size: The Volume's size, in GiB.
        :param builtins.str status: The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
        :param Sequence[builtins.str] tags: An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        :param builtins.str updated: When this Volume was last updated.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "filesystem_path", filesystem_path)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        When this Volume was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def encryption(self) -> builtins.str:
        """
        Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="filesystemPath")
    def filesystem_path(self) -> builtins.str:
        """
        The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
        """
        return pulumi.get(self, "filesystem_path")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique ID of this Volume.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        This Volume's label is for display purposes only.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        The Volume's size, in GiB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[builtins.str]:
        """
        An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        When this Volume was last updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetVpcIpsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVpcIpsVpcIpResult(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 address: builtins.str,
                 address_range: builtins.str,
                 config_id: builtins.int,
                 gateway: builtins.str,
                 interface_id: builtins.int,
                 linode_id: builtins.int,
                 nat11: builtins.str,
                 prefix: builtins.int,
                 region: builtins.str,
                 subnet_id: builtins.int,
                 subnet_mask: builtins.str,
                 vpc_id: builtins.int):
        """
        :param builtins.bool active: True if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise false.
        :param builtins.str address: An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Null if an address_range.
        :param builtins.str address_range: A range of IPv4 addresses configured for this VPC interface. Null if a single address.
        :param builtins.int config_id: The globally general entity identifier for the Linode configuration profile where the VPC is included.
        :param builtins.str gateway: The default gateway for the VPC subnet that the IP or IP range belongs to.
        :param builtins.int interface_id: The globally general API entity identifier for the Linode interface.
        :param builtins.int linode_id: The identifier for the Linode the VPC interface currently belongs to.
        :param builtins.str nat11: The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn't used.
        :param builtins.int prefix: The number of bits set in the subnet mask.
        :param builtins.str region: The region of the VPC.
        :param builtins.int subnet_id: The id of the VPC Subnet for this interface.
        :param builtins.str subnet_mask: The mask that separates host bits from network bits for the address or address_range.
        :param builtins.int vpc_id: The id of the parent VPC for the list of VPC IPs.
               
               * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_range", address_range)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "linode_id", linode_id)
        pulumi.set(__self__, "nat11", nat11)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        """
        True if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise false.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Null if an address_range.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressRange")
    def address_range(self) -> builtins.str:
        """
        A range of IPv4 addresses configured for this VPC interface. Null if a single address.
        """
        return pulumi.get(self, "address_range")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> builtins.int:
        """
        The globally general entity identifier for the Linode configuration profile where the VPC is included.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def gateway(self) -> builtins.str:
        """
        The default gateway for the VPC subnet that the IP or IP range belongs to.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> builtins.int:
        """
        The globally general API entity identifier for the Linode interface.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="linodeId")
    def linode_id(self) -> builtins.int:
        """
        The identifier for the Linode the VPC interface currently belongs to.
        """
        return pulumi.get(self, "linode_id")

    @property
    @pulumi.getter
    def nat11(self) -> builtins.str:
        """
        The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn't used.
        """
        return pulumi.get(self, "nat11")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.int:
        """
        The number of bits set in the subnet mask.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.int:
        """
        The id of the VPC Subnet for this interface.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        The mask that separates host bits from network bits for the address or address_range.
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.int:
        """
        The id of the parent VPC for the list of VPC IPs.

        * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVpcSubnetLinodeResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 interfaces: Sequence['outputs.GetVpcSubnetLinodeInterfaceResult']):
        """
        :param builtins.int id: The unique id of this VPC subnet.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interfaces", interfaces)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique id of this VPC subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetVpcSubnetLinodeInterfaceResult']:
        return pulumi.get(self, "interfaces")


@pulumi.output_type
class GetVpcSubnetLinodeInterfaceResult(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 id: builtins.int):
        """
        :param builtins.int id: The unique id of this VPC subnet.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique id of this VPC subnet.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetVpcSubnetsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVpcSubnetsVpcSubnetResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 id: builtins.int,
                 ipv4: builtins.str,
                 label: builtins.str,
                 linodes: Sequence['outputs.GetVpcSubnetsVpcSubnetLinodeResult'],
                 updated: builtins.str):
        """
        :param builtins.str created: The date and time when the VPC Subnet was created.
        :param builtins.int id: The unique id of the VPC subnet.
        :param builtins.str ipv4: The IPv4 range of this subnet in CIDR format.
        :param builtins.str label: The label of the VPC subnet.
        :param Sequence['GetVpcSubnetsVpcSubnetLinodeArgs'] linodes: A list of Linode IDs that added to this subnet.
        :param builtins.str updated: The date and time when the VPC Subnet was last updated.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "linodes", linodes)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date and time when the VPC Subnet was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique id of the VPC subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ipv4(self) -> builtins.str:
        """
        The IPv4 range of this subnet in CIDR format.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the VPC subnet.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def linodes(self) -> Sequence['outputs.GetVpcSubnetsVpcSubnetLinodeResult']:
        """
        A list of Linode IDs that added to this subnet.
        """
        return pulumi.get(self, "linodes")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        The date and time when the VPC Subnet was last updated.
        """
        return pulumi.get(self, "updated")


@pulumi.output_type
class GetVpcSubnetsVpcSubnetLinodeResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 interfaces: Sequence['outputs.GetVpcSubnetsVpcSubnetLinodeInterfaceResult']):
        """
        :param builtins.int id: The unique id of the VPC subnet.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "interfaces", interfaces)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique id of the VPC subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence['outputs.GetVpcSubnetsVpcSubnetLinodeInterfaceResult']:
        return pulumi.get(self, "interfaces")


@pulumi.output_type
class GetVpcSubnetsVpcSubnetLinodeInterfaceResult(dict):
    def __init__(__self__, *,
                 active: builtins.bool,
                 id: builtins.int):
        """
        :param builtins.int id: The unique id of the VPC subnet.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def active(self) -> builtins.bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique id of the VPC subnet.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetVpcsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 match_by: Optional[builtins.str] = None):
        """
        :param builtins.str name: The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        :param Sequence[builtins.str] values: A list of values for the filter to allow. These values should all be in string form.
        :param builtins.str match_by: The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if match_by is not None:
            pulumi.set(__self__, "match_by", match_by)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        A list of values for the filter to allow. These values should all be in string form.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="matchBy")
    def match_by(self) -> Optional[builtins.str]:
        """
        The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)
        """
        return pulumi.get(self, "match_by")


@pulumi.output_type
class GetVpcsVpcResult(dict):
    def __init__(__self__, *,
                 created: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 label: builtins.str,
                 region: builtins.str,
                 updated: builtins.str):
        """
        :param builtins.str created: The date and time when the VPC was created.
        :param builtins.str description: The user-defined description of this VPC.
        :param builtins.str id: The unique id of this VPC.
        :param builtins.str label: The label of the VPC.
        :param builtins.str region: The region where the VPC is deployed.
        :param builtins.str updated: The date and time when the VPC was last updated.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "updated", updated)

    @property
    @pulumi.getter
    def created(self) -> builtins.str:
        """
        The date and time when the VPC was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The user-defined description of this VPC.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique id of this VPC.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> builtins.str:
        """
        The label of the VPC.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        The region where the VPC is deployed.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def updated(self) -> builtins.str:
        """
        The date and time when the VPC was last updated.
        """
        return pulumi.get(self, "updated")


