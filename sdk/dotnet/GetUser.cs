// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetUser
    {
        /// <summary>
        /// Provides information about a Linode user
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("linode:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode user
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("linode:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        [Input("databaseGrants")]
        private List<Inputs.GetUserDatabaseGrantArgs>? _databaseGrants;
        public List<Inputs.GetUserDatabaseGrantArgs> DatabaseGrants
        {
            get => _databaseGrants ?? (_databaseGrants = new List<Inputs.GetUserDatabaseGrantArgs>());
            set => _databaseGrants = value;
        }

        [Input("domainGrants")]
        private List<Inputs.GetUserDomainGrantArgs>? _domainGrants;
        public List<Inputs.GetUserDomainGrantArgs> DomainGrants
        {
            get => _domainGrants ?? (_domainGrants = new List<Inputs.GetUserDomainGrantArgs>());
            set => _domainGrants = value;
        }

        [Input("firewallGrants")]
        private List<Inputs.GetUserFirewallGrantArgs>? _firewallGrants;
        public List<Inputs.GetUserFirewallGrantArgs> FirewallGrants
        {
            get => _firewallGrants ?? (_firewallGrants = new List<Inputs.GetUserFirewallGrantArgs>());
            set => _firewallGrants = value;
        }

        [Input("imageGrants")]
        private List<Inputs.GetUserImageGrantArgs>? _imageGrants;
        public List<Inputs.GetUserImageGrantArgs> ImageGrants
        {
            get => _imageGrants ?? (_imageGrants = new List<Inputs.GetUserImageGrantArgs>());
            set => _imageGrants = value;
        }

        [Input("linodeGrants")]
        private List<Inputs.GetUserLinodeGrantArgs>? _linodeGrants;
        public List<Inputs.GetUserLinodeGrantArgs> LinodeGrants
        {
            get => _linodeGrants ?? (_linodeGrants = new List<Inputs.GetUserLinodeGrantArgs>());
            set => _linodeGrants = value;
        }

        [Input("longviewGrants")]
        private List<Inputs.GetUserLongviewGrantArgs>? _longviewGrants;
        public List<Inputs.GetUserLongviewGrantArgs> LongviewGrants
        {
            get => _longviewGrants ?? (_longviewGrants = new List<Inputs.GetUserLongviewGrantArgs>());
            set => _longviewGrants = value;
        }

        [Input("nodebalancerGrants")]
        private List<Inputs.GetUserNodebalancerGrantArgs>? _nodebalancerGrants;
        public List<Inputs.GetUserNodebalancerGrantArgs> NodebalancerGrants
        {
            get => _nodebalancerGrants ?? (_nodebalancerGrants = new List<Inputs.GetUserNodebalancerGrantArgs>());
            set => _nodebalancerGrants = value;
        }

        [Input("stackscriptGrants")]
        private List<Inputs.GetUserStackscriptGrantArgs>? _stackscriptGrants;
        public List<Inputs.GetUserStackscriptGrantArgs> StackscriptGrants
        {
            get => _stackscriptGrants ?? (_stackscriptGrants = new List<Inputs.GetUserStackscriptGrantArgs>());
            set => _stackscriptGrants = value;
        }

        /// <summary>
        /// The unique username of this User.
        /// </summary>
        [Input("username", required: true)]
        public string Username { get; set; } = null!;

        [Input("volumeGrants")]
        private List<Inputs.GetUserVolumeGrantArgs>? _volumeGrants;
        public List<Inputs.GetUserVolumeGrantArgs> VolumeGrants
        {
            get => _volumeGrants ?? (_volumeGrants = new List<Inputs.GetUserVolumeGrantArgs>());
            set => _volumeGrants = value;
        }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("databaseGrants")]
        private InputList<Inputs.GetUserDatabaseGrantInputArgs>? _databaseGrants;
        public InputList<Inputs.GetUserDatabaseGrantInputArgs> DatabaseGrants
        {
            get => _databaseGrants ?? (_databaseGrants = new InputList<Inputs.GetUserDatabaseGrantInputArgs>());
            set => _databaseGrants = value;
        }

        [Input("domainGrants")]
        private InputList<Inputs.GetUserDomainGrantInputArgs>? _domainGrants;
        public InputList<Inputs.GetUserDomainGrantInputArgs> DomainGrants
        {
            get => _domainGrants ?? (_domainGrants = new InputList<Inputs.GetUserDomainGrantInputArgs>());
            set => _domainGrants = value;
        }

        [Input("firewallGrants")]
        private InputList<Inputs.GetUserFirewallGrantInputArgs>? _firewallGrants;
        public InputList<Inputs.GetUserFirewallGrantInputArgs> FirewallGrants
        {
            get => _firewallGrants ?? (_firewallGrants = new InputList<Inputs.GetUserFirewallGrantInputArgs>());
            set => _firewallGrants = value;
        }

        [Input("imageGrants")]
        private InputList<Inputs.GetUserImageGrantInputArgs>? _imageGrants;
        public InputList<Inputs.GetUserImageGrantInputArgs> ImageGrants
        {
            get => _imageGrants ?? (_imageGrants = new InputList<Inputs.GetUserImageGrantInputArgs>());
            set => _imageGrants = value;
        }

        [Input("linodeGrants")]
        private InputList<Inputs.GetUserLinodeGrantInputArgs>? _linodeGrants;
        public InputList<Inputs.GetUserLinodeGrantInputArgs> LinodeGrants
        {
            get => _linodeGrants ?? (_linodeGrants = new InputList<Inputs.GetUserLinodeGrantInputArgs>());
            set => _linodeGrants = value;
        }

        [Input("longviewGrants")]
        private InputList<Inputs.GetUserLongviewGrantInputArgs>? _longviewGrants;
        public InputList<Inputs.GetUserLongviewGrantInputArgs> LongviewGrants
        {
            get => _longviewGrants ?? (_longviewGrants = new InputList<Inputs.GetUserLongviewGrantInputArgs>());
            set => _longviewGrants = value;
        }

        [Input("nodebalancerGrants")]
        private InputList<Inputs.GetUserNodebalancerGrantInputArgs>? _nodebalancerGrants;
        public InputList<Inputs.GetUserNodebalancerGrantInputArgs> NodebalancerGrants
        {
            get => _nodebalancerGrants ?? (_nodebalancerGrants = new InputList<Inputs.GetUserNodebalancerGrantInputArgs>());
            set => _nodebalancerGrants = value;
        }

        [Input("stackscriptGrants")]
        private InputList<Inputs.GetUserStackscriptGrantInputArgs>? _stackscriptGrants;
        public InputList<Inputs.GetUserStackscriptGrantInputArgs> StackscriptGrants
        {
            get => _stackscriptGrants ?? (_stackscriptGrants = new InputList<Inputs.GetUserStackscriptGrantInputArgs>());
            set => _stackscriptGrants = value;
        }

        /// <summary>
        /// The unique username of this User.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        [Input("volumeGrants")]
        private InputList<Inputs.GetUserVolumeGrantInputArgs>? _volumeGrants;
        public InputList<Inputs.GetUserVolumeGrantInputArgs> VolumeGrants
        {
            get => _volumeGrants ?? (_volumeGrants = new InputList<Inputs.GetUserVolumeGrantInputArgs>());
            set => _volumeGrants = value;
        }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly ImmutableArray<Outputs.GetUserDatabaseGrantResult> DatabaseGrants;
        public readonly ImmutableArray<Outputs.GetUserDomainGrantResult> DomainGrants;
        /// <summary>
        /// The email address for this User, for account management communications, and may be used for other communications as configured.
        /// </summary>
        public readonly string Email;
        public readonly ImmutableArray<Outputs.GetUserFirewallGrantResult> FirewallGrants;
        public readonly ImmutableArray<Outputs.GetUserGlobalGrantResult> GlobalGrants;
        /// <summary>
        /// The ID of entity this grant applies to.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetUserImageGrantResult> ImageGrants;
        public readonly ImmutableArray<Outputs.GetUserLinodeGrantResult> LinodeGrants;
        public readonly ImmutableArray<Outputs.GetUserLongviewGrantResult> LongviewGrants;
        public readonly ImmutableArray<Outputs.GetUserNodebalancerGrantResult> NodebalancerGrants;
        /// <summary>
        /// The date and time when this Userâ€™s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.
        /// </summary>
        public readonly string PasswordCreated;
        /// <summary>
        /// If true, this User must be granted access to perform actions or access entities on this Account.
        /// </summary>
        public readonly bool Restricted;
        /// <summary>
        /// A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
        /// </summary>
        public readonly ImmutableArray<string> SshKeys;
        public readonly ImmutableArray<Outputs.GetUserStackscriptGrantResult> StackscriptGrants;
        /// <summary>
        /// A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
        /// </summary>
        public readonly bool TfaEnabled;
        public readonly string Username;
        /// <summary>
        /// The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.
        /// </summary>
        public readonly string VerifiedPhoneNumber;
        public readonly ImmutableArray<Outputs.GetUserVolumeGrantResult> VolumeGrants;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<Outputs.GetUserDatabaseGrantResult> databaseGrants,

            ImmutableArray<Outputs.GetUserDomainGrantResult> domainGrants,

            string email,

            ImmutableArray<Outputs.GetUserFirewallGrantResult> firewallGrants,

            ImmutableArray<Outputs.GetUserGlobalGrantResult> globalGrants,

            string id,

            ImmutableArray<Outputs.GetUserImageGrantResult> imageGrants,

            ImmutableArray<Outputs.GetUserLinodeGrantResult> linodeGrants,

            ImmutableArray<Outputs.GetUserLongviewGrantResult> longviewGrants,

            ImmutableArray<Outputs.GetUserNodebalancerGrantResult> nodebalancerGrants,

            string passwordCreated,

            bool restricted,

            ImmutableArray<string> sshKeys,

            ImmutableArray<Outputs.GetUserStackscriptGrantResult> stackscriptGrants,

            bool tfaEnabled,

            string username,

            string verifiedPhoneNumber,

            ImmutableArray<Outputs.GetUserVolumeGrantResult> volumeGrants)
        {
            DatabaseGrants = databaseGrants;
            DomainGrants = domainGrants;
            Email = email;
            FirewallGrants = firewallGrants;
            GlobalGrants = globalGrants;
            Id = id;
            ImageGrants = imageGrants;
            LinodeGrants = linodeGrants;
            LongviewGrants = longviewGrants;
            NodebalancerGrants = nodebalancerGrants;
            PasswordCreated = passwordCreated;
            Restricted = restricted;
            SshKeys = sshKeys;
            StackscriptGrants = stackscriptGrants;
            TfaEnabled = tfaEnabled;
            Username = username;
            VerifiedPhoneNumber = verifiedPhoneNumber;
            VolumeGrants = volumeGrants;
        }
    }
}
