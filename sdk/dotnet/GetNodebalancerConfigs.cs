// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetNodebalancerConfigs
    {
        /// <summary>
        /// Provides information about Linode NodeBalancer Configs that match a set of filters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might use this data source to access information about a list of NodeBalancer Configs.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filterNbConfigs = Linode.GetNodebalancerConfigs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetNodebalancerConfigsFilterInputArgs
        ///             {
        ///                 Name = "port",
        ///                 Values = new[]
        ///                 {
        ///                     "80",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["nodebalancerConfigId"] = filterNbConfigs.Apply(getNodebalancerConfigsResult =&gt; getNodebalancerConfigsResult.NodebalancerConfigs[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Filterable Fields
        /// 
        /// * `algorithm`
        /// 
        /// * `check`
        /// 
        /// * `nodebalancer_id`
        /// 
        /// * `port`
        /// 
        /// * `protocol`
        /// 
        /// * `proxy_protocol`
        /// 
        /// * `stickiness`
        /// 
        /// * `check_path`
        /// 
        /// * `check_body`
        /// 
        /// * `check_passive`
        /// 
        /// * `cipher_suite`
        /// 
        /// * `ssl_commonname`
        /// </summary>
        public static Task<GetNodebalancerConfigsResult> InvokeAsync(GetNodebalancerConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodebalancerConfigsResult>("linode:index/getNodebalancerConfigs:getNodebalancerConfigs", args ?? new GetNodebalancerConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about Linode NodeBalancer Configs that match a set of filters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might use this data source to access information about a list of NodeBalancer Configs.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filterNbConfigs = Linode.GetNodebalancerConfigs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetNodebalancerConfigsFilterInputArgs
        ///             {
        ///                 Name = "port",
        ///                 Values = new[]
        ///                 {
        ///                     "80",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["nodebalancerConfigId"] = filterNbConfigs.Apply(getNodebalancerConfigsResult =&gt; getNodebalancerConfigsResult.NodebalancerConfigs[0]?.Id),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Filterable Fields
        /// 
        /// * `algorithm`
        /// 
        /// * `check`
        /// 
        /// * `nodebalancer_id`
        /// 
        /// * `port`
        /// 
        /// * `protocol`
        /// 
        /// * `proxy_protocol`
        /// 
        /// * `stickiness`
        /// 
        /// * `check_path`
        /// 
        /// * `check_body`
        /// 
        /// * `check_passive`
        /// 
        /// * `cipher_suite`
        /// 
        /// * `ssl_commonname`
        /// </summary>
        public static Output<GetNodebalancerConfigsResult> Invoke(GetNodebalancerConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodebalancerConfigsResult>("linode:index/getNodebalancerConfigs:getNodebalancerConfigs", args ?? new GetNodebalancerConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodebalancerConfigsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNodebalancerConfigsFilterArgs>? _filters;
        public List<Inputs.GetNodebalancerConfigsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNodebalancerConfigsFilterArgs>());
            set => _filters = value;
        }

        [Input("nodebalancerConfigs")]
        private List<Inputs.GetNodebalancerConfigsNodebalancerConfigArgs>? _nodebalancerConfigs;
        public List<Inputs.GetNodebalancerConfigsNodebalancerConfigArgs> NodebalancerConfigs
        {
            get => _nodebalancerConfigs ?? (_nodebalancerConfigs = new List<Inputs.GetNodebalancerConfigsNodebalancerConfigArgs>());
            set => _nodebalancerConfigs = value;
        }

        /// <summary>
        /// The ID of the NodeBalancer to access.
        /// 
        /// * `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public int NodebalancerId { get; set; }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        public GetNodebalancerConfigsArgs()
        {
        }
        public static new GetNodebalancerConfigsArgs Empty => new GetNodebalancerConfigsArgs();
    }

    public sealed class GetNodebalancerConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNodebalancerConfigsFilterInputArgs>? _filters;
        public InputList<Inputs.GetNodebalancerConfigsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNodebalancerConfigsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("nodebalancerConfigs")]
        private InputList<Inputs.GetNodebalancerConfigsNodebalancerConfigInputArgs>? _nodebalancerConfigs;
        public InputList<Inputs.GetNodebalancerConfigsNodebalancerConfigInputArgs> NodebalancerConfigs
        {
            get => _nodebalancerConfigs ?? (_nodebalancerConfigs = new InputList<Inputs.GetNodebalancerConfigsNodebalancerConfigInputArgs>());
            set => _nodebalancerConfigs = value;
        }

        /// <summary>
        /// The ID of the NodeBalancer to access.
        /// 
        /// * `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public Input<int> NodebalancerId { get; set; } = null!;

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        public GetNodebalancerConfigsInvokeArgs()
        {
        }
        public static new GetNodebalancerConfigsInvokeArgs Empty => new GetNodebalancerConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodebalancerConfigsResult
    {
        public readonly ImmutableArray<Outputs.GetNodebalancerConfigsFilterResult> Filters;
        /// <summary>
        /// The config's ID.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetNodebalancerConfigsNodebalancerConfigResult> NodebalancerConfigs;
        /// <summary>
        /// The ID of the NodeBalancer that contains the config.
        /// </summary>
        public readonly int NodebalancerId;
        public readonly string? Order;
        public readonly string? OrderBy;

        [OutputConstructor]
        private GetNodebalancerConfigsResult(
            ImmutableArray<Outputs.GetNodebalancerConfigsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetNodebalancerConfigsNodebalancerConfigResult> nodebalancerConfigs,

            int nodebalancerId,

            string? order,

            string? orderBy)
        {
            Filters = filters;
            Id = id;
            NodebalancerConfigs = nodebalancerConfigs;
            NodebalancerId = nodebalancerId;
            Order = order;
            OrderBy = orderBy;
        }
    }
}
