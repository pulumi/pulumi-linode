// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetRegions
    {
        /// <summary>
        /// Provides information about Linode regions that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-regions).
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered_regions = Linode.GetRegions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetRegionsFilterInputArgs
        ///             {
        ///                 Name = "status",
        ///                 Values = new[]
        ///                 {
        ///                     "ok",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetRegionsFilterInputArgs
        ///             {
        ///                 Name = "capabilities",
        ///                 Values = new[]
        ///                 {
        ///                     "NodeBalancers",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["regions"] = filtered_regions.Apply(filtered_regions =&gt; filtered_regions.Apply(getRegionsResult =&gt; getRegionsResult.Regions)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `status`
        /// 
        /// * `country`
        /// 
        /// * `capabilities`
        /// 
        /// * `site_type`
        /// </summary>
        public static Task<GetRegionsResult> InvokeAsync(GetRegionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionsResult>("linode:index/getRegions:getRegions", args ?? new GetRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about Linode regions that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-regions).
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered_regions = Linode.GetRegions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetRegionsFilterInputArgs
        ///             {
        ///                 Name = "status",
        ///                 Values = new[]
        ///                 {
        ///                     "ok",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetRegionsFilterInputArgs
        ///             {
        ///                 Name = "capabilities",
        ///                 Values = new[]
        ///                 {
        ///                     "NodeBalancers",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["regions"] = filtered_regions.Apply(filtered_regions =&gt; filtered_regions.Apply(getRegionsResult =&gt; getRegionsResult.Regions)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `status`
        /// 
        /// * `country`
        /// 
        /// * `capabilities`
        /// 
        /// * `site_type`
        /// </summary>
        public static Output<GetRegionsResult> Invoke(GetRegionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionsResult>("linode:index/getRegions:getRegions", args ?? new GetRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRegionsFilterArgs>? _filters;
        public List<Inputs.GetRegionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRegionsFilterArgs>());
            set => _filters = value;
        }

        [Input("regions")]
        private List<Inputs.GetRegionsRegionArgs>? _regions;
        public List<Inputs.GetRegionsRegionArgs> Regions
        {
            get => _regions ?? (_regions = new List<Inputs.GetRegionsRegionArgs>());
            set => _regions = value;
        }

        public GetRegionsArgs()
        {
        }
        public static new GetRegionsArgs Empty => new GetRegionsArgs();
    }

    public sealed class GetRegionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRegionsFilterInputArgs>? _filters;
        public InputList<Inputs.GetRegionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRegionsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("regions")]
        private InputList<Inputs.GetRegionsRegionInputArgs>? _regions;
        public InputList<Inputs.GetRegionsRegionInputArgs> Regions
        {
            get => _regions ?? (_regions = new InputList<Inputs.GetRegionsRegionInputArgs>());
            set => _regions = value;
        }

        public GetRegionsInvokeArgs()
        {
        }
        public static new GetRegionsInvokeArgs Empty => new GetRegionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionsResult
    {
        public readonly ImmutableArray<Outputs.GetRegionsFilterResult> Filters;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetRegionsRegionResult> Regions;

        [OutputConstructor]
        private GetRegionsResult(
            ImmutableArray<Outputs.GetRegionsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRegionsRegionResult> regions)
        {
            Filters = filters;
            Id = id;
            Regions = regions;
        }
    }
}
