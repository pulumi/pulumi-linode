// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.
    /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instances).
    /// 
    /// Please keep in mind that Managed Databases can take up to half an hour to provision.
    /// 
    /// ## Example Usage
    /// 
    /// Creating a simple MySQL database that does not allow connections:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Linode.DatabaseMysqlV2("foobar", new()
    ///     {
    ///         Label = "mydatabase",
    ///         EngineId = "mysql/8",
    ///         Region = "us-mia",
    ///         Type = "g6-nanode-1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Creating a simple MySQL database that allows connections from all IPv4 addresses:
    /// 
    /// ## Import
    /// 
    /// Linode MySQL Databases can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import linode:index/databaseMysqlV2:DatabaseMysqlV2 foobar 1234567
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/databaseMysqlV2:DatabaseMysqlV2")]
    public partial class DatabaseMysqlV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        [Output("allowLists")]
        public Output<ImmutableArray<string>> AllowLists { get; private set; } = null!;

        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database.
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Output("clusterSize")]
        public Output<int> ClusterSize { get; private set; } = null!;

        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        [Output("encrypted")]
        public Output<bool> Encrypted { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine. (e.g. `mysql`)
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        [Output("engineId")]
        public Output<string> EngineId { get; private set; } = null!;

        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        [Output("forkRestoreTime")]
        public Output<string> ForkRestoreTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the database that was forked from.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Output("forkSource")]
        public Output<int?> ForkSource { get; private set; } = null!;

        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        [Output("hostPrimary")]
        public Output<string> HostPrimary { get; private set; } = null!;

        /// <summary>
        /// The secondary/private host for the managed database.
        /// </summary>
        [Output("hostSecondary")]
        public Output<string> HostSecondary { get; private set; } = null!;

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// A mapping between IP addresses and strings designating them as primary or failover.
        /// </summary>
        [Output("members")]
        public Output<ImmutableDictionary<string, string>> Members { get; private set; } = null!;

        /// <summary>
        /// The oldest time to which a database can be restored.
        /// </summary>
        [Output("oldestRestoreTime")]
        public Output<string> OldestRestoreTime { get; private set; } = null!;

        /// <summary>
        /// A set of pending updates.
        /// </summary>
        [Output("pendingUpdates")]
        public Output<ImmutableArray<Outputs.DatabaseMysqlV2PendingUpdate>> PendingUpdates { get; private set; } = null!;

        /// <summary>
        /// The back-end platform for relational databases used by the service.
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        [Output("rootPassword")]
        public Output<string> RootPassword { get; private set; } = null!;

        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        [Output("rootUsername")]
        public Output<string> RootUsername { get; private set; } = null!;

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        [Output("sslConnection")]
        public Output<bool> SslConnection { get; private set; } = null!;

        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DatabaseMysqlV2Timeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// 
        /// - - -
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Output("updates")]
        public Output<Outputs.DatabaseMysqlV2Updates> Updates { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine version. (e.g. `13.2`)
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseMysqlV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseMysqlV2(string name, DatabaseMysqlV2Args args, CustomResourceOptions? options = null)
            : base("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, args ?? new DatabaseMysqlV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseMysqlV2(string name, Input<string> id, DatabaseMysqlV2State? state = null, CustomResourceOptions? options = null)
            : base("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCert",
                    "rootPassword",
                    "rootUsername",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseMysqlV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseMysqlV2 Get(string name, Input<string> id, DatabaseMysqlV2State? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseMysqlV2(name, id, state, options);
        }
    }

    public sealed class DatabaseMysqlV2Args : global::Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Input("clusterSize")]
        public Input<int>? ClusterSize { get; set; }

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        [Input("engineId", required: true)]
        public Input<string> EngineId { get; set; } = null!;

        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        [Input("forkRestoreTime")]
        public Input<string>? ForkRestoreTime { get; set; }

        /// <summary>
        /// The ID of the database that was forked from.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("forkSource")]
        public Input<int>? ForkSource { get; set; }

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.DatabaseMysqlV2TimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// 
        /// - - -
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("updates")]
        public Input<Inputs.DatabaseMysqlV2UpdatesArgs>? Updates { get; set; }

        public DatabaseMysqlV2Args()
        {
        }
        public static new DatabaseMysqlV2Args Empty => new DatabaseMysqlV2Args();
    }

    public sealed class DatabaseMysqlV2State : global::Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        [Input("caCert")]
        private Input<string>? _caCert;

        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database.
        /// </summary>
        public Input<string>? CaCert
        {
            get => _caCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Input("clusterSize")]
        public Input<int>? ClusterSize { get; set; }

        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        /// <summary>
        /// The Managed Database engine. (e.g. `mysql`)
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        [Input("forkRestoreTime")]
        public Input<string>? ForkRestoreTime { get; set; }

        /// <summary>
        /// The ID of the database that was forked from.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("forkSource")]
        public Input<int>? ForkSource { get; set; }

        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        [Input("hostPrimary")]
        public Input<string>? HostPrimary { get; set; }

        /// <summary>
        /// The secondary/private host for the managed database.
        /// </summary>
        [Input("hostSecondary")]
        public Input<string>? HostSecondary { get; set; }

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("members")]
        private InputMap<string>? _members;

        /// <summary>
        /// A mapping between IP addresses and strings designating them as primary or failover.
        /// </summary>
        public InputMap<string> Members
        {
            get => _members ?? (_members = new InputMap<string>());
            set => _members = value;
        }

        /// <summary>
        /// The oldest time to which a database can be restored.
        /// </summary>
        [Input("oldestRestoreTime")]
        public Input<string>? OldestRestoreTime { get; set; }

        [Input("pendingUpdates")]
        private InputList<Inputs.DatabaseMysqlV2PendingUpdateGetArgs>? _pendingUpdates;

        /// <summary>
        /// A set of pending updates.
        /// </summary>
        public InputList<Inputs.DatabaseMysqlV2PendingUpdateGetArgs> PendingUpdates
        {
            get => _pendingUpdates ?? (_pendingUpdates = new InputList<Inputs.DatabaseMysqlV2PendingUpdateGetArgs>());
            set => _pendingUpdates = value;
        }

        /// <summary>
        /// The back-end platform for relational databases used by the service.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootPassword")]
        private Input<string>? _rootPassword;

        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        public Input<string>? RootPassword
        {
            get => _rootPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("rootUsername")]
        private Input<string>? _rootUsername;

        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        public Input<string>? RootUsername
        {
            get => _rootUsername;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootUsername = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        [Input("sslConnection")]
        public Input<bool>? SslConnection { get; set; }

        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DatabaseMysqlV2TimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// 
        /// - - -
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("updates")]
        public Input<Inputs.DatabaseMysqlV2UpdatesGetArgs>? Updates { get; set; }

        /// <summary>
        /// The Managed Database engine version. (e.g. `13.2`)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public DatabaseMysqlV2State()
        {
        }
        public static new DatabaseMysqlV2State Empty => new DatabaseMysqlV2State();
    }
}
