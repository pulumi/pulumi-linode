// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.
    /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instances).
    /// 
    /// Please keep in mind that Managed Databases can take up to half an hour to provision.
    /// 
    /// ## Example Usage
    /// 
    /// Creating a simple MySQL database that does not allow connections:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Linode.DatabaseMysqlV2("foobar", new()
    ///     {
    ///         Label = "mydatabase",
    ///         EngineId = "mysql/8",
    ///         Region = "us-mia",
    ///         Type = "g6-nanode-1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Creating a simple MySQL database that allows connections from all IPv4 addresses:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Linode.DatabaseMysqlV2("foobar", new()
    ///     {
    ///         Label = "mydatabase",
    ///         EngineId = "mysql/8",
    ///         Region = "us-mia",
    ///         Type = "g6-nanode-1",
    ///         AllowLists = new[]
    ///         {
    ///             "0.0.0.0/0",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Creating a complex MySQL database:
    /// 
    /// ## Import
    /// 
    /// Linode MySQL Databases can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import linode:index/databaseMysqlV2:DatabaseMysqlV2 foobar 1234567
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/databaseMysqlV2:DatabaseMysqlV2")]
    public partial class DatabaseMysqlV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        [Output("allowLists")]
        public Output<ImmutableArray<string>> AllowLists { get; private set; } = null!;

        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database.
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Output("clusterSize")]
        public Output<int> ClusterSize { get; private set; } = null!;

        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        [Output("encrypted")]
        public Output<bool> Encrypted { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine. (e.g. `mysql`)
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        [Output("engineConfigBinlogRetentionPeriod")]
        public Output<int> EngineConfigBinlogRetentionPeriod { get; private set; } = null!;

        /// <summary>
        /// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
        /// </summary>
        [Output("engineConfigMysqlConnectTimeout")]
        public Output<int> EngineConfigMysqlConnectTimeout { get; private set; } = null!;

        /// <summary>
        /// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
        /// </summary>
        [Output("engineConfigMysqlDefaultTimeZone")]
        public Output<string> EngineConfigMysqlDefaultTimeZone { get; private set; } = null!;

        /// <summary>
        /// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
        /// </summary>
        [Output("engineConfigMysqlGroupConcatMaxLen")]
        public Output<double> EngineConfigMysqlGroupConcatMaxLen { get; private set; } = null!;

        /// <summary>
        /// The time, in seconds, before cached statistics expire.
        /// </summary>
        [Output("engineConfigMysqlInformationSchemaStatsExpiry")]
        public Output<int> EngineConfigMysqlInformationSchemaStatsExpiry { get; private set; } = null!;

        /// <summary>
        /// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
        /// </summary>
        [Output("engineConfigMysqlInnodbChangeBufferMaxSize")]
        public Output<int> EngineConfigMysqlInnodbChangeBufferMaxSize { get; private set; } = null!;

        /// <summary>
        /// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
        /// </summary>
        [Output("engineConfigMysqlInnodbFlushNeighbors")]
        public Output<int> EngineConfigMysqlInnodbFlushNeighbors { get; private set; } = null!;

        /// <summary>
        /// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Output("engineConfigMysqlInnodbFtMinTokenSize")]
        public Output<int> EngineConfigMysqlInnodbFtMinTokenSize { get; private set; } = null!;

        /// <summary>
        /// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
        /// </summary>
        [Output("engineConfigMysqlInnodbFtServerStopwordTable")]
        public Output<string?> EngineConfigMysqlInnodbFtServerStopwordTable { get; private set; } = null!;

        /// <summary>
        /// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
        /// </summary>
        [Output("engineConfigMysqlInnodbLockWaitTimeout")]
        public Output<int> EngineConfigMysqlInnodbLockWaitTimeout { get; private set; } = null!;

        /// <summary>
        /// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
        /// </summary>
        [Output("engineConfigMysqlInnodbLogBufferSize")]
        public Output<int> EngineConfigMysqlInnodbLogBufferSize { get; private set; } = null!;

        /// <summary>
        /// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
        /// </summary>
        [Output("engineConfigMysqlInnodbOnlineAlterLogMaxSize")]
        public Output<int> EngineConfigMysqlInnodbOnlineAlterLogMaxSize { get; private set; } = null!;

        /// <summary>
        /// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Output("engineConfigMysqlInnodbReadIoThreads")]
        public Output<int> EngineConfigMysqlInnodbReadIoThreads { get; private set; } = null!;

        /// <summary>
        /// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Output("engineConfigMysqlInnodbRollbackOnTimeout")]
        public Output<bool> EngineConfigMysqlInnodbRollbackOnTimeout { get; private set; } = null!;

        /// <summary>
        /// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
        /// </summary>
        [Output("engineConfigMysqlInnodbThreadConcurrency")]
        public Output<int> EngineConfigMysqlInnodbThreadConcurrency { get; private set; } = null!;

        /// <summary>
        /// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Output("engineConfigMysqlInnodbWriteIoThreads")]
        public Output<int> EngineConfigMysqlInnodbWriteIoThreads { get; private set; } = null!;

        /// <summary>
        /// The number of seconds the server waits for activity on an interactive connection before closing it.
        /// </summary>
        [Output("engineConfigMysqlInteractiveTimeout")]
        public Output<int> EngineConfigMysqlInteractiveTimeout { get; private set; } = null!;

        /// <summary>
        /// The storage engine for in-memory internal temporary tables.
        /// </summary>
        [Output("engineConfigMysqlInternalTmpMemStorageEngine")]
        public Output<string> EngineConfigMysqlInternalTmpMemStorageEngine { get; private set; } = null!;

        /// <summary>
        /// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
        /// </summary>
        [Output("engineConfigMysqlMaxAllowedPacket")]
        public Output<int> EngineConfigMysqlMaxAllowedPacket { get; private set; } = null!;

        /// <summary>
        /// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
        /// </summary>
        [Output("engineConfigMysqlMaxHeapTableSize")]
        public Output<int> EngineConfigMysqlMaxHeapTableSize { get; private set; } = null!;

        /// <summary>
        /// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Output("engineConfigMysqlNetBufferLength")]
        public Output<int> EngineConfigMysqlNetBufferLength { get; private set; } = null!;

        /// <summary>
        /// The number of seconds to wait for more data from a connection before aborting the read.
        /// </summary>
        [Output("engineConfigMysqlNetReadTimeout")]
        public Output<int> EngineConfigMysqlNetReadTimeout { get; private set; } = null!;

        /// <summary>
        /// The number of seconds to wait for a block to be written to a connection before aborting the write.
        /// </summary>
        [Output("engineConfigMysqlNetWriteTimeout")]
        public Output<int> EngineConfigMysqlNetWriteTimeout { get; private set; } = null!;

        /// <summary>
        /// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
        /// </summary>
        [Output("engineConfigMysqlSortBufferSize")]
        public Output<int> EngineConfigMysqlSortBufferSize { get; private set; } = null!;

        /// <summary>
        /// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
        /// </summary>
        [Output("engineConfigMysqlSqlMode")]
        public Output<string> EngineConfigMysqlSqlMode { get; private set; } = null!;

        /// <summary>
        /// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
        /// </summary>
        [Output("engineConfigMysqlSqlRequirePrimaryKey")]
        public Output<bool> EngineConfigMysqlSqlRequirePrimaryKey { get; private set; } = null!;

        /// <summary>
        /// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
        /// </summary>
        [Output("engineConfigMysqlTmpTableSize")]
        public Output<int> EngineConfigMysqlTmpTableSize { get; private set; } = null!;

        /// <summary>
        /// The number of seconds the server waits for activity on a noninteractive connection before closing it.
        /// </summary>
        [Output("engineConfigMysqlWaitTimeout")]
        public Output<int> EngineConfigMysqlWaitTimeout { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        [Output("engineId")]
        public Output<string> EngineId { get; private set; } = null!;

        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        [Output("forkRestoreTime")]
        public Output<string> ForkRestoreTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the database that was forked from.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Output("forkSource")]
        public Output<int?> ForkSource { get; private set; } = null!;

        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        [Output("hostPrimary")]
        public Output<string> HostPrimary { get; private set; } = null!;

        /// <summary>
        /// The secondary/private host for the managed database.
        /// </summary>
        [Output("hostSecondary")]
        public Output<string> HostSecondary { get; private set; } = null!;

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// A mapping between IP addresses and strings designating them as primary or failover.
        /// </summary>
        [Output("members")]
        public Output<ImmutableDictionary<string, string>> Members { get; private set; } = null!;

        /// <summary>
        /// The oldest time to which a database can be restored.
        /// </summary>
        [Output("oldestRestoreTime")]
        public Output<string> OldestRestoreTime { get; private set; } = null!;

        /// <summary>
        /// A set of pending updates.
        /// </summary>
        [Output("pendingUpdates")]
        public Output<ImmutableArray<Outputs.DatabaseMysqlV2PendingUpdate>> PendingUpdates { get; private set; } = null!;

        /// <summary>
        /// The back-end platform for relational databases used by the service.
        /// </summary>
        [Output("platform")]
        public Output<string> Platform { get; private set; } = null!;

        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        [Output("rootPassword")]
        public Output<string> RootPassword { get; private set; } = null!;

        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        [Output("rootUsername")]
        public Output<string> RootUsername { get; private set; } = null!;

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        [Output("sslConnection")]
        public Output<bool> SslConnection { get; private set; } = null!;

        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Whether this Managed Database should be suspended.
        /// </summary>
        [Output("suspended")]
        public Output<bool> Suspended { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DatabaseMysqlV2Timeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// 
        /// - - -
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Output("updates")]
        public Output<Outputs.DatabaseMysqlV2Updates> Updates { get; private set; } = null!;

        /// <summary>
        /// The Managed Database engine version. (e.g. `13.2`)
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseMysqlV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseMysqlV2(string name, DatabaseMysqlV2Args args, CustomResourceOptions? options = null)
            : base("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, args ?? new DatabaseMysqlV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseMysqlV2(string name, Input<string> id, DatabaseMysqlV2State? state = null, CustomResourceOptions? options = null)
            : base("linode:index/databaseMysqlV2:DatabaseMysqlV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCert",
                    "rootPassword",
                    "rootUsername",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseMysqlV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseMysqlV2 Get(string name, Input<string> id, DatabaseMysqlV2State? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseMysqlV2(name, id, state, options);
        }
    }

    public sealed class DatabaseMysqlV2Args : global::Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Input("clusterSize")]
        public Input<int>? ClusterSize { get; set; }

        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        [Input("engineConfigBinlogRetentionPeriod")]
        public Input<int>? EngineConfigBinlogRetentionPeriod { get; set; }

        /// <summary>
        /// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
        /// </summary>
        [Input("engineConfigMysqlConnectTimeout")]
        public Input<int>? EngineConfigMysqlConnectTimeout { get; set; }

        /// <summary>
        /// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
        /// </summary>
        [Input("engineConfigMysqlDefaultTimeZone")]
        public Input<string>? EngineConfigMysqlDefaultTimeZone { get; set; }

        /// <summary>
        /// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
        /// </summary>
        [Input("engineConfigMysqlGroupConcatMaxLen")]
        public Input<double>? EngineConfigMysqlGroupConcatMaxLen { get; set; }

        /// <summary>
        /// The time, in seconds, before cached statistics expire.
        /// </summary>
        [Input("engineConfigMysqlInformationSchemaStatsExpiry")]
        public Input<int>? EngineConfigMysqlInformationSchemaStatsExpiry { get; set; }

        /// <summary>
        /// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
        /// </summary>
        [Input("engineConfigMysqlInnodbChangeBufferMaxSize")]
        public Input<int>? EngineConfigMysqlInnodbChangeBufferMaxSize { get; set; }

        /// <summary>
        /// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
        /// </summary>
        [Input("engineConfigMysqlInnodbFlushNeighbors")]
        public Input<int>? EngineConfigMysqlInnodbFlushNeighbors { get; set; }

        /// <summary>
        /// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbFtMinTokenSize")]
        public Input<int>? EngineConfigMysqlInnodbFtMinTokenSize { get; set; }

        /// <summary>
        /// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
        /// </summary>
        [Input("engineConfigMysqlInnodbFtServerStopwordTable")]
        public Input<string>? EngineConfigMysqlInnodbFtServerStopwordTable { get; set; }

        /// <summary>
        /// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
        /// </summary>
        [Input("engineConfigMysqlInnodbLockWaitTimeout")]
        public Input<int>? EngineConfigMysqlInnodbLockWaitTimeout { get; set; }

        /// <summary>
        /// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
        /// </summary>
        [Input("engineConfigMysqlInnodbLogBufferSize")]
        public Input<int>? EngineConfigMysqlInnodbLogBufferSize { get; set; }

        /// <summary>
        /// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
        /// </summary>
        [Input("engineConfigMysqlInnodbOnlineAlterLogMaxSize")]
        public Input<int>? EngineConfigMysqlInnodbOnlineAlterLogMaxSize { get; set; }

        /// <summary>
        /// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbReadIoThreads")]
        public Input<int>? EngineConfigMysqlInnodbReadIoThreads { get; set; }

        /// <summary>
        /// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbRollbackOnTimeout")]
        public Input<bool>? EngineConfigMysqlInnodbRollbackOnTimeout { get; set; }

        /// <summary>
        /// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
        /// </summary>
        [Input("engineConfigMysqlInnodbThreadConcurrency")]
        public Input<int>? EngineConfigMysqlInnodbThreadConcurrency { get; set; }

        /// <summary>
        /// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbWriteIoThreads")]
        public Input<int>? EngineConfigMysqlInnodbWriteIoThreads { get; set; }

        /// <summary>
        /// The number of seconds the server waits for activity on an interactive connection before closing it.
        /// </summary>
        [Input("engineConfigMysqlInteractiveTimeout")]
        public Input<int>? EngineConfigMysqlInteractiveTimeout { get; set; }

        /// <summary>
        /// The storage engine for in-memory internal temporary tables.
        /// </summary>
        [Input("engineConfigMysqlInternalTmpMemStorageEngine")]
        public Input<string>? EngineConfigMysqlInternalTmpMemStorageEngine { get; set; }

        /// <summary>
        /// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
        /// </summary>
        [Input("engineConfigMysqlMaxAllowedPacket")]
        public Input<int>? EngineConfigMysqlMaxAllowedPacket { get; set; }

        /// <summary>
        /// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
        /// </summary>
        [Input("engineConfigMysqlMaxHeapTableSize")]
        public Input<int>? EngineConfigMysqlMaxHeapTableSize { get; set; }

        /// <summary>
        /// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlNetBufferLength")]
        public Input<int>? EngineConfigMysqlNetBufferLength { get; set; }

        /// <summary>
        /// The number of seconds to wait for more data from a connection before aborting the read.
        /// </summary>
        [Input("engineConfigMysqlNetReadTimeout")]
        public Input<int>? EngineConfigMysqlNetReadTimeout { get; set; }

        /// <summary>
        /// The number of seconds to wait for a block to be written to a connection before aborting the write.
        /// </summary>
        [Input("engineConfigMysqlNetWriteTimeout")]
        public Input<int>? EngineConfigMysqlNetWriteTimeout { get; set; }

        /// <summary>
        /// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
        /// </summary>
        [Input("engineConfigMysqlSortBufferSize")]
        public Input<int>? EngineConfigMysqlSortBufferSize { get; set; }

        /// <summary>
        /// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
        /// </summary>
        [Input("engineConfigMysqlSqlMode")]
        public Input<string>? EngineConfigMysqlSqlMode { get; set; }

        /// <summary>
        /// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
        /// </summary>
        [Input("engineConfigMysqlSqlRequirePrimaryKey")]
        public Input<bool>? EngineConfigMysqlSqlRequirePrimaryKey { get; set; }

        /// <summary>
        /// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
        /// </summary>
        [Input("engineConfigMysqlTmpTableSize")]
        public Input<int>? EngineConfigMysqlTmpTableSize { get; set; }

        /// <summary>
        /// The number of seconds the server waits for activity on a noninteractive connection before closing it.
        /// </summary>
        [Input("engineConfigMysqlWaitTimeout")]
        public Input<int>? EngineConfigMysqlWaitTimeout { get; set; }

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        [Input("engineId", required: true)]
        public Input<string> EngineId { get; set; } = null!;

        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        [Input("forkRestoreTime")]
        public Input<string>? ForkRestoreTime { get; set; }

        /// <summary>
        /// The ID of the database that was forked from.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("forkSource")]
        public Input<int>? ForkSource { get; set; }

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Whether this Managed Database should be suspended.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DatabaseMysqlV2TimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// 
        /// - - -
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("updates")]
        public Input<Inputs.DatabaseMysqlV2UpdatesArgs>? Updates { get; set; }

        public DatabaseMysqlV2Args()
        {
        }
        public static new DatabaseMysqlV2Args Empty => new DatabaseMysqlV2Args();
    }

    public sealed class DatabaseMysqlV2State : global::Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        [Input("caCert")]
        private Input<string>? _caCert;

        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database.
        /// </summary>
        public Input<string>? CaCert
        {
            get => _caCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        [Input("clusterSize")]
        public Input<int>? ClusterSize { get; set; }

        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        /// <summary>
        /// The Managed Database engine. (e.g. `mysql`)
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        [Input("engineConfigBinlogRetentionPeriod")]
        public Input<int>? EngineConfigBinlogRetentionPeriod { get; set; }

        /// <summary>
        /// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
        /// </summary>
        [Input("engineConfigMysqlConnectTimeout")]
        public Input<int>? EngineConfigMysqlConnectTimeout { get; set; }

        /// <summary>
        /// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
        /// </summary>
        [Input("engineConfigMysqlDefaultTimeZone")]
        public Input<string>? EngineConfigMysqlDefaultTimeZone { get; set; }

        /// <summary>
        /// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
        /// </summary>
        [Input("engineConfigMysqlGroupConcatMaxLen")]
        public Input<double>? EngineConfigMysqlGroupConcatMaxLen { get; set; }

        /// <summary>
        /// The time, in seconds, before cached statistics expire.
        /// </summary>
        [Input("engineConfigMysqlInformationSchemaStatsExpiry")]
        public Input<int>? EngineConfigMysqlInformationSchemaStatsExpiry { get; set; }

        /// <summary>
        /// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
        /// </summary>
        [Input("engineConfigMysqlInnodbChangeBufferMaxSize")]
        public Input<int>? EngineConfigMysqlInnodbChangeBufferMaxSize { get; set; }

        /// <summary>
        /// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
        /// </summary>
        [Input("engineConfigMysqlInnodbFlushNeighbors")]
        public Input<int>? EngineConfigMysqlInnodbFlushNeighbors { get; set; }

        /// <summary>
        /// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbFtMinTokenSize")]
        public Input<int>? EngineConfigMysqlInnodbFtMinTokenSize { get; set; }

        /// <summary>
        /// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables. This field is nullable.
        /// </summary>
        [Input("engineConfigMysqlInnodbFtServerStopwordTable")]
        public Input<string>? EngineConfigMysqlInnodbFtServerStopwordTable { get; set; }

        /// <summary>
        /// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
        /// </summary>
        [Input("engineConfigMysqlInnodbLockWaitTimeout")]
        public Input<int>? EngineConfigMysqlInnodbLockWaitTimeout { get; set; }

        /// <summary>
        /// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
        /// </summary>
        [Input("engineConfigMysqlInnodbLogBufferSize")]
        public Input<int>? EngineConfigMysqlInnodbLogBufferSize { get; set; }

        /// <summary>
        /// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
        /// </summary>
        [Input("engineConfigMysqlInnodbOnlineAlterLogMaxSize")]
        public Input<int>? EngineConfigMysqlInnodbOnlineAlterLogMaxSize { get; set; }

        /// <summary>
        /// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbReadIoThreads")]
        public Input<int>? EngineConfigMysqlInnodbReadIoThreads { get; set; }

        /// <summary>
        /// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbRollbackOnTimeout")]
        public Input<bool>? EngineConfigMysqlInnodbRollbackOnTimeout { get; set; }

        /// <summary>
        /// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
        /// </summary>
        [Input("engineConfigMysqlInnodbThreadConcurrency")]
        public Input<int>? EngineConfigMysqlInnodbThreadConcurrency { get; set; }

        /// <summary>
        /// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlInnodbWriteIoThreads")]
        public Input<int>? EngineConfigMysqlInnodbWriteIoThreads { get; set; }

        /// <summary>
        /// The number of seconds the server waits for activity on an interactive connection before closing it.
        /// </summary>
        [Input("engineConfigMysqlInteractiveTimeout")]
        public Input<int>? EngineConfigMysqlInteractiveTimeout { get; set; }

        /// <summary>
        /// The storage engine for in-memory internal temporary tables.
        /// </summary>
        [Input("engineConfigMysqlInternalTmpMemStorageEngine")]
        public Input<string>? EngineConfigMysqlInternalTmpMemStorageEngine { get; set; }

        /// <summary>
        /// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
        /// </summary>
        [Input("engineConfigMysqlMaxAllowedPacket")]
        public Input<int>? EngineConfigMysqlMaxAllowedPacket { get; set; }

        /// <summary>
        /// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
        /// </summary>
        [Input("engineConfigMysqlMaxHeapTableSize")]
        public Input<int>? EngineConfigMysqlMaxHeapTableSize { get; set; }

        /// <summary>
        /// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        [Input("engineConfigMysqlNetBufferLength")]
        public Input<int>? EngineConfigMysqlNetBufferLength { get; set; }

        /// <summary>
        /// The number of seconds to wait for more data from a connection before aborting the read.
        /// </summary>
        [Input("engineConfigMysqlNetReadTimeout")]
        public Input<int>? EngineConfigMysqlNetReadTimeout { get; set; }

        /// <summary>
        /// The number of seconds to wait for a block to be written to a connection before aborting the write.
        /// </summary>
        [Input("engineConfigMysqlNetWriteTimeout")]
        public Input<int>? EngineConfigMysqlNetWriteTimeout { get; set; }

        /// <summary>
        /// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
        /// </summary>
        [Input("engineConfigMysqlSortBufferSize")]
        public Input<int>? EngineConfigMysqlSortBufferSize { get; set; }

        /// <summary>
        /// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned. (default `ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES`)
        /// </summary>
        [Input("engineConfigMysqlSqlMode")]
        public Input<string>? EngineConfigMysqlSqlMode { get; set; }

        /// <summary>
        /// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them. (default `true`)
        /// </summary>
        [Input("engineConfigMysqlSqlRequirePrimaryKey")]
        public Input<bool>? EngineConfigMysqlSqlRequirePrimaryKey { get; set; }

        /// <summary>
        /// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
        /// </summary>
        [Input("engineConfigMysqlTmpTableSize")]
        public Input<int>? EngineConfigMysqlTmpTableSize { get; set; }

        /// <summary>
        /// The number of seconds the server waits for activity on a noninteractive connection before closing it.
        /// </summary>
        [Input("engineConfigMysqlWaitTimeout")]
        public Input<int>? EngineConfigMysqlWaitTimeout { get; set; }

        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        [Input("engineId")]
        public Input<string>? EngineId { get; set; }

        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        [Input("forkRestoreTime")]
        public Input<string>? ForkRestoreTime { get; set; }

        /// <summary>
        /// The ID of the database that was forked from.
        /// 
        /// * `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("forkSource")]
        public Input<int>? ForkSource { get; set; }

        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        [Input("hostPrimary")]
        public Input<string>? HostPrimary { get; set; }

        /// <summary>
        /// The secondary/private host for the managed database.
        /// </summary>
        [Input("hostSecondary")]
        public Input<string>? HostSecondary { get; set; }

        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("members")]
        private InputMap<string>? _members;

        /// <summary>
        /// A mapping between IP addresses and strings designating them as primary or failover.
        /// </summary>
        public InputMap<string> Members
        {
            get => _members ?? (_members = new InputMap<string>());
            set => _members = value;
        }

        /// <summary>
        /// The oldest time to which a database can be restored.
        /// </summary>
        [Input("oldestRestoreTime")]
        public Input<string>? OldestRestoreTime { get; set; }

        [Input("pendingUpdates")]
        private InputList<Inputs.DatabaseMysqlV2PendingUpdateGetArgs>? _pendingUpdates;

        /// <summary>
        /// A set of pending updates.
        /// </summary>
        public InputList<Inputs.DatabaseMysqlV2PendingUpdateGetArgs> PendingUpdates
        {
            get => _pendingUpdates ?? (_pendingUpdates = new InputList<Inputs.DatabaseMysqlV2PendingUpdateGetArgs>());
            set => _pendingUpdates = value;
        }

        /// <summary>
        /// The back-end platform for relational databases used by the service.
        /// </summary>
        [Input("platform")]
        public Input<string>? Platform { get; set; }

        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rootPassword")]
        private Input<string>? _rootPassword;

        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        public Input<string>? RootPassword
        {
            get => _rootPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("rootUsername")]
        private Input<string>? _rootUsername;

        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        public Input<string>? RootUsername
        {
            get => _rootUsername;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootUsername = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        [Input("sslConnection")]
        public Input<bool>? SslConnection { get; set; }

        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Whether this Managed Database should be suspended.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DatabaseMysqlV2TimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// 
        /// - - -
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        /// <summary>
        /// Configuration settings for automated patch update maintenance for the Managed Database.
        /// </summary>
        [Input("updates")]
        public Input<Inputs.DatabaseMysqlV2UpdatesGetArgs>? Updates { get; set; }

        /// <summary>
        /// The Managed Database engine version. (e.g. `13.2`)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public DatabaseMysqlV2State()
        {
        }
        public static new DatabaseMysqlV2State Empty => new DatabaseMysqlV2State();
    }
}
