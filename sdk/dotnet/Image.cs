// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Provides a Linode Image resource.  This can be used to create, modify, and delete Linodes Images.  Linode Images are snapshots of a Linode Instance Disk which can then be used to provision more Linode Instances.  Images can be used across regions.
    /// 
    /// For more information, see [Linode's documentation on Images](https://www.linode.com/docs/platform/disk-images/linode-images/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-image).
    /// 
    /// ## Example Usage
    /// 
    /// Creating an image from an existing Linode Instance and deploying another instance with that image:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Linode.Instance("foo", new()
    ///     {
    ///         Type = "g6-nanode-1",
    ///         Region = "us-central",
    ///         Image = "linode/ubuntu22.04",
    ///         RootPass = "insecure-p4ssw0rd!!",
    ///     });
    /// 
    ///     var bar = new Linode.Image("bar", new()
    ///     {
    ///         Label = "foo-sda-image",
    ///         Description = "Image taken from foo",
    ///         DiskId = foo.Disks.Apply(disks =&gt; disks[0].Id),
    ///         LinodeId = foo.Id,
    ///         Tags = new[]
    ///         {
    ///             "image-tag",
    ///             "test",
    ///         },
    ///     });
    /// 
    ///     var barBased = new Linode.Instance("bar_based", new()
    ///     {
    ///         Type = foo.Type,
    ///         Region = "eu-west",
    ///         Image = bar.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Creating and uploading an image from a local file:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Linode.Image("foobar", new()
    ///     {
    ///         Label = "foobar-image",
    ///         Description = "An image uploaded from Terraform!",
    ///         Region = "us-southeast",
    ///         Tags = new[]
    ///         {
    ///             "image-tag",
    ///             "test",
    ///         },
    ///         FilePath = "path/to/image.img.gz",
    ///         FileHash = Std.Filemd5.Invoke(new()
    ///         {
    ///             Input = "path/to/image.img.gz",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Upload and replicate an image from a local file:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new Linode.Image("foobar", new()
    ///     {
    ///         Label = "foobar-image",
    ///         Description = "An image uploaded from Terraform!",
    ///         Region = "us-southeast",
    ///         Tags = new[]
    ///         {
    ///             "image-tag",
    ///             "test",
    ///         },
    ///         FilePath = "path/to/image.img.gz",
    ///         FileHash = Std.Filemd5.Invoke(new()
    ///         {
    ///             Input = "path/to/image.img.gz",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         ReplicaRegions = new[]
    ///         {
    ///             "us-southeast",
    ///             "us-east",
    ///             "eu-west",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Linodes Images can be imported using the Linode Image `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import linode:index/image:Image myimage 1234567
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The capabilities of this Image.
        /// </summary>
        [Output("capabilities")]
        public Output<ImmutableArray<string>> Capabilities { get; private set; } = null!;

        /// <summary>
        /// Whether this image supports cloud-init.
        /// </summary>
        [Output("cloudInit")]
        public Output<bool> CloudInit { get; private set; } = null!;

        /// <summary>
        /// When this Image was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The name of the User who created this Image.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Whether or not this Image is deprecated. Will only be True for deprecated public Images.
        /// </summary>
        [Output("deprecated")]
        public Output<bool> Deprecated { get; private set; } = null!;

        /// <summary>
        /// A detailed description of this Image.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the Linode Disk that this Image will be created from.
        /// </summary>
        [Output("diskId")]
        public Output<int?> DiskId { get; private set; } = null!;

        /// <summary>
        /// Only Images created automatically (from a deleted Linode; type=automatic) will expire.
        /// </summary>
        [Output("expiry")]
        public Output<string> Expiry { get; private set; } = null!;

        /// <summary>
        /// The MD5 hash of the file to be uploaded. This is used to trigger file updates.
        /// </summary>
        [Output("fileHash")]
        public Output<string?> FileHash { get; private set; } = null!;

        /// <summary>
        /// The path of the image file to be uploaded.
        /// </summary>
        [Output("filePath")]
        public Output<string?> FilePath { get; private set; } = null!;

        /// <summary>
        /// True if the Image is public.
        /// </summary>
        [Output("isPublic")]
        public Output<bool> IsPublic { get; private set; } = null!;

        /// <summary>
        /// A short description of the Image. Labels cannot contain special characters.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The ID of the Linode that this Image will be created from.
        /// 
        /// - - -
        /// 
        /// &gt; **NOTICE:** Uploading images is currently in beta. Ensure `LINODE_API_VERSION` is set to `v4beta` in order to use this functionality.
        /// 
        /// The following arguments apply to uploading an image:
        /// </summary>
        [Output("linodeId")]
        public Output<int?> LinodeId { get; private set; } = null!;

        /// <summary>
        /// The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// A list of regions that customer wants to replicate this image in. At least one valid region is required and only core regions allowed. Existing images in the regions not passed will be removed. **Note:** Image replication may not be available to all users. See Replicate an Image [here](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) for more details.
        /// </summary>
        [Output("replicaRegions")]
        public Output<ImmutableArray<string>> ReplicaRegions { get; private set; } = null!;

        /// <summary>
        /// A list of image replications region and corresponding status.
        /// </summary>
        [Output("replications")]
        public Output<ImmutableArray<Outputs.ImageReplication>> Replications { get; private set; } = null!;

        /// <summary>
        /// The minimum size this Image needs to deploy. Size is in MB.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The status of an image replica.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A list of customized tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ImageTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The total size of the image in all available regions.
        /// </summary>
        [Output("totalSize")]
        public Output<int> TotalSize { get; private set; } = null!;

        /// <summary>
        /// How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The upstream distribution vendor. Nil for private Images.
        /// </summary>
        [Output("vendor")]
        public Output<string> Vendor { get; private set; } = null!;

        /// <summary>
        /// Whether to wait for all image replications become `available`. Default to false.
        /// 
        /// - - -
        /// 
        /// The following arguments apply to creating an image from an existing Linode Instance:
        /// </summary>
        [Output("waitForReplications")]
        public Output<bool> WaitForReplications { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("linode:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this image supports cloud-init.
        /// </summary>
        [Input("cloudInit")]
        public Input<bool>? CloudInit { get; set; }

        /// <summary>
        /// A detailed description of this Image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the Linode Disk that this Image will be created from.
        /// </summary>
        [Input("diskId")]
        public Input<int>? DiskId { get; set; }

        /// <summary>
        /// The MD5 hash of the file to be uploaded. This is used to trigger file updates.
        /// </summary>
        [Input("fileHash")]
        public Input<string>? FileHash { get; set; }

        /// <summary>
        /// The path of the image file to be uploaded.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// A short description of the Image. Labels cannot contain special characters.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The ID of the Linode that this Image will be created from.
        /// 
        /// - - -
        /// 
        /// &gt; **NOTICE:** Uploading images is currently in beta. Ensure `LINODE_API_VERSION` is set to `v4beta` in order to use this functionality.
        /// 
        /// The following arguments apply to uploading an image:
        /// </summary>
        [Input("linodeId")]
        public Input<int>? LinodeId { get; set; }

        /// <summary>
        /// The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaRegions")]
        private InputList<string>? _replicaRegions;

        /// <summary>
        /// A list of regions that customer wants to replicate this image in. At least one valid region is required and only core regions allowed. Existing images in the regions not passed will be removed. **Note:** Image replication may not be available to all users. See Replicate an Image [here](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) for more details.
        /// </summary>
        public InputList<string> ReplicaRegions
        {
            get => _replicaRegions ?? (_replicaRegions = new InputList<string>());
            set => _replicaRegions = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of customized tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ImageTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Whether to wait for all image replications become `available`. Default to false.
        /// 
        /// - - -
        /// 
        /// The following arguments apply to creating an image from an existing Linode Instance:
        /// </summary>
        [Input("waitForReplications")]
        public Input<bool>? WaitForReplications { get; set; }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }

    public sealed class ImageState : global::Pulumi.ResourceArgs
    {
        [Input("capabilities")]
        private InputList<string>? _capabilities;

        /// <summary>
        /// The capabilities of this Image.
        /// </summary>
        public InputList<string> Capabilities
        {
            get => _capabilities ?? (_capabilities = new InputList<string>());
            set => _capabilities = value;
        }

        /// <summary>
        /// Whether this image supports cloud-init.
        /// </summary>
        [Input("cloudInit")]
        public Input<bool>? CloudInit { get; set; }

        /// <summary>
        /// When this Image was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The name of the User who created this Image.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Whether or not this Image is deprecated. Will only be True for deprecated public Images.
        /// </summary>
        [Input("deprecated")]
        public Input<bool>? Deprecated { get; set; }

        /// <summary>
        /// A detailed description of this Image.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the Linode Disk that this Image will be created from.
        /// </summary>
        [Input("diskId")]
        public Input<int>? DiskId { get; set; }

        /// <summary>
        /// Only Images created automatically (from a deleted Linode; type=automatic) will expire.
        /// </summary>
        [Input("expiry")]
        public Input<string>? Expiry { get; set; }

        /// <summary>
        /// The MD5 hash of the file to be uploaded. This is used to trigger file updates.
        /// </summary>
        [Input("fileHash")]
        public Input<string>? FileHash { get; set; }

        /// <summary>
        /// The path of the image file to be uploaded.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        /// <summary>
        /// True if the Image is public.
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        /// <summary>
        /// A short description of the Image. Labels cannot contain special characters.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The ID of the Linode that this Image will be created from.
        /// 
        /// - - -
        /// 
        /// &gt; **NOTICE:** Uploading images is currently in beta. Ensure `LINODE_API_VERSION` is set to `v4beta` in order to use this functionality.
        /// 
        /// The following arguments apply to uploading an image:
        /// </summary>
        [Input("linodeId")]
        public Input<int>? LinodeId { get; set; }

        /// <summary>
        /// The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaRegions")]
        private InputList<string>? _replicaRegions;

        /// <summary>
        /// A list of regions that customer wants to replicate this image in. At least one valid region is required and only core regions allowed. Existing images in the regions not passed will be removed. **Note:** Image replication may not be available to all users. See Replicate an Image [here](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) for more details.
        /// </summary>
        public InputList<string> ReplicaRegions
        {
            get => _replicaRegions ?? (_replicaRegions = new InputList<string>());
            set => _replicaRegions = value;
        }

        [Input("replications")]
        private InputList<Inputs.ImageReplicationGetArgs>? _replications;

        /// <summary>
        /// A list of image replications region and corresponding status.
        /// </summary>
        public InputList<Inputs.ImageReplicationGetArgs> Replications
        {
            get => _replications ?? (_replications = new InputList<Inputs.ImageReplicationGetArgs>());
            set => _replications = value;
        }

        /// <summary>
        /// The minimum size this Image needs to deploy. Size is in MB.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The status of an image replica.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of customized tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ImageTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The total size of the image in all available regions.
        /// </summary>
        [Input("totalSize")]
        public Input<int>? TotalSize { get; set; }

        /// <summary>
        /// How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The upstream distribution vendor. Nil for private Images.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        /// <summary>
        /// Whether to wait for all image replications become `available`. Default to false.
        /// 
        /// - - -
        /// 
        /// The following arguments apply to creating an image from an existing Linode Instance:
        /// </summary>
        [Input("waitForReplications")]
        public Input<bool>? WaitForReplications { get; set; }

        public ImageState()
        {
        }
        public static new ImageState Empty => new ImageState();
    }
}
