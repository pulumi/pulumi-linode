// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetInstances
    {
        /// <summary>
        /// Provides information about Linode instances that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-instances).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about all Linode instances with a certain label and tag:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_instances = Linode.GetInstances.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetInstancesFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-label",
        ///                     "my-other-label",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetInstancesFilterInputArgs
        ///             {
        ///                 Name = "tags",
        ///                 Values = new[]
        ///                 {
        ///                     "my-tag",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["instanceId"] = my_instances.Apply(my_instances =&gt; my_instances.Apply(getInstancesResult =&gt; getInstancesResult.Instances[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// Get information about all Linode instances associated with the current token:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_instances = Linode.GetInstances.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["instanceIds"] = all_instances.Apply(all_instances =&gt; all_instances.Apply(getInstancesResult =&gt; getInstancesResult.Instances).Select(__item =&gt; __item.Id).ToList()),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `group`
        /// 
        /// * `id`
        /// 
        /// * `image`
        /// 
        /// * `label`
        /// 
        /// * `region`
        /// 
        /// * `status`
        /// 
        /// * `tags`
        /// 
        /// * `type`
        /// 
        /// * `watchdog_enabled`
        /// </summary>
        public static Task<GetInstancesResult> InvokeAsync(GetInstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstancesResult>("linode:index/getInstances:getInstances", args ?? new GetInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about Linode instances that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-instances).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about all Linode instances with a certain label and tag:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_instances = Linode.GetInstances.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetInstancesFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-label",
        ///                     "my-other-label",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetInstancesFilterInputArgs
        ///             {
        ///                 Name = "tags",
        ///                 Values = new[]
        ///                 {
        ///                     "my-tag",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["instanceId"] = my_instances.Apply(my_instances =&gt; my_instances.Apply(getInstancesResult =&gt; getInstancesResult.Instances[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// Get information about all Linode instances associated with the current token:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_instances = Linode.GetInstances.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["instanceIds"] = all_instances.Apply(all_instances =&gt; all_instances.Apply(getInstancesResult =&gt; getInstancesResult.Instances).Select(__item =&gt; __item.Id).ToList()),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `group`
        /// 
        /// * `id`
        /// 
        /// * `image`
        /// 
        /// * `label`
        /// 
        /// * `region`
        /// 
        /// * `status`
        /// 
        /// * `tags`
        /// 
        /// * `type`
        /// 
        /// * `watchdog_enabled`
        /// </summary>
        public static Output<GetInstancesResult> Invoke(GetInstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstancesResult>("linode:index/getInstances:getInstances", args ?? new GetInstancesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about Linode instances that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-instances).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about all Linode instances with a certain label and tag:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_instances = Linode.GetInstances.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetInstancesFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "my-label",
        ///                     "my-other-label",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetInstancesFilterInputArgs
        ///             {
        ///                 Name = "tags",
        ///                 Values = new[]
        ///                 {
        ///                     "my-tag",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["instanceId"] = my_instances.Apply(my_instances =&gt; my_instances.Apply(getInstancesResult =&gt; getInstancesResult.Instances[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// Get information about all Linode instances associated with the current token:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_instances = Linode.GetInstances.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["instanceIds"] = all_instances.Apply(all_instances =&gt; all_instances.Apply(getInstancesResult =&gt; getInstancesResult.Instances).Select(__item =&gt; __item.Id).ToList()),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `group`
        /// 
        /// * `id`
        /// 
        /// * `image`
        /// 
        /// * `label`
        /// 
        /// * `region`
        /// 
        /// * `status`
        /// 
        /// * `tags`
        /// 
        /// * `type`
        /// 
        /// * `watchdog_enabled`
        /// </summary>
        public static Output<GetInstancesResult> Invoke(GetInstancesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstancesResult>("linode:index/getInstances:getInstances", args ?? new GetInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstancesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetInstancesFilterArgs>? _filters;
        public List<Inputs.GetInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInstancesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        public GetInstancesArgs()
        {
        }
        public static new GetInstancesArgs Empty => new GetInstancesArgs();
    }

    public sealed class GetInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetInstancesFilterInputArgs>? _filters;
        public InputList<Inputs.GetInstancesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInstancesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        public GetInstancesInvokeArgs()
        {
        }
        public static new GetInstancesInvokeArgs Empty => new GetInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstancesResult
    {
        public readonly ImmutableArray<Outputs.GetInstancesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetInstancesInstanceResult> Instances;
        public readonly string? Order;
        public readonly string? OrderBy;

        [OutputConstructor]
        private GetInstancesResult(
            ImmutableArray<Outputs.GetInstancesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetInstancesInstanceResult> instances,

            string? order,

            string? orderBy)
        {
            Filters = filters;
            Id = id;
            Instances = instances;
            Order = order;
            OrderBy = orderBy;
        }
    }
}
