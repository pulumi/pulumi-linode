// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetNodeBalancer
    {
        /// <summary>
        /// Provides details about a Linode NodeBalancer.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_nodebalancer = Output.Create(Linode.GetNodeBalancer.InvokeAsync(new Linode.GetNodeBalancerArgs
        ///         {
        ///             Id = 123,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNodeBalancerResult> InvokeAsync(GetNodeBalancerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNodeBalancerResult>("linode:index/getNodeBalancer:getNodeBalancer", args ?? new GetNodeBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a Linode NodeBalancer.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var my_nodebalancer = Output.Create(Linode.GetNodeBalancer.InvokeAsync(new Linode.GetNodeBalancerArgs
        ///         {
        ///             Id = 123,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNodeBalancerResult> Invoke(GetNodeBalancerInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNodeBalancerResult>("linode:index/getNodeBalancer:getNodeBalancer", args ?? new GetNodeBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeBalancerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The NodeBalancer's ID.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        public GetNodeBalancerArgs()
        {
        }
    }

    public sealed class GetNodeBalancerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The NodeBalancer's ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        public GetNodeBalancerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNodeBalancerResult
    {
        /// <summary>
        /// Throttle connections per second (0-20).
        /// </summary>
        public readonly int ClientConnThrottle;
        public readonly string Created;
        /// <summary>
        /// This NodeBalancer's hostname, ending with .nodebalancer.linode.com
        /// </summary>
        public readonly string Hostname;
        public readonly int Id;
        /// <summary>
        /// The Public IPv4 Address of this NodeBalancer
        /// </summary>
        public readonly string Ipv4;
        /// <summary>
        /// The Public IPv6 Address of this NodeBalancer
        /// </summary>
        public readonly string Ipv6;
        /// <summary>
        /// The label of the Linode NodeBalancer
        /// </summary>
        public readonly string Label;
        public readonly string Region;
        /// <summary>
        /// A list of tags applied to this object. Tags are for organizational purposes only.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly ImmutableArray<Outputs.GetNodeBalancerTransferResult> Transfers;
        public readonly string Updated;

        [OutputConstructor]
        private GetNodeBalancerResult(
            int clientConnThrottle,

            string created,

            string hostname,

            int id,

            string ipv4,

            string ipv6,

            string label,

            string region,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetNodeBalancerTransferResult> transfers,

            string updated)
        {
            ClientConnThrottle = clientConnThrottle;
            Created = created;
            Hostname = hostname;
            Id = id;
            Ipv4 = ipv4;
            Ipv6 = ipv6;
            Label = label;
            Region = region;
            Tags = tags;
            Transfers = transfers;
            Updated = updated;
        }
    }
}
