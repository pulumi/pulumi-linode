// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetDatabaseMysql
    {
        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysql.Invoke(new()
        ///     {
        ///         Id = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## updates
        /// 
        /// The following arguments are exported by the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// 
        /// * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
        /// </summary>
        public static Task<GetDatabaseMysqlResult> InvokeAsync(GetDatabaseMysqlArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseMysqlResult>("linode:index/getDatabaseMysql:getDatabaseMysql", args ?? new GetDatabaseMysqlArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysql.Invoke(new()
        ///     {
        ///         Id = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## updates
        /// 
        /// The following arguments are exported by the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// 
        /// * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
        /// </summary>
        public static Output<GetDatabaseMysqlResult> Invoke(GetDatabaseMysqlInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseMysqlResult>("linode:index/getDatabaseMysql:getDatabaseMysql", args ?? new GetDatabaseMysqlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseMysqlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL database. Deprecated: Use id instead.
        /// </summary>
        [Input("databaseId")]
        public int? DatabaseId { get; set; }

        /// <summary>
        /// The ID of the MySQL database. Mutually exclusive with `database_id`.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        public GetDatabaseMysqlArgs()
        {
        }
        public static new GetDatabaseMysqlArgs Empty => new GetDatabaseMysqlArgs();
    }

    public sealed class GetDatabaseMysqlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL database. Deprecated: Use id instead.
        /// </summary>
        [Input("databaseId")]
        public Input<int>? DatabaseId { get; set; }

        /// <summary>
        /// The ID of the MySQL database. Mutually exclusive with `database_id`.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        public GetDatabaseMysqlInvokeArgs()
        {
        }
        public static new GetDatabaseMysqlInvokeArgs Empty => new GetDatabaseMysqlInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseMysqlResult
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        public readonly ImmutableArray<string> AllowLists;
        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database instance.
        /// </summary>
        public readonly string CaCert;
        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database.
        /// </summary>
        public readonly int ClusterSize;
        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        public readonly string Created;
        public readonly int? DatabaseId;
        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// The Managed Database engine. (e.g. `mysql`)
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql/8.0.30`)
        /// </summary>
        public readonly string EngineId;
        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        public readonly string HostPrimary;
        /// <summary>
        /// The secondary/private network host for the Managed Database.
        /// </summary>
        public readonly string HostSecondary;
        public readonly int? Id;
        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The region that hosts this Linode Managed Database.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)
        /// </summary>
        public readonly string ReplicationType;
        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        public readonly string RootPassword;
        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        public readonly string RootUsername;
        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        public readonly bool SslConnection;
        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The Linode Instance type used for the nodes of the  Managed Database instance.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        public readonly string Updated;
        public readonly ImmutableArray<Outputs.GetDatabaseMysqlUpdateResult> Updates;
        /// <summary>
        /// The Managed Database engine version. (e.g. `v8.0.26`)
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDatabaseMysqlResult(
            ImmutableArray<string> allowLists,

            string caCert,

            int clusterSize,

            string created,

            int? databaseId,

            bool encrypted,

            string engine,

            string engineId,

            string hostPrimary,

            string hostSecondary,

            int? id,

            string label,

            string region,

            string replicationType,

            string rootPassword,

            string rootUsername,

            bool sslConnection,

            string status,

            string type,

            string updated,

            ImmutableArray<Outputs.GetDatabaseMysqlUpdateResult> updates,

            string version)
        {
            AllowLists = allowLists;
            CaCert = caCert;
            ClusterSize = clusterSize;
            Created = created;
            DatabaseId = databaseId;
            Encrypted = encrypted;
            Engine = engine;
            EngineId = engineId;
            HostPrimary = hostPrimary;
            HostSecondary = hostSecondary;
            Id = id;
            Label = label;
            Region = region;
            ReplicationType = replicationType;
            RootPassword = rootPassword;
            RootUsername = rootUsername;
            SslConnection = sslConnection;
            Status = status;
            Type = type;
            Updated = updated;
            Updates = updates;
            Version = version;
        }
    }
}
