// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetFirewall
    {
        /// <summary>
        /// Provides details about a Linode Firewall.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_firewall = Linode.GetFirewall.Invoke(new()
        ///     {
        ///         Id = 123,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFirewallResult> InvokeAsync(GetFirewallArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallResult>("linode:index/getFirewall:getFirewall", args ?? new GetFirewallArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a Linode Firewall.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_firewall = Linode.GetFirewall.Invoke(new()
        ///     {
        ///         Id = 123,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFirewallResult> Invoke(GetFirewallInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallResult>("linode:index/getFirewall:getFirewall", args ?? new GetFirewallInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Firewall's ID.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        public GetFirewallArgs()
        {
        }
        public static new GetFirewallArgs Empty => new GetFirewallArgs();
    }

    public sealed class GetFirewallInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Firewall's ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        public GetFirewallInvokeArgs()
        {
        }
        public static new GetFirewallInvokeArgs Empty => new GetFirewallInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallResult
    {
        public readonly ImmutableArray<Outputs.GetFirewallDeviceResult> Devices;
        /// <summary>
        /// If true, the firewall is inactive.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// The ID of the Firewall Device.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The default behavior for inbound traffic. (`ACCEPT`, `DROP`)
        /// </summary>
        public readonly string InboundPolicy;
        public readonly ImmutableArray<Outputs.GetFirewallInboundResult> Inbounds;
        /// <summary>
        /// The label of the underlying entity this device references.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The IDs of Linodes to apply this firewall to.
        /// </summary>
        public readonly ImmutableArray<int> Linodes;
        /// <summary>
        /// The default behavior for outbound traffic. (`ACCEPT`, `DROP`)
        /// </summary>
        public readonly string OutboundPolicy;
        public readonly ImmutableArray<Outputs.GetFirewallOutboundResult> Outbounds;
        /// <summary>
        /// The status of the firewall. (`enabled`, `disabled`, `deleted`)
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The tags applied to the firewall.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetFirewallResult(
            ImmutableArray<Outputs.GetFirewallDeviceResult> devices,

            bool disabled,

            int id,

            string inboundPolicy,

            ImmutableArray<Outputs.GetFirewallInboundResult> inbounds,

            string label,

            ImmutableArray<int> linodes,

            string outboundPolicy,

            ImmutableArray<Outputs.GetFirewallOutboundResult> outbounds,

            string status,

            ImmutableArray<string> tags)
        {
            Devices = devices;
            Disabled = disabled;
            Id = id;
            InboundPolicy = inboundPolicy;
            Inbounds = inbounds;
            Label = label;
            Linodes = linodes;
            OutboundPolicy = outboundPolicy;
            Outbounds = outbounds;
            Status = status;
            Tags = tags;
        }
    }
}
