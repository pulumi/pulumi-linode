// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode.Outputs
{

    [OutputType]
    public sealed class GetDomainsDomainResult
    {
        /// <summary>
        /// The list of IPs that may perform a zone transfer for this Domain.
        /// </summary>
        public readonly ImmutableArray<string> AxfrIps;
        /// <summary>
        /// A description for this Domain.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// The amount of time in seconds that may pass before this Domain is no longer authoritative.
        /// </summary>
        public readonly int ExpireSec;
        /// <summary>
        /// The group this Domain belongs to.
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// The unique ID of this Domain.
        /// </summary>
        public readonly int? Id;
        /// <summary>
        /// The IP addresses representing the master DNS for this Domain.
        /// </summary>
        public readonly ImmutableArray<string> MasterIps;
        /// <summary>
        /// The amount of time in seconds before this Domain should be refreshed.
        /// </summary>
        public readonly int RefreshSec;
        /// <summary>
        /// The interval, in seconds, at which a failed refresh should be retried.
        /// </summary>
        public readonly int RetrySec;
        /// <summary>
        /// Start of Authority email address.
        /// </summary>
        public readonly string SoaEmail;
        /// <summary>
        /// Used to control whether this Domain is currently being rendered. (`disabled`, `active`)
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// An array of tags applied to this object.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// 'Time to Live'-the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.
        /// </summary>
        public readonly int TtlSec;
        /// <summary>
        /// If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDomainsDomainResult(
            ImmutableArray<string> axfrIps,

            string description,

            string? domain,

            int expireSec,

            string group,

            int? id,

            ImmutableArray<string> masterIps,

            int refreshSec,

            int retrySec,

            string soaEmail,

            string status,

            ImmutableArray<string> tags,

            int ttlSec,

            string type)
        {
            AxfrIps = axfrIps;
            Description = description;
            Domain = domain;
            ExpireSec = expireSec;
            Group = group;
            Id = id;
            MasterIps = masterIps;
            RefreshSec = refreshSec;
            RetrySec = retrySec;
            SoaEmail = soaEmail;
            Status = status;
            Tags = tags;
            TtlSec = ttlSec;
            Type = type;
        }
    }
}
