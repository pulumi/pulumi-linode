// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode.Outputs
{

    [OutputType]
    public sealed class GetInstancesInstanceConfigDeviceResult
    {
        /// <summary>
        /// ... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `"fullvirt"` `virt_mode`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdaResult> Sdas;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdbResult> Sdbs;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdcResult> Sdcs;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSddResult> Sdds;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdeResult> Sdes;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdfResult> Sdfs;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdgResult> Sdgs;
        /// <summary>
        /// Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdhResult> Sdhs;

        [OutputConstructor]
        private GetInstancesInstanceConfigDeviceResult(
            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdaResult> sdas,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdbResult> sdbs,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdcResult> sdcs,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSddResult> sdds,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdeResult> sdes,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdfResult> sdfs,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdgResult> sdgs,

            ImmutableArray<Outputs.GetInstancesInstanceConfigDeviceSdhResult> sdhs)
        {
            Sdas = sdas;
            Sdbs = sdbs;
            Sdcs = sdcs;
            Sdds = sdds;
            Sdes = sdes;
            Sdfs = sdfs;
            Sdgs = sdgs;
            Sdhs = sdhs;
        }
    }
}
