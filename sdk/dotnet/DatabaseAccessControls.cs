// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Manages the access control for a Linode Database. Only one `linode.DatabaseAccessControls` resource should be defined per-database.
    /// For more information, see the Linode APIv4 docs for [MySQL](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) and [PostgreSQL](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance).
    /// 
    /// ## Example Usage
    /// 
    /// Grant a Linode access to a database:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_instance = new Linode.Instance("my-instance", new()
    ///     {
    ///         Label = "myinstance",
    ///         Region = "us-southeast",
    ///         Type = "g6-nanode-1",
    ///         Image = "linode/alpine3.19",
    ///     });
    /// 
    ///     var my_db = new Linode.DatabaseMysql("my-db", new()
    ///     {
    ///         Label = "mydatabase",
    ///         EngineId = "mysql/8.0.30",
    ///         Region = "us-southeast",
    ///         Type = "g6-nanode-1",
    ///     });
    /// 
    ///     var my_access = new Linode.DatabaseAccessControls("my-access", new()
    ///     {
    ///         DatabaseId = my_db.Id,
    ///         DatabaseType = "mysql",
    ///         AllowLists = new[]
    ///         {
    ///             my_instance.IpAddress,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/databaseAccessControls:DatabaseAccessControls")]
    public partial class DatabaseAccessControls : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        [Output("allowLists")]
        public Output<ImmutableArray<string>> AllowLists { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the target database.
        /// </summary>
        [Output("databaseId")]
        public Output<int> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// The unique type of the target database. (`mysql`, `postgresql`)
        /// </summary>
        [Output("databaseType")]
        public Output<string> DatabaseType { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseAccessControls resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseAccessControls(string name, DatabaseAccessControlsArgs args, CustomResourceOptions? options = null)
            : base("linode:index/databaseAccessControls:DatabaseAccessControls", name, args ?? new DatabaseAccessControlsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseAccessControls(string name, Input<string> id, DatabaseAccessControlsState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/databaseAccessControls:DatabaseAccessControls", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseAccessControls resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseAccessControls Get(string name, Input<string> id, DatabaseAccessControlsState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseAccessControls(name, id, state, options);
        }
    }

    public sealed class DatabaseAccessControlsArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowLists", required: true)]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        /// <summary>
        /// The unique ID of the target database.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<int> DatabaseId { get; set; } = null!;

        /// <summary>
        /// The unique type of the target database. (`mysql`, `postgresql`)
        /// </summary>
        [Input("databaseType", required: true)]
        public Input<string> DatabaseType { get; set; } = null!;

        public DatabaseAccessControlsArgs()
        {
        }
        public static new DatabaseAccessControlsArgs Empty => new DatabaseAccessControlsArgs();
    }

    public sealed class DatabaseAccessControlsState : global::Pulumi.ResourceArgs
    {
        [Input("allowLists")]
        private InputList<string>? _allowLists;

        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        public InputList<string> AllowLists
        {
            get => _allowLists ?? (_allowLists = new InputList<string>());
            set => _allowLists = value;
        }

        /// <summary>
        /// The unique ID of the target database.
        /// </summary>
        [Input("databaseId")]
        public Input<int>? DatabaseId { get; set; }

        /// <summary>
        /// The unique type of the target database. (`mysql`, `postgresql`)
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        public DatabaseAccessControlsState()
        {
        }
        public static new DatabaseAccessControlsState Empty => new DatabaseAccessControlsState();
    }
}
