// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetFirewallTemplates
    {
        /// <summary>
        /// Provides information about all Linode Firewall Templates.
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to list all available Firewall Templates:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Linode.GetFirewallTemplates.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firewallTemplateSlugs"] = all.Apply(getFirewallTemplatesResult =&gt; getFirewallTemplatesResult.FirewallTemplates),
        ///     };
        /// });
        /// ```
        /// 
        /// Or with some filters to get a subset of the results.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered = Linode.GetFirewallTemplates.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetFirewallTemplatesFilterInputArgs
        ///             {
        ///                 Name = "slug",
        ///                 Values = new[]
        ///                 {
        ///                     "public",
        ///                 },
        ///                 MatchBy = "exact",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firewallTemplateSlugs"] = filtered.Apply(getFirewallTemplatesResult =&gt; getFirewallTemplatesResult.FirewallTemplates),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `Slug`
        /// </summary>
        public static Task<GetFirewallTemplatesResult> InvokeAsync(GetFirewallTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallTemplatesResult>("linode:index/getFirewallTemplates:getFirewallTemplates", args ?? new GetFirewallTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about all Linode Firewall Templates.
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to list all available Firewall Templates:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Linode.GetFirewallTemplates.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firewallTemplateSlugs"] = all.Apply(getFirewallTemplatesResult =&gt; getFirewallTemplatesResult.FirewallTemplates),
        ///     };
        /// });
        /// ```
        /// 
        /// Or with some filters to get a subset of the results.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered = Linode.GetFirewallTemplates.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetFirewallTemplatesFilterInputArgs
        ///             {
        ///                 Name = "slug",
        ///                 Values = new[]
        ///                 {
        ///                     "public",
        ///                 },
        ///                 MatchBy = "exact",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firewallTemplateSlugs"] = filtered.Apply(getFirewallTemplatesResult =&gt; getFirewallTemplatesResult.FirewallTemplates),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `Slug`
        /// </summary>
        public static Output<GetFirewallTemplatesResult> Invoke(GetFirewallTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallTemplatesResult>("linode:index/getFirewallTemplates:getFirewallTemplates", args ?? new GetFirewallTemplatesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about all Linode Firewall Templates.
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to list all available Firewall Templates:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Linode.GetFirewallTemplates.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firewallTemplateSlugs"] = all.Apply(getFirewallTemplatesResult =&gt; getFirewallTemplatesResult.FirewallTemplates),
        ///     };
        /// });
        /// ```
        /// 
        /// Or with some filters to get a subset of the results.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered = Linode.GetFirewallTemplates.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetFirewallTemplatesFilterInputArgs
        ///             {
        ///                 Name = "slug",
        ///                 Values = new[]
        ///                 {
        ///                     "public",
        ///                 },
        ///                 MatchBy = "exact",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["firewallTemplateSlugs"] = filtered.Apply(getFirewallTemplatesResult =&gt; getFirewallTemplatesResult.FirewallTemplates),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `Slug`
        /// </summary>
        public static Output<GetFirewallTemplatesResult> Invoke(GetFirewallTemplatesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallTemplatesResult>("linode:index/getFirewallTemplates:getFirewallTemplates", args ?? new GetFirewallTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallTemplatesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetFirewallTemplatesFilterArgs>? _filters;
        public List<Inputs.GetFirewallTemplatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFirewallTemplatesFilterArgs>());
            set => _filters = value;
        }

        [Input("firewallTemplates")]
        private List<Inputs.GetFirewallTemplatesFirewallTemplateArgs>? _firewallTemplates;
        public List<Inputs.GetFirewallTemplatesFirewallTemplateArgs> FirewallTemplates
        {
            get => _firewallTemplates ?? (_firewallTemplates = new List<Inputs.GetFirewallTemplatesFirewallTemplateArgs>());
            set => _firewallTemplates = value;
        }

        public GetFirewallTemplatesArgs()
        {
        }
        public static new GetFirewallTemplatesArgs Empty => new GetFirewallTemplatesArgs();
    }

    public sealed class GetFirewallTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetFirewallTemplatesFilterInputArgs>? _filters;
        public InputList<Inputs.GetFirewallTemplatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetFirewallTemplatesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("firewallTemplates")]
        private InputList<Inputs.GetFirewallTemplatesFirewallTemplateInputArgs>? _firewallTemplates;
        public InputList<Inputs.GetFirewallTemplatesFirewallTemplateInputArgs> FirewallTemplates
        {
            get => _firewallTemplates ?? (_firewallTemplates = new InputList<Inputs.GetFirewallTemplatesFirewallTemplateInputArgs>());
            set => _firewallTemplates = value;
        }

        public GetFirewallTemplatesInvokeArgs()
        {
        }
        public static new GetFirewallTemplatesInvokeArgs Empty => new GetFirewallTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallTemplatesResult
    {
        public readonly ImmutableArray<Outputs.GetFirewallTemplatesFilterResult> Filters;
        public readonly ImmutableArray<Outputs.GetFirewallTemplatesFirewallTemplateResult> FirewallTemplates;
        public readonly string Id;

        [OutputConstructor]
        private GetFirewallTemplatesResult(
            ImmutableArray<Outputs.GetFirewallTemplatesFilterResult> filters,

            ImmutableArray<Outputs.GetFirewallTemplatesFirewallTemplateResult> firewallTemplates,

            string id)
        {
            Filters = filters;
            FirewallTemplates = firewallTemplates;
            Id = id;
        }
    }
}
