// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetImages
    {
        /// <summary>
        /// Provides information about Linode images that match a set of filters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about all Linode images with a certain label and visibility:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var specific_images = Linode.GetImages.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetImagesFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "Debian 11",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetImagesFilterInputArgs
        ///             {
        ///                 Name = "is_public",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageId"] = specific_images.Apply(specific_images =&gt; specific_images.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// Get information about all Linode images associated with the current token:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_images = Linode.GetImages.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageIds"] = new[]
        ///         {
        ///             all_images.Apply(all_images =&gt; all_images.Apply(getImagesResult =&gt; getImagesResult.Images)),
        ///         }.Select(__item =&gt; __item?.Id).ToList(),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Filterable Fields
        /// 
        /// * `created_by`
        /// 
        /// * `deprecated`
        /// 
        /// * `description`
        /// 
        /// * `id`
        /// 
        /// * `is_public`
        /// 
        /// * `label`
        /// 
        /// * `size`
        /// 
        /// * `status`
        /// 
        /// * `vendor`
        /// </summary>
        public static Task<GetImagesResult> InvokeAsync(GetImagesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesResult>("linode:index/getImages:getImages", args ?? new GetImagesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about Linode images that match a set of filters.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about all Linode images with a certain label and visibility:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var specific_images = Linode.GetImages.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetImagesFilterInputArgs
        ///             {
        ///                 Name = "label",
        ///                 Values = new[]
        ///                 {
        ///                     "Debian 11",
        ///                 },
        ///             },
        ///             new Linode.Inputs.GetImagesFilterInputArgs
        ///             {
        ///                 Name = "is_public",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageId"] = specific_images.Apply(specific_images =&gt; specific_images.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.Id)),
        ///     };
        /// });
        /// ```
        /// 
        /// Get information about all Linode images associated with the current token:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_images = Linode.GetImages.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageIds"] = new[]
        ///         {
        ///             all_images.Apply(all_images =&gt; all_images.Apply(getImagesResult =&gt; getImagesResult.Images)),
        ///         }.Select(__item =&gt; __item?.Id).ToList(),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## Filterable Fields
        /// 
        /// * `created_by`
        /// 
        /// * `deprecated`
        /// 
        /// * `description`
        /// 
        /// * `id`
        /// 
        /// * `is_public`
        /// 
        /// * `label`
        /// 
        /// * `size`
        /// 
        /// * `status`
        /// 
        /// * `vendor`
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("linode:index/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetImagesFilterArgs>? _filters;
        public List<Inputs.GetImagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetImagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If true, only the latest image will be returned. Images without a valid `created` field are not included in the result.
        /// </summary>
        [Input("latest")]
        public bool? Latest { get; set; }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        public GetImagesArgs()
        {
        }
        public static new GetImagesArgs Empty => new GetImagesArgs();
    }

    public sealed class GetImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetImagesFilterInputArgs>? _filters;
        public InputList<Inputs.GetImagesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetImagesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If true, only the latest image will be returned. Images without a valid `created` field are not included in the result.
        /// </summary>
        [Input("latest")]
        public Input<bool>? Latest { get; set; }

        /// <summary>
        /// The order in which results should be returned. (`asc`, `desc`; default `asc`)
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        public GetImagesInvokeArgs()
        {
        }
        public static new GetImagesInvokeArgs Empty => new GetImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesResult
    {
        public readonly ImmutableArray<Outputs.GetImagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetImagesImageResult> Images;
        public readonly bool? Latest;
        public readonly string? Order;
        public readonly string? OrderBy;

        [OutputConstructor]
        private GetImagesResult(
            ImmutableArray<Outputs.GetImagesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetImagesImageResult> images,

            bool? latest,

            string? order,

            string? orderBy)
        {
            Filters = filters;
            Id = id;
            Images = images;
            Latest = latest;
            Order = order;
            OrderBy = orderBy;
        }
    }
}
