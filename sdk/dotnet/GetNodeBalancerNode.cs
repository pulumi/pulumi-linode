// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetNodeBalancerNode
    {
        /// <summary>
        /// Provides details about a Linode NodeBalancer node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_node = Linode.GetNodeBalancerNode.Invoke(new()
        ///     {
        ///         Id = 123,
        ///         NodebalancerId = 456,
        ///         ConfigId = 789,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeBalancerNodeResult> InvokeAsync(GetNodeBalancerNodeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeBalancerNodeResult>("linode:index/getNodeBalancerNode:getNodeBalancerNode", args ?? new GetNodeBalancerNodeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a Linode NodeBalancer node.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_node = Linode.GetNodeBalancerNode.Invoke(new()
        ///     {
        ///         Id = 123,
        ///         NodebalancerId = 456,
        ///         ConfigId = 789,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeBalancerNodeResult> Invoke(GetNodeBalancerNodeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeBalancerNodeResult>("linode:index/getNodeBalancerNode:getNodeBalancerNode", args ?? new GetNodeBalancerNodeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeBalancerNodeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the config that contains the Node.
        /// </summary>
        [Input("configId", required: true)]
        public int ConfigId { get; set; }

        /// <summary>
        /// The node's ID.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        /// <summary>
        /// The ID of the NodeBalancer that contains the node.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public int NodebalancerId { get; set; }

        public GetNodeBalancerNodeArgs()
        {
        }
        public static new GetNodeBalancerNodeArgs Empty => new GetNodeBalancerNodeArgs();
    }

    public sealed class GetNodeBalancerNodeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the config that contains the Node.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// The node's ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        /// <summary>
        /// The ID of the NodeBalancer that contains the node.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public Input<int> NodebalancerId { get; set; } = null!;

        public GetNodeBalancerNodeInvokeArgs()
        {
        }
        public static new GetNodeBalancerNodeInvokeArgs Empty => new GetNodeBalancerNodeInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeBalancerNodeResult
    {
        /// <summary>
        /// The private IP Address where this backend can be reached.
        /// </summary>
        public readonly string Address;
        public readonly int ConfigId;
        public readonly int Id;
        /// <summary>
        /// The label of the Linode NodeBalancer Node. This is for display purposes only.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)
        /// </summary>
        public readonly string Mode;
        public readonly int NodebalancerId;
        /// <summary>
        /// The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).
        /// </summary>
        public readonly int Weight;

        [OutputConstructor]
        private GetNodeBalancerNodeResult(
            string address,

            int configId,

            int id,

            string label,

            string mode,

            int nodebalancerId,

            string status,

            int weight)
        {
            Address = address;
            ConfigId = configId;
            Id = id;
            Label = label;
            Mode = mode;
            NodebalancerId = nodebalancerId;
            Status = status;
            Weight = weight;
        }
    }
}
