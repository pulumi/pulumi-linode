// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetDatabaseMysqlV2
    {
        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysqlV2.Invoke(new()
        ///     {
        ///         Id = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## pending_updates
        /// 
        /// The following arguments are exposed by each entry in the `pending_updates` attribute:
        /// 
        /// * `deadline` - The time when a mandatory update needs to be applied.
        /// 
        /// * `description` - A description of the update.
        /// 
        /// * `planned_for` - The date and time a maintenance update will be applied.
        /// 
        /// ## updates
        /// 
        /// The following arguments are supported in the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// </summary>
        public static Task<GetDatabaseMysqlV2Result> InvokeAsync(GetDatabaseMysqlV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseMysqlV2Result>("linode:index/getDatabaseMysqlV2:getDatabaseMysqlV2", args ?? new GetDatabaseMysqlV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysqlV2.Invoke(new()
        ///     {
        ///         Id = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## pending_updates
        /// 
        /// The following arguments are exposed by each entry in the `pending_updates` attribute:
        /// 
        /// * `deadline` - The time when a mandatory update needs to be applied.
        /// 
        /// * `description` - A description of the update.
        /// 
        /// * `planned_for` - The date and time a maintenance update will be applied.
        /// 
        /// ## updates
        /// 
        /// The following arguments are supported in the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// </summary>
        public static Output<GetDatabaseMysqlV2Result> Invoke(GetDatabaseMysqlV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseMysqlV2Result>("linode:index/getDatabaseMysqlV2:getDatabaseMysqlV2", args ?? new GetDatabaseMysqlV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode MySQL Database.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about a MySQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMysqlV2.Invoke(new()
        ///     {
        ///         Id = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## pending_updates
        /// 
        /// The following arguments are exposed by each entry in the `pending_updates` attribute:
        /// 
        /// * `deadline` - The time when a mandatory update needs to be applied.
        /// 
        /// * `description` - A description of the update.
        /// 
        /// * `planned_for` - The date and time a maintenance update will be applied.
        /// 
        /// ## updates
        /// 
        /// The following arguments are supported in the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// </summary>
        public static Output<GetDatabaseMysqlV2Result> Invoke(GetDatabaseMysqlV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseMysqlV2Result>("linode:index/getDatabaseMysqlV2:getDatabaseMysqlV2", args ?? new GetDatabaseMysqlV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseMysqlV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL database.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDatabaseMysqlV2Args()
        {
        }
        public static new GetDatabaseMysqlV2Args Empty => new GetDatabaseMysqlV2Args();
    }

    public sealed class GetDatabaseMysqlV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MySQL database.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDatabaseMysqlV2InvokeArgs()
        {
        }
        public static new GetDatabaseMysqlV2InvokeArgs Empty => new GetDatabaseMysqlV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseMysqlV2Result
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        public readonly ImmutableArray<string> AllowLists;
        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database.
        /// </summary>
        public readonly string CaCert;
        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        public readonly int ClusterSize;
        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// The Managed Database engine. (e.g. `mysql`)
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// The minimum amount of time in seconds to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
        /// </summary>
        public readonly int EngineConfigBinlogRetentionPeriod;
        /// <summary>
        /// The number of seconds that the mysqld server waits for a connect packet before responding with "Bad handshake".
        /// </summary>
        public readonly int EngineConfigMysqlConnectTimeout;
        /// <summary>
        /// Default server time zone as an offset from UTC (from -12:00 to +12:00), a time zone name, or `SYSTEM` to use the MySQL server default.
        /// </summary>
        public readonly string EngineConfigMysqlDefaultTimeZone;
        /// <summary>
        /// The maximum permitted result length in bytes for the `GROUP_CONCAT()` function.
        /// </summary>
        public readonly double EngineConfigMysqlGroupConcatMaxLen;
        /// <summary>
        /// The time, in seconds, before cached statistics expire.
        /// </summary>
        public readonly int EngineConfigMysqlInformationSchemaStatsExpiry;
        /// <summary>
        /// Maximum size for the InnoDB change buffer, as a percentage of the total size of the buffer pool. Default is 25.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbChangeBufferMaxSize;
        /// <summary>
        /// Specifies whether flushing a page from the InnoDB buffer pool also flushes other dirty pages in the same extent (default is 1): 0 - dirty pages in the same extent are not flushed, 1 - flush contiguous dirty pages in the same extent, 2 - flush dirty pages in the same extent.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbFlushNeighbors;
        /// <summary>
        /// Minimum length of words that are stored in an InnoDB FULLTEXT index. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbFtMinTokenSize;
        /// <summary>
        /// This option is used to specify your own InnoDB FULLTEXT index stopword list for all InnoDB tables.
        /// </summary>
        public readonly string EngineConfigMysqlInnodbFtServerStopwordTable;
        /// <summary>
        /// The length of time in seconds an InnoDB transaction waits for a row lock before giving up. Default is 120.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbLockWaitTimeout;
        /// <summary>
        /// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbLogBufferSize;
        /// <summary>
        /// The upper limit in bytes on the size of the temporary log files used during online DDL operations for InnoDB tables.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbOnlineAlterLogMaxSize;
        /// <summary>
        /// The number of I/O threads for read operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbReadIoThreads;
        /// <summary>
        /// When enabled, a transaction timeout causes InnoDB to abort and roll back the entire transaction. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        public readonly bool EngineConfigMysqlInnodbRollbackOnTimeout;
        /// <summary>
        /// Defines the maximum number of threads permitted inside of InnoDB. Default is 0 (infinite concurrency - no limit).
        /// </summary>
        public readonly int EngineConfigMysqlInnodbThreadConcurrency;
        /// <summary>
        /// The number of I/O threads for write operations in InnoDB. Default is 4. Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        public readonly int EngineConfigMysqlInnodbWriteIoThreads;
        /// <summary>
        /// The number of seconds the server waits for activity on an interactive connection before closing it.
        /// </summary>
        public readonly int EngineConfigMysqlInteractiveTimeout;
        /// <summary>
        /// The storage engine for in-memory internal temporary tables.
        /// </summary>
        public readonly string EngineConfigMysqlInternalTmpMemStorageEngine;
        /// <summary>
        /// Size of the largest message in bytes that can be received by the server. Default is 67108864 (64M).
        /// </summary>
        public readonly int EngineConfigMysqlMaxAllowedPacket;
        /// <summary>
        /// Limits the size of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M).
        /// </summary>
        public readonly int EngineConfigMysqlMaxHeapTableSize;
        /// <summary>
        /// Start sizes of connection buffer and result buffer. Default is 16384 (16K). Changing this parameter will lead to a restart of the MySQL service.
        /// </summary>
        public readonly int EngineConfigMysqlNetBufferLength;
        /// <summary>
        /// The number of seconds to wait for more data from a connection before aborting the read.
        /// </summary>
        public readonly int EngineConfigMysqlNetReadTimeout;
        /// <summary>
        /// The number of seconds to wait for a block to be written to a connection before aborting the write.
        /// </summary>
        public readonly int EngineConfigMysqlNetWriteTimeout;
        /// <summary>
        /// Sort buffer size in bytes for ORDER BY optimization. Default is 262144 (256K).
        /// </summary>
        public readonly int EngineConfigMysqlSortBufferSize;
        /// <summary>
        /// Global SQL mode. Set to empty to use MySQL server defaults. When creating a new service and not setting this field Aiven default SQL mode (strict, SQL standard compliant) will be assigned.
        /// </summary>
        public readonly string EngineConfigMysqlSqlMode;
        /// <summary>
        /// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
        /// </summary>
        public readonly bool EngineConfigMysqlSqlRequirePrimaryKey;
        /// <summary>
        /// Limits the size of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
        /// </summary>
        public readonly int EngineConfigMysqlTmpTableSize;
        /// <summary>
        /// The number of seconds the server waits for activity on a noninteractive connection before closing it.
        /// </summary>
        public readonly int EngineConfigMysqlWaitTimeout;
        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mysql`)
        /// </summary>
        public readonly string EngineId;
        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        public readonly string ForkRestoreTime;
        /// <summary>
        /// The ID of the database that was forked from.
        /// </summary>
        public readonly int ForkSource;
        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        public readonly string HostPrimary;
        /// <summary>
        /// The secondary/private host for the managed database.
        /// </summary>
        public readonly string HostSecondary;
        public readonly string Id;
        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        public readonly string Label;
        public readonly ImmutableDictionary<string, string> Members;
        public readonly string OldestRestoreTime;
        public readonly ImmutableArray<Outputs.GetDatabaseMysqlV2PendingUpdateResult> PendingUpdates;
        /// <summary>
        /// The back-end platform for relational databases used by the service.
        /// </summary>
        public readonly string Platform;
        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        public readonly string RootPassword;
        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        public readonly string RootUsername;
        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        public readonly bool SslConnection;
        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Whether this Managed Database is suspended.
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        public readonly string Updated;
        public readonly Outputs.GetDatabaseMysqlV2UpdatesResult Updates;
        /// <summary>
        /// The Managed Database engine version. (e.g. `13.2`)
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDatabaseMysqlV2Result(
            ImmutableArray<string> allowLists,

            string caCert,

            int clusterSize,

            string created,

            bool encrypted,

            string engine,

            int engineConfigBinlogRetentionPeriod,

            int engineConfigMysqlConnectTimeout,

            string engineConfigMysqlDefaultTimeZone,

            double engineConfigMysqlGroupConcatMaxLen,

            int engineConfigMysqlInformationSchemaStatsExpiry,

            int engineConfigMysqlInnodbChangeBufferMaxSize,

            int engineConfigMysqlInnodbFlushNeighbors,

            int engineConfigMysqlInnodbFtMinTokenSize,

            string engineConfigMysqlInnodbFtServerStopwordTable,

            int engineConfigMysqlInnodbLockWaitTimeout,

            int engineConfigMysqlInnodbLogBufferSize,

            int engineConfigMysqlInnodbOnlineAlterLogMaxSize,

            int engineConfigMysqlInnodbReadIoThreads,

            bool engineConfigMysqlInnodbRollbackOnTimeout,

            int engineConfigMysqlInnodbThreadConcurrency,

            int engineConfigMysqlInnodbWriteIoThreads,

            int engineConfigMysqlInteractiveTimeout,

            string engineConfigMysqlInternalTmpMemStorageEngine,

            int engineConfigMysqlMaxAllowedPacket,

            int engineConfigMysqlMaxHeapTableSize,

            int engineConfigMysqlNetBufferLength,

            int engineConfigMysqlNetReadTimeout,

            int engineConfigMysqlNetWriteTimeout,

            int engineConfigMysqlSortBufferSize,

            string engineConfigMysqlSqlMode,

            bool engineConfigMysqlSqlRequirePrimaryKey,

            int engineConfigMysqlTmpTableSize,

            int engineConfigMysqlWaitTimeout,

            string engineId,

            string forkRestoreTime,

            int forkSource,

            string hostPrimary,

            string hostSecondary,

            string id,

            string label,

            ImmutableDictionary<string, string> members,

            string oldestRestoreTime,

            ImmutableArray<Outputs.GetDatabaseMysqlV2PendingUpdateResult> pendingUpdates,

            string platform,

            int port,

            string region,

            string rootPassword,

            string rootUsername,

            bool sslConnection,

            string status,

            bool suspended,

            string type,

            string updated,

            Outputs.GetDatabaseMysqlV2UpdatesResult updates,

            string version)
        {
            AllowLists = allowLists;
            CaCert = caCert;
            ClusterSize = clusterSize;
            Created = created;
            Encrypted = encrypted;
            Engine = engine;
            EngineConfigBinlogRetentionPeriod = engineConfigBinlogRetentionPeriod;
            EngineConfigMysqlConnectTimeout = engineConfigMysqlConnectTimeout;
            EngineConfigMysqlDefaultTimeZone = engineConfigMysqlDefaultTimeZone;
            EngineConfigMysqlGroupConcatMaxLen = engineConfigMysqlGroupConcatMaxLen;
            EngineConfigMysqlInformationSchemaStatsExpiry = engineConfigMysqlInformationSchemaStatsExpiry;
            EngineConfigMysqlInnodbChangeBufferMaxSize = engineConfigMysqlInnodbChangeBufferMaxSize;
            EngineConfigMysqlInnodbFlushNeighbors = engineConfigMysqlInnodbFlushNeighbors;
            EngineConfigMysqlInnodbFtMinTokenSize = engineConfigMysqlInnodbFtMinTokenSize;
            EngineConfigMysqlInnodbFtServerStopwordTable = engineConfigMysqlInnodbFtServerStopwordTable;
            EngineConfigMysqlInnodbLockWaitTimeout = engineConfigMysqlInnodbLockWaitTimeout;
            EngineConfigMysqlInnodbLogBufferSize = engineConfigMysqlInnodbLogBufferSize;
            EngineConfigMysqlInnodbOnlineAlterLogMaxSize = engineConfigMysqlInnodbOnlineAlterLogMaxSize;
            EngineConfigMysqlInnodbReadIoThreads = engineConfigMysqlInnodbReadIoThreads;
            EngineConfigMysqlInnodbRollbackOnTimeout = engineConfigMysqlInnodbRollbackOnTimeout;
            EngineConfigMysqlInnodbThreadConcurrency = engineConfigMysqlInnodbThreadConcurrency;
            EngineConfigMysqlInnodbWriteIoThreads = engineConfigMysqlInnodbWriteIoThreads;
            EngineConfigMysqlInteractiveTimeout = engineConfigMysqlInteractiveTimeout;
            EngineConfigMysqlInternalTmpMemStorageEngine = engineConfigMysqlInternalTmpMemStorageEngine;
            EngineConfigMysqlMaxAllowedPacket = engineConfigMysqlMaxAllowedPacket;
            EngineConfigMysqlMaxHeapTableSize = engineConfigMysqlMaxHeapTableSize;
            EngineConfigMysqlNetBufferLength = engineConfigMysqlNetBufferLength;
            EngineConfigMysqlNetReadTimeout = engineConfigMysqlNetReadTimeout;
            EngineConfigMysqlNetWriteTimeout = engineConfigMysqlNetWriteTimeout;
            EngineConfigMysqlSortBufferSize = engineConfigMysqlSortBufferSize;
            EngineConfigMysqlSqlMode = engineConfigMysqlSqlMode;
            EngineConfigMysqlSqlRequirePrimaryKey = engineConfigMysqlSqlRequirePrimaryKey;
            EngineConfigMysqlTmpTableSize = engineConfigMysqlTmpTableSize;
            EngineConfigMysqlWaitTimeout = engineConfigMysqlWaitTimeout;
            EngineId = engineId;
            ForkRestoreTime = forkRestoreTime;
            ForkSource = forkSource;
            HostPrimary = hostPrimary;
            HostSecondary = hostSecondary;
            Id = id;
            Label = label;
            Members = members;
            OldestRestoreTime = oldestRestoreTime;
            PendingUpdates = pendingUpdates;
            Platform = platform;
            Port = port;
            Region = region;
            RootPassword = rootPassword;
            RootUsername = rootUsername;
            SslConnection = sslConnection;
            Status = status;
            Suspended = suspended;
            Type = type;
            Updated = updated;
            Updates = updates;
            Version = version;
        }
    }
}
