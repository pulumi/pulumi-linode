// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetDatabaseMongodb
    {
        /// <summary>
        /// Provides information about a Linode MongoDB Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about a MongoDB database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMongodb.Invoke(new()
        ///     {
        ///         DatabaseId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## updates
        /// 
        /// The following arguments are exported by the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// 
        /// * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
        /// </summary>
        public static Task<GetDatabaseMongodbResult> InvokeAsync(GetDatabaseMongodbArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseMongodbResult>("linode:index/getDatabaseMongodb:getDatabaseMongodb", args ?? new GetDatabaseMongodbArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode MongoDB Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get information about a MongoDB database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabaseMongodb.Invoke(new()
        ///     {
        ///         DatabaseId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// ## updates
        /// 
        /// The following arguments are exported by the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// 
        /// * `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)
        /// </summary>
        public static Output<GetDatabaseMongodbResult> Invoke(GetDatabaseMongodbInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseMongodbResult>("linode:index/getDatabaseMongodb:getDatabaseMongodb", args ?? new GetDatabaseMongodbInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseMongodbArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MongoDB database.
        /// </summary>
        [Input("databaseId", required: true)]
        public int DatabaseId { get; set; }

        public GetDatabaseMongodbArgs()
        {
        }
        public static new GetDatabaseMongodbArgs Empty => new GetDatabaseMongodbArgs();
    }

    public sealed class GetDatabaseMongodbInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the MongoDB database.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<int> DatabaseId { get; set; } = null!;

        public GetDatabaseMongodbInvokeArgs()
        {
        }
        public static new GetDatabaseMongodbInvokeArgs Empty => new GetDatabaseMongodbInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseMongodbResult
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
        /// </summary>
        public readonly ImmutableArray<string> AllowLists;
        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database instance.
        /// </summary>
        public readonly string CaCert;
        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database.
        /// </summary>
        public readonly int ClusterSize;
        /// <summary>
        /// The type of data compression for this Database. (`none`, `snappy`, `zlib`)
        /// </summary>
        public readonly string CompressionType;
        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        public readonly string Created;
        public readonly int DatabaseId;
        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// The Managed Database engine. (e.g. `mongodb`)
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)
        /// </summary>
        public readonly string EngineId;
        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        public readonly string HostPrimary;
        /// <summary>
        /// The secondary/private network host for the Managed Database.
        /// </summary>
        public readonly string HostSecondary;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// A set of peer addresses for this Database.
        /// </summary>
        public readonly ImmutableArray<string> Peers;
        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The region that hosts this Linode Managed Database.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.
        /// </summary>
        public readonly string ReplicaSet;
        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        public readonly string RootPassword;
        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        public readonly string RootUsername;
        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        public readonly bool SslConnection;
        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)
        /// </summary>
        public readonly string StorageEngine;
        /// <summary>
        /// The Linode Instance type used for the nodes of the  Managed Database instance.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        public readonly string Updated;
        public readonly ImmutableArray<Outputs.GetDatabaseMongodbUpdateResult> Updates;
        /// <summary>
        /// The Managed Database engine version. (e.g. `v8.0.26`)
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDatabaseMongodbResult(
            ImmutableArray<string> allowLists,

            string caCert,

            int clusterSize,

            string compressionType,

            string created,

            int databaseId,

            bool encrypted,

            string engine,

            string engineId,

            string hostPrimary,

            string hostSecondary,

            string id,

            string label,

            ImmutableArray<string> peers,

            int port,

            string region,

            string replicaSet,

            string rootPassword,

            string rootUsername,

            bool sslConnection,

            string status,

            string storageEngine,

            string type,

            string updated,

            ImmutableArray<Outputs.GetDatabaseMongodbUpdateResult> updates,

            string version)
        {
            AllowLists = allowLists;
            CaCert = caCert;
            ClusterSize = clusterSize;
            CompressionType = compressionType;
            Created = created;
            DatabaseId = databaseId;
            Encrypted = encrypted;
            Engine = engine;
            EngineId = engineId;
            HostPrimary = hostPrimary;
            HostSecondary = hostSecondary;
            Id = id;
            Label = label;
            Peers = peers;
            Port = port;
            Region = region;
            ReplicaSet = replicaSet;
            RootPassword = rootPassword;
            RootUsername = rootUsername;
            SslConnection = sslConnection;
            Status = status;
            StorageEngine = storageEngine;
            Type = type;
            Updated = updated;
            Updates = updates;
            Version = version;
        }
    }
}
