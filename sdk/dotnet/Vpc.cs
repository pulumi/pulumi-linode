// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Manages a Linode VPC.
    /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-vpc).
    /// 
    /// Please refer to linode.VpcSubnet to manage the subnets under a Linode VPC.
    /// 
    /// ## Example Usage
    /// 
    /// Create a VPC:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Linode.Vpc("test", new()
    ///     {
    ///         Label = "test-vpc",
    ///         Region = "us-iad",
    ///         Description = "My first VPC.",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// Create a VPC with a `/52` IPv6 range prefix:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // NOTE: IPv6 VPCs may not currently be available to all users.
    ///     var test = new Linode.Vpc("test", new()
    ///     {
    ///         Label = "test-vpc",
    ///         Region = "us-iad",
    ///         Ipv6s = new[]
    ///         {
    ///             new Linode.Inputs.VpcIpv6Args
    ///             {
    ///                 Range = "/52",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## IPv6
    /// 
    /// &gt; **Limited Availability** IPv6 VPCs may not currently be available to all users.
    /// 
    /// Configures a single IPv6 range under this VPC.
    /// 
    /// * `range` - (Optional) An existing IPv6 prefix owned by the current account or a forward slash (/) followed by a valid prefix length. If unspecified, a range with the default prefix will be allocated for this VPC.
    /// 
    /// * `allocation_class` - (Optional) Indicates the labeled IPv6 Inventory that the VPC Prefix should be allocated from.
    /// 
    /// * `allocated_range` - (Read-Only) The value of range computed by the API. This is necessary when needing to access the range for an implicit allocation.
    /// </summary>
    [LinodeResourceType("linode:index/vpc:Vpc")]
    public partial class Vpc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time when the VPC was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The user-defined description of this VPC.
        /// 
        /// * `ipv6` - (Optional) A list of IPv6 allocations under this VPC.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The IPv6 configuration of this VPC.
        /// </summary>
        [Output("ipv6s")]
        public Output<ImmutableArray<Outputs.VpcIpv6>> Ipv6s { get; private set; } = null!;

        /// <summary>
        /// The label of the VPC. This field can only contain ASCII letters, digits and dashes.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The region of the VPC.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The date and time when the VPC was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;


        /// <summary>
        /// Create a Vpc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vpc(string name, VpcArgs args, CustomResourceOptions? options = null)
            : base("linode:index/vpc:Vpc", name, args ?? new VpcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vpc(string name, Input<string> id, VpcState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/vpc:Vpc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vpc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vpc Get(string name, Input<string> id, VpcState? state = null, CustomResourceOptions? options = null)
        {
            return new Vpc(name, id, state, options);
        }
    }

    public sealed class VpcArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user-defined description of this VPC.
        /// 
        /// * `ipv6` - (Optional) A list of IPv6 allocations under this VPC.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ipv6s")]
        private InputList<Inputs.VpcIpv6Args>? _ipv6s;

        /// <summary>
        /// The IPv6 configuration of this VPC.
        /// </summary>
        public InputList<Inputs.VpcIpv6Args> Ipv6s
        {
            get => _ipv6s ?? (_ipv6s = new InputList<Inputs.VpcIpv6Args>());
            set => _ipv6s = value;
        }

        /// <summary>
        /// The label of the VPC. This field can only contain ASCII letters, digits and dashes.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        /// <summary>
        /// The region of the VPC.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public VpcArgs()
        {
        }
        public static new VpcArgs Empty => new VpcArgs();
    }

    public sealed class VpcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time when the VPC was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The user-defined description of this VPC.
        /// 
        /// * `ipv6` - (Optional) A list of IPv6 allocations under this VPC.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ipv6s")]
        private InputList<Inputs.VpcIpv6GetArgs>? _ipv6s;

        /// <summary>
        /// The IPv6 configuration of this VPC.
        /// </summary>
        public InputList<Inputs.VpcIpv6GetArgs> Ipv6s
        {
            get => _ipv6s ?? (_ipv6s = new InputList<Inputs.VpcIpv6GetArgs>());
            set => _ipv6s = value;
        }

        /// <summary>
        /// The label of the VPC. This field can only contain ASCII letters, digits and dashes.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The region of the VPC.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The date and time when the VPC was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        public VpcState()
        {
        }
        public static new VpcState Empty => new VpcState();
    }
}
