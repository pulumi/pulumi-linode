// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetNodebalancerVpc
    {
        /// <summary>
        /// &gt; **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `api_version` provider argument must be set to `v4beta`.
        /// 
        /// Provides information about a NodeBalancer VPC configuration.
        /// For more information, see the corresponding [Linode APIv4 documentation](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-vpc-config).
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve information about a NodeBalancer VPC configuration:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_config = Linode.GetNodebalancerVpc.Invoke(new()
        ///     {
        ///         NodebalancerId = 123,
        ///         Id = 456,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodebalancerVpcResult> InvokeAsync(GetNodebalancerVpcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodebalancerVpcResult>("linode:index/getNodebalancerVpc:getNodebalancerVpc", args ?? new GetNodebalancerVpcArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `api_version` provider argument must be set to `v4beta`.
        /// 
        /// Provides information about a NodeBalancer VPC configuration.
        /// For more information, see the corresponding [Linode APIv4 documentation](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-vpc-config).
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve information about a NodeBalancer VPC configuration:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_config = Linode.GetNodebalancerVpc.Invoke(new()
        ///     {
        ///         NodebalancerId = 123,
        ///         Id = 456,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodebalancerVpcResult> Invoke(GetNodebalancerVpcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodebalancerVpcResult>("linode:index/getNodebalancerVpc:getNodebalancerVpc", args ?? new GetNodebalancerVpcInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `api_version` provider argument must be set to `v4beta`.
        /// 
        /// Provides information about a NodeBalancer VPC configuration.
        /// For more information, see the corresponding [Linode APIv4 documentation](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-vpc-config).
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve information about a NodeBalancer VPC configuration:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_config = Linode.GetNodebalancerVpc.Invoke(new()
        ///     {
        ///         NodebalancerId = 123,
        ///         Id = 456,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodebalancerVpcResult> Invoke(GetNodebalancerVpcInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodebalancerVpcResult>("linode:index/getNodebalancerVpc:getNodebalancerVpc", args ?? new GetNodebalancerVpcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodebalancerVpcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the VPC configuration.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        /// <summary>
        /// The ID of the parent NodeBalancer of the VPC configuration.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public int NodebalancerId { get; set; }

        public GetNodebalancerVpcArgs()
        {
        }
        public static new GetNodebalancerVpcArgs Empty => new GetNodebalancerVpcArgs();
    }

    public sealed class GetNodebalancerVpcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the VPC configuration.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        /// <summary>
        /// The ID of the parent NodeBalancer of the VPC configuration.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public Input<int> NodebalancerId { get; set; } = null!;

        public GetNodebalancerVpcInvokeArgs()
        {
        }
        public static new GetNodebalancerVpcInvokeArgs Empty => new GetNodebalancerVpcInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodebalancerVpcResult
    {
        public readonly int Id;
        /// <summary>
        /// A CIDR range for the VPC's IPv4 addresses. The NodeBalancer sources IP addresses from this range when routing traffic to the backend VPC nodes.
        /// </summary>
        public readonly string Ipv4Range;
        public readonly int NodebalancerId;
        /// <summary>
        /// The ID of this configuration's VPC subnet.
        /// </summary>
        public readonly int SubnetId;
        /// <summary>
        /// The ID of this configuration's VPC.
        /// </summary>
        public readonly int VpcId;

        [OutputConstructor]
        private GetNodebalancerVpcResult(
            int id,

            string ipv4Range,

            int nodebalancerId,

            int subnetId,

            int vpcId)
        {
            Id = id;
            Ipv4Range = ipv4Range;
            NodebalancerId = nodebalancerId;
            SubnetId = subnetId;
            VpcId = vpcId;
        }
    }
}
