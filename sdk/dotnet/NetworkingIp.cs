// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    [LinodeResourceType("linode:index/networkingIp:NetworkingIp")]
    public partial class NetworkingIp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The allocated IPv4 address.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// The ID of the Linode to allocate an IPv4 address for. Required when reserved is false or not set.
        /// </summary>
        [Output("linodeId")]
        public Output<int> LinodeId { get; private set; } = null!;

        /// <summary>
        /// Whether the IPv4 address is public or private.
        /// </summary>
        [Output("public")]
        public Output<bool> Public { get; private set; } = null!;

        /// <summary>
        /// The region for the reserved IPv4 address. Required when reserved is true and linode_id is not set.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Whether the IPv4 address should be reserved.
        /// </summary>
        [Output("reserved")]
        public Output<bool> Reserved { get; private set; } = null!;

        /// <summary>
        /// The type of IP address (ipv4).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkingIp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkingIp(string name, NetworkingIpArgs? args = null, CustomResourceOptions? options = null)
            : base("linode:index/networkingIp:NetworkingIp", name, args ?? new NetworkingIpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkingIp(string name, Input<string> id, NetworkingIpState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/networkingIp:NetworkingIp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkingIp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkingIp Get(string name, Input<string> id, NetworkingIpState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkingIp(name, id, state, options);
        }
    }

    public sealed class NetworkingIpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Linode to allocate an IPv4 address for. Required when reserved is false or not set.
        /// </summary>
        [Input("linodeId")]
        public Input<int>? LinodeId { get; set; }

        /// <summary>
        /// Whether the IPv4 address is public or private.
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// The region for the reserved IPv4 address. Required when reserved is true and linode_id is not set.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Whether the IPv4 address should be reserved.
        /// </summary>
        [Input("reserved")]
        public Input<bool>? Reserved { get; set; }

        /// <summary>
        /// The type of IP address (ipv4).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NetworkingIpArgs()
        {
        }
        public static new NetworkingIpArgs Empty => new NetworkingIpArgs();
    }

    public sealed class NetworkingIpState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocated IPv4 address.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The ID of the Linode to allocate an IPv4 address for. Required when reserved is false or not set.
        /// </summary>
        [Input("linodeId")]
        public Input<int>? LinodeId { get; set; }

        /// <summary>
        /// Whether the IPv4 address is public or private.
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// The region for the reserved IPv4 address. Required when reserved is true and linode_id is not set.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Whether the IPv4 address should be reserved.
        /// </summary>
        [Input("reserved")]
        public Input<bool>? Reserved { get; set; }

        /// <summary>
        /// The type of IP address (ipv4).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NetworkingIpState()
        {
        }
        public static new NetworkingIpState Empty => new NetworkingIpState();
    }
}
