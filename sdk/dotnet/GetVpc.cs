// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetVpc
    {
        /// <summary>
        /// Provides information about a Linode VPC.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode VPC.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Linode.GetVpc.Invoke(new()
        ///     {
        ///         Id = "123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpc"] = foo,
        ///     };
        /// });
        /// ```
        /// 
        /// ## IPv6
        /// 
        /// &gt; **Limited Availability** IPv6 VPCs may not currently be available to all users.
        /// 
        /// Contains information about a single IPv6 allocation under this VPC.
        /// 
        /// * `range` - The allocated range in CIDR format.
        /// 
        /// ### Subnets Reference
        /// 
        /// To list all subnets under a VPC, please refer to the linode.getVpcSubnets data source.
        /// </summary>
        public static Task<GetVpcResult> InvokeAsync(GetVpcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcResult>("linode:index/getVpc:getVpc", args ?? new GetVpcArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode VPC.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode VPC.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Linode.GetVpc.Invoke(new()
        ///     {
        ///         Id = "123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpc"] = foo,
        ///     };
        /// });
        /// ```
        /// 
        /// ## IPv6
        /// 
        /// &gt; **Limited Availability** IPv6 VPCs may not currently be available to all users.
        /// 
        /// Contains information about a single IPv6 allocation under this VPC.
        /// 
        /// * `range` - The allocated range in CIDR format.
        /// 
        /// ### Subnets Reference
        /// 
        /// To list all subnets under a VPC, please refer to the linode.getVpcSubnets data source.
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("linode:index/getVpc:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode VPC.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode VPC.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Linode.GetVpc.Invoke(new()
        ///     {
        ///         Id = "123",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpc"] = foo,
        ///     };
        /// });
        /// ```
        /// 
        /// ## IPv6
        /// 
        /// &gt; **Limited Availability** IPv6 VPCs may not currently be available to all users.
        /// 
        /// Contains information about a single IPv6 allocation under this VPC.
        /// 
        /// * `range` - The allocated range in CIDR format.
        /// 
        /// ### Subnets Reference
        /// 
        /// To list all subnets under a VPC, please refer to the linode.getVpcSubnets data source.
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("linode:index/getVpc:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique id of this VPC.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetVpcArgs()
        {
        }
        public static new GetVpcArgs Empty => new GetVpcArgs();
    }

    public sealed class GetVpcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique id of this VPC.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetVpcInvokeArgs()
        {
        }
        public static new GetVpcInvokeArgs Empty => new GetVpcInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcResult
    {
        /// <summary>
        /// The date and time when the VPC was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The user-defined description of this VPC.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// A list of IPv6 allocations under this VPC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcIpv6Result> Ipv6s;
        /// <summary>
        /// The label of the VPC.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// The region where the VPC is deployed.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The date and time when the VPC was last updated.
        /// </summary>
        public readonly string Updated;

        [OutputConstructor]
        private GetVpcResult(
            string created,

            string description,

            string id,

            ImmutableArray<Outputs.GetVpcIpv6Result> ipv6s,

            string label,

            string region,

            string updated)
        {
            Created = created;
            Description = description;
            Id = id;
            Ipv6s = ipv6s;
            Label = label;
            Region = region;
            Updated = updated;
        }
    }
}
