// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Provides a Linode Object Storage Bucket resource. This can be used to create, modify, and delete Linodes Object Storage Buckets.
    /// 
    /// ## Example Usage
    /// 
    /// The following example shows how one might use this resource to create an Object Storage Bucket:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = Linode.GetObjectStorageCluster.Invoke(new()
    ///     {
    ///         Id = "us-east-1",
    ///     });
    /// 
    ///     var foobar = new Linode.ObjectStorageBucket("foobar", new()
    ///     {
    ///         Cluster = primary.Apply(getObjectStorageClusterResult =&gt; getObjectStorageClusterResult.Id),
    ///         Label = "mybucket",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// Creating an Object Storage Bucket with Lifecycle rules:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mykey = new Linode.ObjectStorageKey("mykey", new()
    ///     {
    ///         Label = "image-access",
    ///     });
    /// 
    ///     var mybucket = new Linode.ObjectStorageBucket("mybucket", new()
    ///     {
    ///         AccessKey = mykey.AccessKey,
    ///         SecretKey = mykey.SecretKey,
    ///         Cluster = "us-east-1",
    ///         Label = "mybucket",
    ///         LifecycleRules = new[]
    ///         {
    ///             new Linode.Inputs.ObjectStorageBucketLifecycleRuleArgs
    ///             {
    ///                 Id = "my-rule",
    ///                 Enabled = true,
    ///                 AbortIncompleteMultipartUploadDays = 5,
    ///                 Expiration = new Linode.Inputs.ObjectStorageBucketLifecycleRuleExpirationArgs
    ///                 {
    ///                     Date = "2021-06-21",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Linodes Object Storage Buckets can be imported using the resource `id` which is made of `cluster:label`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import linode:index/objectStorageBucket:ObjectStorageBucket mybucket us-east-1:foobar
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/objectStorageBucket:ObjectStorageBucket")]
    public partial class ObjectStorageBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key to authenticate with.
        /// </summary>
        [Output("accessKey")]
        public Output<string?> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
        /// </summary>
        [Output("acl")]
        public Output<string?> Acl { get; private set; } = null!;

        /// <summary>
        /// The cert used by this Object Storage Bucket.
        /// </summary>
        [Output("cert")]
        public Output<Outputs.ObjectStorageBucketCert?> Cert { get; private set; } = null!;

        /// <summary>
        /// The cluster of the Linode Object Storage Bucket.
        /// </summary>
        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        /// <summary>
        /// If true, the bucket will have CORS enabled for all origins.
        /// </summary>
        [Output("corsEnabled")]
        public Output<bool?> CorsEnabled { get; private set; } = null!;

        /// <summary>
        /// The endpoint for the bucket used for s3 connections.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made
        /// public.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// The label of the Linode Object Storage Bucket.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Lifecycle rules to be applied to the bucket.
        /// </summary>
        [Output("lifecycleRules")]
        public Output<ImmutableArray<Outputs.ObjectStorageBucketLifecycleRule>> LifecycleRules { get; private set; } = null!;

        /// <summary>
        /// The secret key to authenticate with.
        /// </summary>
        [Output("secretKey")]
        public Output<string?> SecretKey { get; private set; } = null!;

        /// <summary>
        /// Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
        /// 
        /// * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
        /// 
        /// * `cert` - (Optional) The bucket's TLS/SSL certificate.
        /// </summary>
        [Output("versioning")]
        public Output<bool> Versioning { get; private set; } = null!;


        /// <summary>
        /// Create a ObjectStorageBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObjectStorageBucket(string name, ObjectStorageBucketArgs args, CustomResourceOptions? options = null)
            : base("linode:index/objectStorageBucket:ObjectStorageBucket", name, args ?? new ObjectStorageBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObjectStorageBucket(string name, Input<string> id, ObjectStorageBucketState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/objectStorageBucket:ObjectStorageBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObjectStorageBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObjectStorageBucket Get(string name, Input<string> id, ObjectStorageBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new ObjectStorageBucket(name, id, state, options);
        }
    }

    public sealed class ObjectStorageBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key to authenticate with.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        /// <summary>
        /// The cert used by this Object Storage Bucket.
        /// </summary>
        [Input("cert")]
        public Input<Inputs.ObjectStorageBucketCertArgs>? Cert { get; set; }

        /// <summary>
        /// The cluster of the Linode Object Storage Bucket.
        /// </summary>
        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        /// <summary>
        /// If true, the bucket will have CORS enabled for all origins.
        /// </summary>
        [Input("corsEnabled")]
        public Input<bool>? CorsEnabled { get; set; }

        /// <summary>
        /// The label of the Linode Object Storage Bucket.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("lifecycleRules")]
        private InputList<Inputs.ObjectStorageBucketLifecycleRuleArgs>? _lifecycleRules;

        /// <summary>
        /// Lifecycle rules to be applied to the bucket.
        /// </summary>
        public InputList<Inputs.ObjectStorageBucketLifecycleRuleArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.ObjectStorageBucketLifecycleRuleArgs>());
            set => _lifecycleRules = value;
        }

        /// <summary>
        /// The secret key to authenticate with.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
        /// 
        /// * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
        /// 
        /// * `cert` - (Optional) The bucket's TLS/SSL certificate.
        /// </summary>
        [Input("versioning")]
        public Input<bool>? Versioning { get; set; }

        public ObjectStorageBucketArgs()
        {
        }
        public static new ObjectStorageBucketArgs Empty => new ObjectStorageBucketArgs();
    }

    public sealed class ObjectStorageBucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key to authenticate with.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        /// <summary>
        /// The cert used by this Object Storage Bucket.
        /// </summary>
        [Input("cert")]
        public Input<Inputs.ObjectStorageBucketCertGetArgs>? Cert { get; set; }

        /// <summary>
        /// The cluster of the Linode Object Storage Bucket.
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        /// <summary>
        /// If true, the bucket will have CORS enabled for all origins.
        /// </summary>
        [Input("corsEnabled")]
        public Input<bool>? CorsEnabled { get; set; }

        /// <summary>
        /// The endpoint for the bucket used for s3 connections.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made
        /// public.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The label of the Linode Object Storage Bucket.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("lifecycleRules")]
        private InputList<Inputs.ObjectStorageBucketLifecycleRuleGetArgs>? _lifecycleRules;

        /// <summary>
        /// Lifecycle rules to be applied to the bucket.
        /// </summary>
        public InputList<Inputs.ObjectStorageBucketLifecycleRuleGetArgs> LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<Inputs.ObjectStorageBucketLifecycleRuleGetArgs>());
            set => _lifecycleRules = value;
        }

        /// <summary>
        /// The secret key to authenticate with.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)
        /// 
        /// * `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)
        /// 
        /// * `cert` - (Optional) The bucket's TLS/SSL certificate.
        /// </summary>
        [Input("versioning")]
        public Input<bool>? Versioning { get; set; }

        public ObjectStorageBucketState()
        {
        }
        public static new ObjectStorageBucketState Empty => new ObjectStorageBucketState();
    }
}
