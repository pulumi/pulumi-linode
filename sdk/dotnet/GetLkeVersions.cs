// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetLkeVersions
    {
        /// <summary>
        /// Provides details about the Kubernetes versions available for deployment to a Kubernetes cluster.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-versions).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersions.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleOutput"] = example,
        ///         ["exampleOutputFirstVersion"] = example.Apply(getLkeVersionsResult =&gt; getLkeVersionsResult.Versions[0]),
        ///     };
        /// });
        /// ```
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version
        /// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
        /// 
        /// &gt; **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEnterprise = Linode.GetLkeVersions.Invoke(new()
        ///     {
        ///         Tier = "enterprise",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleEnterpriseOutput"] = exampleEnterprise,
        ///         ["exampleEnterpriseOutputFirstVersion"] = exampleEnterprise.Apply(getLkeVersionsResult =&gt; getLkeVersionsResult.Versions[0]),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetLkeVersionsResult> InvokeAsync(GetLkeVersionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLkeVersionsResult>("linode:index/getLkeVersions:getLkeVersions", args ?? new GetLkeVersionsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about the Kubernetes versions available for deployment to a Kubernetes cluster.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-versions).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersions.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleOutput"] = example,
        ///         ["exampleOutputFirstVersion"] = example.Apply(getLkeVersionsResult =&gt; getLkeVersionsResult.Versions[0]),
        ///     };
        /// });
        /// ```
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version
        /// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
        /// 
        /// &gt; **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEnterprise = Linode.GetLkeVersions.Invoke(new()
        ///     {
        ///         Tier = "enterprise",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleEnterpriseOutput"] = exampleEnterprise,
        ///         ["exampleEnterpriseOutputFirstVersion"] = exampleEnterprise.Apply(getLkeVersionsResult =&gt; getLkeVersionsResult.Versions[0]),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLkeVersionsResult> Invoke(GetLkeVersionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLkeVersionsResult>("linode:index/getLkeVersions:getLkeVersions", args ?? new GetLkeVersionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about the Kubernetes versions available for deployment to a Kubernetes cluster.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-versions).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersions.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleOutput"] = example,
        ///         ["exampleOutputFirstVersion"] = example.Apply(getLkeVersionsResult =&gt; getLkeVersionsResult.Versions[0]),
        ///     };
        /// });
        /// ```
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version
        /// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
        /// 
        /// &gt; **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEnterprise = Linode.GetLkeVersions.Invoke(new()
        ///     {
        ///         Tier = "enterprise",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["exampleEnterpriseOutput"] = exampleEnterprise,
        ///         ["exampleEnterpriseOutputFirstVersion"] = exampleEnterprise.Apply(getLkeVersionsResult =&gt; getLkeVersionsResult.Versions[0]),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLkeVersionsResult> Invoke(GetLkeVersionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLkeVersionsResult>("linode:index/getLkeVersions:getLkeVersions", args ?? new GetLkeVersionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLkeVersionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The tier (`standard` or `enterprise`) of Linode LKE Versions to fetch.
        /// </summary>
        [Input("tier")]
        public string? Tier { get; set; }

        [Input("versions")]
        private List<Inputs.GetLkeVersionsVersionArgs>? _versions;
        public List<Inputs.GetLkeVersionsVersionArgs> Versions
        {
            get => _versions ?? (_versions = new List<Inputs.GetLkeVersionsVersionArgs>());
            set => _versions = value;
        }

        public GetLkeVersionsArgs()
        {
        }
        public static new GetLkeVersionsArgs Empty => new GetLkeVersionsArgs();
    }

    public sealed class GetLkeVersionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The tier (`standard` or `enterprise`) of Linode LKE Versions to fetch.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        [Input("versions")]
        private InputList<Inputs.GetLkeVersionsVersionInputArgs>? _versions;
        public InputList<Inputs.GetLkeVersionsVersionInputArgs> Versions
        {
            get => _versions ?? (_versions = new InputList<Inputs.GetLkeVersionsVersionInputArgs>());
            set => _versions = value;
        }

        public GetLkeVersionsInvokeArgs()
        {
        }
        public static new GetLkeVersionsInvokeArgs Empty => new GetLkeVersionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLkeVersionsResult
    {
        /// <summary>
        /// The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Kubernetes version tier. Only exported if `tier` was provided when using the datasource.
        /// </summary>
        public readonly string? Tier;
        public readonly ImmutableArray<Outputs.GetLkeVersionsVersionResult> Versions;

        [OutputConstructor]
        private GetLkeVersionsResult(
            string id,

            string? tier,

            ImmutableArray<Outputs.GetLkeVersionsVersionResult> versions)
        {
            Id = id;
            Tier = tier;
            Versions = versions;
        }
    }
}
