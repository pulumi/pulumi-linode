// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetLkeVersion
    {
        /// <summary>
        /// Provides details about a specific Kubernetes versions available for deployment to a Kubernetes cluster.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-version).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersion.Invoke(new()
        ///     {
        ///         Id = "1.31",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version
        /// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
        /// 
        /// &gt; **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersion.Invoke(new()
        ///     {
        ///         Id = "1.31",
        ///         Tier = "standard",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLkeVersionResult> InvokeAsync(GetLkeVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLkeVersionResult>("linode:index/getLkeVersion:getLkeVersion", args ?? new GetLkeVersionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Kubernetes versions available for deployment to a Kubernetes cluster.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-version).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersion.Invoke(new()
        ///     {
        ///         Id = "1.31",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version
        /// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
        /// 
        /// &gt; **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersion.Invoke(new()
        ///     {
        ///         Id = "1.31",
        ///         Tier = "standard",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLkeVersionResult> Invoke(GetLkeVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLkeVersionResult>("linode:index/getLkeVersion:getLkeVersion", args ?? new GetLkeVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Kubernetes versions available for deployment to a Kubernetes cluster.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-version).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersion.Invoke(new()
        ///     {
        ///         Id = "1.31",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// The following example shows how one might use this data source to access information about a Linode LKE Version
        /// with additional information about the Linode LKE Version's tier (`enterprise` or `standard`).
        /// 
        /// &gt; **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Linode.GetLkeVersion.Invoke(new()
        ///     {
        ///         Id = "1.31",
        ///         Tier = "standard",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLkeVersionResult> Invoke(GetLkeVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLkeVersionResult>("linode:index/getLkeVersion:getLkeVersion", args ?? new GetLkeVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLkeVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of this Linode LKE Version.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The tier (`standard` or `enterprise`) of Linode LKE Version to fetch.
        /// </summary>
        [Input("tier")]
        public string? Tier { get; set; }

        public GetLkeVersionArgs()
        {
        }
        public static new GetLkeVersionArgs Empty => new GetLkeVersionArgs();
    }

    public sealed class GetLkeVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID of this Linode LKE Version.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The tier (`standard` or `enterprise`) of Linode LKE Version to fetch.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        public GetLkeVersionInvokeArgs()
        {
        }
        public static new GetLkeVersionInvokeArgs Empty => new GetLkeVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetLkeVersionResult
    {
        /// <summary>
        /// The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Kubernetes version tier. Only exported if `tier` was provided when using the datasource.
        /// </summary>
        public readonly string Tier;

        [OutputConstructor]
        private GetLkeVersionResult(
            string id,

            string tier)
        {
            Id = id;
            Tier = tier;
        }
    }
}
