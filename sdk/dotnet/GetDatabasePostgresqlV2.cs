// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetDatabasePostgresqlV2
    {
        /// <summary>
        /// Provides information about a Linode PostgreSQL Database.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about a PostgreSQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabasePostgresqlV2.Invoke(new()
        ///     {
        ///         Id = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## pending_updates
        /// 
        /// The following arguments are exposed by each entry in the `pending_updates` attribute:
        /// 
        /// * `deadline` - The time when a mandatory update needs to be applied.
        /// 
        /// * `description` - A description of the update.
        /// 
        /// * `planned_for` - The date and time a maintenance update will be applied.
        /// 
        /// ## updates
        /// 
        /// The following arguments are supported in the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// </summary>
        public static Task<GetDatabasePostgresqlV2Result> InvokeAsync(GetDatabasePostgresqlV2Args args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabasePostgresqlV2Result>("linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2", args ?? new GetDatabasePostgresqlV2Args(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode PostgreSQL Database.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about a PostgreSQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabasePostgresqlV2.Invoke(new()
        ///     {
        ///         Id = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## pending_updates
        /// 
        /// The following arguments are exposed by each entry in the `pending_updates` attribute:
        /// 
        /// * `deadline` - The time when a mandatory update needs to be applied.
        /// 
        /// * `description` - A description of the update.
        /// 
        /// * `planned_for` - The date and time a maintenance update will be applied.
        /// 
        /// ## updates
        /// 
        /// The following arguments are supported in the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// </summary>
        public static Output<GetDatabasePostgresqlV2Result> Invoke(GetDatabasePostgresqlV2InvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasePostgresqlV2Result>("linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2", args ?? new GetDatabasePostgresqlV2InvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Linode PostgreSQL Database.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).
        /// 
        /// ## Example Usage
        /// 
        /// Get information about a PostgreSQL database:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_db = Linode.GetDatabasePostgresqlV2.Invoke(new()
        ///     {
        ///         Id = "12345",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## pending_updates
        /// 
        /// The following arguments are exposed by each entry in the `pending_updates` attribute:
        /// 
        /// * `deadline` - The time when a mandatory update needs to be applied.
        /// 
        /// * `description` - A description of the update.
        /// 
        /// * `planned_for` - The date and time a maintenance update will be applied.
        /// 
        /// ## updates
        /// 
        /// The following arguments are supported in the `updates` specification block:
        /// 
        /// * `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)
        /// 
        /// * `duration` - The maximum maintenance window time in hours. (`1`..`3`)
        /// 
        /// * `frequency` - The frequency at which maintenance occurs. (`weekly`)
        /// 
        /// * `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)
        /// </summary>
        public static Output<GetDatabasePostgresqlV2Result> Invoke(GetDatabasePostgresqlV2InvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabasePostgresqlV2Result>("linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2", args ?? new GetDatabasePostgresqlV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabasePostgresqlV2Args : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the PostgreSQL database.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDatabasePostgresqlV2Args()
        {
        }
        public static new GetDatabasePostgresqlV2Args Empty => new GetDatabasePostgresqlV2Args();
    }

    public sealed class GetDatabasePostgresqlV2InvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the PostgreSQL database.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDatabasePostgresqlV2InvokeArgs()
        {
        }
        public static new GetDatabasePostgresqlV2InvokeArgs Empty => new GetDatabasePostgresqlV2InvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabasePostgresqlV2Result
    {
        /// <summary>
        /// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.
        /// </summary>
        public readonly ImmutableArray<string> AllowLists;
        /// <summary>
        /// The base64-encoded SSL CA certificate for the Managed Database.
        /// </summary>
        public readonly string CaCert;
        /// <summary>
        /// The number of Linode Instance nodes deployed to the Managed Database. (default `1`)
        /// </summary>
        public readonly int ClusterSize;
        /// <summary>
        /// When this Managed Database was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Whether the Managed Databases is encrypted.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// The Managed Database engine. (e.g. `postgresql`)
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// The Managed Database engine in engine/version format. (e.g. `postgresql/16`)
        /// </summary>
        public readonly string EngineId;
        /// <summary>
        /// The database timestamp from which it was restored.
        /// </summary>
        public readonly string ForkRestoreTime;
        /// <summary>
        /// The ID of the database that was forked from.
        /// </summary>
        public readonly int ForkSource;
        /// <summary>
        /// The primary host for the Managed Database.
        /// </summary>
        public readonly string HostPrimary;
        /// <summary>
        /// The secondary/private host for the managed database.
        /// </summary>
        public readonly string HostSecondary;
        public readonly string Id;
        /// <summary>
        /// A unique, user-defined string referring to the Managed Database.
        /// </summary>
        public readonly string Label;
        public readonly ImmutableDictionary<string, string> Members;
        public readonly string OldestRestoreTime;
        public readonly ImmutableArray<Outputs.GetDatabasePostgresqlV2PendingUpdateResult> PendingUpdates;
        /// <summary>
        /// The back-end platform for relational databases used by the service.
        /// </summary>
        public readonly string Platform;
        /// <summary>
        /// The access port for this Managed Database.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The region to use for the Managed Database.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The randomly-generated root password for the Managed Database instance.
        /// </summary>
        public readonly string RootPassword;
        /// <summary>
        /// The root username for the Managed Database instance.
        /// </summary>
        public readonly string RootUsername;
        /// <summary>
        /// Whether to require SSL credentials to establish a connection to the Managed Database.
        /// </summary>
        public readonly bool SslConnection;
        /// <summary>
        /// The operating status of the Managed Database.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Whether this Managed Database is suspended.
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// The Linode Instance type used for the nodes of the Managed Database.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When this Managed Database was last updated.
        /// </summary>
        public readonly string Updated;
        public readonly Outputs.GetDatabasePostgresqlV2UpdatesResult Updates;
        /// <summary>
        /// The Managed Database engine version. (e.g. `13.2`)
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetDatabasePostgresqlV2Result(
            ImmutableArray<string> allowLists,

            string caCert,

            int clusterSize,

            string created,

            bool encrypted,

            string engine,

            string engineId,

            string forkRestoreTime,

            int forkSource,

            string hostPrimary,

            string hostSecondary,

            string id,

            string label,

            ImmutableDictionary<string, string> members,

            string oldestRestoreTime,

            ImmutableArray<Outputs.GetDatabasePostgresqlV2PendingUpdateResult> pendingUpdates,

            string platform,

            int port,

            string region,

            string rootPassword,

            string rootUsername,

            bool sslConnection,

            string status,

            bool suspended,

            string type,

            string updated,

            Outputs.GetDatabasePostgresqlV2UpdatesResult updates,

            string version)
        {
            AllowLists = allowLists;
            CaCert = caCert;
            ClusterSize = clusterSize;
            Created = created;
            Encrypted = encrypted;
            Engine = engine;
            EngineId = engineId;
            ForkRestoreTime = forkRestoreTime;
            ForkSource = forkSource;
            HostPrimary = hostPrimary;
            HostSecondary = hostSecondary;
            Id = id;
            Label = label;
            Members = members;
            OldestRestoreTime = oldestRestoreTime;
            PendingUpdates = pendingUpdates;
            Platform = platform;
            Port = port;
            Region = region;
            RootPassword = rootPassword;
            RootUsername = rootUsername;
            SslConnection = sslConnection;
            Status = status;
            Suspended = suspended;
            Type = type;
            Updated = updated;
            Updates = updates;
            Version = version;
        }
    }
}
