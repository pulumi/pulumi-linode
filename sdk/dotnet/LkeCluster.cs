// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// ## Import
    /// 
    /// LKE Clusters can be imported using the `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import linode:index/lkeCluster:LkeCluster my_cluster 12345
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/lkeCluster:LkeCluster")]
    public partial class LkeCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The endpoints for the Kubernetes API server.
        /// </summary>
        [Output("apiEndpoints")]
        public Output<ImmutableArray<string>> ApiEndpoints { get; private set; } = null!;

        /// <summary>
        /// Defines settings for the Kubernetes Control Plane.
        /// </summary>
        [Output("controlPlane")]
        public Output<Outputs.LkeClusterControlPlane> ControlPlane { get; private set; } = null!;

        /// <summary>
        /// The Kubernetes Dashboard access URL for this cluster.
        /// </summary>
        [Output("dashboardUrl")]
        public Output<string> DashboardUrl { get; private set; } = null!;

        /// <summary>
        /// The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
        /// </summary>
        [Output("k8sVersion")]
        public Output<string> K8sVersion { get; private set; } = null!;

        /// <summary>
        /// The base64 encoded kubeconfig for the Kubernetes cluster.
        /// </summary>
        [Output("kubeconfig")]
        public Output<string> Kubeconfig { get; private set; } = null!;

        /// <summary>
        /// This Kubernetes cluster's unique label.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// Additional nested attributes:
        /// </summary>
        [Output("pools")]
        public Output<ImmutableArray<Outputs.LkeClusterPool>> Pools { get; private set; } = null!;

        /// <summary>
        /// This Kubernetes cluster's location.
        /// 
        /// * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
        /// 
        /// * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The status of the node. (`ready`, `not_ready`)
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a LkeCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LkeCluster(string name, LkeClusterArgs args, CustomResourceOptions? options = null)
            : base("linode:index/lkeCluster:LkeCluster", name, args ?? new LkeClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LkeCluster(string name, Input<string> id, LkeClusterState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/lkeCluster:LkeCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "kubeconfig",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LkeCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LkeCluster Get(string name, Input<string> id, LkeClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new LkeCluster(name, id, state, options);
        }
    }

    public sealed class LkeClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines settings for the Kubernetes Control Plane.
        /// </summary>
        [Input("controlPlane")]
        public Input<Inputs.LkeClusterControlPlaneArgs>? ControlPlane { get; set; }

        /// <summary>
        /// The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
        /// </summary>
        [Input("k8sVersion", required: true)]
        public Input<string> K8sVersion { get; set; } = null!;

        /// <summary>
        /// This Kubernetes cluster's unique label.
        /// </summary>
        [Input("label", required: true)]
        public Input<string> Label { get; set; } = null!;

        [Input("pools", required: true)]
        private InputList<Inputs.LkeClusterPoolArgs>? _pools;

        /// <summary>
        /// Additional nested attributes:
        /// </summary>
        public InputList<Inputs.LkeClusterPoolArgs> Pools
        {
            get => _pools ?? (_pools = new InputList<Inputs.LkeClusterPoolArgs>());
            set => _pools = value;
        }

        /// <summary>
        /// This Kubernetes cluster's location.
        /// 
        /// * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
        /// 
        /// * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public LkeClusterArgs()
        {
        }
        public static new LkeClusterArgs Empty => new LkeClusterArgs();
    }

    public sealed class LkeClusterState : global::Pulumi.ResourceArgs
    {
        [Input("apiEndpoints")]
        private InputList<string>? _apiEndpoints;

        /// <summary>
        /// The endpoints for the Kubernetes API server.
        /// </summary>
        public InputList<string> ApiEndpoints
        {
            get => _apiEndpoints ?? (_apiEndpoints = new InputList<string>());
            set => _apiEndpoints = value;
        }

        /// <summary>
        /// Defines settings for the Kubernetes Control Plane.
        /// </summary>
        [Input("controlPlane")]
        public Input<Inputs.LkeClusterControlPlaneGetArgs>? ControlPlane { get; set; }

        /// <summary>
        /// The Kubernetes Dashboard access URL for this cluster.
        /// </summary>
        [Input("dashboardUrl")]
        public Input<string>? DashboardUrl { get; set; }

        /// <summary>
        /// The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.
        /// </summary>
        [Input("k8sVersion")]
        public Input<string>? K8sVersion { get; set; }

        [Input("kubeconfig")]
        private Input<string>? _kubeconfig;

        /// <summary>
        /// The base64 encoded kubeconfig for the Kubernetes cluster.
        /// </summary>
        public Input<string>? Kubeconfig
        {
            get => _kubeconfig;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kubeconfig = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// This Kubernetes cluster's unique label.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("pools")]
        private InputList<Inputs.LkeClusterPoolGetArgs>? _pools;

        /// <summary>
        /// Additional nested attributes:
        /// </summary>
        public InputList<Inputs.LkeClusterPoolGetArgs> Pools
        {
            get => _pools ?? (_pools = new InputList<Inputs.LkeClusterPoolGetArgs>());
            set => _pools = value;
        }

        /// <summary>
        /// This Kubernetes cluster's location.
        /// 
        /// * `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.
        /// 
        /// * `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The status of the node. (`ready`, `not_ready`)
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public LkeClusterState()
        {
        }
        public static new LkeClusterState Empty => new LkeClusterState();
    }
}
