// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetRegion
    {
        /// <summary>
        /// `linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how the resource might be used to obtain additional information about a Linode region.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var region = Linode.GetRegion.Invoke(new()
        ///     {
        ///         Id = "us-east",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionResult> InvokeAsync(GetRegionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionResult>("linode:index/getRegion:getRegion", args ?? new GetRegionArgs(), options.WithDefaults());

        /// <summary>
        /// `linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how the resource might be used to obtain additional information about a Linode region.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var region = Linode.GetRegion.Invoke(new()
        ///     {
        ///         Id = "us-east",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionResult> Invoke(GetRegionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionResult>("linode:index/getRegion:getRegion", args ?? new GetRegionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The code name of the region to select.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("resolvers")]
        private List<Inputs.GetRegionResolverArgs>? _resolvers;
        public List<Inputs.GetRegionResolverArgs> Resolvers
        {
            get => _resolvers ?? (_resolvers = new List<Inputs.GetRegionResolverArgs>());
            set => _resolvers = value;
        }

        public GetRegionArgs()
        {
        }
        public static new GetRegionArgs Empty => new GetRegionArgs();
    }

    public sealed class GetRegionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The code name of the region to select.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("resolvers")]
        private InputList<Inputs.GetRegionResolverInputArgs>? _resolvers;
        public InputList<Inputs.GetRegionResolverInputArgs> Resolvers
        {
            get => _resolvers ?? (_resolvers = new InputList<Inputs.GetRegionResolverInputArgs>());
            set => _resolvers = value;
        }

        public GetRegionInvokeArgs()
        {
        }
        public static new GetRegionInvokeArgs Empty => new GetRegionInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionResult
    {
        /// <summary>
        /// A list of capabilities of this region.
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// The country the region resides in.
        /// </summary>
        public readonly string Country;
        public readonly string Id;
        /// <summary>
        /// Detailed location information for this Region, including city, state or region, and country.
        /// </summary>
        public readonly string Label;
        public readonly ImmutableArray<Outputs.GetRegionResolverResult> Resolvers;
        /// <summary>
        /// The type of this region.
        /// </summary>
        public readonly string SiteType;
        /// <summary>
        /// This regionâ€™s current operational status (ok or outage).
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetRegionResult(
            ImmutableArray<string> capabilities,

            string country,

            string id,

            string label,

            ImmutableArray<Outputs.GetRegionResolverResult> resolvers,

            string siteType,

            string status)
        {
            Capabilities = capabilities;
            Country = country;
            Id = id;
            Label = label;
            Resolvers = resolvers;
            SiteType = siteType;
            Status = status;
        }
    }
}
