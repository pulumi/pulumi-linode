// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    /// <summary>
    /// Provides a Linode Interface resource that can be used to create, modify, and delete network interfaces for Linode instances. Interfaces allow you to configure public, VLAN, and VPC networking for your Linode instances.
    /// 
    /// This resource is specifically for Linode interfaces. If you are interested in deploying a Linode instance with a legacy config interface, please refer to the `linode.InstanceConfig` resource documentation for details.
    /// 
    /// This resource is designed to work with explicitly defined disk and config resources for the Linode instance. See the Complete Example with Linode section below for details.
    /// 
    /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-linode-instance-interface).
    /// 
    /// ## Example Usage
    /// 
    /// ### Public Interface Example
    /// 
    /// The following example shows how to create a public interface with specific IPv4 and IPv6 configurations.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @public = new Linode.Interface("public", new()
    ///     {
    ///         LinodeId = my_instance.Id,
    ///         Public = new Linode.Inputs.InterfacePublicArgs
    ///         {
    ///             Ipv4 = new Linode.Inputs.InterfacePublicIpv4Args
    ///             {
    ///                 Addresses = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfacePublicIpv4AddressArgs
    ///                     {
    ///                         Address = "auto",
    ///                         Primary = true,
    ///                     },
    ///                 },
    ///             },
    ///             Ipv6 = new Linode.Inputs.InterfacePublicIpv6Args
    ///             {
    ///                 Ranges = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfacePublicIpv6RangeArgs
    ///                     {
    ///                         Range = "/64",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### IPv6-Only Public Interface Example
    /// 
    /// The following example shows how to create an IPv6-only public interface. Note that you must explicitly set `addresses = []` to prevent the automatic creation of an IPv4 address.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ipv6Only = new Linode.Interface("ipv6_only", new()
    ///     {
    ///         LinodeId = my_instance.Id,
    ///         Public = new Linode.Inputs.InterfacePublicArgs
    ///         {
    ///             Ipv4 = new Linode.Inputs.InterfacePublicIpv4Args
    ///             {
    ///                 Addresses = new() { },
    ///             },
    ///             Ipv6 = new Linode.Inputs.InterfacePublicIpv6Args
    ///             {
    ///                 Ranges = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfacePublicIpv6RangeArgs
    ///                     {
    ///                         Range = "/64",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### VPC Interface Example
    /// 
    /// The following example shows how to create a VPC interface with custom IPv4 configuration and 1:1 NAT.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc = new Linode.Interface("vpc", new()
    ///     {
    ///         LinodeId = my_instance.Id,
    ///         Vpc = new Linode.Inputs.InterfaceVpcArgs
    ///         {
    ///             SubnetId = 240213,
    ///             Ipv4 = new Linode.Inputs.InterfaceVpcIpv4Args
    ///             {
    ///                 Addresses = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfaceVpcIpv4AddressArgs
    ///                     {
    ///                         Address = "auto",
    ///                     },
    ///                 },
    ///                 Ranges = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfaceVpcIpv4RangeArgs
    ///                     {
    ///                         Range = "/32",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### VPC (IPv6) Interface Example
    /// 
    /// The following example shows how to create a public VPC interface with a custom IPv6 configuration.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpc = new Linode.Interface("vpc", new()
    ///     {
    ///         LinodeId = my_instance.Id,
    ///         Vpc = new Linode.Inputs.InterfaceVpcArgs
    ///         {
    ///             SubnetId = 12345,
    ///             Ipv6 = new Linode.Inputs.InterfaceVpcIpv6Args
    ///             {
    ///                 IsPublic = true,
    ///                 Slaacs = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfaceVpcIpv6SlaacArgs
    ///                     {
    ///                         Range = "auto",
    ///                     },
    ///                 },
    ///                 Ranges = new[]
    ///                 {
    ///                     new Linode.Inputs.InterfaceVpcIpv6RangeArgs
    ///                     {
    ///                         Range = "auto",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### VLAN Interface Example
    /// 
    /// The following example shows how to create a VLAN interface.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Linode = Pulumi.Linode;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vlan = new Linode.Interface("vlan", new()
    ///     {
    ///         LinodeId = web.Id,
    ///         Vlan = new Linode.Inputs.InterfaceVlanArgs
    ///         {
    ///             VlanLabel = "web-vlan",
    ///             IpamAddress = "192.168.200.5/24",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Complete Example with Linode
    /// 
    /// ## Notes
    /// 
    /// * Each Linode instance can have up to 3 network interfaces.
    /// * VLAN interfaces cannot be updated after creation and require recreation.
    /// * VPC subnet IDs cannot be changed after interface creation.
    /// * Firewall IDs are only supported for public and VPC interfaces, not for VLAN interfaces.
    /// * When configuring multiple interfaces, use the `DefaultRoute` setting to specify which interface should handle default routing.
    /// 
    /// ## Import
    /// 
    /// Interfaces can be imported using a Linode ID followed by an Interface ID, separated by a comma, e.g.
    /// 
    /// ```sh
    /// $ pulumi import linode:index/interface:Interface example 12345,67890
    /// ```
    /// </summary>
    [LinodeResourceType("linode:index/interface:Interface")]
    public partial class Interface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
        /// </summary>
        [Output("defaultRoute")]
        public Output<Outputs.InterfaceDefaultRoute> DefaultRoute { get; private set; } = null!;

        /// <summary>
        /// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
        /// </summary>
        [Output("firewallId")]
        public Output<int?> FirewallId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Linode to assign this interface to.
        /// </summary>
        [Output("linodeId")]
        public Output<int> LinodeId { get; private set; } = null!;

        /// <summary>
        /// Nested attributes object for a Linode public interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Output("public")]
        public Output<Outputs.InterfacePublic?> Public { get; private set; } = null!;

        /// <summary>
        /// Nested attributes object for a Linode VLAN interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Output("vlan")]
        public Output<Outputs.InterfaceVlan?> Vlan { get; private set; } = null!;

        /// <summary>
        /// Nested attributes object for a Linode VPC interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Output("vpc")]
        public Output<Outputs.InterfaceVpc?> Vpc { get; private set; } = null!;


        /// <summary>
        /// Create a Interface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Interface(string name, InterfaceArgs args, CustomResourceOptions? options = null)
            : base("linode:index/interface:Interface", name, args ?? new InterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Interface(string name, Input<string> id, InterfaceState? state = null, CustomResourceOptions? options = null)
            : base("linode:index/interface:Interface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Interface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Interface Get(string name, Input<string> id, InterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Interface(name, id, state, options);
        }
    }

    public sealed class InterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
        /// </summary>
        [Input("defaultRoute")]
        public Input<Inputs.InterfaceDefaultRouteArgs>? DefaultRoute { get; set; }

        /// <summary>
        /// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
        /// </summary>
        [Input("firewallId")]
        public Input<int>? FirewallId { get; set; }

        /// <summary>
        /// The ID of the Linode to assign this interface to.
        /// </summary>
        [Input("linodeId", required: true)]
        public Input<int> LinodeId { get; set; } = null!;

        /// <summary>
        /// Nested attributes object for a Linode public interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Input("public")]
        public Input<Inputs.InterfacePublicArgs>? Public { get; set; }

        /// <summary>
        /// Nested attributes object for a Linode VLAN interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Input("vlan")]
        public Input<Inputs.InterfaceVlanArgs>? Vlan { get; set; }

        /// <summary>
        /// Nested attributes object for a Linode VPC interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Input("vpc")]
        public Input<Inputs.InterfaceVpcArgs>? Vpc { get; set; }

        public InterfaceArgs()
        {
        }
        public static new InterfaceArgs Empty => new InterfaceArgs();
    }

    public sealed class InterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates if the interface serves as the default route when multiple interfaces are eligible for this role.
        /// </summary>
        [Input("defaultRoute")]
        public Input<Inputs.InterfaceDefaultRouteGetArgs>? DefaultRoute { get; set; }

        /// <summary>
        /// The ID of an enabled firewall to secure a VPC or public interface. Not allowed for VLAN interfaces.
        /// </summary>
        [Input("firewallId")]
        public Input<int>? FirewallId { get; set; }

        /// <summary>
        /// The ID of the Linode to assign this interface to.
        /// </summary>
        [Input("linodeId")]
        public Input<int>? LinodeId { get; set; }

        /// <summary>
        /// Nested attributes object for a Linode public interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Input("public")]
        public Input<Inputs.InterfacePublicGetArgs>? Public { get; set; }

        /// <summary>
        /// Nested attributes object for a Linode VLAN interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Input("vlan")]
        public Input<Inputs.InterfaceVlanGetArgs>? Vlan { get; set; }

        /// <summary>
        /// Nested attributes object for a Linode VPC interface. Exactly one of `Public`, `Vlan`, or `Vpc` must be specified.
        /// </summary>
        [Input("vpc")]
        public Input<Inputs.InterfaceVpcGetArgs>? Vpc { get; set; }

        public InterfaceState()
        {
        }
        public static new InterfaceState Empty => new InterfaceState();
    }
}
