// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetVpcIps
    {
        /// <summary>
        /// Provides information about a list of Linode VPC IPs that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
        /// 
        /// Provides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to list VPC IPs.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered_ips = Linode.GetVpcIps.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetVpcIpsFilterInputArgs
        ///             {
        ///                 Name = "address",
        ///                 Values = new[]
        ///                 {
        ///                     "10.0.0.0",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpcIps"] = filtered_ips.Apply(filtered_ips =&gt; filtered_ips.Apply(getVpcIpsResult =&gt; getVpcIpsResult.VpcIps)),
        ///     };
        /// });
        /// ```
        /// 
        /// One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var specific_vpc_ips = Linode.GetVpcIps.Invoke(new()
        ///     {
        ///         VpcId = 123,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpcIps"] = specific_vpc_ips.Apply(specific_vpc_ips =&gt; specific_vpc_ips.Apply(getVpcIpsResult =&gt; getVpcIpsResult.VpcIps)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `active`
        /// 
        /// * `config_id`
        /// 
        /// * `linode_id`
        /// 
        /// * `region`
        /// 
        /// * `vpc_id`
        /// </summary>
        public static Task<GetVpcIpsResult> InvokeAsync(GetVpcIpsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcIpsResult>("linode:index/getVpcIps:getVpcIps", args ?? new GetVpcIpsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a list of Linode VPC IPs that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
        /// 
        /// Provides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to list VPC IPs.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered_ips = Linode.GetVpcIps.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetVpcIpsFilterInputArgs
        ///             {
        ///                 Name = "address",
        ///                 Values = new[]
        ///                 {
        ///                     "10.0.0.0",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpcIps"] = filtered_ips.Apply(filtered_ips =&gt; filtered_ips.Apply(getVpcIpsResult =&gt; getVpcIpsResult.VpcIps)),
        ///     };
        /// });
        /// ```
        /// 
        /// One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var specific_vpc_ips = Linode.GetVpcIps.Invoke(new()
        ///     {
        ///         VpcId = 123,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpcIps"] = specific_vpc_ips.Apply(specific_vpc_ips =&gt; specific_vpc_ips.Apply(getVpcIpsResult =&gt; getVpcIpsResult.VpcIps)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `active`
        /// 
        /// * `config_id`
        /// 
        /// * `linode_id`
        /// 
        /// * `region`
        /// 
        /// * `vpc_id`
        /// </summary>
        public static Output<GetVpcIpsResult> Invoke(GetVpcIpsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcIpsResult>("linode:index/getVpcIps:getVpcIps", args ?? new GetVpcIpsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a list of Linode VPC IPs that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).
        /// 
        /// Provides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).
        /// 
        /// ## Example Usage
        /// 
        /// The following example shows how one might use this data source to list VPC IPs.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var filtered_ips = Linode.GetVpcIps.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetVpcIpsFilterInputArgs
        ///             {
        ///                 Name = "address",
        ///                 Values = new[]
        ///                 {
        ///                     "10.0.0.0",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpcIps"] = filtered_ips.Apply(filtered_ips =&gt; filtered_ips.Apply(getVpcIpsResult =&gt; getVpcIpsResult.VpcIps)),
        ///     };
        /// });
        /// ```
        /// 
        /// One might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var specific_vpc_ips = Linode.GetVpcIps.Invoke(new()
        ///     {
        ///         VpcId = 123,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpcIps"] = specific_vpc_ips.Apply(specific_vpc_ips =&gt; specific_vpc_ips.Apply(getVpcIpsResult =&gt; getVpcIpsResult.VpcIps)),
        ///     };
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `active`
        /// 
        /// * `config_id`
        /// 
        /// * `linode_id`
        /// 
        /// * `region`
        /// 
        /// * `vpc_id`
        /// </summary>
        public static Output<GetVpcIpsResult> Invoke(GetVpcIpsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcIpsResult>("linode:index/getVpcIps:getVpcIps", args ?? new GetVpcIpsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcIpsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpcIpsFilterArgs>? _filters;
        public List<Inputs.GetVpcIpsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcIpsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The id of the parent VPC for the list of VPC IPs.
        /// 
        /// * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
        /// </summary>
        [Input("vpcId")]
        public int? VpcId { get; set; }

        [Input("vpcIps")]
        private List<Inputs.GetVpcIpsVpcIpArgs>? _vpcIps;
        public List<Inputs.GetVpcIpsVpcIpArgs> VpcIps
        {
            get => _vpcIps ?? (_vpcIps = new List<Inputs.GetVpcIpsVpcIpArgs>());
            set => _vpcIps = value;
        }

        public GetVpcIpsArgs()
        {
        }
        public static new GetVpcIpsArgs Empty => new GetVpcIpsArgs();
    }

    public sealed class GetVpcIpsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVpcIpsFilterInputArgs>? _filters;
        public InputList<Inputs.GetVpcIpsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcIpsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The id of the parent VPC for the list of VPC IPs.
        /// 
        /// * `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.
        /// </summary>
        [Input("vpcId")]
        public Input<int>? VpcId { get; set; }

        [Input("vpcIps")]
        private InputList<Inputs.GetVpcIpsVpcIpInputArgs>? _vpcIps;
        public InputList<Inputs.GetVpcIpsVpcIpInputArgs> VpcIps
        {
            get => _vpcIps ?? (_vpcIps = new InputList<Inputs.GetVpcIpsVpcIpInputArgs>());
            set => _vpcIps = value;
        }

        public GetVpcIpsInvokeArgs()
        {
        }
        public static new GetVpcIpsInvokeArgs Empty => new GetVpcIpsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcIpsResult
    {
        public readonly ImmutableArray<Outputs.GetVpcIpsFilterResult> Filters;
        public readonly string Id;
        /// <summary>
        /// The unique globally general API entity identifier for the VPC.
        /// </summary>
        public readonly int? VpcId;
        public readonly ImmutableArray<Outputs.GetVpcIpsVpcIpResult> VpcIps;

        [OutputConstructor]
        private GetVpcIpsResult(
            ImmutableArray<Outputs.GetVpcIpsFilterResult> filters,

            string id,

            int? vpcId,

            ImmutableArray<Outputs.GetVpcIpsVpcIpResult> vpcIps)
        {
            Filters = filters;
            Id = id;
            VpcId = vpcId;
            VpcIps = vpcIps;
        }
    }
}
