// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode.Inputs
{

    public sealed class GetVolumesVolumeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// When this Volume was created.
        /// </summary>
        [Input("created", required: true)]
        public string Created { get; set; } = null!;

        /// <summary>
        /// Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.
        /// </summary>
        [Input("encryption", required: true)]
        public string Encryption { get; set; } = null!;

        /// <summary>
        /// The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
        /// </summary>
        [Input("filesystemPath", required: true)]
        public string FilesystemPath { get; set; } = null!;

        /// <summary>
        /// The unique ID of this Volume.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        /// <summary>
        /// This Volume's label is for display purposes only.
        /// </summary>
        [Input("label", required: true)]
        public string Label { get; set; } = null!;

        /// <summary>
        /// If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.
        /// </summary>
        [Input("linodeId", required: true)]
        public int LinodeId { get; set; }

        /// <summary>
        /// The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        /// <summary>
        /// The Volume's size, in GiB.
        /// </summary>
        [Input("size", required: true)]
        public int Size { get; set; }

        /// <summary>
        /// The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)
        /// </summary>
        [Input("status", required: true)]
        public string Status { get; set; } = null!;

        [Input("tags", required: true)]
        private List<string>? _tags;

        /// <summary>
        /// An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When this Volume was last updated.
        /// </summary>
        [Input("updated", required: true)]
        public string Updated { get; set; } = null!;

        public GetVolumesVolumeArgs()
        {
        }
        public static new GetVolumesVolumeArgs Empty => new GetVolumesVolumeArgs();
    }
}
