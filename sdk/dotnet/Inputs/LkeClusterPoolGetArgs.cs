// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode.Inputs
{

    public sealed class LkeClusterPoolGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When specified, the number of nodes autoscales within the defined minimum and maximum values.
        /// </summary>
        [Input("autoscaler")]
        public Input<Inputs.LkeClusterPoolAutoscalerGetArgs>? Autoscaler { get; set; }

        /// <summary>
        /// The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// The disk encryption policy for nodes in this pool.
        /// </summary>
        [Input("diskEncryption")]
        public Input<string>? DiskEncryption { get; set; }

        /// <summary>
        /// The ID of the node.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of key/value pairs to apply to all nodes in the pool. Labels are used to identify and organize Kubernetes resources within your cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("nodes")]
        private InputList<Inputs.LkeClusterPoolNodeGetArgs>? _nodes;

        /// <summary>
        /// The nodes in the node pool.
        /// </summary>
        public InputList<Inputs.LkeClusterPoolNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.LkeClusterPoolNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of tags applied to this node pool. Tags can be used to flag node pools as externally managed. See Externally Managed Node Pools for more details.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.LkeClusterPoolTaintGetArgs>? _taints;

        /// <summary>
        /// Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. See [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
        /// </summary>
        public InputList<Inputs.LkeClusterPoolTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.LkeClusterPoolTaintGetArgs>());
            set => _taints = value;
        }

        /// <summary>
        /// A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public LkeClusterPoolGetArgs()
        {
        }
        public static new LkeClusterPoolGetArgs Empty => new LkeClusterPoolGetArgs();
    }
}
