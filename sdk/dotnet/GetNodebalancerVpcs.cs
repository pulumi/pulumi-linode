// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetNodebalancerVpcs
    {
        /// <summary>
        /// &gt; **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `ApiVersion` provider argument must be set to `V4beta`.
        /// 
        /// Provides information about Linode NodeBalancers VPC configurations that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancers).
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve all VPC configurations under a NodeBalancer:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_configs = Linode.GetNodebalancerVpcs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Retrieve all VPC configurations under a NodeBalancer with an IPv4 range of "10.0.0.4/30":
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_configs = Linode.GetNodebalancerVpcs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetNodebalancerVpcsFilterInputArgs
        ///             {
        ///                 Name = "ipv4_range",
        ///                 Values = new[]
        ///                 {
        ///                     "10.0.0.4/30",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `Id`
        /// 
        /// * `Ipv4Range`
        /// 
        /// * `NodebalancerId`
        /// 
        /// * `SubnetId`
        /// 
        /// * `VpcId`
        /// </summary>
        public static Task<GetNodebalancerVpcsResult> InvokeAsync(GetNodebalancerVpcsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodebalancerVpcsResult>("linode:index/getNodebalancerVpcs:getNodebalancerVpcs", args ?? new GetNodebalancerVpcsArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `ApiVersion` provider argument must be set to `V4beta`.
        /// 
        /// Provides information about Linode NodeBalancers VPC configurations that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancers).
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve all VPC configurations under a NodeBalancer:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_configs = Linode.GetNodebalancerVpcs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Retrieve all VPC configurations under a NodeBalancer with an IPv4 range of "10.0.0.4/30":
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_configs = Linode.GetNodebalancerVpcs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetNodebalancerVpcsFilterInputArgs
        ///             {
        ///                 Name = "ipv4_range",
        ///                 Values = new[]
        ///                 {
        ///                     "10.0.0.4/30",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `Id`
        /// 
        /// * `Ipv4Range`
        /// 
        /// * `NodebalancerId`
        /// 
        /// * `SubnetId`
        /// 
        /// * `VpcId`
        /// </summary>
        public static Output<GetNodebalancerVpcsResult> Invoke(GetNodebalancerVpcsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodebalancerVpcsResult>("linode:index/getNodebalancerVpcs:getNodebalancerVpcs", args ?? new GetNodebalancerVpcsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Limited Availability** VPC-attached NodeBalancers may not currently be available to all users and may require the `ApiVersion` provider argument must be set to `V4beta`.
        /// 
        /// Provides information about Linode NodeBalancers VPC configurations that match a set of filters.
        /// For more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancers).
        /// 
        /// ## Example Usage
        /// 
        /// Retrieve all VPC configurations under a NodeBalancer:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_configs = Linode.GetNodebalancerVpcs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Retrieve all VPC configurations under a NodeBalancer with an IPv4 range of "10.0.0.4/30":
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpc_configs = Linode.GetNodebalancerVpcs.Invoke(new()
        ///     {
        ///         NodebalancerId = 12345,
        ///         Filters = new[]
        ///         {
        ///             new Linode.Inputs.GetNodebalancerVpcsFilterInputArgs
        ///             {
        ///                 Name = "ipv4_range",
        ///                 Values = new[]
        ///                 {
        ///                     "10.0.0.4/30",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Filterable Fields
        /// 
        /// * `Id`
        /// 
        /// * `Ipv4Range`
        /// 
        /// * `NodebalancerId`
        /// 
        /// * `SubnetId`
        /// 
        /// * `VpcId`
        /// </summary>
        public static Output<GetNodebalancerVpcsResult> Invoke(GetNodebalancerVpcsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodebalancerVpcsResult>("linode:index/getNodebalancerVpcs:getNodebalancerVpcs", args ?? new GetNodebalancerVpcsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodebalancerVpcsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNodebalancerVpcsFilterArgs>? _filters;
        public List<Inputs.GetNodebalancerVpcsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNodebalancerVpcsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the NodeBalancer to list VPC configurations for.
        /// 
        /// * `Filter` - (Optional) A set of filters used to select VPC configurations that meet certain requirements.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public int NodebalancerId { get; set; }

        /// <summary>
        /// The order in which results should be returned. (`Asc`, `Desc`; default `Asc`)
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        public GetNodebalancerVpcsArgs()
        {
        }
        public static new GetNodebalancerVpcsArgs Empty => new GetNodebalancerVpcsArgs();
    }

    public sealed class GetNodebalancerVpcsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNodebalancerVpcsFilterInputArgs>? _filters;
        public InputList<Inputs.GetNodebalancerVpcsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNodebalancerVpcsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the NodeBalancer to list VPC configurations for.
        /// 
        /// * `Filter` - (Optional) A set of filters used to select VPC configurations that meet certain requirements.
        /// </summary>
        [Input("nodebalancerId", required: true)]
        public Input<int> NodebalancerId { get; set; } = null!;

        /// <summary>
        /// The order in which results should be returned. (`Asc`, `Desc`; default `Asc`)
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The attribute to order the results by. See the Filterable Fields section for a list of valid fields.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        public GetNodebalancerVpcsInvokeArgs()
        {
        }
        public static new GetNodebalancerVpcsInvokeArgs Empty => new GetNodebalancerVpcsInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodebalancerVpcsResult
    {
        public readonly ImmutableArray<Outputs.GetNodebalancerVpcsFilterResult> Filters;
        /// <summary>
        /// The ID of the VPC configuration.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the parent NodeBalancer for this VPC configuration.
        /// </summary>
        public readonly int NodebalancerId;
        public readonly string? Order;
        public readonly string? OrderBy;
        public readonly ImmutableArray<Outputs.GetNodebalancerVpcsVpcConfigResult> VpcConfigs;

        [OutputConstructor]
        private GetNodebalancerVpcsResult(
            ImmutableArray<Outputs.GetNodebalancerVpcsFilterResult> filters,

            string id,

            int nodebalancerId,

            string? order,

            string? orderBy,

            ImmutableArray<Outputs.GetNodebalancerVpcsVpcConfigResult> vpcConfigs)
        {
            Filters = filters;
            Id = id;
            NodebalancerId = nodebalancerId;
            Order = order;
            OrderBy = orderBy;
            VpcConfigs = vpcConfigs;
        }
    }
}
