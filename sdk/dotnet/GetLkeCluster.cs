// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Linode
{
    public static class GetLkeCluster
    {
        /// <summary>
        /// Provides details about an LKE Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_cluster = Linode.GetLkeCluster.Invoke(new()
        ///     {
        ///         Id = 123,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLkeClusterResult> InvokeAsync(GetLkeClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLkeClusterResult>("linode:index/getLkeCluster:getLkeCluster", args ?? new GetLkeClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an LKE Cluster.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Linode = Pulumi.Linode;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_cluster = Linode.GetLkeCluster.Invoke(new()
        ///     {
        ///         Id = 123,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLkeClusterResult> Invoke(GetLkeClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLkeClusterResult>("linode:index/getLkeCluster:getLkeCluster", args ?? new GetLkeClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLkeClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlanes")]
        private List<Inputs.GetLkeClusterControlPlaneArgs>? _controlPlanes;
        public List<Inputs.GetLkeClusterControlPlaneArgs> ControlPlanes
        {
            get => _controlPlanes ?? (_controlPlanes = new List<Inputs.GetLkeClusterControlPlaneArgs>());
            set => _controlPlanes = value;
        }

        /// <summary>
        /// The LKE Cluster's ID.
        /// </summary>
        [Input("id", required: true)]
        public int Id { get; set; }

        [Input("pools")]
        private List<Inputs.GetLkeClusterPoolArgs>? _pools;

        /// <summary>
        /// Node pools associated with this cluster.
        /// </summary>
        public List<Inputs.GetLkeClusterPoolArgs> Pools
        {
            get => _pools ?? (_pools = new List<Inputs.GetLkeClusterPoolArgs>());
            set => _pools = value;
        }

        public GetLkeClusterArgs()
        {
        }
        public static new GetLkeClusterArgs Empty => new GetLkeClusterArgs();
    }

    public sealed class GetLkeClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlanes")]
        private InputList<Inputs.GetLkeClusterControlPlaneInputArgs>? _controlPlanes;
        public InputList<Inputs.GetLkeClusterControlPlaneInputArgs> ControlPlanes
        {
            get => _controlPlanes ?? (_controlPlanes = new InputList<Inputs.GetLkeClusterControlPlaneInputArgs>());
            set => _controlPlanes = value;
        }

        /// <summary>
        /// The LKE Cluster's ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<int> Id { get; set; } = null!;

        [Input("pools")]
        private InputList<Inputs.GetLkeClusterPoolInputArgs>? _pools;

        /// <summary>
        /// Node pools associated with this cluster.
        /// </summary>
        public InputList<Inputs.GetLkeClusterPoolInputArgs> Pools
        {
            get => _pools ?? (_pools = new InputList<Inputs.GetLkeClusterPoolInputArgs>());
            set => _pools = value;
        }

        public GetLkeClusterInvokeArgs()
        {
        }
        public static new GetLkeClusterInvokeArgs Empty => new GetLkeClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetLkeClusterResult
    {
        /// <summary>
        /// The endpoints for the Kubernetes API server.
        /// </summary>
        public readonly ImmutableArray<string> ApiEndpoints;
        public readonly ImmutableArray<Outputs.GetLkeClusterControlPlaneResult> ControlPlanes;
        /// <summary>
        /// When this Kubernetes cluster was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The Kubernetes Dashboard access URL for this cluster.
        /// </summary>
        public readonly string DashboardUrl;
        /// <summary>
        /// The ID of the node.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).
        /// </summary>
        public readonly string K8sVersion;
        /// <summary>
        /// The base64 encoded kubeconfig for the Kubernetes cluster.
        /// </summary>
        public readonly string Kubeconfig;
        /// <summary>
        /// The unique label for the cluster.
        /// </summary>
        public readonly string Label;
        /// <summary>
        /// Node pools associated with this cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLkeClusterPoolResult> Pools;
        /// <summary>
        /// This Kubernetes cluster's location.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The status of the node. (`ready`, `not_ready`)
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// When this Kubernetes cluster was updated.
        /// </summary>
        public readonly string Updated;

        [OutputConstructor]
        private GetLkeClusterResult(
            ImmutableArray<string> apiEndpoints,

            ImmutableArray<Outputs.GetLkeClusterControlPlaneResult> controlPlanes,

            string created,

            string dashboardUrl,

            int id,

            string k8sVersion,

            string kubeconfig,

            string label,

            ImmutableArray<Outputs.GetLkeClusterPoolResult> pools,

            string region,

            string status,

            ImmutableArray<string> tags,

            string updated)
        {
            ApiEndpoints = apiEndpoints;
            ControlPlanes = controlPlanes;
            Created = created;
            DashboardUrl = dashboardUrl;
            Id = id;
            K8sVersion = k8sVersion;
            Kubeconfig = kubeconfig;
            Label = label;
            Pools = pools;
            Region = region;
            Status = status;
            Tags = tags;
            Updated = updated;
        }
    }
}
