{
    "name": "linode",
    "description": "A Pulumi package for creating and managing linode cloud resources.",
    "keywords": [
        "pulumi",
        "linode"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`linode` Terraform Provider](https://github.com/linode/terraform-provider-linode).",
    "repository": "https://github.com/pulumi/pulumi-linode",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "linode": "Linode"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-linode/sdk/v4/go/linode"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing linode cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/linode/terraform-provider-linode)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-linode` repo](https://github.com/pulumi/pulumi-linode/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-linode` repo](https://github.com/linode/terraform-provider-linode/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/linode/terraform-provider-linode)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-linode` repo](https://github.com/pulumi/pulumi-linode/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-linode` repo](https://github.com/linode/terraform-provider-linode/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiVersion": {
                "type": "string",
                "description": "The version of Linode API.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_API_VERSION"
                    ]
                }
            },
            "configPath": {
                "type": "string"
            },
            "configProfile": {
                "type": "string"
            },
            "disableInternalCache": {
                "type": "boolean",
                "description": "Disable the internal caching system that backs certain Linode API requests.\n"
            },
            "eventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for events.\n"
            },
            "lkeEventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for LKE events.\n"
            },
            "lkeNodeReadyPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for an LKE node to be ready.\n"
            },
            "maxRetryDelayMs": {
                "type": "integer",
                "description": "Maximum delay in milliseconds before retrying a request.\n"
            },
            "minRetryDelayMs": {
                "type": "integer",
                "description": "Minimum delay in milliseconds before retrying a request.\n"
            },
            "skipInstanceDeletePoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode_instance resource to finish deleting.\n"
            },
            "skipInstanceReadyPoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode_instance resource to be running.\n"
            },
            "token": {
                "type": "string",
                "description": "The token that allows you access to your Linode account\n"
            },
            "uaPrefix": {
                "type": "string",
                "description": "An HTTP User-Agent Prefix to prepend in API requests.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_UA_PREFIX"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "The HTTP(S) API address of the Linode API to use.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_URL"
                    ]
                }
            }
        }
    },
    "types": {
        "linode:index/DatabaseMongodbUpdates:DatabaseMongodbUpdates": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/FirewallDevice:FirewallDevice": {
            "properties": {
                "entityId": {
                    "type": "integer",
                    "description": "The ID of the underlying entity this device references (i.e. the Linode's ID).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Firewall Device.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Firewall Device.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the underlying entity this device references.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "entityId",
                        "id",
                        "label",
                        "type",
                        "url"
                    ]
                }
            }
        },
        "linode:index/FirewallInbound:FirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewallâ€™s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Used to identify this rule. For display purposes only.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "label",
                "protocol"
            ]
        },
        "linode:index/FirewallOutbound:FirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewallâ€™s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "label",
                "protocol"
            ]
        },
        "linode:index/InstanceAlerts:InstanceAlerts": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "io": {
                    "type": "integer"
                },
                "networkIn": {
                    "type": "integer"
                },
                "networkOut": {
                    "type": "integer"
                },
                "transferQuota": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpu",
                        "io",
                        "networkIn",
                        "networkOut",
                        "transferQuota"
                    ]
                }
            }
        },
        "linode:index/InstanceBackups:InstanceBackups": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If this Linode has the Backup service enabled.\n"
                },
                "schedule": {
                    "$ref": "#/types/linode:index/InstanceBackupsSchedule:InstanceBackupsSchedule"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "available",
                        "enabled",
                        "schedule"
                    ]
                }
            }
        },
        "linode:index/InstanceBackupsSchedule:InstanceBackupsSchedule": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as \"Scheduling\" until the day is automatically selected.\n"
                },
                "window": {
                    "type": "string",
                    "description": "The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "day",
                        "window"
                    ]
                }
            }
        },
        "linode:index/InstanceConfig:InstanceConfig": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Arbitrary user comments about this `config`.\n"
                },
                "devices": {
                    "$ref": "#/types/linode:index/InstanceConfigDevices:InstanceConfigDevices",
                    "description": "A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.\n"
                },
                "helpers": {
                    "$ref": "#/types/linode:index/InstanceConfigHelpers:InstanceConfigHelpers",
                    "description": "Helpers enabled when booting to this Linode Config.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigInterface:InstanceConfigInterface"
                    }
                },
                "kernel": {
                    "type": "string",
                    "description": "A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Defaults to the total RAM of the Linode\n"
                },
                "rootDevice": {
                    "type": "string",
                    "description": "The root device to boot. The corresponding disk must be attached to a `device` slot.  Example: `\"/dev/sda\"`\n"
                },
                "runLevel": {
                    "type": "string",
                    "description": "Defines the state of your Linode after booting. Defaults to `\"default\"`.\n"
                },
                "virtMode": {
                    "type": "string",
                    "description": "Controls the virtualization mode. Defaults to `\"paravirt\"`.\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "devices",
                        "helpers",
                        "label",
                        "rootDevice"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevices:InstanceConfigDevices": {
            "properties": {
                "sda": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSda:InstanceConfigDevicesSda",
                    "description": "... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `\"fullvirt\"` `virt_mode`.\n"
                },
                "sdb": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdb:InstanceConfigDevicesSdb"
                },
                "sdc": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdc:InstanceConfigDevicesSdc"
                },
                "sdd": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdd:InstanceConfigDevicesSdd"
                },
                "sde": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSde:InstanceConfigDevicesSde"
                },
                "sdf": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdf:InstanceConfigDevicesSdf"
                },
                "sdg": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdg:InstanceConfigDevicesSdg"
                },
                "sdh": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdh:InstanceConfigDevicesSdh"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sda",
                        "sdb",
                        "sdc",
                        "sdd",
                        "sde",
                        "sdf",
                        "sdg",
                        "sdh"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSda:InstanceConfigDevicesSda": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSdb:InstanceConfigDevicesSdb": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSdc:InstanceConfigDevicesSdc": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSdd:InstanceConfigDevicesSdd": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSde:InstanceConfigDevicesSde": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSdf:InstanceConfigDevicesSdf": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSdg:InstanceConfigDevicesSdg": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevicesSdh:InstanceConfigDevicesSdh": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used.\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigHelpers:InstanceConfigHelpers": {
            "properties": {
                "devtmpfsAutomount": {
                    "type": "boolean"
                },
                "distro": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Distribution Helper setting.\n"
                },
                "modulesDep": {
                    "type": "boolean",
                    "description": "Creates a modules dependency file for the Kernel you run.\n"
                },
                "network": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.\n"
                },
                "updatedbDisabled": {
                    "type": "boolean",
                    "description": "Disables updatedb cron job to avoid disk thrashing.\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigInterface:InstanceConfigInterface": {
            "properties": {
                "ipamAddress": {
                    "type": "string",
                    "description": "This Network Interfaceâ€™s private IP address in Classless Inter-Domain Routing (CIDR) notation.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of this interface. If the interface is a VLAN, a label is required.\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The type of interface. (`public`, `vlan`)\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceDisk:InstanceDisk": {
            "properties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "filesystem": {
                    "type": "string",
                    "description": "The Disk filesystem can be one of: `\"raw\"`, `\"swap\"`, `\"ext3\"`, `\"ext4\"`, or `\"initrd\"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).\n",
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the disk in the Linode API.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "If true, this Disk is read-only.\n",
                    "willReplaceOnChanges": true
                },
                "rootPass": {
                    "type": "string",
                    "description": "The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in the state.*\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "filesystem",
                        "id",
                        "image",
                        "label",
                        "readOnly",
                        "size",
                        "stackscriptData",
                        "stackscriptId"
                    ]
                }
            }
        },
        "linode:index/InstanceInterface:InstanceInterface": {
            "properties": {
                "ipamAddress": {
                    "type": "string",
                    "description": "This Network Interfaceâ€™s private IP address in Classless Inter-Domain Routing (CIDR) notation.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of this interface. If the interface is a VLAN, a label is required.\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The type of interface. (`public`, `vlan`)\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceSpecs:InstanceSpecs": {
            "properties": {
                "disk": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                },
                "transfer": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "memory",
                        "transfer",
                        "vcpus"
                    ]
                }
            }
        },
        "linode:index/LkeClusterControlPlane:LkeClusterControlPlane": {
            "properties": {
                "highAvailability": {
                    "type": "boolean",
                    "description": "Defines whether High Availability is enabled for the cluster Control Plane. This is an **irreversible** change.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "highAvailability"
                    ]
                }
            }
        },
        "linode:index/LkeClusterPool:LkeClusterPool": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/linode:index/LkeClusterPoolAutoscaler:LkeClusterPoolAutoscaler"
                },
                "count": {
                    "type": "integer",
                    "description": "The number of nodes in the Node Pool.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the node.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPoolNode:LkeClusterPoolNode"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                }
            },
            "type": "object",
            "required": [
                "count",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "id",
                        "nodes",
                        "type"
                    ]
                }
            }
        },
        "linode:index/LkeClusterPoolAutoscaler:LkeClusterPoolAutoscaler": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "The maximum number of nodes to autoscale to.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of nodes to autoscale to.\n"
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "linode:index/LkeClusterPoolNode:LkeClusterPoolNode": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the node.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The ID of the underlying Linode instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "instanceId",
                        "status"
                    ]
                }
            }
        },
        "linode:index/NodeBalancerConfigNodeStatus:NodeBalancerConfigNodeStatus": {
            "properties": {
                "down": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.\n"
                },
                "up": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'UP' and healthy, and that are serving requests.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "down",
                        "up"
                    ]
                }
            }
        },
        "linode:index/NodeBalancerTransfer:NodeBalancerTransfer": {
            "properties": {
                "in": {
                    "type": "number",
                    "description": "The total transfer, in MB, used by this NodeBalancer for the current month\n"
                },
                "out": {
                    "type": "number",
                    "description": "The total inbound transfer, in MB, used for this NodeBalancer for the current month\n"
                },
                "total": {
                    "type": "number",
                    "description": "The total outbound transfer, in MB, used for this NodeBalancer for the current month\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "in",
                        "out",
                        "total"
                    ]
                }
            }
        },
        "linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The Base64 encoded and PEM formatted SSL certificate.\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key associated with the TLS/SSL certificate.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "privateKey"
            ]
        },
        "linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "description": "Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the lifecycle rule is active.\n"
                },
                "expiration": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRuleExpiration:ObjectStorageBucketLifecycleRuleExpiration"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the rule.\n"
                },
                "noncurrentVersionExpiration": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration:ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration"
                },
                "prefix": {
                    "type": "string",
                    "description": "The object key prefix identifying one or more objects to which the rule applies.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "id"
                    ]
                }
            }
        },
        "linode:index/ObjectStorageBucketLifecycleRuleExpiration:ObjectStorageBucketLifecycleRuleExpiration": {
            "properties": {
                "date": {
                    "type": "string",
                    "description": "Specifies the date after which you want the corresponding action to take effect.\n"
                },
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n"
                },
                "expiredObjectDeleteMarker": {
                    "type": "boolean",
                    "description": "On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Linode Object Storage to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.\n"
                }
            },
            "type": "object"
        },
        "linode:index/ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration:ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days non-current object versions expire.\n"
                }
            },
            "type": "object",
            "required": [
                "days"
            ]
        },
        "linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The unique label of the bucket to which the key will grant limited access.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The Object Storage cluster where a bucket to which the key is granting access is hosted.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "This Limited Access Keyâ€™s permissions for the selected bucket. *Changing `permissions` forces the creation of a new Object Storage Key.* (`read_write`, `read_only`)\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "cluster",
                "permissions"
            ]
        },
        "linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value. If not specified, this value will be used.\n"
                },
                "example": {
                    "type": "string",
                    "description": "An example value for the field.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The StackScript's label is for display purposes only.\n"
                },
                "manyOf": {
                    "type": "string",
                    "description": "A list of acceptable values for the field in any quantity, combination or order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                },
                "oneOf": {
                    "type": "string",
                    "description": "A list of acceptable single values for the field.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "default",
                        "example",
                        "label",
                        "manyOf",
                        "name",
                        "oneOf"
                    ]
                }
            }
        },
        "linode:index/UserDomainGrant:UserDomainGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserFirewallGrant:UserFirewallGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserGlobalGrants:UserGlobalGrants": {
            "properties": {
                "accountAccess": {
                    "type": "string"
                },
                "addDatabases": {
                    "type": "boolean"
                },
                "addDomains": {
                    "type": "boolean"
                },
                "addFirewalls": {
                    "type": "boolean"
                },
                "addImages": {
                    "type": "boolean"
                },
                "addLinodes": {
                    "type": "boolean"
                },
                "addLongview": {
                    "type": "boolean"
                },
                "addNodebalancers": {
                    "type": "boolean"
                },
                "addStackscripts": {
                    "type": "boolean"
                },
                "addVolumes": {
                    "type": "boolean"
                },
                "cancelAccount": {
                    "type": "boolean"
                },
                "longviewSubscription": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "linode:index/UserImageGrant:UserImageGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserLinodeGrant:UserLinodeGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserLongviewGrant:UserLongviewGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserNodebalancerGrant:UserNodebalancerGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserStackscriptGrant:UserStackscriptGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserVolumeGrant:UserVolumeGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getAccountLoginsFilter:getAccountLoginsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getAccountLoginsLogin:getAccountLoginsLogin": {
            "properties": {
                "datetime": {
                    "type": "string",
                    "description": "When the login was initiated.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this login object.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The remote IP address that requested the login.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "True if the User that was logged into was a restricted User, false otherwise.\n"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the User that was logged into.\n"
                }
            },
            "type": "object",
            "required": [
                "datetime",
                "id",
                "ip",
                "restricted",
                "status",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseBackupsBackup:getDatabaseBackupsBackup": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "A time value given in a combined date and time format that represents when the database backup was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the database backup object.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The database backupâ€™s label, for display purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of database backup, determined by how the backup was created.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "label",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseBackupsFilter:getDatabaseBackupsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseEnginesEngine:getDatabaseEnginesEngine": {
            "properties": {
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine type.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Managed Database engine ID in engine/version format.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version.\n"
                }
            },
            "type": "object",
            "required": [
                "engine",
                "id",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseEnginesFilter:getDatabaseEnginesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseMongodbUpdate:getDatabaseMongodbUpdate": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseMysqlBackupsBackup:getDatabaseMysqlBackupsBackup": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "A time value given in a combined date and time format that represents when the database backup was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the database backup object.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The database backupâ€™s label, for display purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of database backup, determined by how the backup was created.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "label",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseMysqlBackupsFilter:getDatabaseMysqlBackupsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseMysqlUpdate:getDatabaseMysqlUpdate": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasePostgresqlUpdate:getDatabasePostgresqlUpdate": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasesDatabase:getDatabasesDatabase": {
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine.\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Managed Database.\n"
                },
                "instanceUri": {
                    "type": "string"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database.\n"
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version.\n"
                }
            },
            "type": "object",
            "required": [
                "allowLists",
                "clusterSize",
                "created",
                "encrypted",
                "engine",
                "hostPrimary",
                "hostSecondary",
                "id",
                "instanceUri",
                "label",
                "region",
                "replicationType",
                "sslConnection",
                "status",
                "type",
                "updated",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasesFilter:getDatabasesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getFirewallDevice:getFirewallDevice": {
            "properties": {
                "entityId": {
                    "type": "integer",
                    "description": "The ID of the underlying entity this device references (i.e. the Linode's ID).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The Firewall's ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the underlying entity this device references.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Firewall Device.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the underlying entity this device references.\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "id",
                "label",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallInbound:getFirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewallâ€™s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the underlying entity this device references.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallOutbound:getFirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewallâ€™s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the underlying entity this device references.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getImagesFilter:getImagesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getImagesImage:getImagesImage": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this Image was created.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The name of the User who created this Image, or \"linode\" for official Images.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether or not this Image is deprecated. Will only be true for deprecated public Images.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A detailed description of this Image.\n"
                },
                "expiry": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "True if the Image is public.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A short description of the Image.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The minimum size this Image needs to deploy. Size is in MB. example: 2500\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of this image. (`creating`, `pending_upload`, `available`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "How the Image was created. Manual Images can be created at any time. \"Automatic\" Images are created automatically from a deleted Linode. (`manual`, `automatic`)\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The upstream distribution vendor. `None` for private Images.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "createdBy",
                "deprecated",
                "description",
                "expiry",
                "id",
                "isPublic",
                "label",
                "size",
                "status",
                "type",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsAutomatic:getInstanceBackupsAutomatic": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the labels of the Configuration profiles that are part of the Backup.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date the Backup was taken.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceBackupsAutomaticDisk:getInstanceBackupsAutomaticDisk"
                    }
                },
                "finished": {
                    "type": "string",
                    "description": "The date the Backup completed.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Backup.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date the Backup was most recently updated.\n"
                }
            },
            "type": "object",
            "required": [
                "available",
                "configs",
                "created",
                "disks",
                "finished",
                "id",
                "label",
                "status",
                "type",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsAutomaticDisk:getInstanceBackupsAutomaticDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this disk.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsCurrent:getInstanceBackupsCurrent": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the labels of the Configuration profiles that are part of the Backup.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date the Backup was taken.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceBackupsCurrentDisk:getInstanceBackupsCurrentDisk"
                    }
                },
                "finished": {
                    "type": "string",
                    "description": "The date the Backup completed.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Backup.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date the Backup was most recently updated.\n"
                }
            },
            "type": "object",
            "required": [
                "available",
                "configs",
                "created",
                "disks",
                "finished",
                "id",
                "label",
                "status",
                "type",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsCurrentDisk:getInstanceBackupsCurrentDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this disk.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsInProgress:getInstanceBackupsInProgress": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the labels of the Configuration profiles that are part of the Backup.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date the Backup was taken.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceBackupsInProgressDisk:getInstanceBackupsInProgressDisk"
                    }
                },
                "finished": {
                    "type": "string",
                    "description": "The date the Backup completed.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Backup.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date the Backup was most recently updated.\n"
                }
            },
            "type": "object",
            "required": [
                "available",
                "configs",
                "created",
                "disks",
                "finished",
                "id",
                "label",
                "status",
                "type",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsInProgressDisk:getInstanceBackupsInProgressDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this disk.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4:getInstanceNetworkingIpv4": {
            "properties": {
                "privates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Private:getInstanceNetworkingIpv4Private"
                    }
                },
                "publics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Public:getInstanceNetworkingIpv4Public"
                    },
                    "description": "Whether this is a public or private IP address.\n"
                },
                "reserveds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Reserved:getInstanceNetworkingIpv4Reserved"
                    }
                },
                "shareds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Shared:getInstanceNetworkingIpv4Shared"
                    }
                }
            },
            "type": "object",
            "required": [
                "privates",
                "publics",
                "reserveds",
                "shareds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Private:getInstanceNetworkingIpv4Private": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Public:getInstanceNetworkingIpv4Public": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Reserved:getInstanceNetworkingIpv4Reserved": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Shared:getInstanceNetworkingIpv4Shared": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6:getInstanceNetworkingIpv6": {
            "properties": {
                "globals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv6Global:getInstanceNetworkingIpv6Global"
                    }
                },
                "linkLocals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv6LinkLocal:getInstanceNetworkingIpv6LinkLocal"
                    }
                },
                "slaacs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv6Slaac:getInstanceNetworkingIpv6Slaac"
                    }
                }
            },
            "type": "object",
            "required": [
                "globals",
                "linkLocals",
                "slaacs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6Global:getInstanceNetworkingIpv6Global": {
            "properties": {
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "range": {
                    "type": "string",
                    "description": "The IPv6 range of addresses in this pool.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "routeTarget": {
                    "type": "string",
                    "description": "(Nullable) The last address in this block of IPv6 addresses.\n"
                }
            },
            "type": "object",
            "required": [
                "prefix",
                "range",
                "region",
                "routeTarget"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6LinkLocal:getInstanceNetworkingIpv6LinkLocal": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6Slaac:getInstanceNetworkingIpv6Slaac": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddons:getInstanceTypeAddons": {
            "properties": {
                "backups": {
                    "$ref": "#/types/linode:index/getInstanceTypeAddonsBackups:getInstanceTypeAddonsBackups"
                }
            },
            "type": "object",
            "required": [
                "backups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddonsBackups:getInstanceTypeAddonsBackups": {
            "properties": {
                "price": {
                    "$ref": "#/types/linode:index/getInstanceTypeAddonsBackupsPrice:getInstanceTypeAddonsBackupsPrice"
                }
            },
            "type": "object",
            "required": [
                "price"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddonsBackupsPrice:getInstanceTypeAddonsBackupsPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypePrice:getInstanceTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypesFilter:getInstanceTypesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getInstanceTypesType:getInstanceTypesType": {
            "properties": {
                "addons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddon:getInstanceTypesTypeAddon"
                    }
                },
                "class": {
                    "type": "string",
                    "description": "The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).\n"
                },
                "disk": {
                    "type": "integer",
                    "description": "The Disk size, in MB, of the Linode Type.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Linode Type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode Type's label is for display purposes only.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM included in this Linode Type.\n"
                },
                "networkOut": {
                    "type": "integer",
                    "description": "The Mbits outbound bandwidth allocation.\n"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypePrice:getInstanceTypesTypePrice"
                    }
                },
                "transfer": {
                    "type": "integer",
                    "description": "The monthly outbound transfer amount, in MB.\n"
                },
                "vcpus": {
                    "type": "integer",
                    "description": "The number of VCPU cores this Linode Type offers.\n"
                }
            },
            "type": "object",
            "required": [
                "addons",
                "class",
                "disk",
                "id",
                "label",
                "memory",
                "networkOut",
                "prices",
                "transfer",
                "vcpus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypesTypeAddon:getInstanceTypesTypeAddon": {
            "properties": {
                "backups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddonBackup:getInstanceTypesTypeAddonBackup"
                    }
                }
            },
            "type": "object",
            "required": [
                "backups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypesTypeAddonBackup:getInstanceTypesTypeAddonBackup": {
            "properties": {
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddonBackupPrice:getInstanceTypesTypeAddonBackupPrice"
                    }
                }
            },
            "type": "object",
            "required": [
                "prices"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypesTypeAddonBackupPrice:getInstanceTypesTypeAddonBackupPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypesTypePrice:getInstanceTypesTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesFilter:getInstancesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getInstancesInstance:getInstancesInstance": {
            "properties": {
                "alerts": {
                    "$ref": "#/types/linode:index/getInstancesInstanceAlerts:getInstancesInstanceAlerts"
                },
                "backups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceBackup:getInstancesInstanceBackup"
                    }
                },
                "bootConfigLabel": {
                    "type": "string"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfig:getInstancesInstanceConfig"
                    }
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceDisk:getInstancesInstanceDisk"
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The display group of the Linode instance.\n"
                },
                "hostUuid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the disk in the Linode API.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "A string containing the Linode's public IP address.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.\n"
                },
                "label": {
                    "type": "string",
                    "description": "(Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceSpec:getInstancesInstanceSpec"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)\n"
                },
                "swapSize": {
                    "type": "integer",
                    "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n"
                },
                "watchdogEnabled": {
                    "type": "boolean",
                    "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                }
            },
            "type": "object",
            "required": [
                "alerts",
                "backups",
                "bootConfigLabel",
                "configs",
                "disks",
                "group",
                "hostUuid",
                "id",
                "image",
                "ipAddress",
                "ipv4s",
                "ipv6",
                "label",
                "privateIpAddress",
                "region",
                "specs",
                "status",
                "swapSize",
                "tags",
                "type",
                "watchdogEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceAlerts:getInstancesInstanceAlerts": {
            "properties": {
                "cpu": {
                    "type": "integer"
                },
                "io": {
                    "type": "integer"
                },
                "networkIn": {
                    "type": "integer"
                },
                "networkOut": {
                    "type": "integer"
                },
                "transferQuota": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "io",
                "networkIn",
                "networkOut",
                "transferQuota"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceBackup:getInstancesInstanceBackup": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If this Linode has the Backup service enabled.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceBackupSchedule:getInstancesInstanceBackupSchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "available",
                "enabled",
                "schedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceBackupSchedule:getInstancesInstanceBackupSchedule": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as \"Scheduling\" until the day is automatically selected.\n"
                },
                "window": {
                    "type": "string",
                    "description": "The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.\n"
                }
            },
            "type": "object",
            "required": [
                "day",
                "window"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfig:getInstancesInstanceConfig": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Arbitrary user comments about this `config`.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDevice:getInstancesInstanceConfigDevice"
                    },
                    "description": "A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.\n"
                },
                "helpers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigHelper:getInstancesInstanceConfigHelper"
                    },
                    "description": "Helpers enabled when booting to this Linode Config.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigInterface:getInstancesInstanceConfigInterface"
                    }
                },
                "kernel": {
                    "type": "string",
                    "description": "A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://developers.linode.com/api/v4/linode-kernels)).\n"
                },
                "label": {
                    "type": "string",
                    "description": "(Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Defaults to the total RAM of the Linode\n"
                },
                "rootDevice": {
                    "type": "string",
                    "description": "The root device to boot.\n"
                },
                "runLevel": {
                    "type": "string",
                    "description": "Defines the state of your Linode after booting.\n"
                },
                "virtMode": {
                    "type": "string",
                    "description": "Controls the virtualization mode.\n"
                }
            },
            "type": "object",
            "required": [
                "comments",
                "devices",
                "helpers",
                "interfaces",
                "kernel",
                "label",
                "memoryLimit",
                "rootDevice",
                "runLevel",
                "virtMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDevice:getInstancesInstanceConfigDevice": {
            "properties": {
                "sdas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSda:getInstancesInstanceConfigDeviceSda"
                    },
                    "description": "... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `\"fullvirt\"` `virt_mode`.\n"
                },
                "sdbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdb:getInstancesInstanceConfigDeviceSdb"
                    }
                },
                "sdcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdc:getInstancesInstanceConfigDeviceSdc"
                    }
                },
                "sdds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdd:getInstancesInstanceConfigDeviceSdd"
                    }
                },
                "sdes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSde:getInstancesInstanceConfigDeviceSde"
                    }
                },
                "sdfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdf:getInstancesInstanceConfigDeviceSdf"
                    }
                },
                "sdgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdg:getInstancesInstanceConfigDeviceSdg"
                    }
                },
                "sdhs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdh:getInstancesInstanceConfigDeviceSdh"
                    }
                }
            },
            "type": "object",
            "required": [
                "sdas",
                "sdbs",
                "sdcs",
                "sdds",
                "sdes",
                "sdfs",
                "sdgs",
                "sdhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSda:getInstancesInstanceConfigDeviceSda": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdb:getInstancesInstanceConfigDeviceSdb": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdc:getInstancesInstanceConfigDeviceSdc": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdd:getInstancesInstanceConfigDeviceSdd": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSde:getInstancesInstanceConfigDeviceSde": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdf:getInstancesInstanceConfigDeviceSdf": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdg:getInstancesInstanceConfigDeviceSdg": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdh:getInstancesInstanceConfigDeviceSdh": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigHelper:getInstancesInstanceConfigHelper": {
            "properties": {
                "devtmpfsAutomount": {
                    "type": "boolean"
                },
                "distro": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Distribution Helper setting.\n"
                },
                "modulesDep": {
                    "type": "boolean",
                    "description": "Creates a modules dependency file for the Kernel you run.\n"
                },
                "network": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.\n"
                },
                "updatedbDisabled": {
                    "type": "boolean",
                    "description": "Disables updatedb cron job to avoid disk thrashing.\n"
                }
            },
            "type": "object",
            "required": [
                "devtmpfsAutomount",
                "distro",
                "modulesDep",
                "network",
                "updatedbDisabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigInterface:getInstancesInstanceConfigInterface": {
            "properties": {
                "ipamAddress": {
                    "type": "string",
                    "description": "(Optional) This Network Interfaceâ€™s private IP address in Classless Inter-Domain Routing (CIDR) notation.\n"
                },
                "label": {
                    "type": "string",
                    "description": "(Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "(Required) The type of interface. (`public`, `vlan`)\n"
                }
            },
            "type": "object"
        },
        "linode:index/getInstancesInstanceDisk:getInstancesInstanceDisk": {
            "properties": {
                "filesystem": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the disk in the Linode API.\n"
                },
                "label": {
                    "type": "string",
                    "description": "(Optional) The name of this interface. If the interface is a `vlan`, a label is required. Must be undefined for `public` purpose interfaces.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "id",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceSpec:getInstancesInstanceSpec": {
            "properties": {
                "disk": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                },
                "transfer": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "disk",
                "memory",
                "transfer",
                "vcpus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterControlPlane:getLkeClusterControlPlane": {
            "properties": {
                "highAvailability": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "highAvailability"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPool:getLkeClusterPool": {
            "properties": {
                "autoscalers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterPoolAutoscaler:getLkeClusterPoolAutoscaler"
                    },
                    "description": "The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.\n"
                },
                "count": {
                    "type": "integer",
                    "description": "The number of nodes in the Node Pool.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The LKE Cluster's ID.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterPoolNode:getLkeClusterPoolNode"
                    },
                    "description": "The nodes in the Node Pool.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                }
            },
            "type": "object",
            "required": [
                "autoscalers",
                "count",
                "id",
                "nodes",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPoolAutoscaler:getLkeClusterPoolAutoscaler": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "The maximum number of nodes to autoscale to.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of nodes to autoscale to.\n"
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPoolNode:getLkeClusterPoolNode": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The LKE Cluster's ID.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The ID of the underlying Linode instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "instanceId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeVersionsVersion:getLkeVersionsVersion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodeBalancerConfigNodeStatus:getNodeBalancerConfigNodeStatus": {
            "properties": {
                "down": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.\n"
                },
                "up": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'UP' and healthy, and that are serving requests.\n"
                }
            },
            "type": "object",
            "required": [
                "down",
                "up"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodeBalancerTransfer:getNodeBalancerTransfer": {
            "properties": {
                "in": {
                    "type": "number",
                    "description": "The total transfer, in MB, used by this NodeBalancer for the current month\n"
                },
                "out": {
                    "type": "number",
                    "description": "The total inbound transfer, in MB, used for this NodeBalancer for the current month\n"
                },
                "total": {
                    "type": "number",
                    "description": "The total outbound transfer, in MB, used for this NodeBalancer for the current month\n"
                }
            },
            "type": "object",
            "required": [
                "in",
                "out",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getProfileReferrals:getProfileReferrals": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "completed": {
                    "type": "integer"
                },
                "credit": {
                    "type": "number"
                },
                "pending": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "code",
                "completed",
                "credit",
                "pending",
                "total",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getRegionResolver:getRegionResolver": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 addresses for this regionâ€™s DNS resolvers, separated by commas.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "The IPv6 addresses for this regionâ€™s DNS resolvers, separated by commas.\n"
                }
            },
            "type": "object",
            "required": [
                "ipv4",
                "ipv6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getRegionsFilter:getRegionsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getRegionsRegion:getRegionsRegion": {
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of capabilities of this region.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country the region resides in.\n"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string",
                    "description": "Detailed location information for this Region, including city, state or region, and country.\n"
                },
                "resolvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getRegionsRegionResolver:getRegionsRegionResolver"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "This regionâ€™s current operational status (ok or outage).\n"
                }
            },
            "type": "object",
            "required": [
                "capabilities",
                "country",
                "id",
                "label",
                "resolvers",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getRegionsRegionResolver:getRegionsRegionResolver": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 addresses for this regionâ€™s DNS resolvers, separated by commas.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "The IPv6 addresses for this regionâ€™s DNS resolvers, separated by commas.\n"
                }
            },
            "type": "object",
            "required": [
                "ipv4",
                "ipv6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getStackScriptUserDefinedField:getStackScriptUserDefinedField": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value. If not specified, this value will be used.\n"
                },
                "example": {
                    "type": "string",
                    "description": "An example value for the field.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                },
                "manyOf": {
                    "type": "string",
                    "description": "A list of acceptable values for the field in any quantity, combination or order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                },
                "oneOf": {
                    "type": "string",
                    "description": "A list of acceptable single values for the field.\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "example",
                "label",
                "manyOf",
                "name",
                "oneOf"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getStackScriptsFilter:getStackScriptsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getStackScriptsStackscript:getStackScriptsStackscript": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this StackScript was created.\n"
                },
                "deploymentsActive": {
                    "type": "integer",
                    "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                },
                "deploymentsTotal": {
                    "type": "integer",
                    "description": "The total number of times this StackScript has been deployed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the StackScript.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of the StackScript.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of Image IDs representing the Images that this StackScript is compatible for deploying with.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                },
                "revNote": {
                    "type": "string",
                    "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date this StackScript was updated.\n"
                },
                "userDefinedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getStackScriptsStackscriptUserDefinedField:getStackScriptsStackscriptUserDefinedField"
                    },
                    "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                },
                "userGravatarId": {
                    "type": "string",
                    "description": "The Gravatar ID for the User who created the StackScript.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The User who created the StackScript.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "deploymentsActive",
                "deploymentsTotal",
                "description",
                "id",
                "images",
                "isPublic",
                "label",
                "revNote",
                "script",
                "updated",
                "userDefinedFields",
                "userGravatarId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getStackScriptsStackscriptUserDefinedField:getStackScriptsStackscriptUserDefinedField": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value. If not specified, this value will be used.\n"
                },
                "example": {
                    "type": "string",
                    "description": "An example value for the field.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                },
                "manyOf": {
                    "type": "string",
                    "description": "A list of acceptable values for the field in any quantity, combination or order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "oneOf": {
                    "type": "string",
                    "description": "A list of acceptable single values for the field.\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "example",
                "label",
                "manyOf",
                "name",
                "oneOf"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getUserDomainGrant:getUserDomainGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserFirewallGrant:getUserFirewallGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserGlobalGrant:getUserGlobalGrant": {
            "properties": {
                "accountAccess": {
                    "type": "string"
                },
                "addDatabases": {
                    "type": "boolean"
                },
                "addDomains": {
                    "type": "boolean"
                },
                "addFirewalls": {
                    "type": "boolean"
                },
                "addImages": {
                    "type": "boolean"
                },
                "addLinodes": {
                    "type": "boolean"
                },
                "addLongview": {
                    "type": "boolean"
                },
                "addNodebalancers": {
                    "type": "boolean"
                },
                "addStackscripts": {
                    "type": "boolean"
                },
                "addVolumes": {
                    "type": "boolean"
                },
                "cancelAccount": {
                    "type": "boolean"
                },
                "longviewSubscription": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "linode:index/getUserImageGrant:getUserImageGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserLinodeGrant:getUserLinodeGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserLongviewGrant:getUserLongviewGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserNodebalancerGrant:getUserNodebalancerGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserStackscriptGrant:getUserStackscriptGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getUserVolumeGrant:getUserVolumeGrant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/getVlansFilter:getVlansFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVlansVlan:getVlansVlan": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When the VLAN was created.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The unique label of the VLAN.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The running Linodes currently attached to the VLAN.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "label",
                "linodes",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the linode package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiVersion": {
                "type": "string",
                "description": "The version of Linode API.\n"
            },
            "configPath": {
                "type": "string"
            },
            "configProfile": {
                "type": "string"
            },
            "disableInternalCache": {
                "type": "boolean",
                "description": "Disable the internal caching system that backs certain Linode API requests.\n"
            },
            "eventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for events.\n"
            },
            "lkeEventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for LKE events.\n"
            },
            "lkeNodeReadyPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for an LKE node to be ready.\n"
            },
            "maxRetryDelayMs": {
                "type": "integer",
                "description": "Maximum delay in milliseconds before retrying a request.\n"
            },
            "minRetryDelayMs": {
                "type": "integer",
                "description": "Minimum delay in milliseconds before retrying a request.\n"
            },
            "skipInstanceDeletePoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode_instance resource to finish deleting.\n"
            },
            "skipInstanceReadyPoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode_instance resource to be running.\n"
            },
            "token": {
                "type": "string",
                "description": "The token that allows you access to your Linode account\n"
            },
            "uaPrefix": {
                "type": "string",
                "description": "An HTTP User-Agent Prefix to prepend in API requests.\n"
            },
            "url": {
                "type": "string",
                "description": "The HTTP(S) API address of the Linode API to use.\n"
            }
        },
        "inputProperties": {
            "apiVersion": {
                "type": "string",
                "description": "The version of Linode API.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_API_VERSION"
                    ]
                }
            },
            "configPath": {
                "type": "string"
            },
            "configProfile": {
                "type": "string"
            },
            "disableInternalCache": {
                "type": "boolean",
                "description": "Disable the internal caching system that backs certain Linode API requests.\n"
            },
            "eventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for events.\n"
            },
            "lkeEventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for LKE events.\n"
            },
            "lkeNodeReadyPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for an LKE node to be ready.\n"
            },
            "maxRetryDelayMs": {
                "type": "integer",
                "description": "Maximum delay in milliseconds before retrying a request.\n"
            },
            "minRetryDelayMs": {
                "type": "integer",
                "description": "Minimum delay in milliseconds before retrying a request.\n"
            },
            "skipInstanceDeletePoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode_instance resource to finish deleting.\n"
            },
            "skipInstanceReadyPoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode_instance resource to be running.\n"
            },
            "token": {
                "type": "string",
                "description": "The token that allows you access to your Linode account\n"
            },
            "uaPrefix": {
                "type": "string",
                "description": "An HTTP User-Agent Prefix to prepend in API requests.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_UA_PREFIX"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "The HTTP(S) API address of the Linode API to use.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_URL"
                    ]
                }
            }
        }
    },
    "resources": {
        "linode:index/accountSettings:AccountSettings": {
            "description": "Manages the settings of a Linode account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to change their Linode account settings.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myaccount = new linode.AccountSettings(\"myaccount\", {\n    backupsEnabled: true,\n    longviewSubscription: \"longview-40\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmyaccount = linode.AccountSettings(\"myaccount\",\n    backups_enabled=True,\n    longview_subscription=\"longview-40\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myaccount = new Linode.AccountSettings(\"myaccount\", new()\n    {\n        BackupsEnabled = true,\n        LongviewSubscription = \"longview-40\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewAccountSettings(ctx, \"myaccount\", \u0026linode.AccountSettingsArgs{\n\t\t\tBackupsEnabled:       pulumi.Bool(true),\n\t\t\tLongviewSubscription: pulumi.String(\"longview-40\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.AccountSettings;\nimport com.pulumi.linode.AccountSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myaccount = new AccountSettings(\"myaccount\", AccountSettingsArgs.builder()        \n            .backupsEnabled(\"true\")\n            .longviewSubscription(\"longview-40\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myaccount:\n    type: linode:AccountSettings\n    properties:\n      backupsEnabled: 'true'\n      longviewSubscription: longview-40\n```\n{{% /example %}}\n{{% /examples %}}\n## Additional Results\n\n* `managed` - Enables monitoring for connectivity, response, and total request time.\n\n* `object_storage` - A string describing the status of this accountâ€™s Object Storage service enrollment.\n",
            "properties": {
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "The account-wide backups default. If true, all Linodes created will automatically be enrolled in the Backups service. If false, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n"
                },
                "longviewSubscription": {
                    "type": "string",
                    "description": "The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](https://www.linode.com/docs/api/longview/#longview-subscriptions-list) ID or null for Longview Free.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Enables monitoring for connectivity, response, and total request time.\n"
                },
                "networkHelper": {
                    "type": "boolean",
                    "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                },
                "objectStorage": {
                    "type": "string",
                    "description": "A string describing the status of this account's Object Storage service enrollment.\n"
                }
            },
            "required": [
                "backupsEnabled",
                "longviewSubscription",
                "managed",
                "networkHelper",
                "objectStorage"
            ],
            "inputProperties": {
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "The account-wide backups default. If true, all Linodes created will automatically be enrolled in the Backups service. If false, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n"
                },
                "longviewSubscription": {
                    "type": "string",
                    "description": "The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](https://www.linode.com/docs/api/longview/#longview-subscriptions-list) ID or null for Longview Free.\n"
                },
                "networkHelper": {
                    "type": "boolean",
                    "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSettings resources.\n",
                "properties": {
                    "backupsEnabled": {
                        "type": "boolean",
                        "description": "The account-wide backups default. If true, all Linodes created will automatically be enrolled in the Backups service. If false, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n"
                    },
                    "longviewSubscription": {
                        "type": "string",
                        "description": "The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](https://www.linode.com/docs/api/longview/#longview-subscriptions-list) ID or null for Longview Free.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Enables monitoring for connectivity, response, and total request time.\n"
                    },
                    "networkHelper": {
                        "type": "boolean",
                        "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                    },
                    "objectStorage": {
                        "type": "string",
                        "description": "A string describing the status of this account's Object Storage service enrollment.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databaseAccessControls:DatabaseAccessControls": {
            "description": "Manages the access control for a Linode Database. Only one `linode.DatabaseAccessControls` resource should be defined per-database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGrant a Linode access to a database:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"myinstance\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n    image: \"linode/alpine3.14\",\n});\nconst my_db = new linode.DatabaseMysql(\"my-db\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8.0.26\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\nconst my_access = new linode.DatabaseAccessControls(\"my-access\", {\n    databaseId: my_db.id,\n    databaseType: \"mysql\",\n    allowLists: [my_instance.ipAddress],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"myinstance\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\",\n    image=\"linode/alpine3.14\")\nmy_db = linode.DatabaseMysql(\"my-db\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8.0.26\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\nmy_access = linode.DatabaseAccessControls(\"my-access\",\n    database_id=my_db.id,\n    database_type=\"mysql\",\n    allow_lists=[my_instance.ip_address])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"myinstance\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n        Image = \"linode/alpine3.14\",\n    });\n\n    var my_db = new Linode.DatabaseMysql(\"my-db\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8.0.26\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n    var my_access = new Linode.DatabaseAccessControls(\"my-access\", new()\n    {\n        DatabaseId = my_db.Id,\n        DatabaseType = \"mysql\",\n        AllowLists = new[]\n        {\n            my_instance.IpAddress,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"myinstance\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tImage:  pulumi.String(\"linode/alpine3.14\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDatabaseMysql(ctx, \"my-db\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"mysql/8.0.26\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDatabaseAccessControls(ctx, \"my-access\", \u0026linode.DatabaseAccessControlsArgs{\n\t\t\tDatabaseId:   my_db.ID(),\n\t\t\tDatabaseType: pulumi.String(\"mysql\"),\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tmy_instance.IpAddress,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport com.pulumi.linode.DatabaseAccessControls;\nimport com.pulumi.linode.DatabaseAccessControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()        \n            .label(\"myinstance\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .image(\"linode/alpine3.14\")\n            .build());\n\n        var my_db = new DatabaseMysql(\"my-db\", DatabaseMysqlArgs.builder()        \n            .label(\"mydatabase\")\n            .engineId(\"mysql/8.0.26\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n        var my_access = new DatabaseAccessControls(\"my-access\", DatabaseAccessControlsArgs.builder()        \n            .databaseId(my_db.id())\n            .databaseType(\"mysql\")\n            .allowLists(my_instance.ipAddress())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-access:\n    type: linode:DatabaseAccessControls\n    properties:\n      databaseId: ${[\"my-db\"].id}\n      databaseType: mysql\n      allowLists:\n        - ${[\"my-instance\"].ipAddress}\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: myinstance\n      region: us-southeast\n      type: g6-nanode-1\n      image: linode/alpine3.14\n  my-db:\n    type: linode:DatabaseMysql\n    properties:\n      label: mydatabase\n      engineId: mysql/8.0.26\n      region: us-southeast\n      type: g6-nanode-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                },
                "databaseId": {
                    "type": "integer",
                    "description": "The unique ID of the target database.\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "The unique type of the target database. (`mysql`, `mongodb`, `postgresql`)\n"
                }
            },
            "required": [
                "allowLists",
                "databaseId",
                "databaseType"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                },
                "databaseId": {
                    "type": "integer",
                    "description": "The unique ID of the target database.\n",
                    "willReplaceOnChanges": true
                },
                "databaseType": {
                    "type": "string",
                    "description": "The unique type of the target database. (`mysql`, `mongodb`, `postgresql`)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowLists",
                "databaseId",
                "databaseType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAccessControls resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                    },
                    "databaseId": {
                        "type": "integer",
                        "description": "The unique ID of the target database.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The unique type of the target database. (`mysql`, `mongodb`, `postgresql`)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databaseMongodb:DatabaseMongodb": {
            "description": "Provides a Linode Mongo Database resource. This can be used to create, modify, and delete Linode MongoDB Databases.\nFor more information, see the [Linode APIv4 docs](https://www.linode.com/docs/api/databases/).\n\nPlease keep in mind that Managed Databases can take up to an hour to provision.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreating a simple MongoDB database instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMongodb(\"foobar\", {\n    engineId: \"mongodb/4.4.10\",\n    label: \"mydatabase\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMongodb(\"foobar\",\n    engine_id=\"mongodb/4.4.10\",\n    label=\"mydatabase\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMongodb(\"foobar\", new()\n    {\n        EngineId = \"mongodb/4.4.10\",\n        Label = \"mydatabase\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMongodb(ctx, \"foobar\", \u0026linode.DatabaseMongodbArgs{\n\t\t\tEngineId: pulumi.String(\"mongodb/4.4.10\"),\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMongodb;\nimport com.pulumi.linode.DatabaseMongodbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMongodb(\"foobar\", DatabaseMongodbArgs.builder()        \n            .engineId(\"mongodb/4.4.10\")\n            .label(\"mydatabase\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMongodb\n    properties:\n      engineId: mongodb/4.4.10\n      label: mydatabase\n      region: us-southeast\n      type: g6-nanode-1\n```\n\nCreating a complex MongoDB database instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMongodb(\"foobar\", {\n    allowLists: [\"0.0.0.0/0\"],\n    clusterSize: 3,\n    compressionType: \"zlib\",\n    encrypted: true,\n    engineId: \"mongodb/4.4.10\",\n    label: \"mydatabase\",\n    region: \"us-southeast\",\n    sslConnection: true,\n    storageEngine: \"wiredtiger\",\n    type: \"g6-nanode-1\",\n    updates: {\n        dayOfWeek: \"saturday\",\n        duration: 1,\n        frequency: \"monthly\",\n        hourOfDay: 22,\n        weekOfMonth: 2,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMongodb(\"foobar\",\n    allow_lists=[\"0.0.0.0/0\"],\n    cluster_size=3,\n    compression_type=\"zlib\",\n    encrypted=True,\n    engine_id=\"mongodb/4.4.10\",\n    label=\"mydatabase\",\n    region=\"us-southeast\",\n    ssl_connection=True,\n    storage_engine=\"wiredtiger\",\n    type=\"g6-nanode-1\",\n    updates=linode.DatabaseMongodbUpdatesArgs(\n        day_of_week=\"saturday\",\n        duration=1,\n        frequency=\"monthly\",\n        hour_of_day=22,\n        week_of_month=2,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMongodb(\"foobar\", new()\n    {\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n        ClusterSize = 3,\n        CompressionType = \"zlib\",\n        Encrypted = true,\n        EngineId = \"mongodb/4.4.10\",\n        Label = \"mydatabase\",\n        Region = \"us-southeast\",\n        SslConnection = true,\n        StorageEngine = \"wiredtiger\",\n        Type = \"g6-nanode-1\",\n        Updates = new Linode.Inputs.DatabaseMongodbUpdatesArgs\n        {\n            DayOfWeek = \"saturday\",\n            Duration = 1,\n            Frequency = \"monthly\",\n            HourOfDay = 22,\n            WeekOfMonth = 2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMongodb(ctx, \"foobar\", \u0026linode.DatabaseMongodbArgs{\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t\tClusterSize:     pulumi.Int(3),\n\t\t\tCompressionType: pulumi.String(\"zlib\"),\n\t\t\tEncrypted:       pulumi.Bool(true),\n\t\t\tEngineId:        pulumi.String(\"mongodb/4.4.10\"),\n\t\t\tLabel:           pulumi.String(\"mydatabase\"),\n\t\t\tRegion:          pulumi.String(\"us-southeast\"),\n\t\t\tSslConnection:   pulumi.Bool(true),\n\t\t\tStorageEngine:   pulumi.String(\"wiredtiger\"),\n\t\t\tType:            pulumi.String(\"g6-nanode-1\"),\n\t\t\tUpdates: \u0026linode.DatabaseMongodbUpdatesArgs{\n\t\t\t\tDayOfWeek:   pulumi.String(\"saturday\"),\n\t\t\t\tDuration:    pulumi.Int(1),\n\t\t\t\tFrequency:   pulumi.String(\"monthly\"),\n\t\t\t\tHourOfDay:   pulumi.Int(22),\n\t\t\t\tWeekOfMonth: pulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMongodb;\nimport com.pulumi.linode.DatabaseMongodbArgs;\nimport com.pulumi.linode.inputs.DatabaseMongodbUpdatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMongodb(\"foobar\", DatabaseMongodbArgs.builder()        \n            .allowLists(\"0.0.0.0/0\")\n            .clusterSize(3)\n            .compressionType(\"zlib\")\n            .encrypted(true)\n            .engineId(\"mongodb/4.4.10\")\n            .label(\"mydatabase\")\n            .region(\"us-southeast\")\n            .sslConnection(true)\n            .storageEngine(\"wiredtiger\")\n            .type(\"g6-nanode-1\")\n            .updates(DatabaseMongodbUpdatesArgs.builder()\n                .dayOfWeek(\"saturday\")\n                .duration(1)\n                .frequency(\"monthly\")\n                .hourOfDay(22)\n                .weekOfMonth(2)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMongodb\n    properties:\n      allowLists:\n        - 0.0.0.0/0\n      clusterSize: 3\n      compressionType: zlib\n      encrypted: true\n      engineId: mongodb/4.4.10\n      label: mydatabase\n      region: us-southeast\n      sslConnection: true\n      storageEngine: wiredtiger\n      type: g6-nanode-1\n      updates:\n        dayOfWeek: saturday\n        duration: 1\n        frequency: monthly\n        hourOfDay: 22\n        weekOfMonth: 2\n```\n{{% /example %}}\n{{% /examples %}}\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n\n\n## Import\n\nLinode MongoDB Databases can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import linode:index/databaseMongodb:DatabaseMongodb foobar 1234567\n```\n\n ",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "compressionType": {
                    "type": "string",
                    "description": "The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `mongodb`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of peer addresses for this Database.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The access port for this Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "storageEngine": {
                    "type": "string",
                    "description": "The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMongodbUpdates:DatabaseMongodbUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "created",
                "engine",
                "engineId",
                "hostPrimary",
                "hostSecondary",
                "label",
                "peers",
                "port",
                "region",
                "replicaSet",
                "rootPassword",
                "rootUsername",
                "status",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                    "willReplaceOnChanges": true
                },
                "compressionType": {
                    "type": "string",
                    "description": "The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)\n",
                    "willReplaceOnChanges": true
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "storageEngine": {
                    "type": "string",
                    "description": "The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                    "willReplaceOnChanges": true
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMongodbUpdates:DatabaseMongodbUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseMongodb resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "willReplaceOnChanges": true
                    },
                    "compressionType": {
                        "type": "string",
                        "description": "The type of data compression for this Database. (`none`, `snappy`, `zlib`; default `none`)\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `mongodb`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `mongo/4.4.10`)\n",
                        "willReplaceOnChanges": true
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "peers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of peer addresses for this Database.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The access port for this Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicaSet": {
                        "type": "string",
                        "description": "Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "storageEngine": {
                        "type": "string",
                        "description": "The type of storage engine for this Database. (`mmapv1`, `wiredtiger`; default `wiredtiger`)\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabaseMongodbUpdates:DatabaseMongodbUpdates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databaseMysql:DatabaseMysql": {
            "description": "Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.\nFor more information, see the [Linode APIv4 docs](https://www.linode.com/docs/api/databases/).\n\nPlease keep in mind that Managed Databases can take up to an hour to provision.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreating a simple MySQL database instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysql(\"foobar\", {\n    engineId: \"mysql/8.0.26\",\n    label: \"mydatabase\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysql(\"foobar\",\n    engine_id=\"mysql/8.0.26\",\n    label=\"mydatabase\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysql(\"foobar\", new()\n    {\n        EngineId = \"mysql/8.0.26\",\n        Label = \"mydatabase\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysql(ctx, \"foobar\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tEngineId: pulumi.String(\"mysql/8.0.26\"),\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysql(\"foobar\", DatabaseMysqlArgs.builder()        \n            .engineId(\"mysql/8.0.26\")\n            .label(\"mydatabase\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysql\n    properties:\n      engineId: mysql/8.0.26\n      label: mydatabase\n      region: us-southeast\n      type: g6-nanode-1\n```\n\nCreating a complex MySQL database instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysql(\"foobar\", {\n    allowLists: [\"0.0.0.0/0\"],\n    clusterSize: 3,\n    encrypted: true,\n    engineId: \"mysql/8.0.26\",\n    label: \"mydatabase\",\n    region: \"us-southeast\",\n    replicationType: \"asynch\",\n    sslConnection: true,\n    type: \"g6-nanode-1\",\n    updates: {\n        dayOfWeek: \"saturday\",\n        duration: 1,\n        frequency: \"monthly\",\n        hourOfDay: 22,\n        weekOfMonth: 2,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysql(\"foobar\",\n    allow_lists=[\"0.0.0.0/0\"],\n    cluster_size=3,\n    encrypted=True,\n    engine_id=\"mysql/8.0.26\",\n    label=\"mydatabase\",\n    region=\"us-southeast\",\n    replication_type=\"asynch\",\n    ssl_connection=True,\n    type=\"g6-nanode-1\",\n    updates=linode.DatabaseMysqlUpdatesArgs(\n        day_of_week=\"saturday\",\n        duration=1,\n        frequency=\"monthly\",\n        hour_of_day=22,\n        week_of_month=2,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysql(\"foobar\", new()\n    {\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n        ClusterSize = 3,\n        Encrypted = true,\n        EngineId = \"mysql/8.0.26\",\n        Label = \"mydatabase\",\n        Region = \"us-southeast\",\n        ReplicationType = \"asynch\",\n        SslConnection = true,\n        Type = \"g6-nanode-1\",\n        Updates = new Linode.Inputs.DatabaseMysqlUpdatesArgs\n        {\n            DayOfWeek = \"saturday\",\n            Duration = 1,\n            Frequency = \"monthly\",\n            HourOfDay = 22,\n            WeekOfMonth = 2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysql(ctx, \"foobar\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t\tClusterSize:     pulumi.Int(3),\n\t\t\tEncrypted:       pulumi.Bool(true),\n\t\t\tEngineId:        pulumi.String(\"mysql/8.0.26\"),\n\t\t\tLabel:           pulumi.String(\"mydatabase\"),\n\t\t\tRegion:          pulumi.String(\"us-southeast\"),\n\t\t\tReplicationType: pulumi.String(\"asynch\"),\n\t\t\tSslConnection:   pulumi.Bool(true),\n\t\t\tType:            pulumi.String(\"g6-nanode-1\"),\n\t\t\tUpdates: \u0026linode.DatabaseMysqlUpdatesArgs{\n\t\t\t\tDayOfWeek:   pulumi.String(\"saturday\"),\n\t\t\t\tDuration:    pulumi.Int(1),\n\t\t\t\tFrequency:   pulumi.String(\"monthly\"),\n\t\t\t\tHourOfDay:   pulumi.Int(22),\n\t\t\t\tWeekOfMonth: pulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport com.pulumi.linode.inputs.DatabaseMysqlUpdatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysql(\"foobar\", DatabaseMysqlArgs.builder()        \n            .allowLists(\"0.0.0.0/0\")\n            .clusterSize(3)\n            .encrypted(true)\n            .engineId(\"mysql/8.0.26\")\n            .label(\"mydatabase\")\n            .region(\"us-southeast\")\n            .replicationType(\"asynch\")\n            .sslConnection(true)\n            .type(\"g6-nanode-1\")\n            .updates(DatabaseMysqlUpdatesArgs.builder()\n                .dayOfWeek(\"saturday\")\n                .duration(1)\n                .frequency(\"monthly\")\n                .hourOfDay(22)\n                .weekOfMonth(2)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysql\n    properties:\n      allowLists:\n        - 0.0.0.0/0\n      clusterSize: 3\n      encrypted: true\n      engineId: mysql/8.0.26\n      label: mydatabase\n      region: us-southeast\n      replicationType: asynch\n      sslConnection: true\n      type: g6-nanode-1\n      updates:\n        dayOfWeek: saturday\n        duration: 1\n        frequency: monthly\n        hourOfDay: 22\n        weekOfMonth: 2\n```\n{{% /example %}}\n{{% /examples %}}\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n\n\n## Import\n\nLinode MySQL Databases can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import linode:index/databaseMysql:DatabaseMysql foobar 1234567\n```\n\n ",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `mysql`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "created",
                "engine",
                "engineId",
                "hostPrimary",
                "hostSecondary",
                "label",
                "region",
                "rootPassword",
                "rootUsername",
                "status",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                    "willReplaceOnChanges": true
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n",
                    "willReplaceOnChanges": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                    "willReplaceOnChanges": true
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseMysql resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `mysql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)\n",
                        "willReplaceOnChanges": true
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationType": {
                        "type": "string",
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n",
                        "willReplaceOnChanges": true
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databasePostgresql:DatabasePostgresql": {
            "description": "Provides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.\nFor more information, see the [Linode APIv4 docs](https://www.linode.com/docs/api/databases/).\n\nPlease keep in mind that Managed Databases can take up to an hour to provision.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreating a simple PostgreSQL database instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresql(\"foobar\", {\n    engineId: \"postgresql/13.2\",\n    label: \"mydatabase\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresql(\"foobar\",\n    engine_id=\"postgresql/13.2\",\n    label=\"mydatabase\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresql(\"foobar\", new()\n    {\n        EngineId = \"postgresql/13.2\",\n        Label = \"mydatabase\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresql(ctx, \"foobar\", \u0026linode.DatabasePostgresqlArgs{\n\t\t\tEngineId: pulumi.String(\"postgresql/13.2\"),\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresql;\nimport com.pulumi.linode.DatabasePostgresqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresql(\"foobar\", DatabasePostgresqlArgs.builder()        \n            .engineId(\"postgresql/13.2\")\n            .label(\"mydatabase\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresql\n    properties:\n      engineId: postgresql/13.2\n      label: mydatabase\n      region: us-southeast\n      type: g6-nanode-1\n```\n\nCreating a complex PostgreSQL database instance:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresql(\"foobar\", {\n    allowLists: [\"0.0.0.0/0\"],\n    clusterSize: 3,\n    encrypted: true,\n    engineId: \"postgresql/13.2\",\n    label: \"mydatabase\",\n    region: \"us-southeast\",\n    replicationCommitType: \"remote_write\",\n    replicationType: \"semi_synch\",\n    sslConnection: true,\n    type: \"g6-nanode-1\",\n    updates: {\n        dayOfWeek: \"saturday\",\n        duration: 1,\n        frequency: \"monthly\",\n        hourOfDay: 22,\n        weekOfMonth: 2,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresql(\"foobar\",\n    allow_lists=[\"0.0.0.0/0\"],\n    cluster_size=3,\n    encrypted=True,\n    engine_id=\"postgresql/13.2\",\n    label=\"mydatabase\",\n    region=\"us-southeast\",\n    replication_commit_type=\"remote_write\",\n    replication_type=\"semi_synch\",\n    ssl_connection=True,\n    type=\"g6-nanode-1\",\n    updates=linode.DatabasePostgresqlUpdatesArgs(\n        day_of_week=\"saturday\",\n        duration=1,\n        frequency=\"monthly\",\n        hour_of_day=22,\n        week_of_month=2,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresql(\"foobar\", new()\n    {\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n        ClusterSize = 3,\n        Encrypted = true,\n        EngineId = \"postgresql/13.2\",\n        Label = \"mydatabase\",\n        Region = \"us-southeast\",\n        ReplicationCommitType = \"remote_write\",\n        ReplicationType = \"semi_synch\",\n        SslConnection = true,\n        Type = \"g6-nanode-1\",\n        Updates = new Linode.Inputs.DatabasePostgresqlUpdatesArgs\n        {\n            DayOfWeek = \"saturday\",\n            Duration = 1,\n            Frequency = \"monthly\",\n            HourOfDay = 22,\n            WeekOfMonth = 2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresql(ctx, \"foobar\", \u0026linode.DatabasePostgresqlArgs{\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t\tClusterSize:           pulumi.Int(3),\n\t\t\tEncrypted:             pulumi.Bool(true),\n\t\t\tEngineId:              pulumi.String(\"postgresql/13.2\"),\n\t\t\tLabel:                 pulumi.String(\"mydatabase\"),\n\t\t\tRegion:                pulumi.String(\"us-southeast\"),\n\t\t\tReplicationCommitType: pulumi.String(\"remote_write\"),\n\t\t\tReplicationType:       pulumi.String(\"semi_synch\"),\n\t\t\tSslConnection:         pulumi.Bool(true),\n\t\t\tType:                  pulumi.String(\"g6-nanode-1\"),\n\t\t\tUpdates: \u0026linode.DatabasePostgresqlUpdatesArgs{\n\t\t\t\tDayOfWeek:   pulumi.String(\"saturday\"),\n\t\t\t\tDuration:    pulumi.Int(1),\n\t\t\t\tFrequency:   pulumi.String(\"monthly\"),\n\t\t\t\tHourOfDay:   pulumi.Int(22),\n\t\t\t\tWeekOfMonth: pulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresql;\nimport com.pulumi.linode.DatabasePostgresqlArgs;\nimport com.pulumi.linode.inputs.DatabasePostgresqlUpdatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresql(\"foobar\", DatabasePostgresqlArgs.builder()        \n            .allowLists(\"0.0.0.0/0\")\n            .clusterSize(3)\n            .encrypted(true)\n            .engineId(\"postgresql/13.2\")\n            .label(\"mydatabase\")\n            .region(\"us-southeast\")\n            .replicationCommitType(\"remote_write\")\n            .replicationType(\"semi_synch\")\n            .sslConnection(true)\n            .type(\"g6-nanode-1\")\n            .updates(DatabasePostgresqlUpdatesArgs.builder()\n                .dayOfWeek(\"saturday\")\n                .duration(1)\n                .frequency(\"monthly\")\n                .hourOfDay(22)\n                .weekOfMonth(2)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresql\n    properties:\n      allowLists:\n        - 0.0.0.0/0\n      clusterSize: 3\n      encrypted: true\n      engineId: postgresql/13.2\n      label: mydatabase\n      region: us-southeast\n      replicationCommitType: remote_write\n      replicationType: semi_synch\n      sslConnection: true\n      type: g6-nanode-1\n      updates:\n        dayOfWeek: saturday\n        duration: 1\n        frequency: monthly\n        hourOfDay: 22\n        weekOfMonth: 2\n```\n{{% /example %}}\n{{% /examples %}}\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n\n\n## Import\n\nLinode PostgreSQL Databases can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import linode:index/databasePostgresql:DatabasePostgresql foobar 1234567\n```\n\n ",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The access port for this Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicationCommitType": {
                    "type": "string",
                    "description": "The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`; default `off`)\n"
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "created",
                "engine",
                "engineId",
                "hostPrimary",
                "hostSecondary",
                "label",
                "port",
                "region",
                "rootPassword",
                "rootUsername",
                "status",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                    "willReplaceOnChanges": true
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "replicationCommitType": {
                    "type": "string",
                    "description": "The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`; default `off`)\n",
                    "willReplaceOnChanges": true
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n",
                    "willReplaceOnChanges": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                    "willReplaceOnChanges": true
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabasePostgresql resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n",
                        "willReplaceOnChanges": true
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The access port for this Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationCommitType": {
                        "type": "string",
                        "description": "The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`; default `off`)\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationType": {
                        "type": "string",
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n",
                        "willReplaceOnChanges": true
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/domain:Domain": {
            "description": "Provides a Linode Domain resource.  This can be used to create, modify, and delete Linode Domains through Linode's managed DNS service.\nFor more information, see [DNS Manager](https://www.linode.com/docs/platform/manager/dns-manager/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createDomain).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure a Domain Record attached to a Linode Domain.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobarDomain = new linode.Domain(\"foobarDomain\", {\n    type: \"master\",\n    domain: \"foobar.example\",\n    soaEmail: \"example@foobar.example\",\n    tags: [\n        \"foo\",\n        \"bar\",\n    ],\n});\nconst foobarDomainRecord = new linode.DomainRecord(\"foobarDomainRecord\", {\n    domainId: foobarDomain.id,\n    name: \"www\",\n    recordType: \"CNAME\",\n    target: \"foobar.example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar_domain = linode.Domain(\"foobarDomain\",\n    type=\"master\",\n    domain=\"foobar.example\",\n    soa_email=\"example@foobar.example\",\n    tags=[\n        \"foo\",\n        \"bar\",\n    ])\nfoobar_domain_record = linode.DomainRecord(\"foobarDomainRecord\",\n    domain_id=foobar_domain.id,\n    name=\"www\",\n    record_type=\"CNAME\",\n    target=\"foobar.example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobarDomain = new Linode.Domain(\"foobarDomain\", new()\n    {\n        Type = \"master\",\n        DomainName = \"foobar.example\",\n        SoaEmail = \"example@foobar.example\",\n        Tags = new[]\n        {\n            \"foo\",\n            \"bar\",\n        },\n    });\n\n    var foobarDomainRecord = new Linode.DomainRecord(\"foobarDomainRecord\", new()\n    {\n        DomainId = foobarDomain.Id,\n        Name = \"www\",\n        RecordType = \"CNAME\",\n        Target = \"foobar.example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarDomain, err := linode.NewDomain(ctx, \"foobarDomain\", \u0026linode.DomainArgs{\n\t\t\tType:     pulumi.String(\"master\"),\n\t\t\tDomain:   pulumi.String(\"foobar.example\"),\n\t\t\tSoaEmail: pulumi.String(\"example@foobar.example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDomainRecord(ctx, \"foobarDomainRecord\", \u0026linode.DomainRecordArgs{\n\t\t\tDomainId:   foobarDomain.ID(),\n\t\t\tName:       pulumi.String(\"www\"),\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tTarget:     pulumi.String(\"foobar.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Domain;\nimport com.pulumi.linode.DomainArgs;\nimport com.pulumi.linode.DomainRecord;\nimport com.pulumi.linode.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobarDomain = new Domain(\"foobarDomain\", DomainArgs.builder()        \n            .type(\"master\")\n            .domain(\"foobar.example\")\n            .soaEmail(\"example@foobar.example\")\n            .tags(            \n                \"foo\",\n                \"bar\")\n            .build());\n\n        var foobarDomainRecord = new DomainRecord(\"foobarDomainRecord\", DomainRecordArgs.builder()        \n            .domainId(foobarDomain.id())\n            .name(\"www\")\n            .recordType(\"CNAME\")\n            .target(\"foobar.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobarDomain:\n    type: linode:Domain\n    properties:\n      type: master\n      domain: foobar.example\n      soaEmail: example@foobar.example\n      tags:\n        - foo\n        - bar\n  foobarDomainRecord:\n    type: linode:DomainRecord\n    properties:\n      domainId: ${foobarDomain.id}\n      name: www\n      recordType: CNAME\n      target: foobar.example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes Domains can be imported using the Linode Domain `id`, e.g.\n\n```sh\n $ pulumi import linode:index/domain:Domain foobar 1234567\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for Domains and other Linode resource types. ",
            "properties": {
                "axfrIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for this Domain. This is for display purposes only.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.\n",
                    "language": {
                        "csharp": {
                            "name": "DomainName"
                        }
                    }
                },
                "expireSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The group this Domain belongs to. This is for display purposes only.\n"
                },
                "masterIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses representing the master DNS for this Domain.\n"
                },
                "refreshSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "retrySec": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "soaEmail": {
                    "type": "string",
                    "description": "Start of Authority email address. This is required for master Domains.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Used to control whether this Domain is currently being rendered (defaults to \"active\").\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).\n"
                }
            },
            "required": [
                "domain",
                "status",
                "type"
            ],
            "inputProperties": {
                "axfrIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for this Domain. This is for display purposes only.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.\n",
                    "language": {
                        "csharp": {
                            "name": "DomainName"
                        }
                    }
                },
                "expireSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The group this Domain belongs to. This is for display purposes only.\n"
                },
                "masterIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses representing the master DNS for this Domain.\n"
                },
                "refreshSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "retrySec": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "soaEmail": {
                    "type": "string",
                    "description": "Start of Authority email address. This is required for master Domains.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Used to control whether this Domain is currently being rendered (defaults to \"active\").\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "axfrIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for this Domain. This is for display purposes only.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.\n",
                        "language": {
                            "csharp": {
                                "name": "DomainName"
                            }
                        }
                    },
                    "expireSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The group this Domain belongs to. This is for display purposes only.\n"
                    },
                    "masterIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses representing the master DNS for this Domain.\n"
                    },
                    "refreshSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "retrySec": {
                        "type": "integer",
                        "description": "The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "soaEmail": {
                        "type": "string",
                        "description": "Start of Authority email address. This is required for master Domains.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Used to control whether this Domain is currently being rendered (defaults to \"active\").\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                    },
                    "ttlSec": {
                        "type": "integer",
                        "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/domainRecord:DomainRecord": {
            "description": "Provides a Linode Domain Record resource.  This can be used to create, modify, and delete Linodes Domain Records.\nFor more information, see [DNS Manager](https://www.linode.com/docs/platform/manager/dns-manager/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createDomainRecord).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure a Domain Record attached to a Linode Domain.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobarDomain = new linode.Domain(\"foobarDomain\", {\n    type: \"master\",\n    domain: \"foobar.example\",\n    soaEmail: \"example@foobar.example\",\n});\nconst foobarDomainRecord = new linode.DomainRecord(\"foobarDomainRecord\", {\n    domainId: foobarDomain.id,\n    name: \"www\",\n    recordType: \"CNAME\",\n    target: \"foobar.example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar_domain = linode.Domain(\"foobarDomain\",\n    type=\"master\",\n    domain=\"foobar.example\",\n    soa_email=\"example@foobar.example\")\nfoobar_domain_record = linode.DomainRecord(\"foobarDomainRecord\",\n    domain_id=foobar_domain.id,\n    name=\"www\",\n    record_type=\"CNAME\",\n    target=\"foobar.example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobarDomain = new Linode.Domain(\"foobarDomain\", new()\n    {\n        Type = \"master\",\n        DomainName = \"foobar.example\",\n        SoaEmail = \"example@foobar.example\",\n    });\n\n    var foobarDomainRecord = new Linode.DomainRecord(\"foobarDomainRecord\", new()\n    {\n        DomainId = foobarDomain.Id,\n        Name = \"www\",\n        RecordType = \"CNAME\",\n        Target = \"foobar.example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarDomain, err := linode.NewDomain(ctx, \"foobarDomain\", \u0026linode.DomainArgs{\n\t\t\tType:     pulumi.String(\"master\"),\n\t\t\tDomain:   pulumi.String(\"foobar.example\"),\n\t\t\tSoaEmail: pulumi.String(\"example@foobar.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDomainRecord(ctx, \"foobarDomainRecord\", \u0026linode.DomainRecordArgs{\n\t\t\tDomainId:   foobarDomain.ID(),\n\t\t\tName:       pulumi.String(\"www\"),\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tTarget:     pulumi.String(\"foobar.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Domain;\nimport com.pulumi.linode.DomainArgs;\nimport com.pulumi.linode.DomainRecord;\nimport com.pulumi.linode.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobarDomain = new Domain(\"foobarDomain\", DomainArgs.builder()        \n            .type(\"master\")\n            .domain(\"foobar.example\")\n            .soaEmail(\"example@foobar.example\")\n            .build());\n\n        var foobarDomainRecord = new DomainRecord(\"foobarDomainRecord\", DomainRecordArgs.builder()        \n            .domainId(foobarDomain.id())\n            .name(\"www\")\n            .recordType(\"CNAME\")\n            .target(\"foobar.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobarDomain:\n    type: linode:Domain\n    properties:\n      type: master\n      domain: foobar.example\n      soaEmail: example@foobar.example\n  foobarDomainRecord:\n    type: linode:DomainRecord\n    properties:\n      domainId: ${foobarDomain.id}\n      name: www\n      recordType: CNAME\n      target: foobar.example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes Domain Records can be imported using the Linode Domain `id` followed by the Domain Record `id` separated by a comma, e.g.\n\n```sh\n $ pulumi import linode:index/domainRecord:DomainRecord www-foobar 1234567,7654321\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for Domain Records and other Linode resource types. ",
            "properties": {
                "domainId": {
                    "type": "integer",
                    "description": "The ID of the Domain to access.  *Changing `domain_id` forces the creation of a new Linode Domain Record.*.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this Record. Setting this is invalid for `SRV` records as it is generated by the API. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this Record points to.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host. Lower values are preferred.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. See all supported record types [here](https://www.linode.com/docs/api/domains/#domain-record-create__request-body-schema). *Changing `record_type` forces the creation of a new Linode Domain Record.*.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The service this Record identified. Only valid for SRV records.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag portion of a CAA record. It is invalid to set this on other record types.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative weight of this Record. Higher values are preferred.\n"
                }
            },
            "required": [
                "domainId",
                "name",
                "recordType",
                "target"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "integer",
                    "description": "The ID of the Domain to access.  *Changing `domain_id` forces the creation of a new Linode Domain Record.*.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of this Record. Setting this is invalid for `SRV` records as it is generated by the API. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this Record points to.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host. Lower values are preferred.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. See all supported record types [here](https://www.linode.com/docs/api/domains/#domain-record-create__request-body-schema). *Changing `record_type` forces the creation of a new Linode Domain Record.*.\n",
                    "willReplaceOnChanges": true
                },
                "service": {
                    "type": "string",
                    "description": "The service this Record identified. Only valid for SRV records.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag portion of a CAA record. It is invalid to set this on other record types.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative weight of this Record. Higher values are preferred.\n"
                }
            },
            "requiredInputs": [
                "domainId",
                "recordType",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The ID of the Domain to access.  *Changing `domain_id` forces the creation of a new Linode Domain Record.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this Record. Setting this is invalid for `SRV` records as it is generated by the API. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port this Record points to.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the target host. Lower values are preferred.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. See all supported record types [here](https://www.linode.com/docs/api/domains/#domain-record-create__request-body-schema). *Changing `record_type` forces the creation of a new Linode Domain Record.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "service": {
                        "type": "string",
                        "description": "The service this Record identified. Only valid for SRV records.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag portion of a CAA record. It is invalid to set this on other record types.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n"
                    },
                    "ttlSec": {
                        "type": "integer",
                        "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The relative weight of this Record. Higher values are preferred.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/firewall:Firewall": {
            "description": "Manages a Linode Firewall.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nAccept only inbound HTTP(s) requests and drop outbound HTTP(s) requests:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myInstance = new linode.Instance(\"myInstance\", {\n    label: \"my_instance\",\n    image: \"linode/ubuntu18.04\",\n    region: \"us-southeast\",\n    type: \"g6-standard-1\",\n    rootPass: \"bogusPassword$\",\n    swapSize: 256,\n});\nconst myFirewall = new linode.Firewall(\"myFirewall\", {\n    label: \"my_firewall\",\n    inbounds: [\n        {\n            label: \"allow-http\",\n            action: \"ACCEPT\",\n            protocol: \"TCP\",\n            ports: \"80\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n        {\n            label: \"allow-https\",\n            action: \"ACCEPT\",\n            protocol: \"TCP\",\n            ports: \"443\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n    ],\n    inboundPolicy: \"DROP\",\n    outbounds: [\n        {\n            label: \"reject-http\",\n            action: \"DROP\",\n            protocol: \"TCP\",\n            ports: \"80\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n        {\n            label: \"reject-https\",\n            action: \"DROP\",\n            protocol: \"TCP\",\n            ports: \"443\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n    ],\n    outboundPolicy: \"ACCEPT\",\n    linodes: [myInstance.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"myInstance\",\n    label=\"my_instance\",\n    image=\"linode/ubuntu18.04\",\n    region=\"us-southeast\",\n    type=\"g6-standard-1\",\n    root_pass=\"bogusPassword$\",\n    swap_size=256)\nmy_firewall = linode.Firewall(\"myFirewall\",\n    label=\"my_firewall\",\n    inbounds=[\n        linode.FirewallInboundArgs(\n            label=\"allow-http\",\n            action=\"ACCEPT\",\n            protocol=\"TCP\",\n            ports=\"80\",\n            ipv4s=[\"0.0.0.0/0\"],\n            ipv6s=[\"::/0\"],\n        ),\n        linode.FirewallInboundArgs(\n            label=\"allow-https\",\n            action=\"ACCEPT\",\n            protocol=\"TCP\",\n            ports=\"443\",\n            ipv4s=[\"0.0.0.0/0\"],\n            ipv6s=[\"::/0\"],\n        ),\n    ],\n    inbound_policy=\"DROP\",\n    outbounds=[\n        linode.FirewallOutboundArgs(\n            label=\"reject-http\",\n            action=\"DROP\",\n            protocol=\"TCP\",\n            ports=\"80\",\n            ipv4s=[\"0.0.0.0/0\"],\n            ipv6s=[\"::/0\"],\n        ),\n        linode.FirewallOutboundArgs(\n            label=\"reject-https\",\n            action=\"DROP\",\n            protocol=\"TCP\",\n            ports=\"443\",\n            ipv4s=[\"0.0.0.0/0\"],\n            ipv6s=[\"::/0\"],\n        ),\n    ],\n    outbound_policy=\"ACCEPT\",\n    linodes=[my_instance.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = new Linode.Instance(\"myInstance\", new()\n    {\n        Label = \"my_instance\",\n        Image = \"linode/ubuntu18.04\",\n        Region = \"us-southeast\",\n        Type = \"g6-standard-1\",\n        RootPass = \"bogusPassword$\",\n        SwapSize = 256,\n    });\n\n    var myFirewall = new Linode.Firewall(\"myFirewall\", new()\n    {\n        Label = \"my_firewall\",\n        Inbounds = new[]\n        {\n            new Linode.Inputs.FirewallInboundArgs\n            {\n                Label = \"allow-http\",\n                Action = \"ACCEPT\",\n                Protocol = \"TCP\",\n                Ports = \"80\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n            new Linode.Inputs.FirewallInboundArgs\n            {\n                Label = \"allow-https\",\n                Action = \"ACCEPT\",\n                Protocol = \"TCP\",\n                Ports = \"443\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n        },\n        InboundPolicy = \"DROP\",\n        Outbounds = new[]\n        {\n            new Linode.Inputs.FirewallOutboundArgs\n            {\n                Label = \"reject-http\",\n                Action = \"DROP\",\n                Protocol = \"TCP\",\n                Ports = \"80\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n            new Linode.Inputs.FirewallOutboundArgs\n            {\n                Label = \"reject-https\",\n                Action = \"DROP\",\n                Protocol = \"TCP\",\n                Ports = \"443\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n        },\n        OutboundPolicy = \"ACCEPT\",\n        Linodes = new[]\n        {\n            myInstance.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyInstance, err := linode.NewInstance(ctx, \"myInstance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:    pulumi.String(\"my_instance\"),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu18.04\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-standard-1\"),\n\t\t\tRootPass: pulumi.String(\"bogusPassword$\"),\n\t\t\tSwapSize: pulumi.Int(256),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewFirewall(ctx, \"myFirewall\", \u0026linode.FirewallArgs{\n\t\t\tLabel: pulumi.String(\"my_firewall\"),\n\t\t\tInbounds: linode.FirewallInboundArray{\n\t\t\t\t\u0026linode.FirewallInboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"allow-http\"),\n\t\t\t\t\tAction:   pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"80\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026linode.FirewallInboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"allow-https\"),\n\t\t\t\t\tAction:   pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"443\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tInboundPolicy: pulumi.String(\"DROP\"),\n\t\t\tOutbounds: linode.FirewallOutboundArray{\n\t\t\t\t\u0026linode.FirewallOutboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"reject-http\"),\n\t\t\t\t\tAction:   pulumi.String(\"DROP\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"80\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026linode.FirewallOutboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"reject-https\"),\n\t\t\t\t\tAction:   pulumi.String(\"DROP\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"443\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundPolicy: pulumi.String(\"ACCEPT\"),\n\t\t\tLinodes: pulumi.IntArray{\n\t\t\t\tmyInstance.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Firewall;\nimport com.pulumi.linode.FirewallArgs;\nimport com.pulumi.linode.inputs.FirewallInboundArgs;\nimport com.pulumi.linode.inputs.FirewallOutboundArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myInstance = new Instance(\"myInstance\", InstanceArgs.builder()        \n            .label(\"my_instance\")\n            .image(\"linode/ubuntu18.04\")\n            .region(\"us-southeast\")\n            .type(\"g6-standard-1\")\n            .rootPass(\"bogusPassword$\")\n            .swapSize(256)\n            .build());\n\n        var myFirewall = new Firewall(\"myFirewall\", FirewallArgs.builder()        \n            .label(\"my_firewall\")\n            .inbounds(            \n                FirewallInboundArgs.builder()\n                    .label(\"allow-http\")\n                    .action(\"ACCEPT\")\n                    .protocol(\"TCP\")\n                    .ports(\"80\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build(),\n                FirewallInboundArgs.builder()\n                    .label(\"allow-https\")\n                    .action(\"ACCEPT\")\n                    .protocol(\"TCP\")\n                    .ports(\"443\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build())\n            .inboundPolicy(\"DROP\")\n            .outbounds(            \n                FirewallOutboundArgs.builder()\n                    .label(\"reject-http\")\n                    .action(\"DROP\")\n                    .protocol(\"TCP\")\n                    .ports(\"80\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build(),\n                FirewallOutboundArgs.builder()\n                    .label(\"reject-https\")\n                    .action(\"DROP\")\n                    .protocol(\"TCP\")\n                    .ports(\"443\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build())\n            .outboundPolicy(\"ACCEPT\")\n            .linodes(myInstance.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirewall:\n    type: linode:Firewall\n    properties:\n      label: my_firewall\n      inbounds:\n        - label: allow-http\n          action: ACCEPT\n          protocol: TCP\n          ports: '80'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n        - label: allow-https\n          action: ACCEPT\n          protocol: TCP\n          ports: '443'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n      inboundPolicy: DROP\n      outbounds:\n        - label: reject-http\n          action: DROP\n          protocol: TCP\n          ports: '80'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n        - label: reject-https\n          action: DROP\n          protocol: TCP\n          ports: '443'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n      outboundPolicy: ACCEPT\n      linodes:\n        - ${myInstance.id}\n  myInstance:\n    type: linode:Instance\n    properties:\n      label: my_instance\n      image: linode/ubuntu18.04\n      region: us-southeast\n      type: g6-standard-1\n      rootPass: bogusPassword$\n      swapSize: 256\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFirewalls can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import linode:index/firewall:Firewall my_firewall 12345\n```\n\n ",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallDevice:FirewallDevice"
                    },
                    "description": "The devices associated with this firewall.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "If `true`, the Firewall's rules are not enforced (defaults to `false`).\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallInbound:FirewallInbound"
                    },
                    "description": "A firewall rule that specifies what inbound network traffic is allowed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of IDs of Linodes this Firewall should govern it's network traffic for.\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallOutbound:FirewallOutbound"
                    },
                    "description": "A firewall rule that specifies what outbound network traffic is allowed.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Firewall.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n"
                }
            },
            "required": [
                "devices",
                "inboundPolicy",
                "label",
                "linodes",
                "outboundPolicy",
                "status"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "If `true`, the Firewall's rules are not enforced (defaults to `false`).\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallInbound:FirewallInbound"
                    },
                    "description": "A firewall rule that specifies what inbound network traffic is allowed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of IDs of Linodes this Firewall should govern it's network traffic for.\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallOutbound:FirewallOutbound"
                    },
                    "description": "A firewall rule that specifies what outbound network traffic is allowed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n"
                }
            },
            "requiredInputs": [
                "inboundPolicy",
                "label",
                "outboundPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/FirewallDevice:FirewallDevice"
                        },
                        "description": "The devices associated with this firewall.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "If `true`, the Firewall's rules are not enforced (defaults to `false`).\n"
                    },
                    "inboundPolicy": {
                        "type": "string",
                        "description": "The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)\n"
                    },
                    "inbounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/FirewallInbound:FirewallInbound"
                        },
                        "description": "A firewall rule that specifies what inbound network traffic is allowed.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "This Firewall's unique label.\n"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of IDs of Linodes this Firewall should govern it's network traffic for.\n"
                    },
                    "outboundPolicy": {
                        "type": "string",
                        "description": "The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)\n"
                    },
                    "outbounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/FirewallOutbound:FirewallOutbound"
                        },
                        "description": "A firewall rule that specifies what outbound network traffic is allowed.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Firewall.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/firewallDevice:FirewallDevice": {
            "description": "Manages a Linode Firewall Device.\n\n**NOTICE:** Attaching a Linode Firewall Device to a `linode.Firewall` resource with user-defined `linodes` may cause device conflicts.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myFirewall = new linode.Firewall(\"myFirewall\", {\n    label: \"my_firewall\",\n    inbounds: [{\n        label: \"http\",\n        action: \"ACCEPT\",\n        protocol: \"TCP\",\n        ports: \"80\",\n        ipv4s: [\"0.0.0.0/0\"],\n        ipv6s: [\"::/0\"],\n    }],\n    inboundPolicy: \"DROP\",\n    outboundPolicy: \"ACCEPT\",\n});\nconst myInstance = new linode.Instance(\"myInstance\", {\n    label: \"my_instance\",\n    region: \"us-southeast\",\n    type: \"g6-standard-1\",\n});\nconst myDevice = new linode.FirewallDevice(\"myDevice\", {\n    firewallId: myFirewall.id,\n    entityId: myInstance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_firewall = linode.Firewall(\"myFirewall\",\n    label=\"my_firewall\",\n    inbounds=[linode.FirewallInboundArgs(\n        label=\"http\",\n        action=\"ACCEPT\",\n        protocol=\"TCP\",\n        ports=\"80\",\n        ipv4s=[\"0.0.0.0/0\"],\n        ipv6s=[\"::/0\"],\n    )],\n    inbound_policy=\"DROP\",\n    outbound_policy=\"ACCEPT\")\nmy_instance = linode.Instance(\"myInstance\",\n    label=\"my_instance\",\n    region=\"us-southeast\",\n    type=\"g6-standard-1\")\nmy_device = linode.FirewallDevice(\"myDevice\",\n    firewall_id=my_firewall.id,\n    entity_id=my_instance.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirewall = new Linode.Firewall(\"myFirewall\", new()\n    {\n        Label = \"my_firewall\",\n        Inbounds = new[]\n        {\n            new Linode.Inputs.FirewallInboundArgs\n            {\n                Label = \"http\",\n                Action = \"ACCEPT\",\n                Protocol = \"TCP\",\n                Ports = \"80\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n        },\n        InboundPolicy = \"DROP\",\n        OutboundPolicy = \"ACCEPT\",\n    });\n\n    var myInstance = new Linode.Instance(\"myInstance\", new()\n    {\n        Label = \"my_instance\",\n        Region = \"us-southeast\",\n        Type = \"g6-standard-1\",\n    });\n\n    var myDevice = new Linode.FirewallDevice(\"myDevice\", new()\n    {\n        FirewallId = myFirewall.Id,\n        EntityId = myInstance.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFirewall, err := linode.NewFirewall(ctx, \"myFirewall\", \u0026linode.FirewallArgs{\n\t\t\tLabel: pulumi.String(\"my_firewall\"),\n\t\t\tInbounds: linode.FirewallInboundArray{\n\t\t\t\t\u0026linode.FirewallInboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"http\"),\n\t\t\t\t\tAction:   pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"80\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tInboundPolicy:  pulumi.String(\"DROP\"),\n\t\t\tOutboundPolicy: pulumi.String(\"ACCEPT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyInstance, err := linode.NewInstance(ctx, \"myInstance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my_instance\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewFirewallDevice(ctx, \"myDevice\", \u0026linode.FirewallDeviceArgs{\n\t\t\tFirewallId: myFirewall.ID(),\n\t\t\tEntityId:   myInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Firewall;\nimport com.pulumi.linode.FirewallArgs;\nimport com.pulumi.linode.inputs.FirewallInboundArgs;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.FirewallDevice;\nimport com.pulumi.linode.FirewallDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirewall = new Firewall(\"myFirewall\", FirewallArgs.builder()        \n            .label(\"my_firewall\")\n            .inbounds(FirewallInboundArgs.builder()\n                .label(\"http\")\n                .action(\"ACCEPT\")\n                .protocol(\"TCP\")\n                .ports(\"80\")\n                .ipv4s(\"0.0.0.0/0\")\n                .ipv6s(\"::/0\")\n                .build())\n            .inboundPolicy(\"DROP\")\n            .outboundPolicy(\"ACCEPT\")\n            .build());\n\n        var myInstance = new Instance(\"myInstance\", InstanceArgs.builder()        \n            .label(\"my_instance\")\n            .region(\"us-southeast\")\n            .type(\"g6-standard-1\")\n            .build());\n\n        var myDevice = new FirewallDevice(\"myDevice\", FirewallDeviceArgs.builder()        \n            .firewallId(myFirewall.id())\n            .entityId(myInstance.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDevice:\n    type: linode:FirewallDevice\n    properties:\n      firewallId: ${myFirewall.id}\n      entityId: ${myInstance.id}\n  myFirewall:\n    type: linode:Firewall\n    properties:\n      label: my_firewall\n      inbounds:\n        - label: http\n          action: ACCEPT\n          protocol: TCP\n          ports: '80'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n      inboundPolicy: DROP\n      outboundPolicy: ACCEPT\n  myInstance:\n    type: linode:Instance\n    properties:\n      label: my_instance\n      region: us-southeast\n      type: g6-standard-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When the Firewall Device was last created.\n"
                },
                "entityId": {
                    "type": "integer",
                    "description": "The unique ID of the entity to attach.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of the entity to attach. (default: `linode`)\n"
                },
                "firewallId": {
                    "type": "integer",
                    "description": "The unique ID of the target Firewall.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When the Firewall Device was last updated.\n"
                }
            },
            "required": [
                "created",
                "entityId",
                "firewallId",
                "updated"
            ],
            "inputProperties": {
                "entityId": {
                    "type": "integer",
                    "description": "The unique ID of the entity to attach.\n",
                    "willReplaceOnChanges": true
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of the entity to attach. (default: `linode`)\n",
                    "willReplaceOnChanges": true
                },
                "firewallId": {
                    "type": "integer",
                    "description": "The unique ID of the target Firewall.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "entityId",
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallDevice resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When the Firewall Device was last created.\n"
                    },
                    "entityId": {
                        "type": "integer",
                        "description": "The unique ID of the entity to attach.\n",
                        "willReplaceOnChanges": true
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The type of the entity to attach. (default: `linode`)\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallId": {
                        "type": "integer",
                        "description": "The unique ID of the target Firewall.\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "When the Firewall Device was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/image:Image": {
            "description": "Provides a Linode Image resource.  This can be used to create, modify, and delete Linodes Images.  Linode Images are snapshots of a Linode Instance Disk which can then be used to provision more Linode Instances.  Images can be used across regions.\n\nFor more information, see [Linode's documentation on Images](https://www.linode.com/docs/platform/disk-images/linode-images/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createImage).\n\n\n## Import\n\nLinodes Images can be imported using the Linode Image `id`, e.g.\n\n```sh\n $ pulumi import linode:index/image:Image myimage 1234567\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this Image was created.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The name of the User who created this Image.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether or not this Image is deprecated. Will only be True for deprecated public Images.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A detailed description of this Image.\n"
                },
                "diskId": {
                    "type": "integer",
                    "description": "The ID of the Linode Disk that this Image will be created from.\n"
                },
                "expiry": {
                    "type": "string",
                    "description": "Only Images created automatically (from a deleted Linode; type=automatic) will expire.\n"
                },
                "fileHash": {
                    "type": "string",
                    "description": "The MD5 hash of the file to be uploaded. This is used to trigger file updates.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The path of the image file to be uploaded.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "True if the Image is public.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A short description of the Image. Labels cannot contain special characters.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode that this Image will be created from.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the image. See all regions [here](https://api.linode.com/v4/regions).\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The minimum size this Image needs to deploy. Size is in MB.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of this Image.\n"
                },
                "type": {
                    "type": "string",
                    "description": "How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The upstream distribution vendor. Nil for private Images.\n"
                }
            },
            "required": [
                "created",
                "createdBy",
                "deprecated",
                "expiry",
                "fileHash",
                "isPublic",
                "label",
                "size",
                "status",
                "type",
                "vendor"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A detailed description of this Image.\n"
                },
                "diskId": {
                    "type": "integer",
                    "description": "The ID of the Linode Disk that this Image will be created from.\n",
                    "willReplaceOnChanges": true
                },
                "fileHash": {
                    "type": "string",
                    "description": "The MD5 hash of the file to be uploaded. This is used to trigger file updates.\n",
                    "willReplaceOnChanges": true
                },
                "filePath": {
                    "type": "string",
                    "description": "The path of the image file to be uploaded.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A short description of the Image. Labels cannot contain special characters.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode that this Image will be created from.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "The region of the image. See all regions [here](https://api.linode.com/v4/regions).\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When this Image was created.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The name of the User who created this Image.\n"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether or not this Image is deprecated. Will only be True for deprecated public Images.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A detailed description of this Image.\n"
                    },
                    "diskId": {
                        "type": "integer",
                        "description": "The ID of the Linode Disk that this Image will be created from.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiry": {
                        "type": "string",
                        "description": "Only Images created automatically (from a deleted Linode; type=automatic) will expire.\n"
                    },
                    "fileHash": {
                        "type": "string",
                        "description": "The MD5 hash of the file to be uploaded. This is used to trigger file updates.\n",
                        "willReplaceOnChanges": true
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The path of the image file to be uploaded.\n",
                        "willReplaceOnChanges": true
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "True if the Image is public.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A short description of the Image. Labels cannot contain special characters.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode that this Image will be created from.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the image. See all regions [here](https://api.linode.com/v4/regions).\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The minimum size this Image needs to deploy. Size is in MB.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of this Image.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The upstream distribution vendor. Nil for private Images.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instance:Instance": {
            "description": "Provides a Linode Instance resource.  This can be used to create, modify, and delete Linodes.\nFor more information, see [Getting Started with Linode](https://linode.com/docs/getting-started/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createLinodeInstance).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Simple Linode Instance\n\nThe following example shows how one might use this resource to configure a Linode instance.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst web = new linode.Instance(\"web\", {\n    authorizedKeys: [\"ssh-rsa AAAA...Gw== user@example.local\"],\n    group: \"foo\",\n    image: \"linode/ubuntu18.04\",\n    label: \"simple_instance\",\n    privateIp: true,\n    region: \"us-central\",\n    rootPass: \"terr4form-test\",\n    swapSize: 256,\n    tags: [\"foo\"],\n    type: \"g6-standard-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nweb = linode.Instance(\"web\",\n    authorized_keys=[\"ssh-rsa AAAA...Gw== user@example.local\"],\n    group=\"foo\",\n    image=\"linode/ubuntu18.04\",\n    label=\"simple_instance\",\n    private_ip=True,\n    region=\"us-central\",\n    root_pass=\"terr4form-test\",\n    swap_size=256,\n    tags=[\"foo\"],\n    type=\"g6-standard-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web = new Linode.Instance(\"web\", new()\n    {\n        AuthorizedKeys = new[]\n        {\n            \"ssh-rsa AAAA...Gw== user@example.local\",\n        },\n        Group = \"foo\",\n        Image = \"linode/ubuntu18.04\",\n        Label = \"simple_instance\",\n        PrivateIp = true,\n        Region = \"us-central\",\n        RootPass = \"terr4form-test\",\n        SwapSize = 256,\n        Tags = new[]\n        {\n            \"foo\",\n        },\n        Type = \"g6-standard-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"web\", \u0026linode.InstanceArgs{\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh-rsa AAAA...Gw== user@example.local\"),\n\t\t\t},\n\t\t\tGroup:     pulumi.String(\"foo\"),\n\t\t\tImage:     pulumi.String(\"linode/ubuntu18.04\"),\n\t\t\tLabel:     pulumi.String(\"simple_instance\"),\n\t\t\tPrivateIp: pulumi.Bool(true),\n\t\t\tRegion:    pulumi.String(\"us-central\"),\n\t\t\tRootPass:  pulumi.String(\"terr4form-test\"),\n\t\t\tSwapSize:  pulumi.Int(256),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"g6-standard-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web = new Instance(\"web\", InstanceArgs.builder()        \n            .authorizedKeys(\"ssh-rsa AAAA...Gw== user@example.local\")\n            .group(\"foo\")\n            .image(\"linode/ubuntu18.04\")\n            .label(\"simple_instance\")\n            .privateIp(true)\n            .region(\"us-central\")\n            .rootPass(\"terr4form-test\")\n            .swapSize(256)\n            .tags(\"foo\")\n            .type(\"g6-standard-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web:\n    type: linode:Instance\n    properties:\n      authorizedKeys:\n        - ssh-rsa AAAA...Gw== user@example.local\n      group: foo\n      image: linode/ubuntu18.04\n      label: simple_instance\n      privateIp: true\n      region: us-central\n      rootPass: terr4form-test\n      swapSize: 256\n      tags:\n        - foo\n      type: g6-standard-1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes Instances can be imported using the Linode `id`, e.g.\n\n```sh\n $ pulumi import linode:index/instance:Instance mylinode 1234567\n```\n\n When importing an instance, all `disk` and `config` values must be represented. Imported disks must include their `label` value.\n\n**Any disk that is not precisely represented may be removed resulting in data loss.** Imported configs should include all `devices`, and must include `label`, `kernel`, and the `root_device`.\n\nThe instance must include a `boot_config_label` referring to the correct configuration profile. The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for Instances and other Linode resource types. ",
            "properties": {
                "alerts": {
                    "$ref": "#/types/linode:index/InstanceAlerts:InstanceAlerts",
                    "description": "Configuration options for alert triggers on this Linode.\n"
                },
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*\n"
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*\n"
                },
                "backupId": {
                    "type": "integer",
                    "description": "A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*\n"
                },
                "backups": {
                    "$ref": "#/types/linode:index/InstanceBackups:InstanceBackups",
                    "description": "Information about this Linode's backups status.\n"
                },
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.\n"
                },
                "bootConfigLabel": {
                    "type": "string",
                    "description": "The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*\n"
                },
                "booted": {
                    "type": "boolean",
                    "description": "If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode's power status will not be managed by the Provider.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfig:InstanceConfig"
                    },
                    "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceDisk:InstanceDisk"
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The display group of the Linode instance.\n"
                },
                "hostUuid": {
                    "type": "string",
                    "description": "The Linodeâ€™s host machine, as a UUID.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceInterface:InstanceInterface"
                    },
                    "description": "An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces\nmust be declared in the config block.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "A string containing the Linode's public IP address.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "privateIp": {
                    "type": "boolean",
                    "description": "If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region. It can be enabled on an existing Linode but it can't be disabled.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.\n"
                },
                "resizeDisk": {
                    "type": "boolean",
                    "description": "If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in the state.*\n",
                    "secret": true
                },
                "sharedIpv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.\n"
                },
                "specs": {
                    "$ref": "#/types/linode:index/InstanceSpecs:InstanceSpecs",
                    "description": "Information about the resources available to this Linode.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*\n",
                    "secret": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)\n"
                },
                "swapSize": {
                    "type": "integer",
                    "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n"
                },
                "watchdogEnabled": {
                    "type": "boolean",
                    "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                }
            },
            "required": [
                "alerts",
                "backups",
                "backupsEnabled",
                "bootConfigLabel",
                "booted",
                "configs",
                "disks",
                "hostUuid",
                "ipAddress",
                "ipv4s",
                "ipv6",
                "label",
                "privateIpAddress",
                "region",
                "sharedIpv4s",
                "specs",
                "status",
                "swapSize"
            ],
            "inputProperties": {
                "alerts": {
                    "$ref": "#/types/linode:index/InstanceAlerts:InstanceAlerts",
                    "description": "Configuration options for alert triggers on this Linode.\n"
                },
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "backupId": {
                    "type": "integer",
                    "description": "A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.\n"
                },
                "bootConfigLabel": {
                    "type": "string",
                    "description": "The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*\n"
                },
                "booted": {
                    "type": "boolean",
                    "description": "If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode's power status will not be managed by the Provider.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfig:InstanceConfig"
                    },
                    "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceDisk:InstanceDisk"
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The display group of the Linode instance.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceInterface:InstanceInterface"
                    },
                    "description": "An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces\nmust be declared in the config block.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "privateIp": {
                    "type": "boolean",
                    "description": "If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region. It can be enabled on an existing Linode but it can't be disabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.\n",
                    "willReplaceOnChanges": true
                },
                "resizeDisk": {
                    "type": "boolean",
                    "description": "If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in the state.*\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "sharedIpv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "swapSize": {
                    "type": "integer",
                    "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n"
                },
                "watchdogEnabled": {
                    "type": "boolean",
                    "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "alerts": {
                        "$ref": "#/types/linode:index/InstanceAlerts:InstanceAlerts",
                        "description": "Configuration options for alert triggers on this Linode.\n"
                    },
                    "authorizedKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. *This value can not be imported.* *Changing `authorized_keys` forces the creation of a new Linode Instance.*\n",
                        "willReplaceOnChanges": true
                    },
                    "authorizedUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. *This value can not be imported.* *Changing `authorized_users` forces the creation of a new Linode Instance.*\n",
                        "willReplaceOnChanges": true
                    },
                    "backupId": {
                        "type": "integer",
                        "description": "A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup must have a status of successful, and the Linode must be deployed to the same region as the Backup. See /linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually exclusive. *This value can not be imported.* *Changing `backup_id` forces the creation of a new Linode Instance.*\n",
                        "willReplaceOnChanges": true
                    },
                    "backups": {
                        "$ref": "#/types/linode:index/InstanceBackups:InstanceBackups",
                        "description": "Information about this Linode's backups status.\n"
                    },
                    "backupsEnabled": {
                        "type": "boolean",
                        "description": "If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.\n"
                    },
                    "bootConfigLabel": {
                        "type": "string",
                        "description": "The Label of the Instance Config that should be used to boot the Linode instance.  If there is only one `config`, the `label` of that `config` will be used as the `boot_config_label`. *This value can not be imported.*\n"
                    },
                    "booted": {
                        "type": "boolean",
                        "description": "If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode's power status will not be managed by the Provider.\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceConfig:InstanceConfig"
                        },
                        "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceDisk:InstanceDisk"
                        }
                    },
                    "group": {
                        "type": "string",
                        "description": "The display group of the Linode instance.\n"
                    },
                    "hostUuid": {
                        "type": "string",
                        "description": "The Linodeâ€™s host machine, as a UUID.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian9`, `linode/fedora28`, `linode/ubuntu16.04lts`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://developers.linode.com/api/v4/images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*\n",
                        "willReplaceOnChanges": true
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceInterface:InstanceInterface"
                        },
                        "description": "An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces\nmust be declared in the config block.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "A string containing the Linode's public IP address.\n"
                    },
                    "ipv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                    },
                    "privateIp": {
                        "type": "boolean",
                        "description": "If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region. It can be enabled on an existing Linode but it can't be disabled.\n"
                    },
                    "privateIpAddress": {
                        "type": "string",
                        "description": "This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` forces the creation of a new Linode Instance.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "resizeDisk": {
                        "type": "boolean",
                        "description": "If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*\n"
                    },
                    "rootPass": {
                        "type": "string",
                        "description": "The initial password for the `root` user account. *This value can not be imported.* *Changing `root_pass` forces the creation of a new Linode Instance.* *If omitted, a random password will be generated but will not be stored in the state.*\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "sharedIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.\n"
                    },
                    "specs": {
                        "$ref": "#/types/linode:index/InstanceSpecs:InstanceSpecs",
                        "description": "Information about the resources available to this Linode.\n"
                    },
                    "stackscriptData": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.  *This value can not be imported.* *Changing `stackscript_data` forces the creation of a new Linode Instance.*\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "stackscriptId": {
                        "type": "integer",
                        "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript. *This value can not be imported.* *Changing `stackscript_id` forces the creation of a new Linode Instance.*\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)\n"
                    },
                    "swapSize": {
                        "type": "integer",
                        "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n"
                    },
                    "watchdogEnabled": {
                        "type": "boolean",
                        "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceDisk:InstanceDisk": {
            "description": "Provides a Linode Instance Disk resource. This can be used to create, modify, and delete Linode Instance Disks.\n\n**NOTE:** Deleting a disk will shut down the attached instance if the instance is booted. If the disk was not in use by the booted configuration profile, the instance will be automatically rebooted.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreating a simple 512 MB Linode Instance Disk:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"my-instance\",\n    type: \"g6-standard-1\",\n    region: \"us-southeast\",\n});\nconst boot = new linode.InstanceDisk(\"boot\", {\n    label: \"boot\",\n    linodeId: my_instance.id,\n    size: 512,\n    filesystem: \"ext4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"my-instance\",\n    type=\"g6-standard-1\",\n    region=\"us-southeast\")\nboot = linode.InstanceDisk(\"boot\",\n    label=\"boot\",\n    linode_id=my_instance.id,\n    size=512,\n    filesystem=\"ext4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"my-instance\",\n        Type = \"g6-standard-1\",\n        Region = \"us-southeast\",\n    });\n\n    var boot = new Linode.InstanceDisk(\"boot\", new()\n    {\n        Label = \"boot\",\n        LinodeId = my_instance.Id,\n        Size = 512,\n        Filesystem = \"ext4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-instance\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstanceDisk(ctx, \"boot\", \u0026linode.InstanceDiskArgs{\n\t\t\tLabel:      pulumi.String(\"boot\"),\n\t\t\tLinodeId:   my_instance.ID(),\n\t\t\tSize:       pulumi.Int(512),\n\t\t\tFilesystem: pulumi.String(\"ext4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceDisk;\nimport com.pulumi.linode.InstanceDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()        \n            .label(\"my-instance\")\n            .type(\"g6-standard-1\")\n            .region(\"us-southeast\")\n            .build());\n\n        var boot = new InstanceDisk(\"boot\", InstanceDiskArgs.builder()        \n            .label(\"boot\")\n            .linodeId(my_instance.id())\n            .size(512)\n            .filesystem(\"ext4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  boot:\n    type: linode:InstanceDisk\n    properties:\n      label: boot\n      linodeId: ${[\"my-instance\"].id}\n      size: 512\n      filesystem: ext4\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: my-instance\n      type: g6-standard-1\n      region: us-southeast\n```\n\nCreating a complex bootable Instance Disk:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"my-instance\",\n    type: \"g6-standard-1\",\n    region: \"us-southeast\",\n});\nconst boot = new linode.InstanceDisk(\"boot\", {\n    label: \"boot\",\n    linodeId: my_instance.id,\n    size: my_instance.specs.apply(specs =\u003e specs.disk),\n    image: \"linode/ubuntu20.04\",\n    rootPass: \"myc00lpass!\",\n    authorizedKeys: [\"ssh-rsa AAAA...Gw== user@example.local\"],\n    stackscriptId: 12345,\n    stackscriptData: {\n        my_var: \"my_value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"my-instance\",\n    type=\"g6-standard-1\",\n    region=\"us-southeast\")\nboot = linode.InstanceDisk(\"boot\",\n    label=\"boot\",\n    linode_id=my_instance.id,\n    size=my_instance.specs.disk,\n    image=\"linode/ubuntu20.04\",\n    root_pass=\"myc00lpass!\",\n    authorized_keys=[\"ssh-rsa AAAA...Gw== user@example.local\"],\n    stackscript_id=12345,\n    stackscript_data={\n        \"my_var\": \"my_value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"my-instance\",\n        Type = \"g6-standard-1\",\n        Region = \"us-southeast\",\n    });\n\n    var boot = new Linode.InstanceDisk(\"boot\", new()\n    {\n        Label = \"boot\",\n        LinodeId = my_instance.Id,\n        Size = my_instance.Specs.Apply(specs =\u003e specs.Disk),\n        Image = \"linode/ubuntu20.04\",\n        RootPass = \"myc00lpass!\",\n        AuthorizedKeys = new[]\n        {\n            \"ssh-rsa AAAA...Gw== user@example.local\",\n        },\n        StackscriptId = 12345,\n        StackscriptData = \n        {\n            { \"my_var\", \"my_value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-instance\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstanceDisk(ctx, \"boot\", \u0026linode.InstanceDiskArgs{\n\t\t\tLabel:    pulumi.String(\"boot\"),\n\t\t\tLinodeId: my_instance.ID(),\n\t\t\tSize: my_instance.Specs.ApplyT(func(specs linode.InstanceSpecs) (*int, error) {\n\t\t\t\treturn \u0026specs.Disk, nil\n\t\t\t}).(pulumi.IntPtrOutput),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu20.04\"),\n\t\t\tRootPass: pulumi.String(\"myc00lpass!\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh-rsa AAAA...Gw== user@example.local\"),\n\t\t\t},\n\t\t\tStackscriptId: pulumi.Int(12345),\n\t\t\tStackscriptData: pulumi.AnyMap{\n\t\t\t\t\"my_var\": pulumi.Any(\"my_value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceDisk;\nimport com.pulumi.linode.InstanceDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()        \n            .label(\"my-instance\")\n            .type(\"g6-standard-1\")\n            .region(\"us-southeast\")\n            .build());\n\n        var boot = new InstanceDisk(\"boot\", InstanceDiskArgs.builder()        \n            .label(\"boot\")\n            .linodeId(my_instance.id())\n            .size(my_instance.specs().applyValue(specs -\u003e specs.disk()))\n            .image(\"linode/ubuntu20.04\")\n            .rootPass(\"myc00lpass!\")\n            .authorizedKeys(\"ssh-rsa AAAA...Gw== user@example.local\")\n            .stackscriptId(12345)\n            .stackscriptData(Map.of(\"my_var\", \"my_value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  boot:\n    type: linode:InstanceDisk\n    properties:\n      label: boot\n      linodeId: ${[\"my-instance\"].id}\n      size: ${[\"my-instance\"].specs.disk}\n      image: linode/ubuntu20.04\n      rootPass: myc00lpass!\n      authorizedKeys:\n        - ssh-rsa AAAA...Gw== user@example.local\n      # Optional StackScript to run on first boot\n      stackscriptId: 12345\n      stackscriptData:\n        my_var: my_value\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: my-instance\n      type: g6-standard-1\n      region: us-southeast\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInstance Disks can be imported using the `linode_id` followed by the Instance Disk `id` separated by a comma, e.g.\n\n```sh\n $ pulumi import linode:index/instanceDisk:InstanceDisk my-disk 1234567,7654321\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for various Linode resource types. ",
            "properties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of public SSH keys that will be automatically appended to the root userâ€™s ~/.ssh/authorized_keys file when deploying from an Image.\n"
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this disk was created.\n"
                },
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Linode Disk from.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Disk's label for display purposes only.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to create this Disk under.\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The root userâ€™s password on a newly-created Linode Disk when deploying from an Image.\n",
                    "secret": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.\n",
                    "secret": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "A brief description of this Disk's current state.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this disk was last updated.\n"
                }
            },
            "required": [
                "created",
                "filesystem",
                "label",
                "linodeId",
                "size",
                "status",
                "updated"
            ],
            "inputProperties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of public SSH keys that will be automatically appended to the root userâ€™s ~/.ssh/authorized_keys file when deploying from an Image.\n",
                    "willReplaceOnChanges": true
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the\n",
                    "willReplaceOnChanges": true
                },
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)\n",
                    "willReplaceOnChanges": true
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Linode Disk from.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The Disk's label for display purposes only.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to create this Disk under.\n",
                    "willReplaceOnChanges": true
                },
                "rootPass": {
                    "type": "string",
                    "description": "The root userâ€™s password on a newly-created Linode Disk when deploying from an Image.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "label",
                "linodeId",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceDisk resources.\n",
                "properties": {
                    "authorizedKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of public SSH keys that will be automatically appended to the root userâ€™s ~/.ssh/authorized_keys file when deploying from an Image.\n",
                        "willReplaceOnChanges": true
                    },
                    "authorizedUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "When this disk was created.\n"
                    },
                    "filesystem": {
                        "type": "string",
                        "description": "The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)\n",
                        "willReplaceOnChanges": true
                    },
                    "image": {
                        "type": "string",
                        "description": "An Image ID to deploy the Linode Disk from.\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The Disk's label for display purposes only.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to create this Disk under.\n",
                        "willReplaceOnChanges": true
                    },
                    "rootPass": {
                        "type": "string",
                        "description": "The root userâ€™s password on a newly-created Linode Disk when deploying from an Image.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.\n"
                    },
                    "stackscriptData": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "stackscriptId": {
                        "type": "integer",
                        "description": "A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "A brief description of this Disk's current state.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this disk was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceIp:InstanceIp": {
            "description": "\u003e **NOTICE:** You may need to contact support to increase your instance IP limit before you can allocate additional IPs.\n\n\u003e **NOTICE:** This resource will reboot the specified instance following IP allocation.\n\nManages a Linode instance IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst fooInstance = new linode.Instance(\"fooInstance\", {\n    image: \"linode/alpine3.16\",\n    label: \"foobar-test\",\n    type: \"g6-nanode-1\",\n    region: \"us-east\",\n});\nconst fooInstanceIp = new linode.InstanceIp(\"fooInstanceIp\", {\n    linodeId: fooInstance.id,\n    \"public\": true,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo_instance = linode.Instance(\"fooInstance\",\n    image=\"linode/alpine3.16\",\n    label=\"foobar-test\",\n    type=\"g6-nanode-1\",\n    region=\"us-east\")\nfoo_instance_ip = linode.InstanceIp(\"fooInstanceIp\",\n    linode_id=foo_instance.id,\n    public=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooInstance = new Linode.Instance(\"fooInstance\", new()\n    {\n        Image = \"linode/alpine3.16\",\n        Label = \"foobar-test\",\n        Type = \"g6-nanode-1\",\n        Region = \"us-east\",\n    });\n\n    var fooInstanceIp = new Linode.InstanceIp(\"fooInstanceIp\", new()\n    {\n        LinodeId = fooInstance.Id,\n        Public = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooInstance, err := linode.NewInstance(ctx, \"fooInstance\", \u0026linode.InstanceArgs{\n\t\t\tImage:  pulumi.String(\"linode/alpine3.16\"),\n\t\t\tLabel:  pulumi.String(\"foobar-test\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"us-east\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstanceIp(ctx, \"fooInstanceIp\", \u0026linode.InstanceIpArgs{\n\t\t\tLinodeId: fooInstance.ID(),\n\t\t\tPublic:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceIp;\nimport com.pulumi.linode.InstanceIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .image(\"linode/alpine3.16\")\n            .label(\"foobar-test\")\n            .type(\"g6-nanode-1\")\n            .region(\"us-east\")\n            .build());\n\n        var fooInstanceIp = new InstanceIp(\"fooInstanceIp\", InstanceIpArgs.builder()        \n            .linodeId(fooInstance.id())\n            .public_(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooInstance:\n    type: linode:Instance\n    properties:\n      image: linode/alpine3.16\n      label: foobar-test\n      type: g6-nanode-1\n      region: us-east\n  fooInstanceIp:\n    type: linode:InstanceIp\n    properties:\n      linodeId: ${fooInstance.id}\n      public: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The resulting IPv4 address.\n"
                },
                "applyImmediately": {
                    "type": "boolean",
                    "description": "If true, the instance will be rebooted to update network interfaces.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The number of bits set in the subnet mask.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address is public or private. Defaults to true.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region this IP resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The mask that separates host bits from network bits for this address.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of IP address. (`ipv4`, `ipv6`, `ipv6/pool`, `ipv6/range`)\n"
                }
            },
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "rdns",
                "region",
                "subnetMask",
                "type"
            ],
            "inputProperties": {
                "applyImmediately": {
                    "type": "boolean",
                    "description": "If true, the instance will be rebooted to update network interfaces.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to allocate an IPv4 address for.\n",
                    "willReplaceOnChanges": true
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address is public or private. Defaults to true.\n",
                    "willReplaceOnChanges": true
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                }
            },
            "requiredInputs": [
                "linodeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The resulting IPv4 address.\n"
                    },
                    "applyImmediately": {
                        "type": "boolean",
                        "description": "If true, the instance will be rebooted to update network interfaces.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The default gateway for this address\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to allocate an IPv4 address for.\n",
                        "willReplaceOnChanges": true
                    },
                    "prefix": {
                        "type": "integer",
                        "description": "The number of bits set in the subnet mask.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the IPv4 address is public or private. Defaults to true.\n",
                        "willReplaceOnChanges": true
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The reverse DNS assigned to this address.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region this IP resides in.\n"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "The mask that separates host bits from network bits for this address.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of IP address. (`ipv4`, `ipv6`, `ipv6/pool`, `ipv6/range`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceSharedIps:InstanceSharedIps": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of IPs to share with the Linode.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to share the IPs to.\n"
                }
            },
            "required": [
                "addresses",
                "linodeId"
            ],
            "inputProperties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of IPs to share with the Linode.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to share the IPs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "addresses",
                "linodeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSharedIps resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of IPs to share with the Linode.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to share the IPs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/ipv6Range:Ipv6Range": {
            "description": "Manages a Linode IPv6 range.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobarInstance = new linode.Instance(\"foobarInstance\", {\n    label: \"my-linode\",\n    image: \"linode/alpine3.14\",\n    type: \"g6-nanode-1\",\n    region: \"us-southeast\",\n});\nconst foobarIpv6Range = new linode.Ipv6Range(\"foobarIpv6Range\", {\n    linodeId: foobarInstance.id,\n    prefixLength: 64,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar_instance = linode.Instance(\"foobarInstance\",\n    label=\"my-linode\",\n    image=\"linode/alpine3.14\",\n    type=\"g6-nanode-1\",\n    region=\"us-southeast\")\nfoobar_ipv6_range = linode.Ipv6Range(\"foobarIpv6Range\",\n    linode_id=foobar_instance.id,\n    prefix_length=64)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobarInstance = new Linode.Instance(\"foobarInstance\", new()\n    {\n        Label = \"my-linode\",\n        Image = \"linode/alpine3.14\",\n        Type = \"g6-nanode-1\",\n        Region = \"us-southeast\",\n    });\n\n    var foobarIpv6Range = new Linode.Ipv6Range(\"foobarIpv6Range\", new()\n    {\n        LinodeId = foobarInstance.Id,\n        PrefixLength = 64,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarInstance, err := linode.NewInstance(ctx, \"foobarInstance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-linode\"),\n\t\t\tImage:  pulumi.String(\"linode/alpine3.14\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewIpv6Range(ctx, \"foobarIpv6Range\", \u0026linode.Ipv6RangeArgs{\n\t\t\tLinodeId:     foobarInstance.ID(),\n\t\t\tPrefixLength: pulumi.Int(64),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Ipv6Range;\nimport com.pulumi.linode.Ipv6RangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobarInstance = new Instance(\"foobarInstance\", InstanceArgs.builder()        \n            .label(\"my-linode\")\n            .image(\"linode/alpine3.14\")\n            .type(\"g6-nanode-1\")\n            .region(\"us-southeast\")\n            .build());\n\n        var foobarIpv6Range = new Ipv6Range(\"foobarIpv6Range\", Ipv6RangeArgs.builder()        \n            .linodeId(foobarInstance.id())\n            .prefixLength(64)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobarInstance:\n    type: linode:Instance\n    properties:\n      label: my-linode\n      image: linode/alpine3.14\n      type: g6-nanode-1\n      region: us-southeast\n  foobarIpv6Range:\n    type: linode:Ipv6Range\n    properties:\n      linodeId: ${foobarInstance.id}\n      prefixLength: 64\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "isBgp": {
                    "type": "boolean",
                    "description": "Whether this IPv6 range is shared.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the IPv6 range.\n"
                },
                "range": {
                    "type": "string",
                    "description": "The IPv6 range of addresses in this pool.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for this range of IPv6 addresses.\n"
                },
                "routeTarget": {
                    "type": "string",
                    "description": "The IPv6 SLAAC address to assign this range to.\n"
                }
            },
            "required": [
                "isBgp",
                "linodes",
                "prefixLength",
                "range",
                "region"
            ],
            "inputProperties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the IPv6 range.\n",
                    "willReplaceOnChanges": true
                },
                "routeTarget": {
                    "type": "string",
                    "description": "The IPv6 SLAAC address to assign this range to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "prefixLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ipv6Range resources.\n",
                "properties": {
                    "isBgp": {
                        "type": "boolean",
                        "description": "Whether this IPv6 range is shared.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.\n"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the IPv6 range.\n",
                        "willReplaceOnChanges": true
                    },
                    "range": {
                        "type": "string",
                        "description": "The IPv6 range of addresses in this pool.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for this range of IPv6 addresses.\n"
                    },
                    "routeTarget": {
                        "type": "string",
                        "description": "The IPv6 SLAAC address to assign this range to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/lkeCluster:LkeCluster": {
            "description": "Manages an LKE cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreating a basic LKE cluster:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_cluster = new linode.LkeCluster(\"my-cluster\", {\n    k8sVersion: \"1.21\",\n    label: \"my-cluster\",\n    pools: [{\n        count: 3,\n        type: \"g6-standard-2\",\n    }],\n    region: \"us-central\",\n    tags: [\"prod\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_cluster = linode.LkeCluster(\"my-cluster\",\n    k8s_version=\"1.21\",\n    label=\"my-cluster\",\n    pools=[linode.LkeClusterPoolArgs(\n        count=3,\n        type=\"g6-standard-2\",\n    )],\n    region=\"us-central\",\n    tags=[\"prod\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_cluster = new Linode.LkeCluster(\"my-cluster\", new()\n    {\n        K8sVersion = \"1.21\",\n        Label = \"my-cluster\",\n        Pools = new[]\n        {\n            new Linode.Inputs.LkeClusterPoolArgs\n            {\n                Count = 3,\n                Type = \"g6-standard-2\",\n            },\n        },\n        Region = \"us-central\",\n        Tags = new[]\n        {\n            \"prod\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewLkeCluster(ctx, \"my-cluster\", \u0026linode.LkeClusterArgs{\n\t\t\tK8sVersion: pulumi.String(\"1.21\"),\n\t\t\tLabel:      pulumi.String(\"my-cluster\"),\n\t\t\tPools: linode.LkeClusterPoolArray{\n\t\t\t\t\u0026linode.LkeClusterPoolArgs{\n\t\t\t\t\tCount: pulumi.Int(3),\n\t\t\t\t\tType:  pulumi.String(\"g6-standard-2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRegion: pulumi.String(\"us-central\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LkeCluster;\nimport com.pulumi.linode.LkeClusterArgs;\nimport com.pulumi.linode.inputs.LkeClusterPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_cluster = new LkeCluster(\"my-cluster\", LkeClusterArgs.builder()        \n            .k8sVersion(\"1.21\")\n            .label(\"my-cluster\")\n            .pools(LkeClusterPoolArgs.builder()\n                .count(3)\n                .type(\"g6-standard-2\")\n                .build())\n            .region(\"us-central\")\n            .tags(\"prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-cluster:\n    type: linode:LkeCluster\n    properties:\n      k8sVersion: '1.21'\n      label: my-cluster\n      pools:\n        - count: 3\n          type: g6-standard-2\n      region: us-central\n      tags:\n        - prod\n```\n\nCreating an LKE cluster with autoscaler:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_cluster = new linode.LkeCluster(\"my-cluster\", {\n    label: \"my-cluster\",\n    k8sVersion: \"1.21\",\n    region: \"us-central\",\n    tags: [\"prod\"],\n    pools: [{\n        type: \"g6-standard-2\",\n        count: 3,\n        autoscaler: {\n            min: 3,\n            max: 10,\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_cluster = linode.LkeCluster(\"my-cluster\",\n    label=\"my-cluster\",\n    k8s_version=\"1.21\",\n    region=\"us-central\",\n    tags=[\"prod\"],\n    pools=[linode.LkeClusterPoolArgs(\n        type=\"g6-standard-2\",\n        count=3,\n        autoscaler=linode.LkeClusterPoolAutoscalerArgs(\n            min=3,\n            max=10,\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_cluster = new Linode.LkeCluster(\"my-cluster\", new()\n    {\n        Label = \"my-cluster\",\n        K8sVersion = \"1.21\",\n        Region = \"us-central\",\n        Tags = new[]\n        {\n            \"prod\",\n        },\n        Pools = new[]\n        {\n            new Linode.Inputs.LkeClusterPoolArgs\n            {\n                Type = \"g6-standard-2\",\n                Count = 3,\n                Autoscaler = new Linode.Inputs.LkeClusterPoolAutoscalerArgs\n                {\n                    Min = 3,\n                    Max = 10,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewLkeCluster(ctx, \"my-cluster\", \u0026linode.LkeClusterArgs{\n\t\t\tLabel:      pulumi.String(\"my-cluster\"),\n\t\t\tK8sVersion: pulumi.String(\"1.21\"),\n\t\t\tRegion:     pulumi.String(\"us-central\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"prod\"),\n\t\t\t},\n\t\t\tPools: linode.LkeClusterPoolArray{\n\t\t\t\t\u0026linode.LkeClusterPoolArgs{\n\t\t\t\t\tType:  pulumi.String(\"g6-standard-2\"),\n\t\t\t\t\tCount: pulumi.Int(3),\n\t\t\t\t\tAutoscaler: \u0026linode.LkeClusterPoolAutoscalerArgs{\n\t\t\t\t\t\tMin: pulumi.Int(3),\n\t\t\t\t\t\tMax: pulumi.Int(10),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LkeCluster;\nimport com.pulumi.linode.LkeClusterArgs;\nimport com.pulumi.linode.inputs.LkeClusterPoolArgs;\nimport com.pulumi.linode.inputs.LkeClusterPoolAutoscalerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_cluster = new LkeCluster(\"my-cluster\", LkeClusterArgs.builder()        \n            .label(\"my-cluster\")\n            .k8sVersion(\"1.21\")\n            .region(\"us-central\")\n            .tags(\"prod\")\n            .pools(LkeClusterPoolArgs.builder()\n                .type(\"g6-standard-2\")\n                .count(3)\n                .autoscaler(LkeClusterPoolAutoscalerArgs.builder()\n                    .min(3)\n                    .max(10)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-cluster:\n    type: linode:LkeCluster\n    properties:\n      label: my-cluster\n      k8sVersion: '1.21'\n      region: us-central\n      tags:\n        - prod\n      pools:\n        - type: g6-standard-2\n          count: 3\n          autoscaler:\n            min: 3\n            max: 10\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLKE Clusters can be imported using the `id`, e.g.\n\n```sh\n $ pulumi import linode:index/lkeCluster:LkeCluster my_cluster 12345\n```\n\n ",
            "properties": {
                "apiEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The endpoints for the Kubernetes API server.\n"
                },
                "controlPlane": {
                    "$ref": "#/types/linode:index/LkeClusterControlPlane:LkeClusterControlPlane",
                    "description": "Defines settings for the Kubernetes Control Plane.\n"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The Kubernetes Dashboard access URL for this cluster.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.\n"
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "The base64 encoded kubeconfig for the Kubernetes cluster.\n",
                    "secret": true
                },
                "label": {
                    "type": "string",
                    "description": "This Kubernetes cluster's unique label.\n"
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPool:LkeClusterPool"
                    },
                    "description": "Additional nested attributes:\n"
                },
                "region": {
                    "type": "string",
                    "description": "This Kubernetes cluster's location.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n"
                }
            },
            "required": [
                "apiEndpoints",
                "controlPlane",
                "dashboardUrl",
                "k8sVersion",
                "kubeconfig",
                "label",
                "pools",
                "region",
                "status"
            ],
            "inputProperties": {
                "controlPlane": {
                    "$ref": "#/types/linode:index/LkeClusterControlPlane:LkeClusterControlPlane",
                    "description": "Defines settings for the Kubernetes Control Plane.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Kubernetes cluster's unique label.\n"
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPool:LkeClusterPool"
                    },
                    "description": "Additional nested attributes:\n"
                },
                "region": {
                    "type": "string",
                    "description": "This Kubernetes cluster's location.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n"
                }
            },
            "requiredInputs": [
                "k8sVersion",
                "label",
                "pools",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LkeCluster resources.\n",
                "properties": {
                    "apiEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The endpoints for the Kubernetes API server.\n"
                    },
                    "controlPlane": {
                        "$ref": "#/types/linode:index/LkeClusterControlPlane:LkeClusterControlPlane",
                        "description": "Defines settings for the Kubernetes Control Plane.\n"
                    },
                    "dashboardUrl": {
                        "type": "string",
                        "description": "The Kubernetes Dashboard access URL for this cluster.\n"
                    },
                    "k8sVersion": {
                        "type": "string",
                        "description": "The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.\n"
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "The base64 encoded kubeconfig for the Kubernetes cluster.\n",
                        "secret": true
                    },
                    "label": {
                        "type": "string",
                        "description": "This Kubernetes cluster's unique label.\n"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/LkeClusterPool:LkeClusterPool"
                        },
                        "description": "Additional nested attributes:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "This Kubernetes cluster's location.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node. (`ready`, `not_ready`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/nodeBalancer:NodeBalancer": {
            "description": "Provides a Linode NodeBalancer resource.  This can be used to create, modify, and delete Linodes NodeBalancers in Linode's managed load balancer service.\nFor more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createNodeBalancer).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure a NodeBalancer.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.NodeBalancer(\"foobar\", {\n    clientConnThrottle: 20,\n    label: \"mynodebalancer\",\n    region: \"us-east\",\n    tags: [\"foobar\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.NodeBalancer(\"foobar\",\n    client_conn_throttle=20,\n    label=\"mynodebalancer\",\n    region=\"us-east\",\n    tags=[\"foobar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.NodeBalancer(\"foobar\", new()\n    {\n        ClientConnThrottle = 20,\n        Label = \"mynodebalancer\",\n        Region = \"us-east\",\n        Tags = new[]\n        {\n            \"foobar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewNodeBalancer(ctx, \"foobar\", \u0026linode.NodeBalancerArgs{\n\t\t\tClientConnThrottle: pulumi.Int(20),\n\t\t\tLabel:              pulumi.String(\"mynodebalancer\"),\n\t\t\tRegion:             pulumi.String(\"us-east\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foobar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.NodeBalancer;\nimport com.pulumi.linode.NodeBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new NodeBalancer(\"foobar\", NodeBalancerArgs.builder()        \n            .clientConnThrottle(20)\n            .label(\"mynodebalancer\")\n            .region(\"us-east\")\n            .tags(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:NodeBalancer\n    properties:\n      clientConnThrottle: 20\n      label: mynodebalancer\n      region: us-east\n      tags:\n        - foobar\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes NodeBalancers can be imported using the Linode NodeBalancer `id`, e.g.\n\n```sh\n $ pulumi import linode:index/nodeBalancer:NodeBalancer mynodebalancer 1234567\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for NodeBalancers and other Linode resource types. ",
            "properties": {
                "clientConnThrottle": {
                    "type": "integer",
                    "description": "Throttle connections per second (0-20). Set to 0 (default) to disable throttling.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this NodeBalancer was created\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "This NodeBalancer's hostname, ending with .nodebalancer.linode.com\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "The Public IPv4 Address of this NodeBalancer\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "The Public IPv6 Address of this NodeBalancer\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this NodeBalancer will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).  *Changing `region` forces the creation of a new Linode NodeBalancer.*.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                },
                "transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerTransfer:NodeBalancerTransfer"
                    },
                    "description": "Information about the amount of transfer this NodeBalancer has had so far this month.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this NodeBalancer was last updated.\n"
                }
            },
            "required": [
                "created",
                "hostname",
                "ipv4",
                "ipv6",
                "region",
                "transfers",
                "updated"
            ],
            "inputProperties": {
                "clientConnThrottle": {
                    "type": "integer",
                    "description": "Throttle connections per second (0-20). Set to 0 (default) to disable throttling.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this NodeBalancer will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).  *Changing `region` forces the creation of a new Linode NodeBalancer.*.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeBalancer resources.\n",
                "properties": {
                    "clientConnThrottle": {
                        "type": "integer",
                        "description": "Throttle connections per second (0-20). Set to 0 (default) to disable throttling.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this NodeBalancer was created\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "This NodeBalancer's hostname, ending with .nodebalancer.linode.com\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "The Public IPv4 Address of this NodeBalancer\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "The Public IPv6 Address of this NodeBalancer\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode NodeBalancer\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where this NodeBalancer will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).  *Changing `region` forces the creation of a new Linode NodeBalancer.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                    },
                    "transfers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/NodeBalancerTransfer:NodeBalancerTransfer"
                        },
                        "description": "Information about the amount of transfer this NodeBalancer has had so far this month.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this NodeBalancer was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/nodeBalancerConfig:NodeBalancerConfig": {
            "description": "Provides a Linode NodeBalancer Config resource.  This can be used to create, modify, and delete Linodes NodeBalancer Configs.\nFor more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createNodeBalancerConfig).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure a NodeBalancer Config attached to a Linode instance.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.NodeBalancer(\"foobar\", {\n    label: \"mynodebalancer\",\n    region: \"us-east\",\n    clientConnThrottle: 20,\n});\nconst foofig = new linode.NodeBalancerConfig(\"foofig\", {\n    nodebalancerId: foobar.id,\n    port: 8088,\n    protocol: \"http\",\n    check: \"http\",\n    checkPath: \"/foo\",\n    checkAttempts: 3,\n    checkTimeout: 30,\n    stickiness: \"http_cookie\",\n    algorithm: \"source\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.NodeBalancer(\"foobar\",\n    label=\"mynodebalancer\",\n    region=\"us-east\",\n    client_conn_throttle=20)\nfoofig = linode.NodeBalancerConfig(\"foofig\",\n    nodebalancer_id=foobar.id,\n    port=8088,\n    protocol=\"http\",\n    check=\"http\",\n    check_path=\"/foo\",\n    check_attempts=3,\n    check_timeout=30,\n    stickiness=\"http_cookie\",\n    algorithm=\"source\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.NodeBalancer(\"foobar\", new()\n    {\n        Label = \"mynodebalancer\",\n        Region = \"us-east\",\n        ClientConnThrottle = 20,\n    });\n\n    var foofig = new Linode.NodeBalancerConfig(\"foofig\", new()\n    {\n        NodebalancerId = foobar.Id,\n        Port = 8088,\n        Protocol = \"http\",\n        Check = \"http\",\n        CheckPath = \"/foo\",\n        CheckAttempts = 3,\n        CheckTimeout = 30,\n        Stickiness = \"http_cookie\",\n        Algorithm = \"source\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := linode.NewNodeBalancer(ctx, \"foobar\", \u0026linode.NodeBalancerArgs{\n\t\t\tLabel:              pulumi.String(\"mynodebalancer\"),\n\t\t\tRegion:             pulumi.String(\"us-east\"),\n\t\t\tClientConnThrottle: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewNodeBalancerConfig(ctx, \"foofig\", \u0026linode.NodeBalancerConfigArgs{\n\t\t\tNodebalancerId: foobar.ID(),\n\t\t\tPort:           pulumi.Int(8088),\n\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t\tCheck:          pulumi.String(\"http\"),\n\t\t\tCheckPath:      pulumi.String(\"/foo\"),\n\t\t\tCheckAttempts:  pulumi.Int(3),\n\t\t\tCheckTimeout:   pulumi.Int(30),\n\t\t\tStickiness:     pulumi.String(\"http_cookie\"),\n\t\t\tAlgorithm:      pulumi.String(\"source\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.NodeBalancer;\nimport com.pulumi.linode.NodeBalancerArgs;\nimport com.pulumi.linode.NodeBalancerConfig;\nimport com.pulumi.linode.NodeBalancerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new NodeBalancer(\"foobar\", NodeBalancerArgs.builder()        \n            .label(\"mynodebalancer\")\n            .region(\"us-east\")\n            .clientConnThrottle(20)\n            .build());\n\n        var foofig = new NodeBalancerConfig(\"foofig\", NodeBalancerConfigArgs.builder()        \n            .nodebalancerId(foobar.id())\n            .port(8088)\n            .protocol(\"http\")\n            .check(\"http\")\n            .checkPath(\"/foo\")\n            .checkAttempts(3)\n            .checkTimeout(30)\n            .stickiness(\"http_cookie\")\n            .algorithm(\"source\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:NodeBalancer\n    properties:\n      label: mynodebalancer\n      region: us-east\n      clientConnThrottle: 20\n  foofig:\n    type: linode:NodeBalancerConfig\n    properties:\n      nodebalancerId: ${foobar.id}\n      port: 8088\n      protocol: http\n      check: http\n      checkPath: /foo\n      checkAttempts: 3\n      checkTimeout: 30\n      stickiness: http_cookie\n      algorithm: source\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNodeBalancer Configs can be imported using the NodeBalancer `nodebalancer_id` followed by the NodeBalancer Config `id` separated by a comma, e.g.\n\n```sh\n $ pulumi import linode:index/nodeBalancerConfig:NodeBalancerConfig http-foobar 1234567,7654321\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for NodeBalancer Configs and other Linode resource types. ",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)\n"
                },
                "check": {
                    "type": "string",
                    "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                },
                "checkAttempts": {
                    "type": "integer",
                    "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                },
                "checkBody": {
                    "type": "string",
                    "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in\nthe response body of a check request, the backend is considered to be down\n"
                },
                "checkInterval": {
                    "type": "integer",
                    "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                },
                "checkPassive": {
                    "type": "boolean",
                    "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                },
                "checkPath": {
                    "type": "string",
                    "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                },
                "checkTimeout": {
                    "type": "integer",
                    "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                },
                "cipherSuite": {
                    "type": "string",
                    "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.\n"
                },
                "nodeStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerConfigNodeStatus:NodeBalancerConfigNodeStatus"
                    },
                    "description": "A structure containing information about the health of the backends for this port. This information is updated\nperiodically as checks are performed against backends.\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)\n"
                },
                "sslCert": {
                    "type": "string",
                    "description": "The certificate this port is serving. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "sslCommonname": {
                    "type": "string",
                    "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                },
                "sslFingerprint": {
                    "type": "string",
                    "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                },
                "sslKey": {
                    "type": "string",
                    "description": "The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "stickiness": {
                    "type": "string",
                    "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                }
            },
            "required": [
                "algorithm",
                "check",
                "checkAttempts",
                "checkBody",
                "checkInterval",
                "checkPassive",
                "checkPath",
                "checkTimeout",
                "cipherSuite",
                "nodeStatuses",
                "nodebalancerId",
                "sslCommonname",
                "sslFingerprint",
                "stickiness"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)\n"
                },
                "check": {
                    "type": "string",
                    "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                },
                "checkAttempts": {
                    "type": "integer",
                    "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                },
                "checkBody": {
                    "type": "string",
                    "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in\nthe response body of a check request, the backend is considered to be down\n"
                },
                "checkInterval": {
                    "type": "integer",
                    "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                },
                "checkPassive": {
                    "type": "boolean",
                    "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                },
                "checkPath": {
                    "type": "string",
                    "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                },
                "checkTimeout": {
                    "type": "integer",
                    "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                },
                "cipherSuite": {
                    "type": "string",
                    "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)\n"
                },
                "sslCert": {
                    "type": "string",
                    "description": "The certificate this port is serving. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "sslKey": {
                    "type": "string",
                    "description": "The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "stickiness": {
                    "type": "string",
                    "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                }
            },
            "requiredInputs": [
                "nodebalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeBalancerConfig resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)\n"
                    },
                    "check": {
                        "type": "string",
                        "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                    },
                    "checkAttempts": {
                        "type": "integer",
                        "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                    },
                    "checkBody": {
                        "type": "string",
                        "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in\nthe response body of a check request, the backend is considered to be down\n"
                    },
                    "checkInterval": {
                        "type": "integer",
                        "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                    },
                    "checkPassive": {
                        "type": "boolean",
                        "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                    },
                    "checkPath": {
                        "type": "string",
                        "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                    },
                    "checkTimeout": {
                        "type": "integer",
                        "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                    },
                    "cipherSuite": {
                        "type": "string",
                        "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.\n"
                    },
                    "nodeStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/NodeBalancerConfigNodeStatus:NodeBalancerConfigNodeStatus"
                        },
                        "description": "A structure containing information about the health of the backends for this port. This information is updated\nperiodically as checks are performed against backends.\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer to access.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)\n"
                    },
                    "sslCert": {
                        "type": "string",
                        "description": "The certificate this port is serving. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                        "secret": true
                    },
                    "sslCommonname": {
                        "type": "string",
                        "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                    },
                    "sslFingerprint": {
                        "type": "string",
                        "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                    },
                    "sslKey": {
                        "type": "string",
                        "description": "The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                        "secret": true
                    },
                    "stickiness": {
                        "type": "string",
                        "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/nodeBalancerNode:NodeBalancerNode": {
            "description": "Provides a Linode NodeBalancer Node resource.  This can be used to create, modify, and delete Linodes NodeBalancer Nodes.\nFor more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createNodeBalancerNode).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure NodeBalancer Nodes attached to Linode instances.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst web: linode.Instance[] = [];\nfor (const range = {value: 0}; range.value \u003c \"3\"; range.value++) {\n    web.push(new linode.Instance(`web-${range.value}`, {\n        label: `web-${range.value + 1}`,\n        image: \"linode/ubuntu18.04\",\n        region: \"us-east\",\n        type: \"g6-standard-1\",\n        authorizedKeys: [\"ssh-rsa AAAA...Gw== user@example.local\"],\n        rootPass: \"test\",\n        privateIp: true,\n    }));\n}\nconst foobar = new linode.NodeBalancer(\"foobar\", {\n    label: \"mynodebalancer\",\n    region: \"us-east\",\n    clientConnThrottle: 20,\n});\nconst foofig = new linode.NodeBalancerConfig(\"foofig\", {\n    nodebalancerId: foobar.id,\n    port: 80,\n    protocol: \"http\",\n    check: \"http\",\n    checkPath: \"/foo\",\n    checkAttempts: 3,\n    checkTimeout: 30,\n    stickiness: \"http_cookie\",\n    algorithm: \"source\",\n});\nconst foonode: linode.NodeBalancerNode[] = [];\nfor (const range = {value: 0}; range.value \u003c \"3\"; range.value++) {\n    foonode.push(new linode.NodeBalancerNode(`foonode-${range.value}`, {\n        nodebalancerId: foobar.id,\n        configId: foofig.id,\n        address: web.map(__item =\u003e __item.privateIpAddress)[range.value].apply(privateIpAddresses =\u003e `${privateIpAddresses}:80`),\n        label: \"mynodebalancernode\",\n        weight: 50,\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nweb = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    web.append(linode.Instance(f\"web-{range['value']}\",\n        label=f\"web-{range['value'] + 1}\",\n        image=\"linode/ubuntu18.04\",\n        region=\"us-east\",\n        type=\"g6-standard-1\",\n        authorized_keys=[\"ssh-rsa AAAA...Gw== user@example.local\"],\n        root_pass=\"test\",\n        private_ip=True))\nfoobar = linode.NodeBalancer(\"foobar\",\n    label=\"mynodebalancer\",\n    region=\"us-east\",\n    client_conn_throttle=20)\nfoofig = linode.NodeBalancerConfig(\"foofig\",\n    nodebalancer_id=foobar.id,\n    port=80,\n    protocol=\"http\",\n    check=\"http\",\n    check_path=\"/foo\",\n    check_attempts=3,\n    check_timeout=30,\n    stickiness=\"http_cookie\",\n    algorithm=\"source\")\nfoonode = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    foonode.append(linode.NodeBalancerNode(f\"foonode-{range['value']}\",\n        nodebalancer_id=foobar.id,\n        config_id=foofig.id,\n        address=[__item.private_ip_address for __item in web][range[\"value\"]].apply(lambda private_ip_addresses: f\"{private_ip_addresses}:80\"),\n        label=\"mynodebalancernode\",\n        weight=50))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web = new List\u003cLinode.Instance\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c \"3\"; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        web.Add(new Linode.Instance($\"web-{range.Value}\", new()\n        {\n            Label = $\"web-{range.Value + 1}\",\n            Image = \"linode/ubuntu18.04\",\n            Region = \"us-east\",\n            Type = \"g6-standard-1\",\n            AuthorizedKeys = new[]\n            {\n                \"ssh-rsa AAAA...Gw== user@example.local\",\n            },\n            RootPass = \"test\",\n            PrivateIp = true,\n        }));\n    }\n    var foobar = new Linode.NodeBalancer(\"foobar\", new()\n    {\n        Label = \"mynodebalancer\",\n        Region = \"us-east\",\n        ClientConnThrottle = 20,\n    });\n\n    var foofig = new Linode.NodeBalancerConfig(\"foofig\", new()\n    {\n        NodebalancerId = foobar.Id,\n        Port = 80,\n        Protocol = \"http\",\n        Check = \"http\",\n        CheckPath = \"/foo\",\n        CheckAttempts = 3,\n        CheckTimeout = 30,\n        Stickiness = \"http_cookie\",\n        Algorithm = \"source\",\n    });\n\n    var foonode = new List\u003cLinode.NodeBalancerNode\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c \"3\"; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        foonode.Add(new Linode.NodeBalancerNode($\"foonode-{range.Value}\", new()\n        {\n            NodebalancerId = foobar.Id,\n            ConfigId = foofig.Id,\n            Address = web.Select(__item =\u003e __item.PrivateIpAddress).ToList()[range.Value].Apply(privateIpAddresses =\u003e $\"{privateIpAddresses}:80\"),\n            Label = \"mynodebalancernode\",\n            Weight = 50,\n        }));\n    }\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.NodeBalancer;\nimport com.pulumi.linode.NodeBalancerArgs;\nimport com.pulumi.linode.NodeBalancerConfig;\nimport com.pulumi.linode.NodeBalancerConfigArgs;\nimport com.pulumi.linode.NodeBalancerNode;\nimport com.pulumi.linode.NodeBalancerNodeArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        for (var i = 0; i \u003c \"3\"; i++) {\n            new Instance(\"web-\" + i, InstanceArgs.builder()            \n                .label(String.format(\"web-%s\", range.value() + 1))\n                .image(\"linode/ubuntu18.04\")\n                .region(\"us-east\")\n                .type(\"g6-standard-1\")\n                .authorizedKeys(\"ssh-rsa AAAA...Gw== user@example.local\")\n                .rootPass(\"test\")\n                .privateIp(true)\n                .build());\n\n        \n}\n        var foobar = new NodeBalancer(\"foobar\", NodeBalancerArgs.builder()        \n            .label(\"mynodebalancer\")\n            .region(\"us-east\")\n            .clientConnThrottle(20)\n            .build());\n\n        var foofig = new NodeBalancerConfig(\"foofig\", NodeBalancerConfigArgs.builder()        \n            .nodebalancerId(foobar.id())\n            .port(80)\n            .protocol(\"http\")\n            .check(\"http\")\n            .checkPath(\"/foo\")\n            .checkAttempts(3)\n            .checkTimeout(30)\n            .stickiness(\"http_cookie\")\n            .algorithm(\"source\")\n            .build());\n\n        for (var i = 0; i \u003c \"3\"; i++) {\n            new NodeBalancerNode(\"foonode-\" + i, NodeBalancerNodeArgs.builder()            \n                .nodebalancerId(foobar.id())\n                .configId(foofig.id())\n                .address(web.stream().map(element -\u003e element.privateIpAddress()).collect(toList())[range.value()].applyValue(privateIpAddresses -\u003e String.format(\"%s:80\", privateIpAddresses)))\n                .label(\"mynodebalancernode\")\n                .weight(50)\n                .build());\n\n        \n}\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNodeBalancer Nodes can be imported using the NodeBalancer `nodebalancer_id` followed by the NodeBalancer Config `config_id` followed by the NodeBalancer Node `id`, separated by a comma, e.g.\n\n```sh\n $ pulumi import linode:index/nodeBalancerNode:NodeBalancerNode https-foobar-1 1234567,7654321,9999999\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for NodeBalancer Nodes and other Linode resource types. ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The private IP Address where this backend can be reached. This must be a private IP address.\n"
                },
                "configId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancerConfig to access.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                }
            },
            "required": [
                "address",
                "configId",
                "label",
                "mode",
                "nodebalancerId",
                "status",
                "weight"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The private IP Address where this backend can be reached. This must be a private IP address.\n"
                },
                "configId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancerConfig to access.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n",
                    "willReplaceOnChanges": true
                },
                "weight": {
                    "type": "integer",
                    "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                }
            },
            "requiredInputs": [
                "address",
                "configId",
                "label",
                "nodebalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeBalancerNode resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The private IP Address where this backend can be reached. This must be a private IP address.\n"
                    },
                    "configId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancerConfig to access.\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer to access.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/objectStorageBucket:ObjectStorageBucket": {
            "description": "Provides a Linode Object Storage Bucket resource. This can be used to create, modify, and delete Linodes Object Storage Buckets.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to create an Object Storage Bucket:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst primary = linode.getObjectStorageCluster({\n    id: \"us-east-1\",\n});\nconst foobar = new linode.ObjectStorageBucket(\"foobar\", {\n    cluster: primary.then(primary =\u003e primary.id),\n    label: \"mybucket\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nprimary = linode.get_object_storage_cluster(id=\"us-east-1\")\nfoobar = linode.ObjectStorageBucket(\"foobar\",\n    cluster=primary.id,\n    label=\"mybucket\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var primary = Linode.GetObjectStorageCluster.Invoke(new()\n    {\n        Id = \"us-east-1\",\n    });\n\n    var foobar = new Linode.ObjectStorageBucket(\"foobar\", new()\n    {\n        Cluster = primary.Apply(getObjectStorageClusterResult =\u003e getObjectStorageClusterResult.Id),\n        Label = \"mybucket\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprimary, err := linode.GetObjectStorageCluster(ctx, \u0026linode.GetObjectStorageClusterArgs{\n\t\t\tId: \"us-east-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewObjectStorageBucket(ctx, \"foobar\", \u0026linode.ObjectStorageBucketArgs{\n\t\t\tCluster: *pulumi.String(primary.Id),\n\t\t\tLabel:   pulumi.String(\"mybucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetObjectStorageClusterArgs;\nimport com.pulumi.linode.ObjectStorageBucket;\nimport com.pulumi.linode.ObjectStorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()\n            .id(\"us-east-1\")\n            .build());\n\n        var foobar = new ObjectStorageBucket(\"foobar\", ObjectStorageBucketArgs.builder()        \n            .cluster(primary.applyValue(getObjectStorageClusterResult -\u003e getObjectStorageClusterResult.id()))\n            .label(\"mybucket\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:ObjectStorageBucket\n    properties:\n      cluster: ${primary.id}\n      label: mybucket\nvariables:\n  primary:\n    fn::invoke:\n      Function: linode:getObjectStorageCluster\n      Arguments:\n        id: us-east-1\n```\n\nCreating an Object Storage Bucket with Lifecycle rules:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mykey = new linode.ObjectStorageKey(\"mykey\", {label: \"image-access\"});\nconst mybucket = new linode.ObjectStorageBucket(\"mybucket\", {\n    accessKey: mykey.accessKey,\n    secretKey: mykey.secretKey,\n    cluster: \"us-east-1\",\n    label: \"mybucket\",\n    lifecycleRules: [{\n        id: \"my-rule\",\n        enabled: true,\n        abortIncompleteMultipartUploadDays: 5,\n        expiration: {\n            date: \"2021-06-21\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmykey = linode.ObjectStorageKey(\"mykey\", label=\"image-access\")\nmybucket = linode.ObjectStorageBucket(\"mybucket\",\n    access_key=mykey.access_key,\n    secret_key=mykey.secret_key,\n    cluster=\"us-east-1\",\n    label=\"mybucket\",\n    lifecycle_rules=[linode.ObjectStorageBucketLifecycleRuleArgs(\n        id=\"my-rule\",\n        enabled=True,\n        abort_incomplete_multipart_upload_days=5,\n        expiration=linode.ObjectStorageBucketLifecycleRuleExpirationArgs(\n            date=\"2021-06-21\",\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mykey = new Linode.ObjectStorageKey(\"mykey\", new()\n    {\n        Label = \"image-access\",\n    });\n\n    var mybucket = new Linode.ObjectStorageBucket(\"mybucket\", new()\n    {\n        AccessKey = mykey.AccessKey,\n        SecretKey = mykey.SecretKey,\n        Cluster = \"us-east-1\",\n        Label = \"mybucket\",\n        LifecycleRules = new[]\n        {\n            new Linode.Inputs.ObjectStorageBucketLifecycleRuleArgs\n            {\n                Id = \"my-rule\",\n                Enabled = true,\n                AbortIncompleteMultipartUploadDays = 5,\n                Expiration = new Linode.Inputs.ObjectStorageBucketLifecycleRuleExpirationArgs\n                {\n                    Date = \"2021-06-21\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmykey, err := linode.NewObjectStorageKey(ctx, \"mykey\", \u0026linode.ObjectStorageKeyArgs{\n\t\t\tLabel: pulumi.String(\"image-access\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewObjectStorageBucket(ctx, \"mybucket\", \u0026linode.ObjectStorageBucketArgs{\n\t\t\tAccessKey: mykey.AccessKey,\n\t\t\tSecretKey: mykey.SecretKey,\n\t\t\tCluster:   pulumi.String(\"us-east-1\"),\n\t\t\tLabel:     pulumi.String(\"mybucket\"),\n\t\t\tLifecycleRules: linode.ObjectStorageBucketLifecycleRuleArray{\n\t\t\t\t\u0026linode.ObjectStorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:                                 pulumi.String(\"my-rule\"),\n\t\t\t\t\tEnabled:                            pulumi.Bool(true),\n\t\t\t\t\tAbortIncompleteMultipartUploadDays: pulumi.Int(5),\n\t\t\t\t\tExpiration: \u0026linode.ObjectStorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDate: pulumi.String(\"2021-06-21\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageKey;\nimport com.pulumi.linode.ObjectStorageKeyArgs;\nimport com.pulumi.linode.ObjectStorageBucket;\nimport com.pulumi.linode.ObjectStorageBucketArgs;\nimport com.pulumi.linode.inputs.ObjectStorageBucketLifecycleRuleArgs;\nimport com.pulumi.linode.inputs.ObjectStorageBucketLifecycleRuleExpirationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mykey = new ObjectStorageKey(\"mykey\", ObjectStorageKeyArgs.builder()        \n            .label(\"image-access\")\n            .build());\n\n        var mybucket = new ObjectStorageBucket(\"mybucket\", ObjectStorageBucketArgs.builder()        \n            .accessKey(mykey.accessKey())\n            .secretKey(mykey.secretKey())\n            .cluster(\"us-east-1\")\n            .label(\"mybucket\")\n            .lifecycleRules(ObjectStorageBucketLifecycleRuleArgs.builder()\n                .id(\"my-rule\")\n                .enabled(true)\n                .abortIncompleteMultipartUploadDays(5)\n                .expiration(ObjectStorageBucketLifecycleRuleExpirationArgs.builder()\n                    .date(\"2021-06-21\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mykey:\n    type: linode:ObjectStorageKey\n    properties:\n      label: image-access\n  mybucket:\n    type: linode:ObjectStorageBucket\n    properties:\n      accessKey: ${mykey.accessKey}\n      secretKey: ${mykey.secretKey}\n      cluster: us-east-1\n      label: mybucket\n      lifecycleRules:\n        - id: my-rule\n          enabled: true\n          abortIncompleteMultipartUploadDays: 5\n          expiration:\n            date: 2021-06-21\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes Object Storage Buckets can be imported using the resource `id` which is made of `cluster:label`, e.g.\n\n```sh\n $ pulumi import linode:index/objectStorageBucket:ObjectStorageBucket mybucket us-east-1:foobar\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to authenticate with.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).\n"
                },
                "cert": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert",
                    "description": "The cert used by this Object Storage Bucket.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster of the Linode Object Storage Bucket.\n"
                },
                "corsEnabled": {
                    "type": "boolean",
                    "description": "If true, the bucket will have CORS enabled for all origins.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made\npublic.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Object Storage Bucket.\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule"
                    },
                    "description": "Lifecycle rules to be applied to the bucket.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to authenticate with.\n"
                },
                "versioning": {
                    "type": "boolean",
                    "description": "Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)\n"
                }
            },
            "required": [
                "cluster",
                "hostname",
                "label",
                "versioning"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to authenticate with.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).\n"
                },
                "cert": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert",
                    "description": "The cert used by this Object Storage Bucket.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster of the Linode Object Storage Bucket.\n",
                    "willReplaceOnChanges": true
                },
                "corsEnabled": {
                    "type": "boolean",
                    "description": "If true, the bucket will have CORS enabled for all origins.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Object Storage Bucket.\n",
                    "willReplaceOnChanges": true
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule"
                    },
                    "description": "Lifecycle rules to be applied to the bucket.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to authenticate with.\n"
                },
                "versioning": {
                    "type": "boolean",
                    "description": "Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)\n"
                }
            },
            "requiredInputs": [
                "cluster",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorageBucket resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key to authenticate with.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://linode.com/docs/api/object-storage/#object-storage-bucket-access-update__request-body-schema).\n"
                    },
                    "cert": {
                        "$ref": "#/types/linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert",
                        "description": "The cert used by this Object Storage Bucket.\n"
                    },
                    "cluster": {
                        "type": "string",
                        "description": "The cluster of the Linode Object Storage Bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "corsEnabled": {
                        "type": "boolean",
                        "description": "If true, the bucket will have CORS enabled for all origins.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made\npublic.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode Object Storage Bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule"
                        },
                        "description": "Lifecycle rules to be applied to the bucket.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key to authenticate with.\n"
                    },
                    "versioning": {
                        "type": "boolean",
                        "description": "Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/objectStorageKey:ObjectStorageKey": {
            "description": "Provides a Linode Object Storage Key resource. This can be used to create, modify, and delete Linodes Object Storage Keys.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to create an Object Storage Key.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.ObjectStorageKey(\"foo\", {label: \"image-access\"});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.ObjectStorageKey(\"foo\", label=\"image-access\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.ObjectStorageKey(\"foo\", new()\n    {\n        Label = \"image-access\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageKey(ctx, \"foo\", \u0026linode.ObjectStorageKeyArgs{\n\t\t\tLabel: pulumi.String(\"image-access\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageKey;\nimport com.pulumi.linode.ObjectStorageKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ObjectStorageKey(\"foo\", ObjectStorageKeyArgs.builder()        \n            .label(\"image-access\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:ObjectStorageKey\n    properties:\n      label: image-access\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "This keypair's access key. This is not secret.\n"
                },
                "bucketAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess"
                    },
                    "description": "Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage keyâ€™s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label given to this key. For display purposes only.\n"
                },
                "limited": {
                    "type": "boolean",
                    "description": "Whether or not this key is a limited access key.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "This keypair's secret key.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKey",
                "label",
                "limited",
                "secretKey"
            ],
            "inputProperties": {
                "bucketAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess"
                    },
                    "description": "Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage keyâ€™s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The label given to this key. For display purposes only.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorageKey resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "This keypair's access key. This is not secret.\n"
                    },
                    "bucketAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess"
                        },
                        "description": "Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage keyâ€™s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The label given to this key. For display purposes only.\n"
                    },
                    "limited": {
                        "type": "boolean",
                        "description": "Whether or not this key is a limited access key.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "This keypair's secret key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/objectStorageObject:ObjectStorageObject": {
            "description": "Provides a Linode Object Storage Object resource. This can be used to create, modify, and delete Linodes Object Storage Objects for Buckets.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Uploading plaintext to a bucket\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst object = new linode.ObjectStorageObject(\"object\", {\n    bucket: \"my-bucket\",\n    cluster: \"us-east-1\",\n    key: \"my-object\",\n    secretKey: linode_object_storage_key.my_key.secret_key,\n    accessKey: linode_object_storage_key.my_key.access_key,\n    content: \"This is the content of the Object...\",\n    contentType: \"text/plain\",\n    contentLanguage: \"en\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nobject = linode.ObjectStorageObject(\"object\",\n    bucket=\"my-bucket\",\n    cluster=\"us-east-1\",\n    key=\"my-object\",\n    secret_key=linode_object_storage_key[\"my_key\"][\"secret_key\"],\n    access_key=linode_object_storage_key[\"my_key\"][\"access_key\"],\n    content=\"This is the content of the Object...\",\n    content_type=\"text/plain\",\n    content_language=\"en\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @object = new Linode.ObjectStorageObject(\"object\", new()\n    {\n        Bucket = \"my-bucket\",\n        Cluster = \"us-east-1\",\n        Key = \"my-object\",\n        SecretKey = linode_object_storage_key.My_key.Secret_key,\n        AccessKey = linode_object_storage_key.My_key.Access_key,\n        Content = \"This is the content of the Object...\",\n        ContentType = \"text/plain\",\n        ContentLanguage = \"en\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageObject(ctx, \"object\", \u0026linode.ObjectStorageObjectArgs{\n\t\t\tBucket:          pulumi.String(\"my-bucket\"),\n\t\t\tCluster:         pulumi.String(\"us-east-1\"),\n\t\t\tKey:             pulumi.String(\"my-object\"),\n\t\t\tSecretKey:       pulumi.Any(linode_object_storage_key.My_key.Secret_key),\n\t\t\tAccessKey:       pulumi.Any(linode_object_storage_key.My_key.Access_key),\n\t\t\tContent:         pulumi.String(\"This is the content of the Object...\"),\n\t\t\tContentType:     pulumi.String(\"text/plain\"),\n\t\t\tContentLanguage: pulumi.String(\"en\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageObject;\nimport com.pulumi.linode.ObjectStorageObjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var object = new ObjectStorageObject(\"object\", ObjectStorageObjectArgs.builder()        \n            .bucket(\"my-bucket\")\n            .cluster(\"us-east-1\")\n            .key(\"my-object\")\n            .secretKey(linode_object_storage_key.my_key().secret_key())\n            .accessKey(linode_object_storage_key.my_key().access_key())\n            .content(\"This is the content of the Object...\")\n            .contentType(\"text/plain\")\n            .contentLanguage(\"en\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  object:\n    type: linode:ObjectStorageObject\n    properties:\n      bucket: my-bucket\n      cluster: us-east-1\n      key: my-object\n      secretKey: ${linode_object_storage_key.my_key.secret_key}\n      accessKey: ${linode_object_storage_key.my_key.access_key}\n      content: This is the content of the Object...\n      contentType: text/plain\n      contentLanguage: en\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to authenticate with.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`).\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket to put the object in.\n"
                },
                "cacheControl": {
                    "type": "string",
                    "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster the bucket is in.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                },
                "contentDisposition": {
                    "type": "string",
                    "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.\n"
                },
                "contentEncoding": {
                    "type": "string",
                    "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.\n"
                },
                "contentLanguage": {
                    "type": "string",
                    "description": "The language the content is in e.g. en-US or en-GB.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "The specific version of this object.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`).\n"
                },
                "key": {
                    "type": "string",
                    "description": "They name of the object once it is in the bucket.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of keys/values to provision metadata.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to authenitcate with.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "A unique version ID value for the object.\n"
                },
                "websiteRedirect": {
                    "type": "string",
                    "description": "Specifies a target URL for website redirect.\n"
                }
            },
            "required": [
                "accessKey",
                "bucket",
                "cluster",
                "contentType",
                "etag",
                "key",
                "secretKey",
                "versionId"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to authenticate with.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`).\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket to put the object in.\n",
                    "willReplaceOnChanges": true
                },
                "cacheControl": {
                    "type": "string",
                    "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster the bucket is in.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                },
                "contentDisposition": {
                    "type": "string",
                    "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.\n"
                },
                "contentEncoding": {
                    "type": "string",
                    "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.\n"
                },
                "contentLanguage": {
                    "type": "string",
                    "description": "The language the content is in e.g. en-US or en-GB.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "The specific version of this object.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`).\n"
                },
                "key": {
                    "type": "string",
                    "description": "They name of the object once it is in the bucket.\n",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of keys/values to provision metadata.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to authenitcate with.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.\n"
                },
                "websiteRedirect": {
                    "type": "string",
                    "description": "Specifies a target URL for website redirect.\n"
                }
            },
            "requiredInputs": [
                "accessKey",
                "bucket",
                "cluster",
                "key",
                "secretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorageObject resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key to authenticate with.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`).\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket to put the object in.\n",
                        "willReplaceOnChanges": true
                    },
                    "cacheControl": {
                        "type": "string",
                        "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.\n"
                    },
                    "cluster": {
                        "type": "string",
                        "description": "The cluster the bucket is in.\n",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string",
                        "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                    },
                    "contentDisposition": {
                        "type": "string",
                        "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.\n"
                    },
                    "contentEncoding": {
                        "type": "string",
                        "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.\n"
                    },
                    "contentLanguage": {
                        "type": "string",
                        "description": "The language the content is in e.g. en-US or en-GB.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "The specific version of this object.\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "They name of the object once it is in the bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of keys/values to provision metadata.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key to authenitcate with.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "A unique version ID value for the object.\n"
                    },
                    "websiteRedirect": {
                        "type": "string",
                        "description": "Specifies a target URL for website redirect.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/rdns:Rdns": {
            "description": "Provides a Linode RDNS resource.  This can be used to create and modify RDNS records.\n\nLinode RDNS names must have a matching address value in an A or AAAA record.  This A or AAAA name must be resolvable at the time the RDNS resource is being associated.\n\nFor more information, see the [Linode APIv4 docs](https://developers.linode.com/api/v4/networking-ips-address/#put) and the [Configure your Linode for Reverse DNS](https://www.linode.com/docs/networking/dns/configure-your-linode-for-reverse-dns-classic-manager/) guide.\n\n\n## Import\n\nLinodes RDNS resources can be imported using the address as the `id`.\n\n```sh\n $ pulumi import linode:index/rdns:Rdns foo 123.123.123.123\n```\n\n ",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The name of the RDNS address.\n",
                    "language": {
                        "csharp": {
                            "name": "RdnsName"
                        }
                    }
                },
                "waitForAvailable": {
                    "type": "boolean",
                    "description": "If true, the RDNS assignment will be retried within the operation timeout period.\n"
                }
            },
            "required": [
                "address",
                "rdns"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.\n",
                    "willReplaceOnChanges": true
                },
                "rdns": {
                    "type": "string",
                    "description": "The name of the RDNS address.\n",
                    "language": {
                        "csharp": {
                            "name": "RdnsName"
                        }
                    }
                },
                "waitForAvailable": {
                    "type": "boolean",
                    "description": "If true, the RDNS assignment will be retried within the operation timeout period.\n"
                }
            },
            "requiredInputs": [
                "address",
                "rdns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rdns resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.\n",
                        "willReplaceOnChanges": true
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The name of the RDNS address.\n",
                        "language": {
                            "csharp": {
                                "name": "RdnsName"
                            }
                        }
                    },
                    "waitForAvailable": {
                        "type": "boolean",
                        "description": "If true, the RDNS assignment will be retried within the operation timeout period.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/sshKey:SshKey": {
            "description": "Provides a Linode SSH Key resource.  This can be used to create, modify, and delete Linodes SSH Keys.  Managed SSH Keys allow instances to be created with a list of Linode usernames, whose SSH keys will be automatically applied to the root account's `~/.ssh/authorized_keys` file.\nFor more information, see the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/getSSHKeys).\n\n\n## Import\n\nLinodes SSH Keys can be imported using the Linode SSH Key `id`, e.g.\n\n```sh\n $ pulumi import linode:index/sshKey:SshKey mysshkey 1234567\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this SSH Key was created.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the SSH Key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                    "language": {
                        "csharp": {
                            "name": "SshKeyName"
                        }
                    }
                }
            },
            "required": [
                "created",
                "label",
                "sshKey"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "A label for the SSH Key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                    "language": {
                        "csharp": {
                            "name": "SshKeyName"
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "label",
                "sshKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this SSH Key was created.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the SSH Key.\n"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                        "language": {
                            "csharp": {
                                "name": "SshKeyName"
                            }
                        },
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/stackScript:StackScript": {
            "description": "Provides a Linode StackScript resource.  This can be used to create, modify, and delete Linode StackScripts.  StackScripts are private or public managed scripts which run within an instance during startup.  StackScripts can include variables whose values are specified when the Instance is created.  \n\nFor more information, see [Automate Deployment with StackScripts](https://www.linode.com/docs/platform/stackscripts/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#tag/StackScripts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure a StackScript attached to a Linode Instance.  As shown below, StackScripts must begin with a shebang (`#!`).  The `\u003cUDF ...\u003e` element provided in the Bash comment block defines a variable whose value is provided when creating the Instance (or disk) using the `stackscript_data` field.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst fooStackScript = new linode.StackScript(\"fooStackScript\", {\n    label: \"foo\",\n    description: \"Installs a Package\",\n    script: `#!/bin/bash\n# \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n`,\n    images: [\n        \"linode/ubuntu18.04\",\n        \"linode/ubuntu16.04lts\",\n    ],\n    revNote: \"initial version\",\n});\nconst fooInstance = new linode.Instance(\"fooInstance\", {\n    image: \"linode/ubuntu18.04\",\n    label: \"foo\",\n    region: \"us-east\",\n    type: \"g6-nanode-1\",\n    authorizedKeys: [\"...\"],\n    rootPass: \"...\",\n    stackscriptId: fooStackScript.id,\n    stackscriptData: {\n        \"package\": \"nginx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo_stack_script = linode.StackScript(\"fooStackScript\",\n    label=\"foo\",\n    description=\"Installs a Package\",\n    script=\"\"\"#!/bin/bash\n# \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n\"\"\",\n    images=[\n        \"linode/ubuntu18.04\",\n        \"linode/ubuntu16.04lts\",\n    ],\n    rev_note=\"initial version\")\nfoo_instance = linode.Instance(\"fooInstance\",\n    image=\"linode/ubuntu18.04\",\n    label=\"foo\",\n    region=\"us-east\",\n    type=\"g6-nanode-1\",\n    authorized_keys=[\"...\"],\n    root_pass=\"...\",\n    stackscript_id=foo_stack_script.id,\n    stackscript_data={\n        \"package\": \"nginx\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooStackScript = new Linode.StackScript(\"fooStackScript\", new()\n    {\n        Label = \"foo\",\n        Description = \"Installs a Package\",\n        Script = @\"#!/bin/bash\n# \u003cUDF name=\"\"package\"\" label=\"\"System Package to Install\"\" example=\"\"nginx\"\" default=\"\"\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n\",\n        Images = new[]\n        {\n            \"linode/ubuntu18.04\",\n            \"linode/ubuntu16.04lts\",\n        },\n        RevNote = \"initial version\",\n    });\n\n    var fooInstance = new Linode.Instance(\"fooInstance\", new()\n    {\n        Image = \"linode/ubuntu18.04\",\n        Label = \"foo\",\n        Region = \"us-east\",\n        Type = \"g6-nanode-1\",\n        AuthorizedKeys = new[]\n        {\n            \"...\",\n        },\n        RootPass = \"...\",\n        StackscriptId = fooStackScript.Id,\n        StackscriptData = \n        {\n            { \"package\", \"nginx\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooStackScript, err := linode.NewStackScript(ctx, \"fooStackScript\", \u0026linode.StackScriptArgs{\n\t\t\tLabel:       pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Installs a Package\"),\n\t\t\tScript:      pulumi.String(\"#!/bin/bash\\n# \u003cUDF name=\\\"package\\\" label=\\\"System Package to Install\\\" example=\\\"nginx\\\" default=\\\"\\\"\u003e\\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\\n\"),\n\t\t\tImages: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"linode/ubuntu18.04\"),\n\t\t\t\tpulumi.String(\"linode/ubuntu16.04lts\"),\n\t\t\t},\n\t\t\tRevNote: pulumi.String(\"initial version\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstance(ctx, \"fooInstance\", \u0026linode.InstanceArgs{\n\t\t\tImage:  pulumi.String(\"linode/ubuntu18.04\"),\n\t\t\tLabel:  pulumi.String(\"foo\"),\n\t\t\tRegion: pulumi.String(\"us-east\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"...\"),\n\t\t\t},\n\t\t\tRootPass:      pulumi.String(\"...\"),\n\t\t\tStackscriptId: fooStackScript.ID(),\n\t\t\tStackscriptData: pulumi.AnyMap{\n\t\t\t\t\"package\": pulumi.Any(\"nginx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.StackScript;\nimport com.pulumi.linode.StackScriptArgs;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooStackScript = new StackScript(\"fooStackScript\", StackScriptArgs.builder()        \n            .label(\"foo\")\n            .description(\"Installs a Package\")\n            .script(\"\"\"\n#!/bin/bash\n# \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n            \"\"\")\n            .images(            \n                \"linode/ubuntu18.04\",\n                \"linode/ubuntu16.04lts\")\n            .revNote(\"initial version\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()        \n            .image(\"linode/ubuntu18.04\")\n            .label(\"foo\")\n            .region(\"us-east\")\n            .type(\"g6-nanode-1\")\n            .authorizedKeys(\"...\")\n            .rootPass(\"...\")\n            .stackscriptId(fooStackScript.id())\n            .stackscriptData(Map.of(\"package\", \"nginx\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooStackScript:\n    type: linode:StackScript\n    properties:\n      label: foo\n      description: Installs a Package\n      script: |\n        #!/bin/bash\n        # \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\n        apt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n      images:\n        - linode/ubuntu18.04\n        - linode/ubuntu16.04lts\n      revNote: initial version\n  fooInstance:\n    type: linode:Instance\n    properties:\n      image: linode/ubuntu18.04\n      label: foo\n      region: us-east\n      type: g6-nanode-1\n      authorizedKeys:\n        - '...'\n      rootPass: '...'\n      stackscriptId: ${fooStackScript.id}\n      stackscriptData:\n        package: nginx\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes StackScripts can be imported using the Linode StackScript `id`, e.g.\n\n```sh\n $ pulumi import linode:index/stackScript:StackScript mystackscript 1234567\n```\n\n ",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this StackScript was created.\n"
                },
                "deploymentsActive": {
                    "type": "integer",
                    "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                },
                "deploymentsTotal": {
                    "type": "integer",
                    "description": "The total number of times this StackScript has been deployed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the StackScript.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted. Currently private image IDs are not supported.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private. *Changing `is_public` forces the creation of a new StackScript*\n"
                },
                "label": {
                    "type": "string",
                    "description": "The StackScript's label is for display purposes only.\n"
                },
                "revNote": {
                    "type": "string",
                    "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date this StackScript was updated.\n"
                },
                "userDefinedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField"
                    },
                    "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                },
                "userGravatarId": {
                    "type": "string",
                    "description": "The Gravatar ID for the User who created the StackScript.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The User who created the StackScript.\n"
                }
            },
            "required": [
                "created",
                "deploymentsActive",
                "deploymentsTotal",
                "description",
                "images",
                "label",
                "script",
                "updated",
                "userDefinedFields",
                "userGravatarId",
                "username"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the StackScript.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted. Currently private image IDs are not supported.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private. *Changing `is_public` forces the creation of a new StackScript*\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The StackScript's label is for display purposes only.\n"
                },
                "revNote": {
                    "type": "string",
                    "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                },
                "userDefinedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField"
                    },
                    "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                }
            },
            "requiredInputs": [
                "description",
                "images",
                "label",
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StackScript resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this StackScript was created.\n"
                    },
                    "deploymentsActive": {
                        "type": "integer",
                        "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                    },
                    "deploymentsTotal": {
                        "type": "integer",
                        "description": "The total number of times this StackScript has been deployed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the StackScript.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted. Currently private image IDs are not supported.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private. *Changing `is_public` forces the creation of a new StackScript*\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The StackScript's label is for display purposes only.\n"
                    },
                    "revNote": {
                        "type": "string",
                        "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date this StackScript was updated.\n"
                    },
                    "userDefinedFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField"
                        },
                        "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                    },
                    "userGravatarId": {
                        "type": "string",
                        "description": "The Gravatar ID for the User who created the StackScript.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The User who created the StackScript.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/user:User": {
            "description": "Manages a Linode User.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate an unrestricted user:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst john = new linode.User(\"john\", {\n    email: \"john@acme.io\",\n    username: \"john123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\njohn = linode.User(\"john\",\n    email=\"john@acme.io\",\n    username=\"john123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var john = new Linode.User(\"john\", new()\n    {\n        Email = \"john@acme.io\",\n        Username = \"john123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewUser(ctx, \"john\", \u0026linode.UserArgs{\n\t\t\tEmail:    pulumi.String(\"john@acme.io\"),\n\t\t\tUsername: pulumi.String(\"john123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.User;\nimport com.pulumi.linode.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var john = new User(\"john\", UserArgs.builder()        \n            .email(\"john@acme.io\")\n            .username(\"john123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  john:\n    type: linode:User\n    properties:\n      email: john@acme.io\n      username: john123\n```\n\nCreate a restricted user with grants:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst fooser = new linode.User(\"fooser\", {\n    email: \"cool@acme.io\",\n    globalGrants: {\n        addImages: true,\n        addLinodes: true,\n    },\n    linodeGrants: [{\n        id: 12345,\n        permissions: \"read_write\",\n    }],\n    restricted: true,\n    username: \"cooluser123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfooser = linode.User(\"fooser\",\n    email=\"cool@acme.io\",\n    global_grants=linode.UserGlobalGrantsArgs(\n        add_images=True,\n        add_linodes=True,\n    ),\n    linode_grants=[linode.UserLinodeGrantArgs(\n        id=12345,\n        permissions=\"read_write\",\n    )],\n    restricted=True,\n    username=\"cooluser123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooser = new Linode.User(\"fooser\", new()\n    {\n        Email = \"cool@acme.io\",\n        GlobalGrants = new Linode.Inputs.UserGlobalGrantsArgs\n        {\n            AddImages = true,\n            AddLinodes = true,\n        },\n        LinodeGrants = new[]\n        {\n            new Linode.Inputs.UserLinodeGrantArgs\n            {\n                Id = 12345,\n                Permissions = \"read_write\",\n            },\n        },\n        Restricted = true,\n        Username = \"cooluser123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewUser(ctx, \"fooser\", \u0026linode.UserArgs{\n\t\t\tEmail: pulumi.String(\"cool@acme.io\"),\n\t\t\tGlobalGrants: \u0026linode.UserGlobalGrantsArgs{\n\t\t\t\tAddImages:  pulumi.Bool(true),\n\t\t\t\tAddLinodes: pulumi.Bool(true),\n\t\t\t},\n\t\t\tLinodeGrants: linode.UserLinodeGrantArray{\n\t\t\t\t\u0026linode.UserLinodeGrantArgs{\n\t\t\t\t\tId:          pulumi.Int(12345),\n\t\t\t\t\tPermissions: pulumi.String(\"read_write\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRestricted: pulumi.Bool(true),\n\t\t\tUsername:   pulumi.String(\"cooluser123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.User;\nimport com.pulumi.linode.UserArgs;\nimport com.pulumi.linode.inputs.UserGlobalGrantsArgs;\nimport com.pulumi.linode.inputs.UserLinodeGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooser = new User(\"fooser\", UserArgs.builder()        \n            .email(\"cool@acme.io\")\n            .globalGrants(UserGlobalGrantsArgs.builder()\n                .addImages(true)\n                .addLinodes(true)\n                .build())\n            .linodeGrants(UserLinodeGrantArgs.builder()\n                .id(12345)\n                .permissions(\"read_write\")\n                .build())\n            .restricted(true)\n            .username(\"cooluser123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooser:\n    type: linode:User\n    properties:\n      email: cool@acme.io\n      globalGrants:\n        addImages: true\n        addLinodes: true\n      linodeGrants:\n        - id: 12345\n          permissions: read_write\n      restricted: true\n      username: cooluser123\n```\n{{% /example %}}\n{{% /examples %}}\n## Global Grants\n\n* `account-access` - (optional) The level of access this User has to Account-level actions, like billing information. (`read_only`, `read_write`)\n\n* `add_domains` - (optional) If true, this User may add Domains.\n\n* `add_databases` - (optional) If true, this User may add Databases.\n\n* `add_firewalls` - (optional) If true, this User may add Firewalls.\n\n* `add_images` - (optional) If true, this User may add Images.\n\n* `add_linodes` - (optional) If true, this User may create Linodes.\n\n* `add_longview` - (optional) If true, this User may create Longview clients and view the current plan.\n\n* `add_nodebalancers` - (optional) If true, this User may add NodeBalancers.\n\n* `add_stackscripts` - (optional) If true, this User may add StackScripts.\n\n* `cancel_account` - (optional) If true, this User may cancel the entire Account.\n\n* `longview_subscription` - (optional) If true, this User may manage the Accountâ€™s Longview subscription.\n\n## Entity Grants\n\n* `id` - (required) The ID of the entity this grant applies to.\n\n* `permissions` - (required) The level of access this User has to this entity. (`read_only`, `read_write`)\n",
            "properties": {
                "domainGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserDomainGrant:UserDomainGrant"
                    },
                    "description": "The domains the user has permissions access to.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n"
                },
                "firewallGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserFirewallGrant:UserFirewallGrant"
                    },
                    "description": "The firewalls the user has permissions access to.\n"
                },
                "globalGrants": {
                    "$ref": "#/types/linode:index/UserGlobalGrants:UserGlobalGrants",
                    "description": "A structure containing the Account-level grants a User has.\n"
                },
                "imageGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserImageGrant:UserImageGrant"
                    },
                    "description": "The images the user has permissions access to.\n"
                },
                "linodeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLinodeGrant:UserLinodeGrant"
                    },
                    "description": "The Linodes the user has permissions access to.\n"
                },
                "longviewGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLongviewGrant:UserLongviewGrant"
                    },
                    "description": "The longview the user has permissions access to.\n"
                },
                "nodebalancerGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserNodebalancerGrant:UserNodebalancerGrant"
                    },
                    "description": "The NodeBalancers the user has permissions access to.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "If true, this user will only have explicit permissions granted.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the User's SSH keys.\n"
                },
                "stackscriptGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserStackscriptGrant:UserStackscriptGrant"
                    },
                    "description": "The StackScripts the user has permissions access to.\n"
                },
                "tfaEnabled": {
                    "type": "boolean",
                    "description": "Whether the user has two-factor-authentication enabled.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                },
                "volumeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserVolumeGrant:UserVolumeGrant"
                    },
                    "description": "The volumes the user has permissions access to.\n"
                }
            },
            "required": [
                "domainGrants",
                "email",
                "firewallGrants",
                "globalGrants",
                "imageGrants",
                "linodeGrants",
                "longviewGrants",
                "nodebalancerGrants",
                "sshKeys",
                "stackscriptGrants",
                "tfaEnabled",
                "username",
                "volumeGrants"
            ],
            "inputProperties": {
                "domainGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserDomainGrant:UserDomainGrant"
                    },
                    "description": "The domains the user has permissions access to.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n",
                    "willReplaceOnChanges": true
                },
                "firewallGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserFirewallGrant:UserFirewallGrant"
                    },
                    "description": "The firewalls the user has permissions access to.\n"
                },
                "globalGrants": {
                    "$ref": "#/types/linode:index/UserGlobalGrants:UserGlobalGrants",
                    "description": "A structure containing the Account-level grants a User has.\n"
                },
                "imageGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserImageGrant:UserImageGrant"
                    },
                    "description": "The images the user has permissions access to.\n"
                },
                "linodeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLinodeGrant:UserLinodeGrant"
                    },
                    "description": "The Linodes the user has permissions access to.\n"
                },
                "longviewGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLongviewGrant:UserLongviewGrant"
                    },
                    "description": "The longview the user has permissions access to.\n"
                },
                "nodebalancerGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserNodebalancerGrant:UserNodebalancerGrant"
                    },
                    "description": "The NodeBalancers the user has permissions access to.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "If true, this user will only have explicit permissions granted.\n"
                },
                "stackscriptGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserStackscriptGrant:UserStackscriptGrant"
                    },
                    "description": "The StackScripts the user has permissions access to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                },
                "volumeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserVolumeGrant:UserVolumeGrant"
                    },
                    "description": "The volumes the user has permissions access to.\n"
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "domainGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserDomainGrant:UserDomainGrant"
                        },
                        "description": "The domains the user has permissions access to.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserFirewallGrant:UserFirewallGrant"
                        },
                        "description": "The firewalls the user has permissions access to.\n"
                    },
                    "globalGrants": {
                        "$ref": "#/types/linode:index/UserGlobalGrants:UserGlobalGrants",
                        "description": "A structure containing the Account-level grants a User has.\n"
                    },
                    "imageGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserImageGrant:UserImageGrant"
                        },
                        "description": "The images the user has permissions access to.\n"
                    },
                    "linodeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserLinodeGrant:UserLinodeGrant"
                        },
                        "description": "The Linodes the user has permissions access to.\n"
                    },
                    "longviewGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserLongviewGrant:UserLongviewGrant"
                        },
                        "description": "The longview the user has permissions access to.\n"
                    },
                    "nodebalancerGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserNodebalancerGrant:UserNodebalancerGrant"
                        },
                        "description": "The NodeBalancers the user has permissions access to.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "If true, this user will only have explicit permissions granted.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the User's SSH keys.\n"
                    },
                    "stackscriptGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserStackscriptGrant:UserStackscriptGrant"
                        },
                        "description": "The StackScripts the user has permissions access to.\n"
                    },
                    "tfaEnabled": {
                        "type": "boolean",
                        "description": "Whether the user has two-factor-authentication enabled.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    },
                    "volumeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserVolumeGrant:UserVolumeGrant"
                        },
                        "description": "The volumes the user has permissions access to.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/volume:Volume": {
            "description": "Provides a Linode Volume resource.  This can be used to create, modify, and delete Linodes Block Storage Volumes.  Block Storage Volumes are removable storage disks that persist outside the life-cycle of Linode Instances. These volumes can be attached to and detached from Linode instances throughout a region.\n\nFor more information, see [How to Use Block Storage with Your Linode](https://www.linode.com/docs/platform/block-storage/how-to-use-block-storage-with-your-linode/) and the [Linode APIv4 docs](https://developers.linode.com/api/v4#operation/createVolume).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this resource to configure a Block Storage Volume attached to a Linode Instance.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobaz = new linode.Instance(\"foobaz\", {\n    rootPass: \"3X4mp13\",\n    type: \"g6-nanode-1\",\n    region: \"us-west\",\n    tags: [\"foobaz\"],\n});\nconst foobar = new linode.Volume(\"foobar\", {\n    label: \"foo-volume\",\n    region: foobaz.region,\n    linodeId: foobaz.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobaz = linode.Instance(\"foobaz\",\n    root_pass=\"3X4mp13\",\n    type=\"g6-nanode-1\",\n    region=\"us-west\",\n    tags=[\"foobaz\"])\nfoobar = linode.Volume(\"foobar\",\n    label=\"foo-volume\",\n    region=foobaz.region,\n    linode_id=foobaz.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobaz = new Linode.Instance(\"foobaz\", new()\n    {\n        RootPass = \"3X4mp13\",\n        Type = \"g6-nanode-1\",\n        Region = \"us-west\",\n        Tags = new[]\n        {\n            \"foobaz\",\n        },\n    });\n\n    var foobar = new Linode.Volume(\"foobar\", new()\n    {\n        Label = \"foo-volume\",\n        Region = foobaz.Region,\n        LinodeId = foobaz.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobaz, err := linode.NewInstance(ctx, \"foobaz\", \u0026linode.InstanceArgs{\n\t\t\tRootPass: pulumi.String(\"3X4mp13\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion:   pulumi.String(\"us-west\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foobaz\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewVolume(ctx, \"foobar\", \u0026linode.VolumeArgs{\n\t\t\tLabel:    pulumi.String(\"foo-volume\"),\n\t\t\tRegion:   foobaz.Region,\n\t\t\tLinodeId: foobaz.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Volume;\nimport com.pulumi.linode.VolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobaz = new Instance(\"foobaz\", InstanceArgs.builder()        \n            .rootPass(\"3X4mp13\")\n            .type(\"g6-nanode-1\")\n            .region(\"us-west\")\n            .tags(\"foobaz\")\n            .build());\n\n        var foobar = new Volume(\"foobar\", VolumeArgs.builder()        \n            .label(\"foo-volume\")\n            .region(foobaz.region())\n            .linodeId(foobaz.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobaz:\n    type: linode:Instance\n    properties:\n      rootPass: 3X4mp13\n      type: g6-nanode-1\n      region: us-west\n      tags:\n        - foobaz\n  foobar:\n    type: linode:Volume\n    properties:\n      label: foo-volume\n      region: ${foobaz.region}\n      linodeId: ${foobaz.id}\n```\n\nVolumes can also be attached using the Linode Instance config device map.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.Instance(\"foo\", {\n    configs: [{\n        devices: {\n            sda: {\n                volumeId: 123,\n            },\n        },\n        kernel: \"linode/latest-64bit\",\n        label: \"boot-existing-volume\",\n    }],\n    region: \"us-east\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.Instance(\"foo\",\n    configs=[linode.InstanceConfigArgs(\n        devices=linode.InstanceConfigDevicesArgs(\n            sda=linode.InstanceConfigDevicesSdaArgs(\n                volume_id=123,\n            ),\n        ),\n        kernel=\"linode/latest-64bit\",\n        label=\"boot-existing-volume\",\n    )],\n    region=\"us-east\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.Instance(\"foo\", new()\n    {\n        Configs = new[]\n        {\n            new Linode.Inputs.InstanceConfigArgs\n            {\n                Devices = new Linode.Inputs.InstanceConfigDevicesArgs\n                {\n                    Sda = new Linode.Inputs.InstanceConfigDevicesSdaArgs\n                    {\n                        VolumeId = 123,\n                    },\n                },\n                Kernel = \"linode/latest-64bit\",\n                Label = \"boot-existing-volume\",\n            },\n        },\n        Region = \"us-east\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"foo\", \u0026linode.InstanceArgs{\n\t\t\tConfigs: linode.InstanceConfigArray{\n\t\t\t\t\u0026linode.InstanceConfigArgs{\n\t\t\t\t\tDevices: \u0026linode.InstanceConfigDevicesArgs{\n\t\t\t\t\t\tSda: \u0026linode.InstanceConfigDevicesSdaArgs{\n\t\t\t\t\t\t\tVolumeId: pulumi.Int(123),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tKernel: pulumi.String(\"linode/latest-64bit\"),\n\t\t\t\t\tLabel:  pulumi.String(\"boot-existing-volume\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRegion: pulumi.String(\"us-east\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.inputs.InstanceConfigArgs;\nimport com.pulumi.linode.inputs.InstanceConfigDevicesArgs;\nimport com.pulumi.linode.inputs.InstanceConfigDevicesSdaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()        \n            .configs(InstanceConfigArgs.builder()\n                .devices(InstanceConfigDevicesArgs.builder()\n                    .sda(InstanceConfigDevicesSdaArgs.builder()\n                        .volumeId(\"123\")\n                        .build())\n                    .build())\n                .kernel(\"linode/latest-64bit\")\n                .label(\"boot-existing-volume\")\n                .build())\n            .region(\"us-east\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:Instance\n    properties:\n      configs:\n        - devices:\n            sda:\n              volumeId: '123'\n          kernel: linode/latest-64bit\n          label: boot-existing-volume\n      region: us-east\n      type: g6-nanode-1\n```\n\nVolumes may also be cloned from existing volumes.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.Volume(\"foobar\", {\n    label: \"my-cloned-volume\",\n    sourceVolumeId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.Volume(\"foobar\",\n    label=\"my-cloned-volume\",\n    source_volume_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Volume(\"foobar\", new()\n    {\n        Label = \"my-cloned-volume\",\n        SourceVolumeId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewVolume(ctx, \"foobar\", \u0026linode.VolumeArgs{\n\t\t\tLabel:          pulumi.String(\"my-cloned-volume\"),\n\t\t\tSourceVolumeId: pulumi.Int(12345),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Volume;\nimport com.pulumi.linode.VolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Volume(\"foobar\", VolumeArgs.builder()        \n            .label(\"my-cloned-volume\")\n            .sourceVolumeId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Volume\n    properties:\n      label: my-cloned-volume\n      sourceVolumeId: 12345\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLinodes Volumes can be imported using the Linode Volume `id`, e.g.\n\n```sh\n $ pulumi import linode:index/volume:Volume myvolume 1234567\n```\n\n The Linode Guide, [Import Existing Infrastructure to Terraform](https://www.linode.com/docs/applications/configuration-management/import-existing-infrastructure-to-terraform/), offers resource importing examples for Block Storage Volumes and other Linode resource types. ",
            "properties": {
                "filesystemPath": {
                    "type": "string",
                    "description": "The full filesystem path for the Volume based on the Volume's label. The path is \"/dev/disk/by-id/scsi-0Linode_Volume_\" + the Volume label\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Volume\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Instance where the Volume should be attached.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this volume will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). This field is optional for cloned volumes. *Changing `region` forces the creation of a new Linode Volume.*.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the Volume in GB.\n"
                },
                "sourceVolumeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Volume to clone. NOTE: Cloned volumes must be in the same region as the source volume.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Linode Volume. (`creating`, `active`, `resizing`, `contact_support`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                }
            },
            "required": [
                "filesystemPath",
                "label",
                "linodeId",
                "region",
                "size",
                "status"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Volume\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Instance where the Volume should be attached.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this volume will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). This field is optional for cloned volumes. *Changing `region` forces the creation of a new Linode Volume.*.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the Volume in GB.\n"
                },
                "sourceVolumeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Volume to clone. NOTE: Cloned volumes must be in the same region as the source volume.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "filesystemPath": {
                        "type": "string",
                        "description": "The full filesystem path for the Volume based on the Volume's label. The path is \"/dev/disk/by-id/scsi-0Linode_Volume_\" + the Volume label\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode Volume\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of a Linode Instance where the Volume should be attached.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where this volume will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). This field is optional for cloned volumes. *Changing `region` forces the creation of a new Linode Volume.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the Volume in GB.\n"
                    },
                    "sourceVolumeId": {
                        "type": "integer",
                        "description": "The ID of a Linode Volume to clone. NOTE: Cloned volumes must be in the same region as the source volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Linode Volume. (`creating`, `active`, `resizing`, `contact_support`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "linode:index/getAccount:getAccount": {
            "description": "Provides information about a Linode account.\n\nThis data source should not be used in conjuction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access account details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst account = linode.getAccount({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\naccount = linode.get_account()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var account = Linode.GetAccount.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var account = LinodeFunctions.getAccount();\n\n    }\n}\n```\n```yaml\nvariables:\n  account:\n    fn::invoke:\n      Function: linode:getAccount\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "address1": {
                        "type": "string",
                        "description": "First line of this Account's billing address.\n"
                    },
                    "address2": {
                        "type": "string",
                        "description": "Second line of this Account's billing address.\n"
                    },
                    "balance": {
                        "type": "integer",
                        "description": "This Account's balance, in US dollars.\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city for this Account's billing address.\n"
                    },
                    "company": {
                        "type": "string",
                        "description": "The company name associated with this Account.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The two-letter country code of this Account's billing address.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address for this Account, for account management communications, and may be used for other communications as configured.\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the person associated with this Account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the person associated with this Account.\n"
                    },
                    "phone": {
                        "type": "string",
                        "description": "The phone number associated with this Account.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.\n"
                    },
                    "zip": {
                        "type": "string",
                        "description": "The zip code of this Account's billing address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address1",
                    "address2",
                    "balance",
                    "city",
                    "company",
                    "country",
                    "email",
                    "firstName",
                    "lastName",
                    "phone",
                    "state",
                    "zip",
                    "id"
                ]
            }
        },
        "linode:index/getAccountLogin:getAccountLogin": {
            "description": "Provides details about a specific Linode account login.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode account login.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myAccountLogin = linode.getAccountLogin({\n    id: 123456,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_account_login = linode.get_account_login(id=123456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAccountLogin = Linode.GetAccountLogin.Invoke(new()\n    {\n        Id = 123456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetAccountLogin(ctx, \u0026linode.GetAccountLoginArgs{\n\t\t\tId: 123456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetAccountLoginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAccountLogin = LinodeFunctions.getAccountLogin(GetAccountLoginArgs.builder()\n            .id(123456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAccountLogin:\n    fn::invoke:\n      Function: linode:getAccountLogin\n      Arguments:\n        id: 123456\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountLogin.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of this login object.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountLogin.\n",
                "properties": {
                    "datetime": {
                        "type": "string",
                        "description": "When the login was initiated.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of this login object.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "The remote IP address that requested the login.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "True if the User that was logged into was a restricted User, false otherwise.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the User that was logged into.\n"
                    }
                },
                "type": "object",
                "required": [
                    "datetime",
                    "id",
                    "ip",
                    "restricted",
                    "status",
                    "username"
                ]
            }
        },
        "linode:index/getAccountLogins:getAccountLogins": {
            "description": "Provides information about Linode account logins that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode account login.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered-account-logins = linode.getAccountLogins({\n    filters: [\n        {\n            name: \"restricted\",\n            values: [\"true\"],\n        },\n        {\n            name: \"username\",\n            values: [\"myUsername\"],\n        },\n    ],\n});\nexport const loginIds = [filtered_account_logins.then(filtered_account_logins =\u003e filtered_account_logins.logins)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_account_logins = linode.get_account_logins(filters=[\n    linode.GetAccountLoginsFilterArgs(\n        name=\"restricted\",\n        values=[\"true\"],\n    ),\n    linode.GetAccountLoginsFilterArgs(\n        name=\"username\",\n        values=[\"myUsername\"],\n    ),\n])\npulumi.export(\"loginIds\", [__item.id for __item in [filtered_account_logins.logins]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_account_logins = Linode.GetAccountLogins.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetAccountLoginsFilterInputArgs\n            {\n                Name = \"restricted\",\n                Values = new[]\n                {\n                    \"true\",\n                },\n            },\n            new Linode.Inputs.GetAccountLoginsFilterInputArgs\n            {\n                Name = \"username\",\n                Values = new[]\n                {\n                    \"myUsername\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"loginIds\"] = new[]\n        {\n            filtered_account_logins.Apply(filtered_account_logins =\u003e filtered_account_logins.Apply(getAccountLoginsResult =\u003e getAccountLoginsResult.Logins)),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetAccountLoginsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-account-logins = LinodeFunctions.getAccountLogins(GetAccountLoginsArgs.builder()\n            .filters(            \n                GetAccountLoginsFilterArgs.builder()\n                    .name(\"restricted\")\n                    .values(\"true\")\n                    .build(),\n                GetAccountLoginsFilterArgs.builder()\n                    .name(\"username\")\n                    .values(\"myUsername\")\n                    .build())\n            .build());\n\n        ctx.export(\"loginIds\", filtered_account_logins.logins().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Filterable Fields\n\n* `ip`\n\n* `restricted`\n\n* `username`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountLogins.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsFilter:getAccountLoginsFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountLogins.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsFilter:getAccountLoginsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsLogin:getAccountLoginsLogin"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "logins",
                    "id"
                ]
            }
        },
        "linode:index/getAccountSettings:getAccountSettings": {
            "description": "Provides information about Linode account settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about Linode account settings.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getAccountSettings({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_account_settings()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetAccountSettings.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupAccountSettings(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getAccountSettings();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: linode:getAccountSettings\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAccountSettings.\n",
                "properties": {
                    "backupsEnabled": {
                        "type": "boolean",
                        "description": "Account-wide backups default.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "longviewSubscription": {
                        "type": "string",
                        "description": "The Longview Pro tier you are currently subscribed to.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Enables monitoring for connectivity, response, and total request time.\n"
                    },
                    "networkHelper": {
                        "type": "boolean",
                        "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                    },
                    "objectStorage": {
                        "type": "string",
                        "description": "A string describing the status of this accountâ€™s Object Storage service enrollment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backupsEnabled",
                    "longviewSubscription",
                    "managed",
                    "networkHelper",
                    "objectStorage",
                    "id"
                ]
            }
        },
        "linode:index/getDatabaseBackups:getDatabaseBackups": {
            "description": "Provides information about Linode Database Backups that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all backups for a MySQL database:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all-backups = linode.getDatabaseBackups({\n    databaseId: 12345,\n    databaseType: \"mysql\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_backups = linode.get_database_backups(database_id=12345,\n    database_type=\"mysql\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_backups = Linode.GetDatabaseBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n        DatabaseType = \"mysql\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseBackups(ctx, \u0026linode.GetDatabaseBackupsArgs{\n\t\t\tDatabaseId:   12345,\n\t\t\tDatabaseType: \"mysql\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()\n            .databaseId(12345)\n            .databaseType(\"mysql\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all-backups:\n    fn::invoke:\n      Function: linode:getDatabaseBackups\n      Arguments:\n        databaseId: 12345\n        databaseType: mysql\n```\n\nGet information about all automatic MongoDB Database Backups:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst auto-backups = linode.getDatabaseBackups({\n    databaseId: 12345,\n    databaseType: \"mongodb\",\n    filters: [{\n        name: \"type\",\n        values: [\"auto\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nauto_backups = linode.get_database_backups(database_id=12345,\n    database_type=\"mongodb\",\n    filters=[linode.GetDatabaseBackupsFilterArgs(\n        name=\"type\",\n        values=[\"auto\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var auto_backups = Linode.GetDatabaseBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n        DatabaseType = \"mongodb\",\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseBackupsFilterInputArgs\n            {\n                Name = \"type\",\n                Values = new[]\n                {\n                    \"auto\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseBackups(ctx, \u0026linode.GetDatabaseBackupsArgs{\n\t\t\tDatabaseId:   12345,\n\t\t\tDatabaseType: \"mongodb\",\n\t\t\tFilters: []linode.GetDatabaseBackupsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"auto\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var auto-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()\n            .databaseId(12345)\n            .databaseType(\"mongodb\")\n            .filters(GetDatabaseBackupsFilterArgs.builder()\n                .name(\"type\")\n                .values(\"auto\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  auto-backups:\n    fn::invoke:\n      Function: linode:getDatabaseBackups\n      Arguments:\n        databaseId: 12345\n        databaseType: mongodb\n        filters:\n          - name: type\n            values:\n              - auto\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseBackups.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the database to retrieve backups for.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The type of the database to retrieve backups for. (`mysql`, `mongodb`, `postgresql`)\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsFilter:getDatabaseBackupsFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest backup will be returned.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`created`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "databaseType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseBackups.\n",
                "properties": {
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsBackup:getDatabaseBackupsBackup"
                        }
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "databaseType": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsFilter:getDatabaseBackupsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "databaseId",
                    "databaseType",
                    "id"
                ]
            }
        },
        "linode:index/getDatabaseEngines:getDatabaseEngines": {
            "description": "Provides information about Linode Managed Database engines that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all Linode Managed Database engines:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getDatabaseEngines({});\nexport const engineIds = [all.then(all =\u003e all.engines)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_database_engines()\npulumi.export(\"engineIds\", [__item.id for __item in [all.engines]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetDatabaseEngines.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"engineIds\"] = new[]\n        {\n            all.Apply(getDatabaseEnginesResult =\u003e getDatabaseEnginesResult.Engines),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getDatabaseEngines();\n\n        ctx.export(\"engineIds\", all.applyValue(getDatabaseEnginesResult -\u003e getDatabaseEnginesResult.engines()).stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\nGet information about all Linode MySQL Database engines:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mysql = linode.getDatabaseEngines({\n    filters: [{\n        name: \"engine\",\n        values: [\"mysql\"],\n    }],\n});\nexport const engineIds = [mysql.then(mysql =\u003e mysql.engines)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmysql = linode.get_database_engines(filters=[linode.GetDatabaseEnginesFilterArgs(\n    name=\"engine\",\n    values=[\"mysql\"],\n)])\npulumi.export(\"engineIds\", [__item.id for __item in [mysql.engines]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysql = Linode.GetDatabaseEngines.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseEnginesFilterInputArgs\n            {\n                Name = \"engine\",\n                Values = new[]\n                {\n                    \"mysql\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"engineIds\"] = new[]\n        {\n            mysql.Apply(getDatabaseEnginesResult =\u003e getDatabaseEnginesResult.Engines),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()\n            .filters(GetDatabaseEnginesFilterArgs.builder()\n                .name(\"engine\")\n                .values(\"mysql\")\n                .build())\n            .build());\n\n        ctx.export(\"engineIds\", mysql.applyValue(getDatabaseEnginesResult -\u003e getDatabaseEnginesResult.engines()).stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\nCreate a Linode MySQL Database using the latest support MySQL version:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mysql = linode.getDatabaseEngines({\n    latest: true,\n    filters: [{\n        name: \"engine\",\n        values: [\"mysql\"],\n    }],\n});\nconst myDb = new linode.DatabaseMysql(\"myDb\", {\n    label: \"mydb\",\n    engineId: mysql.then(mysql =\u003e mysql.engines?.[0]?.id),\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmysql = linode.get_database_engines(latest=True,\n    filters=[linode.GetDatabaseEnginesFilterArgs(\n        name=\"engine\",\n        values=[\"mysql\"],\n    )])\nmy_db = linode.DatabaseMysql(\"myDb\",\n    label=\"mydb\",\n    engine_id=mysql.engines[0].id,\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysql = Linode.GetDatabaseEngines.Invoke(new()\n    {\n        Latest = true,\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseEnginesFilterInputArgs\n            {\n                Name = \"engine\",\n                Values = new[]\n                {\n                    \"mysql\",\n                },\n            },\n        },\n    });\n\n    var myDb = new Linode.DatabaseMysql(\"myDb\", new()\n    {\n        Label = \"mydb\",\n        EngineId = mysql.Apply(getDatabaseEnginesResult =\u003e getDatabaseEnginesResult.Engines[0]?.Id),\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmysql, err := linode.GetDatabaseEngines(ctx, \u0026linode.GetDatabaseEnginesArgs{\n\t\t\tLatest: pulumi.BoolRef(true),\n\t\t\tFilters: []linode.GetDatabaseEnginesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"engine\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"mysql\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDatabaseMysql(ctx, \"myDb\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydb\"),\n\t\t\tEngineId: *pulumi.String(mysql.Engines[0].Id),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseEnginesArgs;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()\n            .latest(true)\n            .filters(GetDatabaseEnginesFilterArgs.builder()\n                .name(\"engine\")\n                .values(\"mysql\")\n                .build())\n            .build());\n\n        var myDb = new DatabaseMysql(\"myDb\", DatabaseMysqlArgs.builder()        \n            .label(\"mydb\")\n            .engineId(mysql.applyValue(getDatabaseEnginesResult -\u003e getDatabaseEnginesResult.engines()[0].id()))\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDb:\n    type: linode:DatabaseMysql\n    properties:\n      label: mydb\n      engineId: ${mysql.engines[0].id}\n      region: us-southeast\n      type: g6-nanode-1\nvariables:\n  mysql:\n    fn::invoke:\n      Function: linode:getDatabaseEngines\n      Arguments:\n        latest: true\n        filters:\n          - name: engine\n            values:\n              - mysql\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseEngines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesFilter:getDatabaseEnginesFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest engine version will be returned.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`version`)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseEngines.\n",
                "properties": {
                    "engines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesEngine:getDatabaseEnginesEngine"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesFilter:getDatabaseEnginesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "engines",
                    "id"
                ]
            }
        },
        "linode:index/getDatabaseMongodb:getDatabaseMongodb": {
            "description": "Provides information about a Linode MongoDB Database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about a MongoDB database:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-db = linode.getDatabaseMongodb({\n    databaseId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_mongodb(database_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabaseMongodb.Invoke(new()\n    {\n        DatabaseId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabaseMongodb(ctx, \u0026linode.LookupDatabaseMongodbArgs{\n\t\t\tDatabaseId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMongodbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabaseMongodb(GetDatabaseMongodbArgs.builder()\n            .databaseId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      Function: linode:getDatabaseMongodb\n      Arguments:\n        databaseId: 12345\n```\n{{% /example %}}\n{{% /examples %}}\n## updates\n\nThe following arguments are exported by the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseMongodb.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the MongoDB database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseMongodb.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database.\n"
                    },
                    "compressionType": {
                        "type": "string",
                        "description": "The type of data compression for this Database. (`none`, `snappy`, `zlib`)\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `mongodb`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `mongodb/4.4.10`)\n"
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "peers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of peer addresses for this Database.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The access port for this Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region that hosts this Linode Managed Database.\n"
                    },
                    "replicaSet": {
                        "type": "string",
                        "description": "Label for configuring a MongoDB replica set. Choose the same label on multiple Databases to include them in the same replica set.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "storageEngine": {
                        "type": "string",
                        "description": "The type of storage engine for this Database. (`mmapv1`, `wiredtiger`)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMongodbUpdate:getDatabaseMongodbUpdate"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "compressionType",
                    "created",
                    "databaseId",
                    "encrypted",
                    "engine",
                    "engineId",
                    "hostPrimary",
                    "hostSecondary",
                    "label",
                    "peers",
                    "port",
                    "region",
                    "replicaSet",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "storageEngine",
                    "type",
                    "updated",
                    "updates",
                    "version",
                    "id"
                ]
            }
        },
        "linode:index/getDatabaseMysql:getDatabaseMysql": {
            "description": "Provides information about a Linode MySQL Database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about a MySQL database:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-db = linode.getDatabaseMysql({\n    databaseId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_mysql(database_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabaseMysql.Invoke(new()\n    {\n        DatabaseId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabaseMysql(ctx, \u0026linode.LookupDatabaseMysqlArgs{\n\t\t\tDatabaseId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabaseMysql(GetDatabaseMysqlArgs.builder()\n            .databaseId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      Function: linode:getDatabaseMysql\n      Arguments:\n        databaseId: 12345\n```\n{{% /example %}}\n{{% /examples %}}\n## updates\n\nThe following arguments are exported by the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseMysql.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the MySQL database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseMysql.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `mysql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.26`)\n"
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region that hosts this Linode Managed Database.\n"
                    },
                    "replicationType": {
                        "type": "string",
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlUpdate:getDatabaseMysqlUpdate"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "created",
                    "databaseId",
                    "encrypted",
                    "engine",
                    "engineId",
                    "hostPrimary",
                    "hostSecondary",
                    "label",
                    "region",
                    "replicationType",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "type",
                    "updated",
                    "updates",
                    "version",
                    "id"
                ]
            }
        },
        "linode:index/getDatabaseMysqlBackups:getDatabaseMysqlBackups": {
            "description": "\u003e **NOTICE:** This data source has been deprecated in favor of `linode.getDatabaseBackups`.\n\nProvides information about Linode MySQL Database Backups that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all backups for a MySQL database:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all-backups = linode.getDatabaseMysqlBackups({\n    databaseId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_backups = linode.get_database_mysql_backups(database_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_backups = Linode.GetDatabaseMysqlBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseMysqlBackups(ctx, \u0026linode.GetDatabaseMysqlBackupsArgs{\n\t\t\tDatabaseId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()\n            .databaseId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all-backups:\n    fn::invoke:\n      Function: linode:getDatabaseMysqlBackups\n      Arguments:\n        databaseId: 12345\n```\n\nGet information about all automatic MySQL Database Backups:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst auto-backups = linode.getDatabaseMysqlBackups({\n    databaseId: 12345,\n    filters: [{\n        name: \"type\",\n        values: [\"auto\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nauto_backups = linode.get_database_mysql_backups(database_id=12345,\n    filters=[linode.GetDatabaseMysqlBackupsFilterArgs(\n        name=\"type\",\n        values=[\"auto\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var auto_backups = Linode.GetDatabaseMysqlBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseMysqlBackupsFilterInputArgs\n            {\n                Name = \"type\",\n                Values = new[]\n                {\n                    \"auto\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseMysqlBackups(ctx, \u0026linode.GetDatabaseMysqlBackupsArgs{\n\t\t\tDatabaseId: 12345,\n\t\t\tFilters: []linode.GetDatabaseMysqlBackupsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"auto\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var auto-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()\n            .databaseId(12345)\n            .filters(GetDatabaseMysqlBackupsFilterArgs.builder()\n                .name(\"type\")\n                .values(\"auto\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  auto-backups:\n    fn::invoke:\n      Function: linode:getDatabaseMysqlBackups\n      Arguments:\n        databaseId: 12345\n        filters:\n          - name: type\n            values:\n              - auto\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseMysqlBackups.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the database to retrieve backups for.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlBackupsFilter:getDatabaseMysqlBackupsFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest backup will be returned.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`created`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseMysqlBackups.\n",
                "properties": {
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlBackupsBackup:getDatabaseMysqlBackupsBackup"
                        }
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlBackupsFilter:getDatabaseMysqlBackupsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "databaseId",
                    "id"
                ]
            }
        },
        "linode:index/getDatabasePostgresql:getDatabasePostgresql": {
            "description": "Provides information about a Linode PostgreSQL Database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about a PostgreSQL database:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-db = linode.getDatabasePostgresql({\n    databaseId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_postgresql(database_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabasePostgresql.Invoke(new()\n    {\n        DatabaseId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabasePostgresql(ctx, \u0026linode.LookupDatabasePostgresqlArgs{\n\t\t\tDatabaseId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabasePostgresql(GetDatabasePostgresqlArgs.builder()\n            .databaseId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      Function: linode:getDatabasePostgresql\n      Arguments:\n        databaseId: 12345\n```\n{{% /example %}}\n{{% /examples %}}\n## updates\n\nThe following arguments are exported by the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabasePostgresql.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the PostgreSQL database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabasePostgresql.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n"
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region that hosts this Linode Managed Database.\n"
                    },
                    "replicationCommitType": {
                        "type": "string",
                        "description": "(Optional) The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`)\n"
                    },
                    "replicationType": {
                        "type": "string",
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasePostgresqlUpdate:getDatabasePostgresqlUpdate"
                        }
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "created",
                    "databaseId",
                    "encrypted",
                    "engine",
                    "engineId",
                    "hostPrimary",
                    "hostSecondary",
                    "label",
                    "port",
                    "region",
                    "replicationCommitType",
                    "replicationType",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "type",
                    "updated",
                    "updates",
                    "version",
                    "id"
                ]
            }
        },
        "linode:index/getDatabases:getDatabases": {
            "description": "Provides information about Linode Managed Databases that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all Linode Managed Databases:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getDatabases({});\nexport const databaseIds = [all.then(all =\u003e all.databases)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_databases()\npulumi.export(\"databaseIds\", [__item.id for __item in [all.databases]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetDatabases.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseIds\"] = new[]\n        {\n            all.Apply(getDatabasesResult =\u003e getDatabasesResult.Databases),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getDatabases();\n\n        ctx.export(\"databaseIds\", all.applyValue(getDatabasesResult -\u003e getDatabasesResult.databases()).stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\nGet information about all Linode MySQL Databases:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mysql = linode.getDatabases({\n    filters: [{\n        name: \"engine\",\n        values: [\"mysql\"],\n    }],\n});\nexport const databaseIds = [mysql.then(mysql =\u003e mysql.databases)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmysql = linode.get_databases(filters=[linode.GetDatabasesFilterArgs(\n    name=\"engine\",\n    values=[\"mysql\"],\n)])\npulumi.export(\"databaseIds\", [__item.id for __item in [mysql.databases]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysql = Linode.GetDatabases.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabasesFilterInputArgs\n            {\n                Name = \"engine\",\n                Values = new[]\n                {\n                    \"mysql\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseIds\"] = new[]\n        {\n            mysql.Apply(getDatabasesResult =\u003e getDatabasesResult.Databases),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()\n            .filters(GetDatabasesFilterArgs.builder()\n                .name(\"engine\")\n                .values(\"mysql\")\n                .build())\n            .build());\n\n        ctx.export(\"databaseIds\", mysql.applyValue(getDatabasesResult -\u003e getDatabasesResult.databases()).stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesFilter:getDatabasesFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest create database will be returned.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`version`)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesDatabase:getDatabasesDatabase"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesFilter:getDatabasesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "databases",
                    "id"
                ]
            }
        },
        "linode:index/getDomain:getDomain": {
            "description": "Provides information about a Linode domain.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode domain.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getDomain({\n    id: \"1234567\",\n});\nconst bar = linode.getDomain({\n    domain: \"bar.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_domain(id=\"1234567\")\nbar = linode.get_domain(domain=\"bar.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetDomain.Invoke(new()\n    {\n        Id = \"1234567\",\n    });\n\n    var bar = Linode.GetDomain.Invoke(new()\n    {\n        Domain = \"bar.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDomain(ctx, \u0026linode.LookupDomainArgs{\n\t\t\tId: pulumi.StringRef(\"1234567\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.LookupDomain(ctx, \u0026linode.LookupDomainArgs{\n\t\t\tDomain: pulumi.StringRef(\"bar.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()\n            .id(\"1234567\")\n            .build());\n\n        final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()\n            .domain(\"bar.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: linode:getDomain\n      Arguments:\n        id: '1234567'\n  bar:\n    fn::invoke:\n      Function: linode:getDomain\n      Arguments:\n        domain: bar.example.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The unique domain name of the Domain record to query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique numeric ID of the Domain record to query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "axfrIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IPs that may perform a zone transfer for this Domain.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for this Domain.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain\n"
                    },
                    "expireSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The group this Domain belongs to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this Domain.\n"
                    },
                    "masterIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses representing the master DNS for this Domain.\n"
                    },
                    "refreshSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds before this Domain should be refreshed.\n"
                    },
                    "retrySec": {
                        "type": "integer",
                        "description": "The interval, in seconds, at which a failed refresh should be retried.\n"
                    },
                    "soaEmail": {
                        "type": "string",
                        "description": "Start of Authority email address.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Used to control whether this Domain is currently being rendered. (`disabled`, `active`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of tags applied to this object.\n"
                    },
                    "ttlSec": {
                        "type": "integer",
                        "description": "'Time to Live'-the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "axfrIps",
                    "description",
                    "expireSec",
                    "group",
                    "masterIps",
                    "refreshSec",
                    "retrySec",
                    "soaEmail",
                    "status",
                    "tags",
                    "ttlSec",
                    "type"
                ]
            }
        },
        "linode:index/getDomainRecord:getDomainRecord": {
            "description": "Provides information about a Linode Domain Record.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode Domain Record.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myRecord = linode.getDomainRecord({\n    domainId: 3150401,\n    id: 14950401,\n});\nconst myWwwRecord = linode.getDomainRecord({\n    domainId: 3150401,\n    name: \"www\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_record = linode.get_domain_record(domain_id=3150401,\n    id=14950401)\nmy_www_record = linode.get_domain_record(domain_id=3150401,\n    name=\"www\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRecord = Linode.GetDomainRecord.Invoke(new()\n    {\n        DomainId = 3150401,\n        Id = 14950401,\n    });\n\n    var myWwwRecord = Linode.GetDomainRecord.Invoke(new()\n    {\n        DomainId = 3150401,\n        Name = \"www\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDomainRecord(ctx, \u0026linode.LookupDomainRecordArgs{\n\t\t\tDomainId: 3150401,\n\t\t\tId:       pulumi.IntRef(14950401),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.LookupDomainRecord(ctx, \u0026linode.LookupDomainRecordArgs{\n\t\t\tDomainId: 3150401,\n\t\t\tName:     pulumi.StringRef(\"www\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .domainId(\"3150401\")\n            .id(\"14950401\")\n            .build());\n\n        final var myWwwRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .domainId(\"3150401\")\n            .name(\"www\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myRecord:\n    fn::invoke:\n      Function: linode:getDomainRecord\n      Arguments:\n        domainId: '3150401'\n        id: '14950401'\n  myWwwRecord:\n    fn::invoke:\n      Function: linode:getDomainRecord\n      Arguments:\n        domainId: '3150401'\n        name: www\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The associated domain's unique ID.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of the Domain Record.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Record.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The associated domain's unique ID.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of the Domain Record.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Record.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port this Record points to.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the target host. Lower values are preferred.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The service this Record identified. Only valid for SRV records.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag portion of a CAA record.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n"
                    },
                    "ttlSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of Record this is in the DNS system. See all record types [here](https://www.linode.com/docs/api/domains/#domain-records-list__responses).\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The relative weight of this Record. Higher values are preferred.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId",
                    "port",
                    "priority",
                    "protocol",
                    "service",
                    "tag",
                    "target",
                    "ttlSec",
                    "type",
                    "weight"
                ]
            }
        },
        "linode:index/getDomainZonefile:getDomainZonefile": {
            "description": "Provides information about a Linode Domain Zonefile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode Domain Zonefile.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myZonefile = linode.getDomainZonefile({\n    domainId: 3150401,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_zonefile = linode.get_domain_zonefile(domain_id=3150401)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myZonefile = Linode.GetDomainZonefile.Invoke(new()\n    {\n        DomainId = 3150401,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDomainZonefile(ctx, \u0026linode.GetDomainZonefileArgs{\n\t\t\tDomainId: 3150401,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainZonefileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myZonefile = LinodeFunctions.getDomainZonefile(GetDomainZonefileArgs.builder()\n            .domainId(3150401)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myZonefile:\n    fn::invoke:\n      Function: linode:getDomainZonefile\n      Arguments:\n        domainId: 3.150401e+06\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainZonefile.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The associated domain's unique ID.\n"
                    },
                    "zoneFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of strings representing the Domain Zonefile.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomainZonefile.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The associated domain's unique ID.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "zoneFiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of strings representing the Domain Zonefile.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId",
                    "id"
                ]
            }
        },
        "linode:index/getFirewall:getFirewall": {
            "description": "Provides details about a Linode Firewall.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-firewall = linode.getFirewall({\n    id: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_firewall = linode.get_firewall(id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_firewall = Linode.GetFirewall.Invoke(new()\n    {\n        Id = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupFirewall(ctx, \u0026linode.LookupFirewallArgs{\n\t\t\tId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetFirewallArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-firewall = LinodeFunctions.getFirewall(GetFirewallArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-firewall:\n    fn::invoke:\n      Function: linode:getFirewall\n      Arguments:\n        id: 123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewall.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The Firewall's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFirewall.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallDevice:getFirewallDevice"
                        }
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "If true, the firewall is inactive.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of the Firewall Device.\n"
                    },
                    "inboundPolicy": {
                        "type": "string",
                        "description": "The default behavior for inbound traffic. (`ACCEPT`, `DROP`)\n"
                    },
                    "inbounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallInbound:getFirewallInbound"
                        }
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the underlying entity this device references.\n"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The IDs of Linodes to apply this firewall to.\n"
                    },
                    "outboundPolicy": {
                        "type": "string",
                        "description": "The default behavior for outbound traffic. (`ACCEPT`, `DROP`)\n"
                    },
                    "outbounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallOutbound:getFirewallOutbound"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the firewall. (`enabled`, `disabled`, `deleted`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags applied to the firewall.\n"
                    }
                },
                "type": "object",
                "required": [
                    "devices",
                    "disabled",
                    "id",
                    "inbounds",
                    "inboundPolicy",
                    "label",
                    "linodes",
                    "outbounds",
                    "outboundPolicy",
                    "status",
                    "tags"
                ]
            }
        },
        "linode:index/getImage:getImage": {
            "description": "Provides information about a Linode image\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode image.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst k8Master = linode.getImage({\n    id: \"linode/debian8\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nk8_master = linode.get_image(id=\"linode/debian8\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8Master = Linode.GetImage.Invoke(new()\n    {\n        Id = \"linode/debian8\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupImage(ctx, \u0026linode.LookupImageArgs{\n\t\t\tId: \"linode/debian8\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8Master = LinodeFunctions.getImage(GetImageArgs.builder()\n            .id(\"linode/debian8\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8Master:\n    fn::invoke:\n      Function: linode:getImage\n      Arguments:\n        id: linode/debian8\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When this Image was created.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The name of the User who created this Image, or \"linode\" for official Images.\n"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether or not this Image is deprecated. Will only be true for deprecated public Images.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A detailed description of this Image.\n"
                    },
                    "expiry": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "True if the Image is public.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A short description of the Image.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The minimum size this Image needs to deploy. Size is in MB. example: 2500\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of this image. (`creating`, `pending_upload`, `available`)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "How the Image was created. Manual Images can be created at any time. \"Automatic\" Images are created automatically from a deleted Linode. (`manual`, `automatic`)\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The upstream distribution vendor. `None` for private Images.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "createdBy",
                    "deprecated",
                    "description",
                    "expiry",
                    "id",
                    "isPublic",
                    "label",
                    "size",
                    "status",
                    "type",
                    "vendor"
                ]
            }
        },
        "linode:index/getImages:getImages": {
            "description": "Provides information about Linode images that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all Linode images with a certain label and visibility:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific-images = linode.getImages({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"Debian 11\"],\n        },\n        {\n            name: \"is_public\",\n            values: [\"true\"],\n        },\n    ],\n});\nexport const imageId = specific_images.then(specific_images =\u003e specific_images.images?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_images = linode.get_images(filters=[\n    linode.GetImagesFilterArgs(\n        name=\"label\",\n        values=[\"Debian 11\"],\n    ),\n    linode.GetImagesFilterArgs(\n        name=\"is_public\",\n        values=[\"true\"],\n    ),\n])\npulumi.export(\"imageId\", specific_images.images[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_images = Linode.GetImages.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetImagesFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"Debian 11\",\n                },\n            },\n            new Linode.Inputs.GetImagesFilterInputArgs\n            {\n                Name = \"is_public\",\n                Values = new[]\n                {\n                    \"true\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"imageId\"] = specific_images.Apply(specific_images =\u003e specific_images.Apply(getImagesResult =\u003e getImagesResult.Images[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific_images, err := linode.GetImages(ctx, \u0026linode.GetImagesArgs{\n\t\t\tFilters: []linode.GetImagesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Debian 11\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"is_public\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"true\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"imageId\", specific_images.Images[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetImagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()\n            .filters(            \n                GetImagesFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"Debian 11\")\n                    .build(),\n                GetImagesFilterArgs.builder()\n                    .name(\"is_public\")\n                    .values(\"true\")\n                    .build())\n            .build());\n\n        ctx.export(\"imageId\", specific_images.images()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific-images:\n    fn::invoke:\n      Function: linode:getImages\n      Arguments:\n        filters:\n          - name: label\n            values:\n              - Debian 11\n          - name: is_public\n            values:\n              - 'true'\noutputs:\n  imageId: ${[\"specific-images\"].images[0].id}\n```\n\nGet information about all Linode images associated with the current token:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all-images = linode.getImages({});\nexport const imageIds = [all_images.then(all_images =\u003e all_images.images)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_images = linode.get_images()\npulumi.export(\"imageIds\", [__item.id for __item in [all_images.images]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_images = Linode.GetImages.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"imageIds\"] = new[]\n        {\n            all_images.Apply(all_images =\u003e all_images.Apply(getImagesResult =\u003e getImagesResult.Images)),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetImagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-images = LinodeFunctions.getImages();\n\n        ctx.export(\"imageIds\", all_images.images().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Filterable Fields\n\n* `created_by`\n\n* `deprecated`\n\n* `description`\n\n* `id`\n\n* `is_public`\n\n* `label`\n\n* `size`\n\n* `status`\n\n* `vendor`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImages.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getImagesFilter:getImagesFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest image will be returned. Images without a valid `created` field are not included in the result.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImages.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getImagesFilter:getImagesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getImagesImage:getImagesImage"
                        }
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "id"
                ]
            }
        },
        "linode:index/getInstanceBackups:getInstanceBackups": {
            "description": "Provides details about the backups of an Instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-backups = LinodeFunctions.getInstanceBackups(GetInstanceBackupsArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-backups:\n    fn::invoke:\n      Function: linode:getInstanceBackups\n      Arguments:\n        id: 123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceBackups.\n",
                "properties": {
                    "linodeId": {
                        "type": "integer",
                        "description": "The Linode instance's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "linodeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceBackups.\n",
                "properties": {
                    "automatics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceBackupsAutomatic:getInstanceBackupsAutomatic"
                        }
                    },
                    "currents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceBackupsCurrent:getInstanceBackupsCurrent"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inProgresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceBackupsInProgress:getInstanceBackupsInProgress"
                        }
                    },
                    "linodeId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "automatics",
                    "currents",
                    "inProgresses",
                    "linodeId",
                    "id"
                ]
            }
        },
        "linode:index/getInstanceNetworking:getInstanceNetworking": {
            "description": "Provides details about the networking configuration of an Instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceNetworkingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getInstanceNetworking(GetInstanceNetworkingArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: linode:getInstanceNetworking\n      Arguments:\n        id: 123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceNetworking.\n",
                "properties": {
                    "linodeId": {
                        "type": "integer",
                        "description": "The Linode instance's ID.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "linodeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceNetworking.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipv4s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceNetworkingIpv4:getInstanceNetworkingIpv4"
                        }
                    },
                    "ipv6s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceNetworkingIpv6:getInstanceNetworkingIpv6"
                        }
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode this address currently belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ipv4s",
                    "ipv6s",
                    "linodeId",
                    "id"
                ]
            }
        },
        "linode:index/getInstanceType:getInstanceType": {
            "description": "Provides information about a Linode instance type\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode Instance type.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst default = linode.getInstanceType({\n    id: \"g6-standard-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ndefault = linode.get_instance_type(id=\"g6-standard-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Linode.GetInstanceType.Invoke(new()\n    {\n        Id = \"g6-standard-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetInstanceType(ctx, \u0026linode.GetInstanceTypeArgs{\n\t\t\tId: \"g6-standard-2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = LinodeFunctions.getInstanceType(GetInstanceTypeArgs.builder()\n            .id(\"g6-standard-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: linode:getInstanceType\n      Arguments:\n        id: g6-standard-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceType.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Label used to identify instance type\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Linode Type's label is for display purposes only\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceType.\n",
                "properties": {
                    "addons": {
                        "$ref": "#/types/linode:index/getInstanceTypeAddons:getInstanceTypeAddons"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class of the Linode Type. See all classes [here](https://www.linode.com/docs/api/linode-types/#type-view__responses).\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "The Disk size, in MB, of the Linode Type\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID representing the Linode Type\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Linode Type's label is for display purposes only\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of RAM included in this Linode Type.\n"
                    },
                    "networkOut": {
                        "type": "integer",
                        "description": "The Mbits outbound bandwidth allocation.\n"
                    },
                    "price": {
                        "$ref": "#/types/linode:index/getInstanceTypePrice:getInstanceTypePrice"
                    },
                    "transfer": {
                        "type": "integer",
                        "description": "The monthly outbound transfer amount, in MB.\n"
                    },
                    "vcpus": {
                        "type": "integer",
                        "description": "The number of VCPU cores this Linode Type offers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addons",
                    "class",
                    "disk",
                    "id",
                    "label",
                    "memory",
                    "networkOut",
                    "price",
                    "transfer",
                    "vcpus"
                ]
            }
        },
        "linode:index/getInstanceTypes:getInstanceTypes": {
            "description": "Provides information about Linode Instance types that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all Linode Instance types with a certain number of VCPUs:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific-types = linode.getInstanceTypes({\n    filters: [{\n        name: \"vcpus\",\n        values: [\"2\"],\n    }],\n});\nexport const typeIds = [specific_types.then(specific_types =\u003e specific_types.types)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_types = linode.get_instance_types(filters=[linode.GetInstanceTypesFilterArgs(\n    name=\"vcpus\",\n    values=[\"2\"],\n)])\npulumi.export(\"typeIds\", [__item.id for __item in [specific_types.types]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_types = Linode.GetInstanceTypes.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetInstanceTypesFilterInputArgs\n            {\n                Name = \"vcpus\",\n                Values = new[]\n                {\n                    \"2\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"typeIds\"] = new[]\n        {\n            specific_types.Apply(specific_types =\u003e specific_types.Apply(getInstanceTypesResult =\u003e getInstanceTypesResult.Types)),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceTypesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()\n            .filters(GetInstanceTypesFilterArgs.builder()\n                .name(\"vcpus\")\n                .values(2)\n                .build())\n            .build());\n\n        ctx.export(\"typeIds\", specific_types.types().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\nGet information about all Linode Instance types:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all-types = linode.getInstanceTypes({});\nexport const typeIds = [all_types.then(all_types =\u003e all_types.types)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_types = linode.get_instance_types()\npulumi.export(\"typeIds\", [__item.id for __item in [all_types.types]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_types = Linode.GetInstanceTypes.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"typeIds\"] = new[]\n        {\n            all_types.Apply(all_types =\u003e all_types.Apply(getInstanceTypesResult =\u003e getInstanceTypesResult.Types)),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceTypesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-types = LinodeFunctions.getInstanceTypes();\n\n        ctx.export(\"typeIds\", all_types.types().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Filterable Fields\n\n* `class`\n\n* `disk`\n\n* `gpus`\n\n* `label`\n\n* `memory`\n\n* `network_out`\n\n* `transfer`\n\n* `vcpus`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceTypes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesFilter:getInstanceTypesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceTypes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesFilter:getInstanceTypesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesType:getInstanceTypesType"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "types",
                    "id"
                ]
            }
        },
        "linode:index/getInstances:getInstances": {
            "description": "Provides information about Linode instances that match a set of filters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about all Linode instances with a certain label and tag:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-instances = linode.getInstances({\n    filters: [\n        {\n            name: \"label\",\n            values: [\n                \"my-label\",\n                \"my-other-label\",\n            ],\n        },\n        {\n            name: \"tags\",\n            values: [\"my-tag\"],\n        },\n    ],\n});\nexport const instanceId = my_instances.then(my_instances =\u003e my_instances.instances?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instances = linode.get_instances(filters=[\n    linode.GetInstancesFilterArgs(\n        name=\"label\",\n        values=[\n            \"my-label\",\n            \"my-other-label\",\n        ],\n    ),\n    linode.GetInstancesFilterArgs(\n        name=\"tags\",\n        values=[\"my-tag\"],\n    ),\n])\npulumi.export(\"instanceId\", my_instances.instances[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instances = Linode.GetInstances.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetInstancesFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-label\",\n                    \"my-other-label\",\n                },\n            },\n            new Linode.Inputs.GetInstancesFilterInputArgs\n            {\n                Name = \"tags\",\n                Values = new[]\n                {\n                    \"my-tag\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceId\"] = my_instances.Apply(my_instances =\u003e my_instances.Apply(getInstancesResult =\u003e getInstancesResult.Instances[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_instances, err := linode.GetInstances(ctx, \u0026linode.GetInstancesArgs{\n\t\t\tFilters: []linode.GetInstancesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-label\",\n\t\t\t\t\t\t\"my-other-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"tags\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-tag\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"instanceId\", my_instances.Instances[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstancesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-instances = LinodeFunctions.getInstances(GetInstancesArgs.builder()\n            .filters(            \n                GetInstancesFilterArgs.builder()\n                    .name(\"label\")\n                    .values(                    \n                        \"my-label\",\n                        \"my-other-label\")\n                    .build(),\n                GetInstancesFilterArgs.builder()\n                    .name(\"tags\")\n                    .values(\"my-tag\")\n                    .build())\n            .build());\n\n        ctx.export(\"instanceId\", my_instances.instances()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  my-instances:\n    fn::invoke:\n      Function: linode:getInstances\n      Arguments:\n        filters:\n          - name: label\n            values:\n              - my-label\n              - my-other-label\n          - name: tags\n            values:\n              - my-tag\noutputs:\n  instanceId: ${[\"my-instances\"].instances[0].id}\n```\n\nGet information about all Linode instances associated with the current token:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all-instances = linode.getInstances({});\nexport const instanceIds = [all_instances.then(all_instances =\u003e all_instances.instances)].map(__item =\u003e __item?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_instances = linode.get_instances()\npulumi.export(\"instanceIds\", [__item.id for __item in [all_instances.instances]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_instances = Linode.GetInstances.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceIds\"] = new[]\n        {\n            all_instances.Apply(all_instances =\u003e all_instances.Apply(getInstancesResult =\u003e getInstancesResult.Instances)),\n        }.Select(__item =\u003e __item?.Id).ToList(),\n    };\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstancesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-instances = LinodeFunctions.getInstances();\n\n        ctx.export(\"instanceIds\", all_instances.instances().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Filterable Fields\n\n* `group`\n\n* `id`\n\n* `image`\n\n* `label`\n\n* `region`\n\n* `status`\n\n* `tags`\n\n* `type`\n\n* `watchdog_enabled`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstancesFilter:getInstancesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstancesFilter:getInstancesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstancesInstance:getInstancesInstance"
                        }
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "id"
                ]
            }
        },
        "linode:index/getIpv6Range:getIpv6Range": {
            "description": "Provides information about a Linode IPv6 Range.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nGet information about an IPv6 range assigned to a Linode:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst range-info = linode.getIpv6Range({\n    range: \"2001:0db8::\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nrange_info = linode.get_ipv6_range(range=\"2001:0db8::\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var range_info = Linode.GetIpv6Range.Invoke(new()\n    {\n        Range = \"2001:0db8::\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupIpv6Range(ctx, \u0026linode.LookupIpv6RangeArgs{\n\t\t\tRange: \"2001:0db8::\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetIpv6RangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var range-info = LinodeFunctions.getIpv6Range(GetIpv6RangeArgs.builder()\n            .range(\"2001:0db8::\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  range-info:\n    fn::invoke:\n      Function: linode:getIpv6Range\n      Arguments:\n        range: '2001:0db8::'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpv6Range.\n",
                "properties": {
                    "range": {
                        "type": "string",
                        "description": "The IPv6 range to retrieve information about.\n"
                    }
                },
                "type": "object",
                "required": [
                    "range"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpv6Range.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isBgp": {
                        "type": "boolean"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A set of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n"
                    },
                    "prefix": {
                        "type": "integer",
                        "description": "The prefix length of the address, denoting how many addresses can be assigned from this range.\n"
                    },
                    "range": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for this range of IPv6 addresses.\n"
                    }
                },
                "type": "object",
                "required": [
                    "isBgp",
                    "linodes",
                    "prefix",
                    "range",
                    "region",
                    "id"
                ]
            }
        },
        "linode:index/getKernel:getKernel": {
            "description": "Provides information about a Linode kernel\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode kernel.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst latest = linode.getKernel({\n    id: \"linode/latest-64bit\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nlatest = linode.get_kernel(id=\"linode/latest-64bit\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var latest = Linode.GetKernel.Invoke(new()\n    {\n        Id = \"linode/latest-64bit\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetKernel(ctx, \u0026linode.GetKernelArgs{\n\t\t\tId: \"linode/latest-64bit\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetKernelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var latest = LinodeFunctions.getKernel(GetKernelArgs.builder()\n            .id(\"linode/latest-64bit\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  latest:\n    fn::invoke:\n      Function: linode:getKernel\n      Arguments:\n        id: linode/latest-64bit\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKernel.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this Kernel.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKernel.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "The architecture of this Kernel.\n"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether or not this Kernel is deprecated.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kvm": {
                        "type": "boolean",
                        "description": "If this Kernel is suitable for KVM Linodes.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The friendly name of this Kernel.\n"
                    },
                    "pvops": {
                        "type": "boolean",
                        "description": "If this Kernel is suitable for paravirtualized operations.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Linux Kernel version\n"
                    },
                    "xen": {
                        "type": "boolean",
                        "description": "If this Kernel is suitable for Xen Linodes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "architecture",
                    "deprecated",
                    "id",
                    "kvm",
                    "label",
                    "pvops",
                    "version",
                    "xen"
                ]
            }
        },
        "linode:index/getLinodeObjectStorageBucket:getLinodeObjectStorageBucket": {
            "inputs": {
                "description": "A collection of arguments for invoking getLinodeObjectStorageBucket.\n",
                "properties": {
                    "cluster": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cluster",
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLinodeObjectStorageBucket.\n",
                "properties": {
                    "cluster": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "objects": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "cluster",
                    "created",
                    "hostname",
                    "id",
                    "label",
                    "objects",
                    "size"
                ]
            }
        },
        "linode:index/getLkeCluster:getLkeCluster": {
            "description": "Provides details about an LKE Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-cluster = linode.getLkeCluster({\n    id: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_cluster = linode.get_lke_cluster(id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_cluster = Linode.GetLkeCluster.Invoke(new()\n    {\n        Id = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupLkeCluster(ctx, \u0026linode.LookupLkeClusterArgs{\n\t\t\tId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-cluster = LinodeFunctions.getLkeCluster(GetLkeClusterArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-cluster:\n    fn::invoke:\n      Function: linode:getLkeCluster\n      Arguments:\n        id: 123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLkeCluster.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The LKE Cluster's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLkeCluster.\n",
                "properties": {
                    "apiEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The endpoints for the Kubernetes API server.\n"
                    },
                    "controlPlanes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClusterControlPlane:getLkeClusterControlPlane"
                        }
                    },
                    "dashboardUrl": {
                        "type": "string",
                        "description": "The Kubernetes Dashboard access URL for this cluster.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of the node.\n"
                    },
                    "k8sVersion": {
                        "type": "string",
                        "description": "The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).\n"
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "The base64 encoded kubeconfig for the Kubernetes cluster.\n",
                        "secret": true
                    },
                    "label": {
                        "type": "string"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClusterPool:getLkeClusterPool"
                        },
                        "description": "Node pools associated with this cluster.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "This Kubernetes cluster's location.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node. (`ready`, `not_ready`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags applied to the cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "apiEndpoints",
                    "controlPlanes",
                    "dashboardUrl",
                    "id",
                    "k8sVersion",
                    "kubeconfig",
                    "label",
                    "pools",
                    "region",
                    "status",
                    "tags"
                ]
            }
        },
        "linode:index/getLkeVersions:getLkeVersions": {
            "description": "Provides details about the Kubernetes versions available for deployment to a Kubernetes cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode LKE Version.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getLkeVersions({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_lke_versions()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetLkeVersions.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetLkeVersions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getLkeVersions();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: linode:getLkeVersions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getLkeVersions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeVersionsVersion:getLkeVersionsVersion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "versions",
                    "id"
                ]
            }
        },
        "linode:index/getNetworkingIp:getNetworkingIp": {
            "description": "Provides information about a Linode Networking IP Address\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode Networking IP Address.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst ns1LinodeCom = linode.getNetworkingIp({\n    address: \"162.159.27.72\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nns1_linode_com = linode.get_networking_ip(address=\"162.159.27.72\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ns1LinodeCom = Linode.GetNetworkingIp.Invoke(new()\n    {\n        Address = \"162.159.27.72\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetNetworkingIp(ctx, \u0026linode.GetNetworkingIpArgs{\n\t\t\tAddress: \"162.159.27.72\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNetworkingIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ns1LinodeCom = LinodeFunctions.getNetworkingIp(GetNetworkingIpArgs.builder()\n            .address(\"162.159.27.72\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ns1LinodeCom:\n    fn::invoke:\n      Function: linode:getNetworkingIp\n      Arguments:\n        address: 162.159.27.72\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkingIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP Address to access.  The address must be associated with the account and a resource that the user has access to view.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkingIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The default gateway for this address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode this address currently belongs to.\n"
                    },
                    "prefix": {
                        "type": "integer",
                        "description": "The number of bits set in the subnet mask.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether this is a public or private IP address.\n"
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).\n"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "The mask that separates host bits from network bits for this address.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "gateway",
                    "linodeId",
                    "prefix",
                    "public",
                    "rdns",
                    "region",
                    "subnetMask",
                    "type",
                    "id"
                ]
            }
        },
        "linode:index/getNodeBalancer:getNodeBalancer": {
            "description": "Provides details about a Linode NodeBalancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-nodebalancer = linode.getNodeBalancer({\n    id: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_nodebalancer = linode.get_node_balancer(id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_nodebalancer = Linode.GetNodeBalancer.Invoke(new()\n    {\n        Id = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNodeBalancer(ctx, \u0026linode.LookupNodeBalancerArgs{\n\t\t\tId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodeBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-nodebalancer = LinodeFunctions.getNodeBalancer(GetNodeBalancerArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-nodebalancer:\n    fn::invoke:\n      Function: linode:getNodeBalancer\n      Arguments:\n        id: 123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeBalancer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The NodeBalancer's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeBalancer.\n",
                "properties": {
                    "clientConnThrottle": {
                        "type": "integer",
                        "description": "Throttle connections per second (0-20).\n"
                    },
                    "created": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "This NodeBalancer's hostname, ending with .nodebalancer.linode.com\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "The Public IPv4 Address of this NodeBalancer\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "The Public IPv6 Address of this NodeBalancer\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode NodeBalancer\n"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are for organizational purposes only.\n"
                    },
                    "transfers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodeBalancerTransfer:getNodeBalancerTransfer"
                        }
                    },
                    "updated": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clientConnThrottle",
                    "created",
                    "hostname",
                    "id",
                    "ipv4",
                    "ipv6",
                    "label",
                    "region",
                    "tags",
                    "transfers",
                    "updated"
                ]
            }
        },
        "linode:index/getNodeBalancerConfig:getNodeBalancerConfig": {
            "description": "Provides details about a Linode NodeBalancer Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-config = linode.getNodeBalancerConfig({\n    id: 123,\n    nodebalancerId: 456,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_config = linode.get_node_balancer_config(id=123,\n    nodebalancer_id=456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_config = Linode.GetNodeBalancerConfig.Invoke(new()\n    {\n        Id = 123,\n        NodebalancerId = 456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNodeBalancerConfig(ctx, \u0026linode.LookupNodeBalancerConfigArgs{\n\t\t\tId:             123,\n\t\t\tNodebalancerId: 456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-config = LinodeFunctions.getNodeBalancerConfig(GetNodeBalancerConfigArgs.builder()\n            .id(123)\n            .nodebalancerId(456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-config:\n    fn::invoke:\n      Function: linode:getNodeBalancerConfig\n      Arguments:\n        id: 123\n        nodebalancerId: 456\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeBalancerConfig.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The config's ID.\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer that contains the config.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "nodebalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeBalancerConfig.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "What algorithm this NodeBalancer should use for routing traffic to backends (`roundrobin`, `leastconn`, `source`)\n"
                    },
                    "check": {
                        "type": "string",
                        "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                    },
                    "checkAttempts": {
                        "type": "integer",
                        "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                    },
                    "checkBody": {
                        "type": "string"
                    },
                    "checkInterval": {
                        "type": "integer",
                        "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                    },
                    "checkPassive": {
                        "type": "boolean",
                        "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                    },
                    "checkPath": {
                        "type": "string",
                        "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                    },
                    "checkTimeout": {
                        "type": "integer",
                        "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                    },
                    "cipherSuite": {
                        "type": "string",
                        "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary. (`recommended`, `legacy`)\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "nodeStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodeBalancerConfigNodeStatus:getNodeBalancerConfigNodeStatus"
                        }
                    },
                    "nodebalancerId": {
                        "type": "integer"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The TCP port this Config is for.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, and `v2`) (Defaults to `none`)\n"
                    },
                    "sslCommonname": {
                        "type": "string",
                        "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                    },
                    "sslFingerprint": {
                        "type": "string",
                        "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                    },
                    "stickiness": {
                        "type": "string",
                        "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "check",
                    "checkAttempts",
                    "checkBody",
                    "checkInterval",
                    "checkPassive",
                    "checkPath",
                    "checkTimeout",
                    "cipherSuite",
                    "id",
                    "nodeStatuses",
                    "nodebalancerId",
                    "port",
                    "protocol",
                    "proxyProtocol",
                    "sslCommonname",
                    "sslFingerprint",
                    "stickiness"
                ]
            }
        },
        "linode:index/getNodeBalancerNode:getNodeBalancerNode": {
            "description": "Provides details about a Linode NodeBalancer node.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my-node = linode.getNodeBalancerNode({\n    configId: 789,\n    id: 123,\n    nodebalancerId: 456,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_node = linode.get_node_balancer_node(config_id=789,\n    id=123,\n    nodebalancer_id=456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_node = Linode.GetNodeBalancerNode.Invoke(new()\n    {\n        ConfigId = 789,\n        Id = 123,\n        NodebalancerId = 456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNodeBalancerNode(ctx, \u0026linode.LookupNodeBalancerNodeArgs{\n\t\t\tConfigId:       789,\n\t\t\tId:             123,\n\t\t\tNodebalancerId: 456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-node = LinodeFunctions.getNodeBalancerNode(GetNodeBalancerNodeArgs.builder()\n            .configId(789)\n            .id(123)\n            .nodebalancerId(456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-node:\n    fn::invoke:\n      Function: linode:getNodeBalancerNode\n      Arguments:\n        configId: 789\n        id: 123\n        nodebalancerId: 456\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeBalancerNode.\n",
                "properties": {
                    "configId": {
                        "type": "integer",
                        "description": "The ID of the config that contains the Node.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The node's ID.\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer that contains the node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configId",
                    "id",
                    "nodebalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeBalancerNode.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The private IP Address where this backend can be reached.\n"
                    },
                    "configId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                    },
                    "nodebalancerId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "configId",
                    "id",
                    "label",
                    "mode",
                    "nodebalancerId",
                    "status",
                    "weight"
                ]
            }
        },
        "linode:index/getObjectStorageCluster:getObjectStorageCluster": {
            "description": "Provides information about a Linode Object Storage Cluster\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode Object Storage Cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst primary = linode.getObjectStorageCluster({\n    id: \"us-east-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nprimary = linode.get_object_storage_cluster(id=\"us-east-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var primary = Linode.GetObjectStorageCluster.Invoke(new()\n    {\n        Id = \"us-east-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetObjectStorageCluster(ctx, \u0026linode.GetObjectStorageClusterArgs{\n\t\t\tId: \"us-east-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetObjectStorageClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()\n            .id(\"us-east-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  primary:\n    fn::invoke:\n      Function: linode:getObjectStorageCluster\n      Arguments:\n        id: us-east-1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectStorageCluster.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The base URL for this cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this cluster.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).\n"
                    },
                    "staticSiteDomain": {
                        "type": "string",
                        "description": "The base URL for this cluster used when hosting static sites.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "This cluster's status. (`available`, `unavailable`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectStorageCluster.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The base URL for this cluster.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).\n"
                    },
                    "staticSiteDomain": {
                        "type": "string",
                        "description": "The base URL for this cluster used when hosting static sites.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "This cluster's status. (`available`, `unavailable`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "id",
                    "region",
                    "staticSiteDomain",
                    "status"
                ]
            }
        },
        "linode:index/getProfile:getProfile": {
            "description": "Provides information about a Linode profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access profile details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst profile = linode.getProfile({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nprofile = linode.get_profile()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var profile = Linode.GetProfile.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetProfile(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var profile = LinodeFunctions.getProfile();\n\n    }\n}\n```\n```yaml\nvariables:\n  profile:\n    fn::invoke:\n      Function: linode:getProfile\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "authorizedKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is 'disabled'.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The profile email address. This address will be used for communication with Linode as necessary.\n"
                    },
                    "emailNotifications": {
                        "type": "boolean",
                        "description": "If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipWhitelistEnabled": {
                        "type": "boolean",
                        "description": "If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.\n"
                    },
                    "lishAuthMethod": {
                        "type": "string",
                        "description": "The methods of authentication allowed when connecting via Lish. 'keys_only' is the most secure with the intent to use Lish, and 'disabled' is recommended for users that will not use Lish at all.\n"
                    },
                    "referrals": {
                        "$ref": "#/types/linode:index/getProfileReferrals:getProfileReferrals",
                        "description": "Credit Card information associated with this Account.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "If true, the user has restrictions on what can be accessed on the Account.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The profile's preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.\n"
                    },
                    "twoFactorAuth": {
                        "type": "boolean",
                        "description": "If true, logins from untrusted computers will require Two Factor Authentication.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username for logging in to Linode services.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorizedKeys",
                    "email",
                    "emailNotifications",
                    "ipWhitelistEnabled",
                    "lishAuthMethod",
                    "referrals",
                    "restricted",
                    "timezone",
                    "twoFactorAuth",
                    "username",
                    "id"
                ]
            }
        },
        "linode:index/getRegion:getRegion": {
            "description": "`linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how the resource might be used to obtain additional information about a Linode region.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst region = linode.getRegion({\n    id: \"us-east\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nregion = linode.get_region(id=\"us-east\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var region = Linode.GetRegion.Invoke(new()\n    {\n        Id = \"us-east\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetRegion(ctx, \u0026linode.GetRegionArgs{\n\t\t\tId: \"us-east\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var region = LinodeFunctions.getRegion(GetRegionArgs.builder()\n            .id(\"us-east\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  region:\n    fn::invoke:\n      Function: linode:getRegion\n      Arguments:\n        id: us-east\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "The country the region resides in.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The code name of the region to select.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of capabilities of this region.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country the region resides in.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string",
                        "description": "Detailed location information for this Region, including city, state or region, and country.\n"
                    },
                    "resolvers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionResolver:getRegionResolver"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "This regionâ€™s current operational status (ok or outage).\n"
                    }
                },
                "type": "object",
                "required": [
                    "capabilities",
                    "country",
                    "id",
                    "label",
                    "resolvers",
                    "status"
                ]
            }
        },
        "linode:index/getRegions:getRegions": {
            "description": "Provides information about Linode regions that match a set of filters.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered-regions = linode.getRegions({\n    filters: [\n        {\n            name: \"status\",\n            values: [\"ok\"],\n        },\n        {\n            name: \"capabilities\",\n            values: [\"NodeBalancers\"],\n        },\n    ],\n});\nexport const regions = filtered_regions.then(filtered_regions =\u003e filtered_regions.regions);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_regions = linode.get_regions(filters=[\n    linode.GetRegionsFilterArgs(\n        name=\"status\",\n        values=[\"ok\"],\n    ),\n    linode.GetRegionsFilterArgs(\n        name=\"capabilities\",\n        values=[\"NodeBalancers\"],\n    ),\n])\npulumi.export(\"regions\", filtered_regions.regions)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_regions = Linode.GetRegions.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetRegionsFilterInputArgs\n            {\n                Name = \"status\",\n                Values = new[]\n                {\n                    \"ok\",\n                },\n            },\n            new Linode.Inputs.GetRegionsFilterInputArgs\n            {\n                Name = \"capabilities\",\n                Values = new[]\n                {\n                    \"NodeBalancers\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"regions\"] = filtered_regions.Apply(filtered_regions =\u003e filtered_regions.Apply(getRegionsResult =\u003e getRegionsResult.Regions)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_regions, err := linode.GetRegions(ctx, \u0026linode.GetRegionsArgs{\n\t\t\tFilters: []linode.GetRegionsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"status\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"ok\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"capabilities\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"NodeBalancers\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"regions\", filtered_regions.Regions)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetRegionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-regions = LinodeFunctions.getRegions(GetRegionsArgs.builder()\n            .filters(            \n                GetRegionsFilterArgs.builder()\n                    .name(\"status\")\n                    .values(\"ok\")\n                    .build(),\n                GetRegionsFilterArgs.builder()\n                    .name(\"capabilities\")\n                    .values(\"NodeBalancers\")\n                    .build())\n            .build());\n\n        ctx.export(\"regions\", filtered_regions.regions());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-regions:\n    fn::invoke:\n      Function: linode:getRegions\n      Arguments:\n        filters:\n          - name: status\n            values:\n              - ok\n          - name: capabilities\n            values:\n              - NodeBalancers\noutputs:\n  regions: ${[\"filtered-regions\"].regions}\n```\n\n## Filterable Fields\n\n* `status`\n\n* `country`\n\n* `capabilities`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegions.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsFilter:getRegionsFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegions.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsFilter:getRegionsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsRegion:getRegionsRegion"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "regions",
                    "id"
                ]
            }
        },
        "linode:index/getSshKey:getSshKey": {
            "description": "`linode.SshKey` provides access to a specifically labeled SSH Key in the Profile of the User identified by the access token.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how the resource might be used to obtain the name of the SSH Key configured on the Linode user profile.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getSshKey({\n    label: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_ssh_key(label=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetSshKey.Invoke(new()\n    {\n        Label = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupSshKey(ctx, \u0026linode.LookupSshKeyArgs{\n\t\t\tLabel: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getSshKey(GetSshKeyArgs.builder()\n            .label(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: linode:getSshKey\n      Arguments:\n        label: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "The label of the SSH Key to select.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this key was added.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "label",
                    "sshKey",
                    "id"
                ]
            }
        },
        "linode:index/getStackScript:getStackScript": {
            "description": "Provides details about a specific Linode StackScript.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode StackScript.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myStackscript = linode.getStackScript({\n    id: 355872,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_stackscript = linode.get_stack_script(id=355872)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myStackscript = Linode.GetStackScript.Invoke(new()\n    {\n        Id = 355872,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupStackScript(ctx, \u0026linode.LookupStackScriptArgs{\n\t\t\tId: 355872,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetStackScriptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myStackscript = LinodeFunctions.getStackScript(GetStackScriptArgs.builder()\n            .id(355872)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myStackscript:\n    fn::invoke:\n      Function: linode:getStackScript\n      Arguments:\n        id: 355872\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStackScript.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique numeric ID of the StackScript to query.\n"
                    },
                    "userDefinedFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptUserDefinedField:getStackScriptUserDefinedField"
                        },
                        "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStackScript.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this StackScript was created.\n"
                    },
                    "deploymentsActive": {
                        "type": "integer",
                        "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                    },
                    "deploymentsTotal": {
                        "type": "integer",
                        "description": "The total number of times this StackScript has been deployed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the StackScript.\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                    },
                    "revNote": {
                        "type": "string",
                        "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date this StackScript was updated.\n"
                    },
                    "userDefinedFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptUserDefinedField:getStackScriptUserDefinedField"
                        },
                        "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                    },
                    "userGravatarId": {
                        "type": "string",
                        "description": "The Gravatar ID for the User who created the StackScript.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The User who created the StackScript.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "deploymentsActive",
                    "deploymentsTotal",
                    "description",
                    "id",
                    "images",
                    "isPublic",
                    "label",
                    "revNote",
                    "script",
                    "updated",
                    "userDefinedFields",
                    "userGravatarId",
                    "username"
                ]
            }
        },
        "linode:index/getStackScripts:getStackScripts": {
            "description": "Provides information about Linode StackScripts that match a set of filters.\n\n**NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode StackScript.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific-stackscripts = linode.getStackScripts({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"my-cool-stackscript\"],\n        },\n        {\n            name: \"is_public\",\n            values: [\"false\"],\n        },\n    ],\n});\nexport const stackscriptId = specific_stackscripts.then(specific_stackscripts =\u003e specific_stackscripts.stackscripts?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_stackscripts = linode.get_stack_scripts(filters=[\n    linode.GetStackScriptsFilterArgs(\n        name=\"label\",\n        values=[\"my-cool-stackscript\"],\n    ),\n    linode.GetStackScriptsFilterArgs(\n        name=\"is_public\",\n        values=[\"false\"],\n    ),\n])\npulumi.export(\"stackscriptId\", specific_stackscripts.stackscripts[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_stackscripts = Linode.GetStackScripts.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetStackScriptsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-cool-stackscript\",\n                },\n            },\n            new Linode.Inputs.GetStackScriptsFilterInputArgs\n            {\n                Name = \"is_public\",\n                Values = new[]\n                {\n                    \"false\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"stackscriptId\"] = specific_stackscripts.Apply(specific_stackscripts =\u003e specific_stackscripts.Apply(getStackScriptsResult =\u003e getStackScriptsResult.Stackscripts[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific_stackscripts, err := linode.GetStackScripts(ctx, \u0026linode.GetStackScriptsArgs{\n\t\t\tFilters: []linode.GetStackScriptsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-cool-stackscript\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"is_public\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"false\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"stackscriptId\", specific_stackscripts.Stackscripts[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetStackScriptsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()\n            .filters(            \n                GetStackScriptsFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"my-cool-stackscript\")\n                    .build(),\n                GetStackScriptsFilterArgs.builder()\n                    .name(\"is_public\")\n                    .values(false)\n                    .build())\n            .build());\n\n        ctx.export(\"stackscriptId\", specific_stackscripts.stackscripts()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific-stackscripts:\n    fn::invoke:\n      Function: linode:getStackScripts\n      Arguments:\n        filters:\n          - name: label\n            values:\n              - my-cool-stackscript\n          - name: is_public\n            values:\n              - false\noutputs:\n  stackscriptId: ${[\"specific-stackscripts\"].stackscripts[0].id}\n```\n{{% /example %}}\n{{% /examples %}}\n## Filterable Fields\n\n* `deployments_active`\n\n* `deployments_total`\n\n* `description`\n\n* `images`\n\n* `is_public`\n\n* `label`\n\n* `mine`\n\n* `rev_note`\n\n* `username`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStackScripts.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsFilter:getStackScriptsFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest StackScript will be returned. StackScripts without a valid `created` field are not included in the result.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStackScripts.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsFilter:getStackScriptsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "stackscripts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsStackscript:getStackScriptsStackscript"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "stackscripts",
                    "id"
                ]
            }
        },
        "linode:index/getUser:getUser": {
            "description": "Provides information about a Linode user\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode user.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getUser({\n    username: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_user(username=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetUser.Invoke(new()\n    {\n        Username = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupUser(ctx, \u0026linode.LookupUserArgs{\n\t\t\tUsername: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getUser(GetUserArgs.builder()\n            .username(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: linode:getUser\n      Arguments:\n        username: foo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "domainGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserDomainGrant:getUserDomainGrant"
                        },
                        "description": "The grants this User has pertaining to Domains on this Account.\n"
                    },
                    "firewallGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserFirewallGrant:getUserFirewallGrant"
                        },
                        "description": "The grants this User has pertaining to Firewalls on this Account.\n"
                    },
                    "imageGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserImageGrant:getUserImageGrant"
                        },
                        "description": "The grants this User has pertaining to Images on this Account.\n"
                    },
                    "linodeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserLinodeGrant:getUserLinodeGrant"
                        },
                        "description": "The grants this User has pertaining to Linodes on this Account.\n"
                    },
                    "longviewGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserLongviewGrant:getUserLongviewGrant"
                        },
                        "description": "The grants this User has pertaining to Longview Clients on this Account.\n"
                    },
                    "nodebalancerGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserNodebalancerGrant:getUserNodebalancerGrant"
                        },
                        "description": "The grants this User has pertaining to NodeBalancers on this Account.\n"
                    },
                    "stackscriptGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserStackscriptGrant:getUserStackscriptGrant"
                        },
                        "description": "The grants this User has pertaining to StackScripts on this Account.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The unique username of this User.\n"
                    },
                    "volumeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserVolumeGrant:getUserVolumeGrant"
                        },
                        "description": "The grants this User has pertaining to Volumes on this Account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "domainGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserDomainGrant:getUserDomainGrant"
                        },
                        "description": "The grants this User has pertaining to Domains on this Account.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address for this User, for account management communications, and may be used for other communications as configured.\n"
                    },
                    "firewallGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserFirewallGrant:getUserFirewallGrant"
                        },
                        "description": "The grants this User has pertaining to Firewalls on this Account.\n"
                    },
                    "globalGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserGlobalGrant:getUserGlobalGrant"
                        },
                        "description": "The Account-level grants a User has.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "imageGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserImageGrant:getUserImageGrant"
                        },
                        "description": "The grants this User has pertaining to Images on this Account.\n"
                    },
                    "linodeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserLinodeGrant:getUserLinodeGrant"
                        },
                        "description": "The grants this User has pertaining to Linodes on this Account.\n"
                    },
                    "longviewGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserLongviewGrant:getUserLongviewGrant"
                        },
                        "description": "The grants this User has pertaining to Longview Clients on this Account.\n"
                    },
                    "nodebalancerGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserNodebalancerGrant:getUserNodebalancerGrant"
                        },
                        "description": "The grants this User has pertaining to NodeBalancers on this Account.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "If true, this User must be granted access to perform actions or access entities on this Account.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.\n"
                    },
                    "stackscriptGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserStackscriptGrant:getUserStackscriptGrant"
                        },
                        "description": "The grants this User has pertaining to StackScripts on this Account.\n"
                    },
                    "username": {
                        "type": "string"
                    },
                    "volumeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserVolumeGrant:getUserVolumeGrant"
                        },
                        "description": "The grants this User has pertaining to Volumes on this Account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainGrants",
                    "email",
                    "firewallGrants",
                    "globalGrants",
                    "imageGrants",
                    "linodeGrants",
                    "longviewGrants",
                    "nodebalancerGrants",
                    "restricted",
                    "sshKeys",
                    "stackscriptGrants",
                    "username",
                    "volumeGrants",
                    "id"
                ]
            }
        },
        "linode:index/getVlans:getVlans": {
            "description": "Provides details about Linode VLANs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myInstance = new linode.Instance(\"myInstance\", {\n    label: \"my_instance\",\n    image: \"linode/ubuntu18.04\",\n    region: \"us-southeast\",\n    type: \"g6-standard-1\",\n    rootPass: \"bogusPassword$\",\n    interfaces: [{\n        purpose: \"vlan\",\n        label: \"my-vlan\",\n    }],\n});\nconst my-vlans = linode.getVlans({\n    filters: [{\n        name: \"label\",\n        values: [\"my-vlan\"],\n    }],\n});\nexport const vlanLinodes = my_vlans.then(my_vlans =\u003e my_vlans.vlans?.[0]?.linodes);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"myInstance\",\n    label=\"my_instance\",\n    image=\"linode/ubuntu18.04\",\n    region=\"us-southeast\",\n    type=\"g6-standard-1\",\n    root_pass=\"bogusPassword$\",\n    interfaces=[linode.InstanceInterfaceArgs(\n        purpose=\"vlan\",\n        label=\"my-vlan\",\n    )])\nmy_vlans = linode.get_vlans(filters=[linode.GetVlansFilterArgs(\n    name=\"label\",\n    values=[\"my-vlan\"],\n)])\npulumi.export(\"vlanLinodes\", my_vlans.vlans[0].linodes)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = new Linode.Instance(\"myInstance\", new()\n    {\n        Label = \"my_instance\",\n        Image = \"linode/ubuntu18.04\",\n        Region = \"us-southeast\",\n        Type = \"g6-standard-1\",\n        RootPass = \"bogusPassword$\",\n        Interfaces = new[]\n        {\n            new Linode.Inputs.InstanceInterfaceArgs\n            {\n                Purpose = \"vlan\",\n                Label = \"my-vlan\",\n            },\n        },\n    });\n\n    var my_vlans = Linode.GetVlans.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetVlansFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-vlan\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vlanLinodes\"] = my_vlans.Apply(my_vlans =\u003e my_vlans.Apply(getVlansResult =\u003e getVlansResult.Vlans[0]?.Linodes)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"myInstance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:    pulumi.String(\"my_instance\"),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu18.04\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-standard-1\"),\n\t\t\tRootPass: pulumi.String(\"bogusPassword$\"),\n\t\t\tInterfaces: linode.InstanceInterfaceArray{\n\t\t\t\t\u0026linode.InstanceInterfaceArgs{\n\t\t\t\t\tPurpose: pulumi.String(\"vlan\"),\n\t\t\t\t\tLabel:   pulumi.String(\"my-vlan\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmy_vlans, err := linode.GetVlans(ctx, \u0026linode.GetVlansArgs{\n\t\t\tFilters: []linode.GetVlansFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-vlan\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vlanLinodes\", my_vlans.Vlans[0].Linodes)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.inputs.InstanceInterfaceArgs;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVlansArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myInstance = new Instance(\"myInstance\", InstanceArgs.builder()        \n            .label(\"my_instance\")\n            .image(\"linode/ubuntu18.04\")\n            .region(\"us-southeast\")\n            .type(\"g6-standard-1\")\n            .rootPass(\"bogusPassword$\")\n            .interfaces(InstanceInterfaceArgs.builder()\n                .purpose(\"vlan\")\n                .label(\"my-vlan\")\n                .build())\n            .build());\n\n        final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()\n            .filters(GetVlansFilterArgs.builder()\n                .name(\"label\")\n                .values(\"my-vlan\")\n                .build())\n            .build());\n\n        ctx.export(\"vlanLinodes\", my_vlans.vlans()[0].linodes());\n    }\n}\n```\n```yaml\nresources:\n  myInstance:\n    type: linode:Instance\n    properties:\n      label: my_instance\n      image: linode/ubuntu18.04\n      region: us-southeast\n      type: g6-standard-1\n      rootPass: bogusPassword$\n      interfaces:\n        - purpose: vlan\n          label: my-vlan\nvariables:\n  my-vlans:\n    fn::invoke:\n      Function: linode:getVlans\n      Arguments:\n        filters:\n          - name: label\n            values:\n              - my-vlan\noutputs:\n  vlanLinodes: ${[\"my-vlans\"].vlans[0].linodes}\n```\n{{% /example %}}\n{{% /examples %}}\n## Filterable Fields\n\n* `label`\n\n* `region`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVlansFilter:getVlansFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVlansFilter:getVlansFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVlansVlan:getVlansVlan"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vlans",
                    "id"
                ]
            }
        },
        "linode:index/getVolume:getVolume": {
            "description": "Provides information about a Linode Volume.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example shows how one might use this data source to access information about a Linode Volume.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getVolume({\n    id: 1234567,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_volume(id=1234567)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetVolume.Invoke(new()\n    {\n        Id = 1234567,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupVolume(ctx, \u0026linode.LookupVolumeArgs{\n\t\t\tId: 1234567,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getVolume(GetVolumeArgs.builder()\n            .id(\"1234567\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: linode:getVolume\n      Arguments:\n        id: '1234567'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique numeric ID of the Volume record to query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When this Volume was created.\n"
                    },
                    "filesystemPath": {
                        "type": "string",
                        "description": "The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of this Volume.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "This Volume's label is for display purposes only.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The Volume's size, in GiB.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of tags applied to this object.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Volume was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "filesystemPath",
                    "id",
                    "label",
                    "linodeId",
                    "region",
                    "size",
                    "status",
                    "tags",
                    "updated"
                ]
            }
        }
    }
}