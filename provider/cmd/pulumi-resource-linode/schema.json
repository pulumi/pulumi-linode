{
    "name": "linode",
    "description": "A Pulumi package for creating and managing linode cloud resources.",
    "keywords": [
        "pulumi",
        "linode"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`linode` Terraform Provider](https://github.com/linode/terraform-provider-linode).",
    "repository": "https://github.com/pulumi/pulumi-linode",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "linode": "Linode"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-linode/sdk/v4/go/linode",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing linode cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/linode/terraform-provider-linode)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-linode` repo](https://github.com/pulumi/pulumi-linode/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-linode` repo](https://github.com/linode/terraform-provider-linode/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/linode/terraform-provider-linode)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-linode` repo](https://github.com/pulumi/pulumi-linode/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-linode` repo](https://github.com/linode/terraform-provider-linode/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiCaPath": {
                "type": "string",
                "description": "The path to a Linode API CA file to trust.\n"
            },
            "apiVersion": {
                "type": "string",
                "description": "The version of Linode API.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_API_VERSION"
                    ]
                }
            },
            "configPath": {
                "type": "string",
                "description": "The path to the Linode config file to use. (default `~/.config/linode`)\n"
            },
            "configProfile": {
                "type": "string",
                "description": "The Linode config profile to use. (default `default`)\n"
            },
            "disableInternalCache": {
                "type": "boolean",
                "description": "Disable the internal caching system that backs certain Linode API requests.\n"
            },
            "eventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for events.\n"
            },
            "lkeEventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for LKE events.\n"
            },
            "lkeNodeReadyPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for an LKE node to be ready.\n"
            },
            "maxRetryDelayMs": {
                "type": "integer",
                "description": "Maximum delay in milliseconds before retrying a request.\n"
            },
            "minRetryDelayMs": {
                "type": "integer",
                "description": "Minimum delay in milliseconds before retrying a request.\n"
            },
            "objAccessKey": {
                "type": "string",
                "description": "The access key to be used in linode.ObjectStorageBucket and linode_object_storage_object.\n"
            },
            "objBucketForceDelete": {
                "type": "boolean",
                "description": "If true, when deleting a linode.ObjectStorageBucket any objects and versions will be force deleted.\n"
            },
            "objSecretKey": {
                "type": "string",
                "description": "The secret key to be used in linode.ObjectStorageBucket and linode_object_storage_object.\n",
                "secret": true
            },
            "objUseTempKeys": {
                "type": "boolean",
                "description": "If true, temporary object keys will be created implicitly at apply-time for the linode.ObjectStorageObject and\nlinode_object_sorage_bucket resource.\n"
            },
            "skipImplicitReboots": {
                "type": "boolean",
                "description": "If true, Linode Instances will not be rebooted on config and interface changes.\n"
            },
            "skipInstanceDeletePoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode.Instance resource to finish deleting.\n"
            },
            "skipInstanceReadyPoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode.Instance resource to be running.\n"
            },
            "token": {
                "type": "string",
                "description": "The token that allows you access to your Linode account\n"
            },
            "uaPrefix": {
                "type": "string",
                "description": "An HTTP User-Agent Prefix to prepend in API requests.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_UA_PREFIX"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "The HTTP(S) API address of the Linode API to use.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_URL"
                    ]
                }
            }
        }
    },
    "types": {
        "linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "The day to perform maintenance.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The maximum maintenance window time in hours.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "Whether maintenance occurs on a weekly or monthly basis.\n"
                },
                "hourOfDay": {
                    "type": "integer",
                    "description": "The hour to begin maintenance based in UTC time.\n"
                },
                "weekOfMonth": {
                    "type": "integer",
                    "description": "The week of the month to perform monthly frequency updates. Required for monthly frequency updates.\n"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/DatabaseMysqlV2PendingUpdate:DatabaseMysqlV2PendingUpdate": {
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "plannedFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deadline",
                "description",
                "plannedFor"
            ]
        },
        "linode:index/DatabaseMysqlV2Timeouts:DatabaseMysqlV2Timeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "linode:index/DatabaseMysqlV2Updates:DatabaseMysqlV2Updates": {
            "properties": {
                "dayOfWeek": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "The day to perform maintenance.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The maximum maintenance window time in hours.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "Whether maintenance occurs on a weekly or monthly basis.\n"
                },
                "hourOfDay": {
                    "type": "integer",
                    "description": "The hour to begin maintenance based in UTC time.\n"
                },
                "weekOfMonth": {
                    "type": "integer",
                    "description": "The week of the month to perform monthly frequency updates. Required for monthly frequency updates.\n"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/DatabasePostgresqlV2PendingUpdate:DatabasePostgresqlV2PendingUpdate": {
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "plannedFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deadline",
                "description",
                "plannedFor"
            ]
        },
        "linode:index/DatabasePostgresqlV2Timeouts:DatabasePostgresqlV2Timeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "linode:index/DatabasePostgresqlV2Updates:DatabasePostgresqlV2Updates": {
            "properties": {
                "dayOfWeek": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ]
        },
        "linode:index/FirewallDevice:FirewallDevice": {
            "properties": {
                "entityId": {
                    "type": "integer",
                    "description": "The ID of the underlying entity this device references (i.e. the Linode's ID).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Firewall Device.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Firewall Device.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the underlying entity this device references.\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "id",
                "label",
                "type",
                "url"
            ]
        },
        "linode:index/FirewallInbound:FirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule (`ACCEPT`, `DROP`). Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Used to describe this rule. For display purposes only.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask (CIDR) format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask (CIDR) format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Used to identify this rule. For display purposes only.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "label",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "description",
                        "label",
                        "protocol"
                    ]
                }
            }
        },
        "linode:index/FirewallOutbound:FirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall's inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Used to describe this rule. For display purposes only.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR blocks or 0.0.0.0/0 (to allow all) this rule applies to.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks this rule applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "label",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "description",
                        "label",
                        "protocol"
                    ]
                }
            }
        },
        "linode:index/ImageReplication:ImageReplication": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of an image replica.\n"
                }
            },
            "type": "object",
            "required": [
                "region",
                "status"
            ]
        },
        "linode:index/ImageTimeouts:ImageTimeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "Used when creating the instance image (until the instance is available)\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceAlerts:InstanceAlerts": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.\n"
                },
                "io": {
                    "type": "integer",
                    "description": "The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.\n"
                },
                "networkIn": {
                    "type": "integer",
                    "description": "The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n"
                },
                "networkOut": {
                    "type": "integer",
                    "description": "The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n"
                },
                "transferQuota": {
                    "type": "integer",
                    "description": "The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpu",
                        "io",
                        "networkIn",
                        "networkOut",
                        "transferQuota"
                    ]
                }
            }
        },
        "linode:index/InstanceBackups:InstanceBackups": {
            "properties": {
                "available": {
                    "type": "boolean",
                    "description": "Whether this Backup is available for restoration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If this Linode has the Backup service enabled.\n"
                },
                "schedule": {
                    "$ref": "#/types/linode:index/InstanceBackupsSchedule:InstanceBackupsSchedule"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "available",
                        "enabled",
                        "schedule"
                    ]
                }
            }
        },
        "linode:index/InstanceBackupsSchedule:InstanceBackupsSchedule": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as \"Scheduling\" until the day is automatically selected.\n"
                },
                "window": {
                    "type": "string",
                    "description": "The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "day",
                        "window"
                    ]
                }
            }
        },
        "linode:index/InstanceConfig:InstanceConfig": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Optional field for arbitrary User comments on this Config.\n"
                },
                "devices": {
                    "$ref": "#/types/linode:index/InstanceConfigDevices:InstanceConfigDevices",
                    "description": "Device sda-sdh can be either a Disk or Volume identified by disk_label or volume_id. Only one type per slot allowed.\n"
                },
                "helpers": {
                    "$ref": "#/types/linode:index/InstanceConfigHelpers:InstanceConfigHelpers",
                    "description": "Helpers enabled when booting to this Linode Config.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigInterface:InstanceConfigInterface"
                    },
                    "description": "An array of Network Interfaces for this Linode’s Configuration Profile.\n"
                },
                "kernel": {
                    "type": "string",
                    "description": "A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Defaults to the total RAM of the Linode\n"
                },
                "rootDevice": {
                    "type": "string",
                    "description": "The root device to boot. The corresponding disk must be attached.\n"
                },
                "runLevel": {
                    "type": "string",
                    "description": "Defines the state of your Linode after booting. Defaults to default.\n"
                },
                "virtMode": {
                    "type": "string",
                    "description": "Controls the virtualization mode. Defaults to paravirt.\n"
                }
            },
            "type": "object",
            "required": [
                "label"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "devices",
                        "helpers",
                        "id",
                        "label",
                        "rootDevice"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigDevice:InstanceConfigDevice": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object",
            "required": [
                "deviceName"
            ]
        },
        "linode:index/InstanceConfigDevices:InstanceConfigDevices": {
            "properties": {
                "sda": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSda:InstanceConfigDevicesSda",
                    "description": "... `sdh` - (Optional) The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_id` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `\"fullvirt\"` `virt_mode`.\n"
                },
                "sdb": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdb:InstanceConfigDevicesSdb",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdc": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdc:InstanceConfigDevicesSdc",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdd": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdd:InstanceConfigDevicesSdd",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sde": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSde:InstanceConfigDevicesSde",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdf": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdf:InstanceConfigDevicesSdf",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdg": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdg:InstanceConfigDevicesSdg",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdh": {
                    "$ref": "#/types/linode:index/InstanceConfigDevicesSdh:InstanceConfigDevicesSdh",
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSda:InstanceConfigDevicesSda": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this `device` slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSdb:InstanceConfigDevicesSdb": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSdc:InstanceConfigDevicesSdc": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSdd:InstanceConfigDevicesSdd": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSde:InstanceConfigDevicesSde": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSdf:InstanceConfigDevicesSdf": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSdg:InstanceConfigDevicesSdg": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigDevicesSdh:InstanceConfigDevicesSdh": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID to map to this disk slot\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Block Storage volume ID to map to this disk slot\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigHelper:InstanceConfigHelper": {
            "properties": {
                "devtmpfsAutomount": {
                    "type": "boolean",
                    "description": "Populates the /dev directory early during boot without udev. (default `true`)\n"
                },
                "distro": {
                    "type": "boolean",
                    "description": "Helps maintain correct inittab/upstart console device. (default `true`)\n"
                },
                "modulesDep": {
                    "type": "boolean",
                    "description": "Creates a modules dependency file for the Kernel you run. (default `true`)\n"
                },
                "network": {
                    "type": "boolean",
                    "description": "Automatically configures static networking. (default `true`)\n"
                },
                "updatedbDisabled": {
                    "type": "boolean",
                    "description": "Disables updatedb cron job to avoid disk thrashing. (default `true`)\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigHelpers:InstanceConfigHelpers": {
            "properties": {
                "devtmpfsAutomount": {
                    "type": "boolean",
                    "description": "Populates the /dev directory early during boot without udev. Defaults to false.\n"
                },
                "distro": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Distribution Helper setting.\n"
                },
                "modulesDep": {
                    "type": "boolean",
                    "description": "Creates a modules dependency file for the Kernel you run.\n"
                },
                "network": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.\n"
                },
                "updatedbDisabled": {
                    "type": "boolean",
                    "description": "Disables updatedb cron job to avoid disk thrashing.\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceConfigInterface:InstanceConfigInterface": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether this interface is currently booted and active.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the interface.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.\n"
                },
                "ipamAddress": {
                    "type": "string",
                    "description": "This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.\n"
                },
                "ipv4": {
                    "$ref": "#/types/linode:index/InstanceConfigInterfaceIpv4:InstanceConfigInterfaceIpv4",
                    "description": "The IPv4 configuration of the VPC interface.This attribute is only allowed for VPC interfaces.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.\n\n* `ipv4` - (Optional) The IPv4 configuration of the VPC interface. This field is currently only allowed for interfaces with the `vpc` purpose.\n\nThe following computed attribute is available in a VPC interface:\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The type of interface. (`public`, `vlan`, `vpc`)\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The ID of VPC which this interface is attached to.\n"
                }
            },
            "type": "object",
            "required": [
                "purpose"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "active",
                        "id",
                        "ipv4",
                        "purpose",
                        "vpcId"
                    ]
                }
            }
        },
        "linode:index/InstanceConfigInterfaceIpv4:InstanceConfigInterfaceIpv4": {
            "properties": {
                "nat11": {
                    "type": "string",
                    "description": "The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nat11",
                        "vpc"
                    ]
                }
            }
        },
        "linode:index/InstanceDisk:InstanceDisk": {
            "properties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.\n",
                    "willReplaceOnChanges": true
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.\n",
                    "willReplaceOnChanges": true
                },
                "filesystem": {
                    "type": "string",
                    "description": "The Disk filesystem can be one of: raw, swap, ext3, ext4, initrd (max 32mb)\n",
                    "willReplaceOnChanges": true
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "If true, this Disk is read-only.\n",
                    "willReplaceOnChanges": true
                },
                "rootPass": {
                    "type": "string",
                    "description": "The password that will be initialially assigned to the 'root' user account.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "filesystem",
                        "id",
                        "image",
                        "label",
                        "readOnly",
                        "size",
                        "stackscriptData",
                        "stackscriptId"
                    ]
                }
            }
        },
        "linode:index/InstanceDiskTimeouts:InstanceDiskTimeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "delete": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "linode:index/InstanceInterface:InstanceInterface": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether this interface is currently booted and active.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.\n"
                },
                "ipamAddress": {
                    "type": "string",
                    "description": "This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.\n"
                },
                "ipv4": {
                    "$ref": "#/types/linode:index/InstanceInterfaceIpv4:InstanceInterfaceIpv4",
                    "description": "A set of reserved IPv4 addresses to assign to this Linode on creation.\n\n* **NOTE: IP reservation is not currently available to all users.**\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the VLAN to join. This field is only allowed and required for interfaces with the `vlan` purpose.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.\n\n* `ipv4` - (Optional) The IPv4 configuration of the VPC interface. This field is currently only allowed for interfaces with the `vpc` purpose.\n\nThe following computed attribute is available in a VPC interface:\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The type of interface. (`public`, `vlan`, `vpc`)\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The ID of VPC which this interface is attached to.\n"
                }
            },
            "type": "object",
            "required": [
                "purpose"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "active",
                        "id",
                        "ipv4",
                        "purpose",
                        "vpcId"
                    ]
                }
            }
        },
        "linode:index/InstanceInterfaceIpv4:InstanceInterfaceIpv4": {
            "properties": {
                "nat11": {
                    "type": "string",
                    "description": "The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nat11",
                        "vpc"
                    ]
                }
            }
        },
        "linode:index/InstanceIpVpcNat11:InstanceIpVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The resulting IPv4 address.\n"
                },
                "subnetId": {
                    "type": "integer"
                },
                "vpcId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ]
        },
        "linode:index/InstanceMetadata:InstanceMetadata": {
            "properties": {
                "userData": {
                    "type": "string",
                    "description": "The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "linode:index/InstancePlacementGroup:InstancePlacementGroup": {
            "properties": {
                "compliantOnly": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "placementGroupPolicy": {
                    "type": "string",
                    "description": "Whether the Placement Group enforces strict compliance.\n"
                },
                "placementGroupType": {
                    "type": "string",
                    "description": "The placement group type enforced by the Placement Group.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "label",
                        "placementGroupPolicy",
                        "placementGroupType"
                    ]
                }
            }
        },
        "linode:index/InstanceSpecs:InstanceSpecs": {
            "properties": {
                "acceleratedDevices": {
                    "type": "integer",
                    "description": "The number of VPUs this Linode has access to.\n"
                },
                "disk": {
                    "type": "integer",
                    "description": "The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.\n"
                },
                "gpus": {
                    "type": "integer",
                    "description": "The number of GPUs this Linode has access to.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The amount of network transfer this Linode is allotted each month.\n"
                },
                "vcpus": {
                    "type": "integer",
                    "description": "The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acceleratedDevices",
                        "disk",
                        "gpus",
                        "memory",
                        "transfer",
                        "vcpus"
                    ]
                }
            }
        },
        "linode:index/LkeClusterControlPlane:LkeClusterControlPlane": {
            "properties": {
                "acl": {
                    "$ref": "#/types/linode:index/LkeClusterControlPlaneAcl:LkeClusterControlPlaneAcl",
                    "description": "Defines the ACL configuration for an LKE cluster's control plane.\n"
                },
                "highAvailability": {
                    "type": "boolean",
                    "description": "Defines whether High Availability is enabled for the cluster Control Plane. This is an **irreversible** change.\n\n* `acl` - (Optional) Defines the ACL configuration for an LKE cluster's control plane.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acl",
                        "highAvailability"
                    ]
                }
            }
        },
        "linode:index/LkeClusterControlPlaneAcl:LkeClusterControlPlaneAcl": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterControlPlaneAclAddress:LkeClusterControlPlaneAclAddress"
                    },
                    "description": "A list of ip addresses to allow.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defines default policy. A value of true results in a default policy of DENY. A value of false results in default policy of ALLOW, and has the same effect as delete the ACL configuration.\n\n* `addresses` - (Optional) A list of ip addresses to allow.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "enabled"
                    ]
                }
            }
        },
        "linode:index/LkeClusterControlPlaneAclAddress:LkeClusterControlPlaneAclAddress": {
            "properties": {
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of individual ipv4 addresses or CIDRs to ALLOW.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of individual ipv6 addresses or CIDRs to ALLOW.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipv4s",
                        "ipv6s"
                    ]
                }
            }
        },
        "linode:index/LkeClusterPool:LkeClusterPool": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/linode:index/LkeClusterPoolAutoscaler:LkeClusterPoolAutoscaler",
                    "description": "When specified, the number of nodes autoscales within the defined minimum and maximum values.\n"
                },
                "count": {
                    "type": "integer",
                    "description": "The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.\n\n* `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.\n"
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for nodes in this pool.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the node.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPoolNode:LkeClusterPoolNode"
                    },
                    "description": "The nodes in the node pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPoolTaint:LkeClusterPoolTaint"
                    },
                    "description": "Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A Linode Type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "count",
                        "diskEncryption",
                        "id",
                        "nodes",
                        "type"
                    ]
                }
            }
        },
        "linode:index/LkeClusterPoolAutoscaler:LkeClusterPoolAutoscaler": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "The maximum number of nodes to autoscale to.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of nodes to autoscale to.\n"
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "linode:index/LkeClusterPoolNode:LkeClusterPoolNode": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the node.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The ID of the underlying Linode instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "instanceId",
                        "status"
                    ]
                }
            }
        },
        "linode:index/LkeClusterPoolTaint:LkeClusterPoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Kubernetes taint effect.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Kubernetes taint key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Kubernetes taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ]
        },
        "linode:index/LkeNodePoolAutoscaler:LkeNodePoolAutoscaler": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "The maximum number of nodes to autoscale to.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of nodes to autoscale to.\n"
                }
            },
            "type": "object"
        },
        "linode:index/LkeNodePoolNode:LkeNodePoolNode": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the node.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The ID of the underlying Linode instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "instanceId",
                "status"
            ]
        },
        "linode:index/LkeNodePoolTaint:LkeNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Kubernetes taint effect. Accepted values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`. For the descriptions of these values, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Kubernetes taint key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Kubernetes taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ]
        },
        "linode:index/NetworkingIpAssignmentAssignment:NetworkingIpAssignmentAssignment": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address or IPv6 range to assign.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to which the IP address will be assigned.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "linodeId"
            ]
        },
        "linode:index/NetworkingIpVpcNat11:NetworkingIpVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address that is configured as a 1:1 NAT for this VPC interface.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The `id` of the VPC Subnet for this Interface.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The `id` of the VPC configured for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ]
        },
        "linode:index/NodeBalancerConfigNodeStatus:NodeBalancerConfigNodeStatus": {
            "properties": {
                "down": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.\n"
                },
                "up": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'UP' and healthy, and that are serving requests.\n"
                }
            },
            "type": "object",
            "required": [
                "down",
                "up"
            ]
        },
        "linode:index/NodeBalancerFirewall:NodeBalancerFirewall": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this firewall was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "(Required) The Firewall's ID.\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic. (`ACCEPT`, `DROP`)\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerFirewallInbound:NodeBalancerFirewallInbound"
                    }
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic. (`ACCEPT`, `DROP`)\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerFirewallOutbound:NodeBalancerFirewallOutbound"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the firewall. (`enabled`, `disabled`, `deleted`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this firewall was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "inbounds",
                "inboundPolicy",
                "label",
                "outbounds",
                "outboundPolicy",
                "status",
                "tags",
                "updated"
            ]
        },
        "linode:index/NodeBalancerFirewallInbound:NodeBalancerFirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "description": {
                    "type": "string"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "description",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ]
        },
        "linode:index/NodeBalancerFirewallOutbound:NodeBalancerFirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "description": {
                    "type": "string"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "description",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ]
        },
        "linode:index/NodeBalancerTransfer:NodeBalancerTransfer": {
            "properties": {
                "in": {
                    "type": "number",
                    "description": "The total transfer, in MB, used by this NodeBalancer for the current month\n"
                },
                "out": {
                    "type": "number",
                    "description": "The total inbound transfer, in MB, used for this NodeBalancer for the current month\n"
                },
                "total": {
                    "type": "number",
                    "description": "The total outbound transfer, in MB, used for this NodeBalancer for the current month\n"
                }
            },
            "type": "object",
            "required": [
                "in",
                "out",
                "total"
            ]
        },
        "linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The Base64 encoded and PEM formatted SSL certificate.\n",
                    "secret": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key associated with the TLS/SSL certificate.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "privateKey"
            ]
        },
        "linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "integer",
                    "description": "Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.\n\n* `expiration` - (Optional) Specifies a period in the object's expire.\n\n* `noncurrent_version_expiration` - (Optional) Specifies when non-current object versions expire.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the lifecycle rule is active.\n"
                },
                "expiration": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRuleExpiration:ObjectStorageBucketLifecycleRuleExpiration",
                    "description": "Specifies a period in the object's expire.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the rule.\n"
                },
                "noncurrentVersionExpiration": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration:ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration",
                    "description": "Specifies when non-current object versions expire.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The object key prefix identifying one or more objects to which the rule applies.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "id"
                    ]
                }
            }
        },
        "linode:index/ObjectStorageBucketLifecycleRuleExpiration:ObjectStorageBucketLifecycleRuleExpiration": {
            "properties": {
                "date": {
                    "type": "string",
                    "description": "Specifies the date after which you want the corresponding action to take effect.\n"
                },
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n"
                },
                "expiredObjectDeleteMarker": {
                    "type": "boolean",
                    "description": "On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Linode Object Storage to delete expired object delete markers. This cannot be specified with Days or Date in a Lifecycle Expiration Policy.\n"
                }
            },
            "type": "object"
        },
        "linode:index/ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration:ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration": {
            "properties": {
                "days": {
                    "type": "integer",
                    "description": "Specifies the number of days non-current object versions expire.\n"
                }
            },
            "type": "object",
            "required": [
                "days"
            ]
        },
        "linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "The unique label of the bucket to which the key will grant limited access.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The Object Storage cluster where the bucket resides. Deprecated in favor of `region`.\n",
                    "deprecationMessage": "The `cluster` attribute in a `bucket_access` block has been deprecated in favor of `region` attribute. A cluster value can be converted to a region value by removing -x at the end, for example, a cluster value `us-mia-1` can be converted to region value `us-mia`"
                },
                "permissions": {
                    "type": "string",
                    "description": "This Limited Access Key’s permissions for the selected bucket. *Changing `permissions` forces the creation of a new Object Storage Key.* (`read_write`, `read_only`)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the bucket resides.\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "permissions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bucketName",
                        "cluster",
                        "permissions",
                        "region"
                    ]
                }
            }
        },
        "linode:index/ObjectStorageKeyRegionsDetail:ObjectStorageKeyRegionsDetail": {
            "properties": {
                "endpointType": {
                    "type": "string",
                    "description": "The type of `s3_endpoint` available to the user in this region. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the region.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "The S3-compatible hostname you can use to access the Object Storage buckets in this region.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointType",
                "id",
                "s3Endpoint"
            ]
        },
        "linode:index/PlacementGroupMember:PlacementGroupMember": {
            "properties": {
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether this Linode is currently compliant with the group's placement group type.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode.\n"
                }
            },
            "type": "object",
            "required": [
                "isCompliant",
                "linodeId"
            ]
        },
        "linode:index/RdnsTimeouts:RdnsTimeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                },
                "update": {
                    "type": "string",
                    "description": "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\". Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours).\n"
                }
            },
            "type": "object"
        },
        "linode:index/ReservedIpAssignmentVpcNat11:ReservedIpAssignmentVpcNat11": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "integer"
                },
                "vpcId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ]
        },
        "linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value. If not specified, this value will be used.\n"
                },
                "example": {
                    "type": "string",
                    "description": "An example value for the field.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The StackScript's label is for display purposes only.\n"
                },
                "manyOf": {
                    "type": "string",
                    "description": "A list of acceptable values for the field in any quantity, combination or order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                },
                "oneOf": {
                    "type": "string",
                    "description": "A list of acceptable single values for the field.\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "example",
                "label",
                "manyOf",
                "name",
                "oneOf"
            ]
        },
        "linode:index/UserDomainGrant:UserDomainGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserFirewallGrant:UserFirewallGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserGlobalGrants:UserGlobalGrants": {
            "properties": {
                "accountAccess": {
                    "type": "string",
                    "description": "The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.\n"
                },
                "addDatabases": {
                    "type": "boolean",
                    "description": "If true, this User may add Databases.\n"
                },
                "addDomains": {
                    "type": "boolean",
                    "description": "If true, this User may add Domains.\n"
                },
                "addFirewalls": {
                    "type": "boolean",
                    "description": "If true, this User may add Firewalls.\n"
                },
                "addImages": {
                    "type": "boolean",
                    "description": "If true, this User may add Images.\n"
                },
                "addLinodes": {
                    "type": "boolean",
                    "description": "If true, this User may create Linodes.\n"
                },
                "addLongview": {
                    "type": "boolean",
                    "description": "If true, this User may create Longview clients and view the current plan.\n"
                },
                "addNodebalancers": {
                    "type": "boolean",
                    "description": "If true, this User may add NodeBalancers.\n"
                },
                "addPlacementGroups": {
                    "type": "boolean",
                    "description": "If true, this User may add Placement Groups.\n"
                },
                "addStackscripts": {
                    "type": "boolean",
                    "description": "If true, this User may add StackScripts.\n"
                },
                "addVolumes": {
                    "type": "boolean",
                    "description": "If true, this User may add Volumes.\n"
                },
                "addVpcs": {
                    "type": "boolean",
                    "description": "If true, this User may add Virtual Private Clouds (VPCs).\n"
                },
                "cancelAccount": {
                    "type": "boolean",
                    "description": "If true, this User may cancel the entire Account.\n"
                },
                "longviewSubscription": {
                    "type": "boolean",
                    "description": "If true, this User may manage the Account’s Longview subscription.\n"
                }
            },
            "type": "object"
        },
        "linode:index/UserImageGrant:UserImageGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserLinodeGrant:UserLinodeGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserLongviewGrant:UserLongviewGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserNodebalancerGrant:UserNodebalancerGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserPlacementGroupGrant:UserPlacementGroupGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserStackscriptGrant:UserStackscriptGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserVolumeGrant:UserVolumeGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/UserVpcGrant:UserVpcGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the entity this grant applies to.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "permissions"
            ]
        },
        "linode:index/VolumeTimeouts:VolumeTimeouts": {
            "properties": {
                "create": {
                    "type": "string",
                    "description": "Used when creating the volume (until the volume is reaches the initial `active` state)\n"
                },
                "delete": {
                    "type": "string",
                    "description": "Used when deleting the volume\n"
                },
                "update": {
                    "type": "string",
                    "description": "Used when updating the volume when necessary during update - e.g. when resizing the volume\n"
                }
            },
            "type": "object"
        },
        "linode:index/VpcSubnetLinode:VpcSubnetLinode": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the VPC Subnet.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/VpcSubnetLinodeInterface:VpcSubnetLinodeInterface"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "interfaces"
            ]
        },
        "linode:index/VpcSubnetLinodeInterface:VpcSubnetLinodeInterface": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the VPC Subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "id"
            ]
        },
        "linode:index/getAccountAvailabilitiesAvailability:getAccountAvailabilitiesAvailability": {
            "properties": {
                "availables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of services which are available for the given region.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region this availability entry refers to.\n"
                },
                "unavailables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of services that are unavailable for the given region.\n"
                }
            },
            "type": "object",
            "required": [
                "availables",
                "region",
                "unavailables"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "region"
                    ]
                }
            }
        },
        "linode:index/getAccountAvailabilitiesFilter:getAccountAvailabilitiesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getAccountLoginsFilter:getAccountLoginsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getAccountLoginsLogin:getAccountLoginsLogin": {
            "properties": {
                "datetime": {
                    "type": "string",
                    "description": "When the login was initiated.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this login object.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The remote IP address that requested the login.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "True if the User that was logged into was a restricted User, false otherwise.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Whether the login attempt succeeded or failed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the User that was logged into.\n"
                }
            },
            "type": "object",
            "required": [
                "datetime",
                "id",
                "ip",
                "restricted",
                "status",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getChildAccountsChildAccount:getChildAccountsChildAccount": {
            "properties": {
                "activeSince": {
                    "type": "string",
                    "description": "When this account was first activated\n"
                },
                "address1": {
                    "type": "string",
                    "description": "First line of this Account's billing address.\n"
                },
                "address2": {
                    "type": "string",
                    "description": "Second line of this Account's billing address.\n"
                },
                "balance": {
                    "type": "number",
                    "description": "This Account's balance, in US dollars.\n"
                },
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set containing all the capabilities of this Account.\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city for this Account's billing address.\n"
                },
                "company": {
                    "type": "string",
                    "description": "The company name associated with this Account.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The two-letter country code of this Account's billing address.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address for this Account, for account management communications, and may be used for other communications as configured.\n"
                },
                "euuid": {
                    "type": "string",
                    "description": "The unique ID of this Account.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the person associated with this Account.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Email of the Account.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the person associated with this Account.\n"
                },
                "phone": {
                    "type": "string",
                    "description": "The phone number associated with this Account.\n"
                },
                "state": {
                    "type": "string",
                    "description": "If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.\n"
                },
                "zip": {
                    "type": "string",
                    "description": "The zip code of this Account's billing address.\n"
                }
            },
            "type": "object",
            "required": [
                "activeSince",
                "address1",
                "address2",
                "balance",
                "capabilities",
                "city",
                "company",
                "country",
                "email",
                "euuid",
                "firstName",
                "id",
                "lastName",
                "phone",
                "state",
                "zip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getChildAccountsFilter:getChildAccountsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseBackupsBackup:getDatabaseBackupsBackup": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "A time value given in a combined date and time format that represents when the database backup was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the database backup object.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The database backup’s label, for display purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of database backup, determined by how the backup was created.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "label",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseBackupsFilter:getDatabaseBackupsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseEnginesEngine:getDatabaseEnginesEngine": {
            "properties": {
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine type.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Managed Database engine ID in engine/version format.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version.\n"
                }
            },
            "type": "object",
            "required": [
                "engine",
                "id",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseEnginesFilter:getDatabaseEnginesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseMysqlBackupsBackup:getDatabaseMysqlBackupsBackup": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "A time value given in a combined date and time format that represents when the database backup was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the database backup object.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The database backup’s label, for display purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of database backup, determined by how the backup was created.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "label",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseMysqlBackupsFilter:getDatabaseMysqlBackupsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDatabaseMysqlUpdate:getDatabaseMysqlUpdate": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseMysqlV2PendingUpdate:getDatabaseMysqlV2PendingUpdate": {
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "plannedFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deadline",
                "description",
                "plannedFor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabaseMysqlV2Updates:getDatabaseMysqlV2Updates": {
            "properties": {
                "dayOfWeek": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasePostgresqlUpdate:getDatabasePostgresqlUpdate": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                },
                "weekOfMonth": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay",
                "weekOfMonth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasePostgresqlV2PendingUpdate:getDatabasePostgresqlV2PendingUpdate": {
            "properties": {
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "plannedFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deadline",
                "description",
                "plannedFor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasePostgresqlV2Updates:getDatabasePostgresqlV2Updates": {
            "properties": {
                "dayOfWeek": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "frequency": {
                    "type": "string"
                },
                "hourOfDay": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "duration",
                "frequency",
                "hourOfDay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasesDatabase:getDatabasesDatabase": {
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine.\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Managed Database.\n"
                },
                "instanceUri": {
                    "type": "string",
                    "description": "he API route for the database instance.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database.\n"
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version.\n"
                }
            },
            "type": "object",
            "required": [
                "allowLists",
                "clusterSize",
                "created",
                "encrypted",
                "engine",
                "hostPrimary",
                "hostSecondary",
                "id",
                "instanceUri",
                "label",
                "region",
                "replicationType",
                "sslConnection",
                "status",
                "type",
                "updated",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDatabasesFilter:getDatabasesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getDomainsDomain:getDomainsDomain": {
            "properties": {
                "axfrIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IPs that may perform a zone transfer for this Domain.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for this Domain.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain\n"
                },
                "expireSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The group this Domain belongs to.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Domain.\n"
                },
                "masterIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses representing the master DNS for this Domain.\n"
                },
                "refreshSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds before this Domain should be refreshed.\n"
                },
                "retrySec": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which a failed refresh should be retried.\n"
                },
                "soaEmail": {
                    "type": "string",
                    "description": "Start of Authority email address.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Used to control whether this Domain is currently being rendered. (`disabled`, `active`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live'-the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.\n"
                },
                "type": {
                    "type": "string",
                    "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)\n"
                }
            },
            "type": "object",
            "required": [
                "axfrIps",
                "description",
                "expireSec",
                "group",
                "masterIps",
                "refreshSec",
                "retrySec",
                "soaEmail",
                "status",
                "tags",
                "ttlSec",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getDomainsFilter:getDomainsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getFirewallDevice:getFirewallDevice": {
            "properties": {
                "entityId": {
                    "type": "integer",
                    "description": "The ID of the underlying entity this device references (i.e. the Linode's ID).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The Firewall's ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the underlying entity this device references.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Firewall Device.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the underlying entity this device references.\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "id",
                "label",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallInbound:getFirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "description": {
                    "type": "string"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the underlying entity this device references.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "description",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallOutbound:getFirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "description": {
                    "type": "string"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the underlying entity this device references.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "description",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallsFilter:getFirewallsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getFirewallsFirewall:getFirewallsFirewall": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this firewall was created.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getFirewallsFirewallDevice:getFirewallsFirewallDevice"
                    },
                    "description": "The devices associated with this firewall.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "If true, the Firewall is inactive.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID assigned to this Firewall.\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic.\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getFirewallsFirewallInbound:getFirewallsFirewallInbound"
                    },
                    "description": "A set of firewall rules that specify what inbound network traffic is allowed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The IDs of Linodes this firewall is applied to.\n"
                },
                "nodebalancers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The IDs of NodeBalancers assigned to this Firewall..\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic.\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getFirewallsFirewallOutbound:getFirewallsFirewallOutbound"
                    },
                    "description": "A set of firewall rules that specify what outbound network traffic is allowed.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the firewall.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this firewall was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "disabled",
                "id",
                "inboundPolicy",
                "label",
                "linodes",
                "nodebalancers",
                "outboundPolicy",
                "status",
                "tags",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallsFirewallDevice:getFirewallsFirewallDevice": {
            "properties": {
                "entityId": {
                    "type": "integer",
                    "description": "The ID of the underlying entity this device references (i.e. the Linode's ID).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID assigned to this Firewall.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of Firewall Device.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the underlying entity this device references.\n"
                }
            },
            "type": "object",
            "required": [
                "entityId",
                "id",
                "label",
                "type",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallsFirewallInbound:getFirewallsFirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (TCP, UDP, ICMP)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getFirewallsFirewallOutbound:getFirewallsFirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (TCP, UDP, ICMP)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getImageReplication:getImageReplication": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The region of an image replica.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of an image replica.\n"
                }
            },
            "type": "object",
            "required": [
                "region",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getImagesFilter:getImagesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getImagesImage:getImagesImage": {
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The capabilities of this Image.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Image was created.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The name of the User who created this Image, or \"linode\" for official Images.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether or not this Image is deprecated. Will only be true for deprecated public Images.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A detailed description of this Image.\n"
                },
                "expiry": {
                    "type": "string",
                    "description": "Only Images created automatically (from a deleted Linode; type=automatic) will expire.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "True if the Image is public.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A short description of the Image.\n"
                },
                "replications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getImagesImageReplication:getImagesImageReplication"
                    },
                    "description": "A list of image replication regions and corresponding status.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The minimum size this Image needs to deploy. Size is in MB. example: 2500\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of an image replica.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of customized tags.\n"
                },
                "totalSize": {
                    "type": "integer",
                    "description": "The total size of the image in all available regions.\n"
                },
                "type": {
                    "type": "string",
                    "description": "How the Image was created. Manual Images can be created at any time. \"Automatic\" Images are created automatically from a deleted Linode. (`manual`, `automatic`)\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The upstream distribution vendor. `None` for private Images.\n"
                }
            },
            "type": "object",
            "required": [
                "capabilities",
                "created",
                "createdBy",
                "deprecated",
                "description",
                "expiry",
                "id",
                "isPublic",
                "label",
                "size",
                "status",
                "tags",
                "totalSize",
                "type",
                "vendor"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getImagesImageReplication:getImagesImageReplication": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The region of an image replica.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of an image replica.\n"
                }
            },
            "type": "object",
            "required": [
                "region",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsAutomatic:getInstanceBackupsAutomatic": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the labels of the Configuration profiles that are part of the Backup.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date the Backup was taken.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceBackupsAutomaticDisk:getInstanceBackupsAutomaticDisk"
                    }
                },
                "finished": {
                    "type": "string",
                    "description": "The date the Backup completed.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Backup.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date the Backup was most recently updated.\n"
                }
            },
            "type": "object",
            "required": [
                "available",
                "configs",
                "created",
                "disks",
                "finished",
                "id",
                "label",
                "status",
                "type",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsAutomaticDisk:getInstanceBackupsAutomaticDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this disk.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsCurrent:getInstanceBackupsCurrent": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the labels of the Configuration profiles that are part of the Backup.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date the Backup was taken.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceBackupsCurrentDisk:getInstanceBackupsCurrentDisk"
                    }
                },
                "finished": {
                    "type": "string",
                    "description": "The date the Backup completed.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Backup.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date the Backup was most recently updated.\n"
                }
            },
            "type": "object",
            "required": [
                "available",
                "configs",
                "created",
                "disks",
                "finished",
                "id",
                "label",
                "status",
                "type",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsCurrentDisk:getInstanceBackupsCurrentDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this disk.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsInProgress:getInstanceBackupsInProgress": {
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the labels of the Configuration profiles that are part of the Backup.\n"
                },
                "created": {
                    "type": "string",
                    "description": "The date the Backup was taken.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceBackupsInProgressDisk:getInstanceBackupsInProgressDisk"
                    }
                },
                "finished": {
                    "type": "string",
                    "description": "The date the Backup completed.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Backup.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current state of a specific Backup. (`paused`, `pending`, `running`, `needsPostProcessing`, `successful`, `failed`, `userAborted`)\n"
                },
                "type": {
                    "type": "string",
                    "description": "This indicates whether the Backup is an automatic Backup or manual snapshot taken by the User at a specific point in time. (`auto`, `snapshot`)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date the Backup was most recently updated.\n"
                }
            },
            "type": "object",
            "required": [
                "available",
                "configs",
                "created",
                "disks",
                "finished",
                "id",
                "label",
                "status",
                "type",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceBackupsInProgressDisk:getInstanceBackupsInProgressDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of this disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this disk.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4:getInstanceNetworkingIpv4": {
            "properties": {
                "privates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Private:getInstanceNetworkingIpv4Private"
                    }
                },
                "publics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Public:getInstanceNetworkingIpv4Public"
                    },
                    "description": "Whether this is a public or private IP address.\n"
                },
                "reserveds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Reserved:getInstanceNetworkingIpv4Reserved"
                    }
                },
                "shareds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Shared:getInstanceNetworkingIpv4Shared"
                    }
                },
                "vpcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv4Vpc:getInstanceNetworkingIpv4Vpc"
                    }
                }
            },
            "type": "object",
            "required": [
                "privates",
                "publics",
                "reserveds",
                "shareds",
                "vpcs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Private:getInstanceNetworkingIpv4Private": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv4PrivateVpcNat11:getInstanceNetworkingIpv4PrivateVpcNat11",
                    "description": "IPv4 address configured as a 1:1 NAT for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4PrivateVpcNat11:getInstanceNetworkingIpv4PrivateVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Public:getInstanceNetworkingIpv4Public": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv4PublicVpcNat11:getInstanceNetworkingIpv4PublicVpcNat11",
                    "description": "IPv4 address configured as a 1:1 NAT for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4PublicVpcNat11:getInstanceNetworkingIpv4PublicVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Reserved:getInstanceNetworkingIpv4Reserved": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv4ReservedVpcNat11:getInstanceNetworkingIpv4ReservedVpcNat11",
                    "description": "IPv4 address configured as a 1:1 NAT for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4ReservedVpcNat11:getInstanceNetworkingIpv4ReservedVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Shared:getInstanceNetworkingIpv4Shared": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv4SharedVpcNat11:getInstanceNetworkingIpv4SharedVpcNat11",
                    "description": "IPv4 address configured as a 1:1 NAT for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4SharedVpcNat11:getInstanceNetworkingIpv4SharedVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv4Vpc:getInstanceNetworkingIpv4Vpc": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Returns `true` if the VPC interface is in use, meaning that the Linode was powered on using the `config_id` to which the interface belongs. Otherwise returns `false`.\n"
                },
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "addressRange": {
                    "type": "string",
                    "description": "A range of IPv4 addresses configured for this VPC interface. it will be `null` if it's a single `address`.\n"
                },
                "configId": {
                    "type": "integer",
                    "description": "The globally general entity identifier for the Linode configuration profile where the VPC is included.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "The globally general API entity identifier for the Linode interface.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "nat11": {
                    "type": "string",
                    "description": "The public IP address used for NAT 1:1 with the VPC. This is `null` if the VPC interface uses an `address_range` or NAT 1:1 isn't used.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "address",
                "addressRange",
                "configId",
                "gateway",
                "interfaceId",
                "linodeId",
                "nat11",
                "prefix",
                "region",
                "subnetId",
                "subnetMask",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6:getInstanceNetworkingIpv6": {
            "properties": {
                "globals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceNetworkingIpv6Global:getInstanceNetworkingIpv6Global"
                    }
                },
                "linkLocal": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv6LinkLocal:getInstanceNetworkingIpv6LinkLocal"
                },
                "slaac": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv6Slaac:getInstanceNetworkingIpv6Slaac"
                }
            },
            "type": "object",
            "required": [
                "globals",
                "linkLocal",
                "slaac"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6Global:getInstanceNetworkingIpv6Global": {
            "properties": {
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "range": {
                    "type": "string",
                    "description": "The IPv6 range of addresses in this pool.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "routeTarget": {
                    "type": "string",
                    "description": "(Nullable) The last address in this block of IPv6 addresses.\n"
                }
            },
            "type": "object",
            "required": [
                "prefix",
                "range",
                "region",
                "routeTarget"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6LinkLocal:getInstanceNetworkingIpv6LinkLocal": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv6LinkLocalVpcNat11:getInstanceNetworkingIpv6LinkLocalVpcNat11",
                    "description": "IPv4 address configured as a 1:1 NAT for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6LinkLocalVpcNat11:getInstanceNetworkingIpv6LinkLocalVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6Slaac:getInstanceNetworkingIpv6Slaac": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The Linode instance's ID.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The network prefix.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "(Filterable) The Region this address resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The subnet mask.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is.\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getInstanceNetworkingIpv6SlaacVpcNat11:getInstanceNetworkingIpv6SlaacVpcNat11",
                    "description": "IPv4 address configured as a 1:1 NAT for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceNetworkingIpv6SlaacVpcNat11:getInstanceNetworkingIpv6SlaacVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC subnet.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The unique globally general API entity identifier for the VPC.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddons:getInstanceTypeAddons": {
            "properties": {
                "backups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypeAddonsBackup:getInstanceTypeAddonsBackup"
                    }
                }
            },
            "type": "object",
            "required": [
                "backups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddonsBackup:getInstanceTypeAddonsBackup": {
            "properties": {
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypeAddonsBackupPrice:getInstanceTypeAddonsBackupPrice"
                    }
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypeAddonsBackupRegionPrice:getInstanceTypeAddonsBackupRegionPrice"
                    }
                }
            },
            "type": "object",
            "required": [
                "prices",
                "regionPrices"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddonsBackupPrice:getInstanceTypeAddonsBackupPrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "The cost (in US dollars) per hour to add Backups service.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "The cost (in US dollars) per month to add Backups service.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeAddonsBackupRegionPrice:getInstanceTypeAddonsBackupRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "Label used to identify instance type\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypePrice:getInstanceTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per hour.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per month.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypeRegionPrice:getInstanceTypeRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "Label used to identify instance type\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstanceTypesFilter:getInstanceTypesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getInstanceTypesType:getInstanceTypesType": {
            "properties": {
                "acceleratedDevices": {
                    "type": "integer",
                    "description": "The number of VPUs this Linode Type offers.\n"
                },
                "addons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddon:getInstanceTypesTypeAddon"
                    },
                    "description": "Information about the optional Backup service offered for Linodes.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class of the Linode Type. See all classes [here](https://techdocs.akamai.com/linode-api/reference/get-linode-types).\n"
                },
                "disk": {
                    "type": "integer",
                    "description": "The Disk size, in MB, of the Linode Type.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Linode Type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode Type's label is for display purposes only.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM included in this Linode Type.\n"
                },
                "networkOut": {
                    "type": "integer",
                    "description": "The Mbits outbound bandwidth allocation.\n"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypePrice:getInstanceTypesTypePrice"
                    },
                    "description": "Cost in US dollars, broken down into hourly and monthly charges.\n"
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeRegionPrice:getInstanceTypesTypeRegionPrice"
                    },
                    "description": "A list of region-specific prices for this plan.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The monthly outbound transfer amount, in MB.\n"
                },
                "vcpus": {
                    "type": "integer",
                    "description": "The number of VCPU cores this Linode Type offers.\n"
                }
            },
            "type": "object",
            "required": [
                "acceleratedDevices",
                "addons",
                "class",
                "disk",
                "id",
                "label",
                "memory",
                "networkOut",
                "prices",
                "regionPrices",
                "transfer",
                "vcpus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getInstanceTypesTypeAddon:getInstanceTypesTypeAddon": {
            "properties": {
                "backups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddonBackup:getInstanceTypesTypeAddonBackup"
                    }
                }
            },
            "type": "object",
            "required": [
                "backups"
            ]
        },
        "linode:index/getInstanceTypesTypeAddonBackup:getInstanceTypesTypeAddonBackup": {
            "properties": {
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddonBackupPrice:getInstanceTypesTypeAddonBackupPrice"
                    }
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstanceTypesTypeAddonBackupRegionPrice:getInstanceTypesTypeAddonBackupRegionPrice"
                    }
                }
            },
            "type": "object",
            "required": [
                "prices",
                "regionPrices"
            ]
        },
        "linode:index/getInstanceTypesTypeAddonBackupPrice:getInstanceTypesTypeAddonBackupPrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "The cost (in US dollars) per hour to add Backups service.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "The cost (in US dollars) per month to add Backups service.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ]
        },
        "linode:index/getInstanceTypesTypeAddonBackupRegionPrice:getInstanceTypesTypeAddonBackupRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Linode Type.\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ]
        },
        "linode:index/getInstanceTypesTypePrice:getInstanceTypesTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per hour.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per month.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ]
        },
        "linode:index/getInstanceTypesTypeRegionPrice:getInstanceTypesTypeRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Linode Type.\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ]
        },
        "linode:index/getInstancesFilter:getInstancesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getInstancesInstance:getInstancesInstance": {
            "properties": {
                "alerts": {
                    "$ref": "#/types/linode:index/getInstancesInstanceAlerts:getInstancesInstanceAlerts"
                },
                "backups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceBackup:getInstancesInstanceBackup"
                    },
                    "description": "Information about this Linode's backups status.\n"
                },
                "bootConfigLabel": {
                    "type": "string",
                    "description": "The Label of the Instance Config that should be used to boot the Linode instance.\n"
                },
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of capabilities of this Linode instance.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfig:getInstancesInstanceConfig"
                    },
                    "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n"
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for this instance.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceDisk:getInstancesInstanceDisk"
                    },
                    "description": "Disks associated with this Linode.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The display group of the Linode instance.\n"
                },
                "hasUserData": {
                    "type": "boolean",
                    "description": "Whether this Instance was created with user-data.\n"
                },
                "hostUuid": {
                    "type": "string",
                    "description": "The Linode’s host machine, as a UUID.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group in the Linode API.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with `private/`. See [images](https://api.linode.com/v4/images) for more information on the Images available for you to use. Examples are `linode/debian12`, `linode/fedora39`, `linode/ubuntu22.04`, `linode/arch`, and `private/12345`. See all images [here](https://api.linode.com/v4/linode/images) (Requires a personal access token; docs [here](https://techdocs.akamai.com/linode-api/reference/get-images)). *This value can not be imported.* *Changing `image` forces the creation of a new Linode Instance.*\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "A string containing the Linode's public IP address.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "lkeClusterId": {
                    "type": "integer",
                    "description": "If applicable, the ID of the LKE cluster this instance is a part of.\n"
                },
                "placementGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstancePlacementGroup:getInstancesInstancePlacementGroup"
                    }
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceSpec:getInstancesInstanceSpec"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)\n"
                },
                "swapSize": {
                    "type": "integer",
                    "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This is used to set the swap disk size for the newly-created Linode.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n"
                },
                "watchdogEnabled": {
                    "type": "boolean",
                    "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                }
            },
            "type": "object",
            "required": [
                "alerts",
                "backups",
                "bootConfigLabel",
                "capabilities",
                "configs",
                "disks",
                "diskEncryption",
                "group",
                "hasUserData",
                "hostUuid",
                "id",
                "image",
                "ipAddress",
                "ipv4s",
                "ipv6",
                "label",
                "lkeClusterId",
                "placementGroups",
                "privateIpAddress",
                "region",
                "specs",
                "status",
                "swapSize",
                "tags",
                "type",
                "watchdogEnabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceAlerts:getInstancesInstanceAlerts": {
            "properties": {
                "cpu": {
                    "type": "integer",
                    "description": "The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.\n"
                },
                "io": {
                    "type": "integer",
                    "description": "The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.\n"
                },
                "networkIn": {
                    "type": "integer",
                    "description": "The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n"
                },
                "networkOut": {
                    "type": "integer",
                    "description": "The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n"
                },
                "transferQuota": {
                    "type": "integer",
                    "description": "The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.\n"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "io",
                "networkIn",
                "networkOut",
                "transferQuota"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceBackup:getInstancesInstanceBackup": {
            "properties": {
                "available": {
                    "type": "boolean",
                    "description": "Whether this Backup is available for restoration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If this Linode has the Backup service enabled.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceBackupSchedule:getInstancesInstanceBackupSchedule"
                    }
                }
            },
            "type": "object",
            "required": [
                "available",
                "enabled",
                "schedules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceBackupSchedule:getInstancesInstanceBackupSchedule": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "The day of the week that your Linode's weekly Backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as \"Scheduling\" until the day is automatically selected.\n"
                },
                "window": {
                    "type": "string",
                    "description": "The window ('W0'-'W22') in which your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur. For example, 'W10' indicates that your backups should be taken between 10:00 and 12:00. If you do not choose a backup window, one will be selected for you automatically.  If not set manually, when backups are initially enabled this may come back as Scheduling until the window is automatically selected.\n"
                }
            },
            "type": "object",
            "required": [
                "day",
                "window"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfig:getInstancesInstanceConfig": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Arbitrary user comments about this `config`.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDevice:getInstancesInstanceConfigDevice"
                    },
                    "description": "A list of `disk` or `volume` attachments for this `config`.  If the `boot_config_label` omits a `devices` block, the Linode will not be booted.\n"
                },
                "helpers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigHelper:getInstancesInstanceConfigHelper"
                    },
                    "description": "Helpers enabled when booting to this Linode Config.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group in the Linode API.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigInterface:getInstancesInstanceConfigInterface"
                    },
                    "description": "An array of Network Interfaces for this Linode’s Configuration Profile.\n"
                },
                "kernel": {
                    "type": "string",
                    "description": "A Kernel ID to boot a Linode with. Default is based on image choice. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://techdocs.akamai.com/linode-api/reference/get-kernels)).\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "Defaults to the total RAM of the Linode\n"
                },
                "rootDevice": {
                    "type": "string",
                    "description": "The root device to boot.\n"
                },
                "runLevel": {
                    "type": "string",
                    "description": "Defines the state of your Linode after booting.\n"
                },
                "virtMode": {
                    "type": "string",
                    "description": "Controls the virtualization mode.\n"
                }
            },
            "type": "object",
            "required": [
                "comments",
                "devices",
                "helpers",
                "id",
                "interfaces",
                "kernel",
                "label",
                "memoryLimit",
                "rootDevice",
                "runLevel",
                "virtMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDevice:getInstancesInstanceConfigDevice": {
            "properties": {
                "sdas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSda:getInstancesInstanceConfigDeviceSda"
                    },
                    "description": "... `sdh` -  The SDA-SDH slots, represent the Linux block device nodes for the first 8 disks attached to the Linode.  Each device must be suplied sequentially.  The device can be either a Disk or a Volume identified by `disk_label` or `volume_id`. Only one disk identifier is permitted per slot. Devices mapped from `sde` through `sdh` are unavailable in `\"fullvirt\"` `virt_mode`.\n"
                },
                "sdbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdb:getInstancesInstanceConfigDeviceSdb"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdc:getInstancesInstanceConfigDeviceSdc"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdd:getInstancesInstanceConfigDeviceSdd"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSde:getInstancesInstanceConfigDeviceSde"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdf:getInstancesInstanceConfigDeviceSdf"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdg:getInstancesInstanceConfigDeviceSdg"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                },
                "sdhs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getInstancesInstanceConfigDeviceSdh:getInstancesInstanceConfigDeviceSdh"
                    },
                    "description": "Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.\n"
                }
            },
            "type": "object",
            "required": [
                "sdas",
                "sdbs",
                "sdcs",
                "sdds",
                "sdes",
                "sdfs",
                "sdgs",
                "sdhs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSda:getInstancesInstanceConfigDeviceSda": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdb:getInstancesInstanceConfigDeviceSdb": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdc:getInstancesInstanceConfigDeviceSdc": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdd:getInstancesInstanceConfigDeviceSdd": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSde:getInstancesInstanceConfigDeviceSde": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdf:getInstancesInstanceConfigDeviceSdf": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdg:getInstancesInstanceConfigDeviceSdg": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigDeviceSdh:getInstancesInstanceConfigDeviceSdh": {
            "properties": {
                "diskId": {
                    "type": "integer",
                    "description": "The Disk ID of the associated `disk_label`, if used\n"
                },
                "diskLabel": {
                    "type": "string",
                    "description": "The `label` of the `disk` to map to this `device` slot.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "The Volume ID to map to this `device` slot.\n"
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigHelper:getInstancesInstanceConfigHelper": {
            "properties": {
                "devtmpfsAutomount": {
                    "type": "boolean",
                    "description": "Populates the /dev directory early during boot without udev. Defaults to false.\n"
                },
                "distro": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Distribution Helper setting.\n"
                },
                "modulesDep": {
                    "type": "boolean",
                    "description": "Creates a modules dependency file for the Kernel you run.\n"
                },
                "network": {
                    "type": "boolean",
                    "description": "Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.\n"
                },
                "updatedbDisabled": {
                    "type": "boolean",
                    "description": "Disables updatedb cron job to avoid disk thrashing.\n"
                }
            },
            "type": "object",
            "required": [
                "devtmpfsAutomount",
                "distro",
                "modulesDep",
                "network",
                "updatedbDisabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigInterface:getInstancesInstanceConfigInterface": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether this interface is currently booted and active.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group in the Linode API.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv4 CIDR VPC Subnet ranges that are routed to this Interface. IPv6 ranges are also available to select participants in the Beta program.\n"
                },
                "ipamAddress": {
                    "type": "string",
                    "description": "This Network Interface’s private IP address in Classless Inter-Domain Routing (CIDR) notation. (e.g. `10.0.0.1/24`) This field is only allowed for interfaces with the `vlan` purpose.\n"
                },
                "ipv4": {
                    "$ref": "#/types/linode:index/getInstancesInstanceConfigInterfaceIpv4:getInstancesInstanceConfigInterfaceIpv4",
                    "description": "This Linode's IPv4 Addresses. Each Linode is assigned a single public IPv4 address upon creation, and may get a single private IPv4 address if needed. You may need to open a support ticket to get additional IPv4 addresses.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "primary": {
                    "type": "boolean",
                    "description": "Whether the interface is the primary interface that should have the default route for this Linode. This field is only allowed for interfaces with the `public` or `vpc` purpose.\n"
                },
                "purpose": {
                    "type": "string",
                    "description": "The type of interface. (`public`, `vlan`, `vpc`)\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The name of the VPC Subnet to join. This field is only allowed and required for interfaces with the `vpc` purpose.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The ID of VPC which this interface is attached to.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "id",
                "ipv4",
                "purpose",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceConfigInterfaceIpv4:getInstancesInstanceConfigInterfaceIpv4": {
            "properties": {
                "nat11": {
                    "type": "string",
                    "description": "The public IP that will be used for the one-to-one NAT purpose. If this is `any`, the public IPv4 address assigned to this Linode is used on this interface and will be 1:1 NATted with the VPC IPv4 address.\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "The IP from the VPC subnet to use for this interface. A random address will be assigned if this is not specified in a VPC interface.\n"
                }
            },
            "type": "object",
            "required": [
                "nat11",
                "vpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceDisk:getInstancesInstanceDisk": {
            "properties": {
                "filesystem": {
                    "type": "string",
                    "description": "The Disk filesystem can be one of: `\"raw\"`, `\"swap\"`, `\"ext3\"`, `\"ext4\"`, or `\"initrd\"` which has a max size of 32mb and can be used in the config `initrd` (not currently supported in this provider).\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group in the Linode API.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB.\n"
                }
            },
            "type": "object",
            "required": [
                "filesystem",
                "id",
                "label",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstancePlacementGroup:getInstancesInstancePlacementGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the Placement Group in the Linode API.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "placementGroupPolicy": {
                    "type": "string",
                    "description": "Whether Linodes must be able to become compliant during assignment. (Default `strict`)\n"
                },
                "placementGroupType": {
                    "type": "string",
                    "description": "The placement group type to use when placing Linodes in this group.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "placementGroupPolicy",
                "placementGroupType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getInstancesInstanceSpec:getInstancesInstanceSpec": {
            "properties": {
                "acceleratedDevices": {
                    "type": "integer",
                    "description": "The number of VPUs this Linode has access to.\n"
                },
                "disk": {
                    "type": "integer",
                    "description": "The amount of storage space, in GB. this Linode has access to. A typical Linode will divide this space between a primary disk with an image deployed to it, and a swap disk, usually 512 MB. This is the default configuration created when deploying a Linode with an image through POST /linode/instances.\n"
                },
                "gpus": {
                    "type": "integer",
                    "description": "The number of GPUs this Linode has access to.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The amount of RAM, in MB, this Linode has access to. Typically a Linode will choose to boot with all of its available RAM, but this can be configured in a Config profile.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The amount of network transfer this Linode is allotted each month.\n"
                },
                "vcpus": {
                    "type": "integer",
                    "description": "The number of vcpus this Linode has access to. Typically a Linode will choose to boot with all of its available vcpus, but this can be configured in a Config Profile.\n"
                }
            },
            "type": "object",
            "required": [
                "acceleratedDevices",
                "disk",
                "gpus",
                "memory",
                "transfer",
                "vcpus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getIpv6RangesFilter:getIpv6RangesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getIpv6RangesRange:getIpv6RangesRange": {
            "properties": {
                "prefix": {
                    "type": "integer",
                    "description": "The prefix length of the address, denoting how many addresses can be assigned from this range.\n"
                },
                "range": {
                    "type": "string",
                    "description": "The IPv6 address of this range.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for this range of IPv6 addresses.\n"
                },
                "routeTarget": {
                    "type": "string",
                    "description": "The IPv6 SLAAC address.\n"
                }
            },
            "type": "object",
            "required": [
                "prefix",
                "range",
                "region",
                "routeTarget"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getKernelsFilter:getKernelsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getKernelsKernel:getKernelsKernel": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The architecture of this Kernel.\n"
                },
                "built": {
                    "type": "string",
                    "description": "The date on which this Kernel was built.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether or not this Kernel is deprecated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique ID of this Kernel.\n"
                },
                "kvm": {
                    "type": "boolean",
                    "description": "If this Kernel is suitable for KVM Linodes.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The friendly name of this Kernel.\n"
                },
                "pvops": {
                    "type": "boolean",
                    "description": "If this Kernel is suitable for paravirtualized operations.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Linux Kernel version\n"
                },
                "xen": {
                    "type": "boolean",
                    "description": "If this Kernel is suitable for Xen Linodes.\n"
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "built",
                "deprecated",
                "id",
                "kvm",
                "label",
                "pvops",
                "version",
                "xen"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getLkeClusterControlPlane:getLkeClusterControlPlane": {
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterControlPlaneAcl:getLkeClusterControlPlaneAcl"
                    },
                    "description": "The ACL configuration for an LKE cluster's control plane.\n"
                },
                "highAvailability": {
                    "type": "boolean",
                    "description": "Whether High Availability is enabled for the cluster Control Plane.\n"
                }
            },
            "type": "object",
            "required": [
                "highAvailability"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterControlPlaneAcl:getLkeClusterControlPlaneAcl": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterControlPlaneAclAddress:getLkeClusterControlPlaneAclAddress"
                    },
                    "description": "A list of ip addresses to allow.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The default policy. A value of true means a default policy of DENY. A value of false means a default policy of ALLOW.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterControlPlaneAclAddress:getLkeClusterControlPlaneAclAddress": {
            "properties": {
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of individual ipv4 addresses or CIDRs to ALLOW.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of individual ipv6 addresses or CIDRs to ALLOW.\n"
                }
            },
            "type": "object",
            "required": [
                "ipv4s",
                "ipv6s"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPool:getLkeClusterPool": {
            "properties": {
                "autoscalers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterPoolAutoscaler:getLkeClusterPoolAutoscaler"
                    },
                    "description": "The configuration options for the autoscaler. This field only contains an autoscaler configuration if autoscaling is enabled on this cluster.\n"
                },
                "count": {
                    "type": "integer",
                    "description": "The number of nodes in the Node Pool.\n"
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for nodes in this pool.\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterPoolDisk:getLkeClusterPoolDisk"
                    },
                    "description": "This Node Pool’s custom disk layout.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The LKE Cluster's ID.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterPoolNode:getLkeClusterPoolNode"
                    },
                    "description": "The nodes in the Node Pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeClusterPoolTaint:getLkeClusterPoolTaint"
                    },
                    "description": "Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                }
            },
            "type": "object",
            "required": [
                "count",
                "diskEncryption",
                "id",
                "labels",
                "tags",
                "taints",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPoolAutoscaler:getLkeClusterPoolAutoscaler": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The default policy. A value of true means a default policy of DENY. A value of false means a default policy of ALLOW.\n"
                },
                "max": {
                    "type": "integer",
                    "description": "The maximum number of nodes to autoscale to.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of nodes to autoscale to.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "max",
                "min"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPoolDisk:getLkeClusterPoolDisk": {
            "properties": {
                "size": {
                    "type": "integer",
                    "description": "The size of this custom disk partition in MB.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The linode type for all of the nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                }
            },
            "type": "object",
            "required": [
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPoolNode:getLkeClusterPoolNode": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The LKE Cluster's ID.\n"
                },
                "instanceId": {
                    "type": "integer",
                    "description": "The ID of the underlying Linode instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "instanceId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClusterPoolTaint:getLkeClusterPoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Kubernetes taint effect. The accepted values are `NoSchedule`, `PreferNoSchedule` and `NoExecute`. For the descriptions of these values, see [Kubernetes Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).\n"
                },
                "key": {
                    "type": "string",
                    "description": "The Kubernetes taint key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Kubernetes taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ]
        },
        "linode:index/getLkeClustersFilter:getLkeClustersFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getLkeClustersLkeCluster:getLkeClustersLkeCluster": {
            "properties": {
                "controlPlane": {
                    "$ref": "#/types/linode:index/getLkeClustersLkeClusterControlPlane:getLkeClustersLkeClusterControlPlane",
                    "description": "Defines settings for the Kubernetes Control Plane.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Kubernetes cluster was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The LKE Cluster's ID.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).\n"
                },
                "label": {
                    "type": "string",
                    "description": "The unique label for the cluster.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This Kubernetes cluster's location.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cluster.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Kubernetes cluster was updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "k8sVersion",
                "label",
                "region",
                "status",
                "tags",
                "tier",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeClustersLkeClusterControlPlane:getLkeClustersLkeClusterControlPlane": {
            "properties": {
                "highAvailability": {
                    "type": "boolean",
                    "description": "Whether High Availability is enabled for the cluster Control Plane.\n"
                }
            },
            "type": "object",
            "required": [
                "highAvailability"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getLkeTypesFilter:getLkeTypesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getLkeTypesType:getLkeTypesType": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID representing the Kubernetes type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Kubernetes type label is for display purposes only.\n"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeTypesTypePrice:getLkeTypesTypePrice"
                    },
                    "description": "Cost in US dollars, broken down into hourly and monthly charges.\n"
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getLkeTypesTypeRegionPrice:getLkeTypesTypeRegionPrice"
                    },
                    "description": "A list of region-specific prices for this LKE Type.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The monthly outbound transfer amount, in MB.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "prices",
                "regionPrices",
                "transfer"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getLkeTypesTypePrice:getLkeTypesTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per hour.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per month.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ]
        },
        "linode:index/getLkeTypesTypeRegionPrice:getLkeTypesTypeRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Kubernetes type.\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ]
        },
        "linode:index/getLkeVersionsVersion:getLkeVersionsVersion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "The tier (`standard` or `enterprise`) of Linode LKE Versions to fetch.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "tier"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getNbTypesFilter:getNbTypesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The type of comparison to use for this filter.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attribute to filter on.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The value(s) to be used in the filter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getNbTypesType:getNbTypesType": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID assigned to this Node Balancer Type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Node Balancer Type's label.\n"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNbTypesTypePrice:getNbTypesTypePrice"
                    },
                    "description": "Cost in US dollars, broken down into hourly and monthly charges.\n"
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNbTypesTypeRegionPrice:getNbTypesTypeRegionPrice"
                    },
                    "description": "A list of region-specific prices for this Node Balancer Type.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The monthly outbound transfer amount, in MB.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "prices",
                "regionPrices",
                "transfer"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getNbTypesTypePrice:getNbTypesTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ]
        },
        "linode:index/getNbTypesTypeRegionPrice:getNbTypesTypeRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ]
        },
        "linode:index/getNetworkTransferPricesFilter:getNetworkTransferPricesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getNetworkTransferPricesType:getNetworkTransferPricesType": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID representing the Network Transfer Price.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Network Transfer Price label is for display purposes only.\n"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNetworkTransferPricesTypePrice:getNetworkTransferPricesTypePrice"
                    },
                    "description": "Cost in US dollars, broken down into hourly and monthly charges.\n"
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNetworkTransferPricesTypeRegionPrice:getNetworkTransferPricesTypeRegionPrice"
                    },
                    "description": "A list of region-specific prices for this Network Transfer Price.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The monthly outbound transfer amount, in MB.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "prices",
                "regionPrices",
                "transfer"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getNetworkTransferPricesTypePrice:getNetworkTransferPricesTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per hour.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per month.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ]
        },
        "linode:index/getNetworkTransferPricesTypeRegionPrice:getNetworkTransferPricesTypeRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Network Transfer Price.\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ]
        },
        "linode:index/getNetworkingIpVpcNat11:getNetworkingIpVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP Address to access.  The address must be associated with the account and a resource that the user has access to view.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The `id` of the VPC Subnet for this Interface.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The `id` of the VPC configured for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNetworkingIpsFilter:getNetworkingIpsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getNetworkingIpsIpAddress:getNetworkingIpsIpAddress": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address that is configured as a 1:1 NAT for this VPC interface.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode this address currently belongs to.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The number of bits set in the subnet mask.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether this is a public or private IP address.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).\n"
                },
                "reserved": {
                    "type": "boolean",
                    "description": "Whether this IP address is a reserved IP.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The mask that separates host bits from network bits for this address.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/getNetworkingIpsIpAddressVpcNat11:getNetworkingIpsIpAddressVpcNat11",
                    "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "reserved",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNetworkingIpsIpAddressVpcNat11:getNetworkingIpsIpAddressVpcNat11": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address that is configured as a 1:1 NAT for this VPC interface.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The `id` of the VPC Subnet for this Interface.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The `id` of the VPC configured for this Interface.\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId",
                "vpcId"
            ]
        },
        "linode:index/getNodeBalancerConfigNodeStatus:getNodeBalancerConfigNodeStatus": {
            "properties": {
                "down": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.\n"
                },
                "up": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'UP' and healthy, and that are serving requests.\n"
                }
            },
            "type": "object",
            "required": [
                "down",
                "up"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodeBalancerFirewall:getNodeBalancerFirewall": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this firewall was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The NodeBalancer's ID.\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic. (`ACCEPT`, `DROP`)\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNodeBalancerFirewallInbound:getNodeBalancerFirewallInbound"
                    },
                    "description": "A set of firewall rules that specify what inbound network traffic is allowed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Used to identify this rule. For display purposes only.\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic. (`ACCEPT`, `DROP`)\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNodeBalancerFirewallOutbound:getNodeBalancerFirewallOutbound"
                    },
                    "description": "A set of firewall rules that specify what outbound network traffic is allowed.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the firewall. (`enabled`, `disabled`, `deleted`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags applied to the firewall. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this firewall was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "inboundPolicy",
                "label",
                "outboundPolicy",
                "status",
                "tags",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodeBalancerFirewallInbound:getNodeBalancerFirewallInbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Used to identify this rule. For display purposes only.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodeBalancerFirewallOutbound:getNodeBalancerFirewallOutbound": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Used to identify this rule. For display purposes only.\n"
                },
                "ports": {
                    "type": "string",
                    "description": "A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The network protocol this rule controls. (`TCP`, `UDP`, `ICMP`)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "ipv4s",
                "ipv6s",
                "label",
                "ports",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodeBalancerTransfer:getNodeBalancerTransfer": {
            "properties": {
                "in": {
                    "type": "number",
                    "description": "The total transfer, in MB, used by this NodeBalancer for the current month\n"
                },
                "out": {
                    "type": "number",
                    "description": "The total inbound transfer, in MB, used for this NodeBalancer for the current month\n"
                },
                "total": {
                    "type": "number",
                    "description": "The total outbound transfer, in MB, used for this NodeBalancer for the current month\n"
                }
            },
            "type": "object",
            "required": [
                "in",
                "out",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getNodebalancerConfigsFilter:getNodebalancerConfigsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getNodebalancerConfigsNodebalancerConfig:getNodebalancerConfigsNodebalancerConfig": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "What algorithm this NodeBalancer should use for routing traffic to backends (`roundrobin`, `leastconn`, `source`)\n"
                },
                "check": {
                    "type": "string",
                    "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                },
                "checkAttempts": {
                    "type": "integer",
                    "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                },
                "checkBody": {
                    "type": "string",
                    "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down\n"
                },
                "checkInterval": {
                    "type": "integer",
                    "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                },
                "checkPassive": {
                    "type": "boolean",
                    "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                },
                "checkPath": {
                    "type": "string",
                    "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                },
                "checkTimeout": {
                    "type": "integer",
                    "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                },
                "cipherSuite": {
                    "type": "string",
                    "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary. (`recommended`, `legacy`)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The config's ID.\n"
                },
                "nodeStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNodebalancerConfigsNodebalancerConfigNodeStatus:getNodebalancerConfigsNodebalancerConfigNodeStatus"
                    },
                    "description": "A structure containing information about the health of the backends for this port. This information is updated periodically as checks are performed against backends.\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n\n* `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The TCP port this Config is for.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, and `v2`) (Defaults to `none`)\n"
                },
                "sslCommonname": {
                    "type": "string",
                    "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                },
                "sslFingerprint": {
                    "type": "string",
                    "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                },
                "stickiness": {
                    "type": "string",
                    "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "check",
                "checkAttempts",
                "checkBody",
                "checkInterval",
                "checkPassive",
                "checkPath",
                "checkTimeout",
                "cipherSuite",
                "id",
                "nodeStatuses",
                "nodebalancerId",
                "port",
                "protocol",
                "proxyProtocol",
                "sslCommonname",
                "sslFingerprint",
                "stickiness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id",
                        "nodebalancerId"
                    ]
                }
            }
        },
        "linode:index/getNodebalancerConfigsNodebalancerConfigNodeStatus:getNodebalancerConfigsNodebalancerConfigNodeStatus": {
            "properties": {
                "down": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'DOWN' and unhealthy. These are not in rotation, and not serving requests.\n"
                },
                "up": {
                    "type": "integer",
                    "description": "The number of backends considered to be 'UP' and healthy, and that are serving requests.\n"
                }
            },
            "type": "object",
            "required": [
                "down",
                "up"
            ]
        },
        "linode:index/getNodebalancersFilter:getNodebalancersFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getNodebalancersNodebalancer:getNodebalancersNodebalancer": {
            "properties": {
                "clientConnThrottle": {
                    "type": "integer",
                    "description": "Throttle connections per second (0-20)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Linode NodeBalancer was created\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "This NodeBalancer's hostname, ending with .ip.linodeusercontent.com\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The Linode NodeBalancer's unique ID\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "The Public IPv4 Address of this NodeBalancer\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "The Public IPv6 Address of this NodeBalancer\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getNodebalancersNodebalancerTransfer:getNodebalancersNodebalancerTransfer"
                    },
                    "description": "Information about the amount of transfer this NodeBalancer has had so far this month.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Linode NodeBalancer was last updated\n"
                }
            },
            "type": "object",
            "required": [
                "clientConnThrottle",
                "created",
                "hostname",
                "id",
                "ipv4",
                "ipv6",
                "label",
                "region",
                "tags",
                "transfers",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getNodebalancersNodebalancerTransfer:getNodebalancersNodebalancerTransfer": {
            "properties": {
                "in": {
                    "type": "number",
                    "description": "The total transfer, in MB, used by this NodeBalancer for the current month\n"
                },
                "out": {
                    "type": "number",
                    "description": "The total inbound transfer, in MB, used for this NodeBalancer for the current month\n"
                },
                "total": {
                    "type": "number",
                    "description": "The total outbound transfer, in MB, used for this NodeBalancer for the current month\n"
                }
            },
            "type": "object",
            "required": [
                "in",
                "out",
                "total"
            ]
        },
        "linode:index/getObjectStorageEndpointsEndpoint:getObjectStorageEndpointsEndpoint": {
            "properties": {
                "endpointType": {
                    "type": "string",
                    "description": "The type of `s3_endpoint` available to the active `user`. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The Akamai cloud computing region, represented by its slug value. The [list regions](https://techdocs.akamai.com/linode-api/reference/get-regions) API is available to see all regions available.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "Your s3 endpoint URL, based on the `endpoint_type` and `region`. Output as null if you haven't assigned an endpoint for your user in this region with the specific endpoint type.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointType",
                "region",
                "s3Endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getObjectStorageEndpointsFilter:getObjectStorageEndpointsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getPlacementGroupMember:getPlacementGroupMember": {
            "properties": {
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether this Linode is currently compliant with the group's placement group type.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode.\n"
                }
            },
            "type": "object",
            "required": [
                "isCompliant",
                "linodeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getPlacementGroupMigrations:getPlacementGroupMigrations": {
            "properties": {
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getPlacementGroupMigrationsInbound:getPlacementGroupMigrationsInbound"
                    },
                    "description": "A list of the Linodes the system is migrating into the placement group.\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getPlacementGroupMigrationsOutbound:getPlacementGroupMigrationsOutbound"
                    },
                    "description": "A list of the Linodes the system is migrating out of the placement group.\n"
                }
            },
            "type": "object",
            "required": [
                "inbounds",
                "outbounds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getPlacementGroupMigrationsInbound:getPlacementGroupMigrationsInbound": {
            "properties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode.\n"
                }
            },
            "type": "object",
            "required": [
                "linodeId"
            ]
        },
        "linode:index/getPlacementGroupMigrationsOutbound:getPlacementGroupMigrationsOutbound": {
            "properties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode.\n"
                }
            },
            "type": "object",
            "required": [
                "linodeId"
            ]
        },
        "linode:index/getPlacementGroupsFilter:getPlacementGroupsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the placement group.\n"
                },
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether this Linode is currently compliant with the group's placement group type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getPlacementGroupsPlacementGroupMember:getPlacementGroupsPlacementGroupMember"
                    },
                    "description": "A set of Linodes currently assigned to this Placement Group.\n"
                },
                "migrations": {
                    "$ref": "#/types/linode:index/getPlacementGroupsPlacementGroupMigrations:getPlacementGroupsPlacementGroupMigrations",
                    "description": "Any Linodes that are being migrated to or from the placement group.\n"
                },
                "placementGroupPolicy": {
                    "type": "string",
                    "description": "Whether Linodes must be able to become compliant during assignment. (Default `strict`)\n"
                },
                "placementGroupType": {
                    "type": "string",
                    "description": "The placement group type to use when placing Linodes in this group.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the Placement Group.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "isCompliant",
                "label",
                "placementGroupPolicy",
                "placementGroupType",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getPlacementGroupsPlacementGroupMember:getPlacementGroupsPlacementGroupMember": {
            "properties": {
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether this Linode is currently compliant with the group's placement group type.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The unique identifier for the Linode being migrated out of the placement group.\n"
                }
            },
            "type": "object",
            "required": [
                "isCompliant",
                "linodeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getPlacementGroupsPlacementGroupMigrations:getPlacementGroupsPlacementGroupMigrations": {
            "properties": {
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getPlacementGroupsPlacementGroupMigrationsInbound:getPlacementGroupsPlacementGroupMigrationsInbound"
                    },
                    "description": "A list of the Linodes the system is migrating into the placement group.\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getPlacementGroupsPlacementGroupMigrationsOutbound:getPlacementGroupsPlacementGroupMigrationsOutbound"
                    },
                    "description": "A list of the Linodes the system is migrating out of the placement group.\n"
                }
            },
            "type": "object",
            "required": [
                "inbounds",
                "outbounds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getPlacementGroupsPlacementGroupMigrationsInbound:getPlacementGroupsPlacementGroupMigrationsInbound": {
            "properties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The unique identifier for the Linode being migrated out of the placement group.\n"
                }
            },
            "type": "object",
            "required": [
                "linodeId"
            ]
        },
        "linode:index/getPlacementGroupsPlacementGroupMigrationsOutbound:getPlacementGroupsPlacementGroupMigrationsOutbound": {
            "properties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The unique identifier for the Linode being migrated out of the placement group.\n"
                }
            },
            "type": "object",
            "required": [
                "linodeId"
            ]
        },
        "linode:index/getProfileReferrals:getProfileReferrals": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The Profile referral code.  If new accounts use this when signing up for Linode, referring account will receive credit.\n"
                },
                "completed": {
                    "type": "integer",
                    "description": "The number of completed signups with the referral code.\n"
                },
                "credit": {
                    "type": "number",
                    "description": "The amount of account credit in US Dollars issued to the account through the referral program.\n"
                },
                "pending": {
                    "type": "integer",
                    "description": "The number of pending signups for the referral code. To receive credit the signups must be completed.\n"
                },
                "total": {
                    "type": "integer",
                    "description": "The number of users who have signed up with the referral code.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The referral URL.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "completed",
                "credit",
                "pending",
                "total",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getRegionPlacementGroupLimit:getRegionPlacementGroupLimit": {
            "properties": {
                "maximumLinodesPerPg": {
                    "type": "integer",
                    "description": "The maximum number of Linodes allowed to be assigned to a placement group in this region.\n"
                },
                "maximumPgsPerCustomer": {
                    "type": "integer",
                    "description": "The maximum number of placement groups allowed for the current user in this region.\n"
                }
            },
            "type": "object",
            "required": [
                "maximumLinodesPerPg",
                "maximumPgsPerCustomer"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getRegionResolver:getRegionResolver": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 addresses for this region’s DNS resolvers, separated by commas.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "The IPv6 addresses for this region’s DNS resolvers, separated by commas.\n"
                }
            },
            "type": "object",
            "required": [
                "ipv4",
                "ipv6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getRegionsFilter:getRegionsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getRegionsRegion:getRegionsRegion": {
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of capabilities of this region.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The country the region resides in.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique ID of this Region.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Detailed location information for this Region, including city, state or region, and country.\n"
                },
                "placementGroupLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getRegionsRegionPlacementGroupLimit:getRegionsRegionPlacementGroupLimit"
                    },
                    "description": "Information about placement groups limits for this region.\n"
                },
                "resolvers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getRegionsRegionResolver:getRegionsRegionResolver"
                    }
                },
                "siteType": {
                    "type": "string",
                    "description": "The type of this region.\n"
                },
                "status": {
                    "type": "string",
                    "description": "This region’s current operational status (ok or outage).\n"
                }
            },
            "type": "object",
            "required": [
                "capabilities",
                "country",
                "id",
                "label",
                "placementGroupLimits",
                "siteType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getRegionsRegionPlacementGroupLimit:getRegionsRegionPlacementGroupLimit": {
            "properties": {
                "maximumLinodesPerPg": {
                    "type": "integer",
                    "description": "The maximum number of Linodes allowed to be assigned to a placement group in this region.\n"
                },
                "maximumPgsPerCustomer": {
                    "type": "integer",
                    "description": "The maximum number of placement groups allowed for the current user in this region.\n"
                }
            },
            "type": "object",
            "required": [
                "maximumLinodesPerPg",
                "maximumPgsPerCustomer"
            ]
        },
        "linode:index/getRegionsRegionResolver:getRegionsRegionResolver": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 addresses for this region’s DNS resolvers, separated by commas.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "The IPv6 addresses for this region’s DNS resolvers, separated by commas.\n"
                }
            },
            "type": "object",
            "required": [
                "ipv4",
                "ipv6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getSshkeysFilter:getSshkeysFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getSshkeysSshkey:getSshkeysSshkey": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this key was added.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the SSH Key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the SSH Key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "label",
                "sshKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "label"
                    ]
                }
            }
        },
        "linode:index/getStackScriptUserDefinedField:getStackScriptUserDefinedField": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value. If not specified, this value will be used.\n"
                },
                "example": {
                    "type": "string",
                    "description": "An example value for the field.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                },
                "manyOf": {
                    "type": "string",
                    "description": "A list of acceptable values for the field in any quantity, combination or order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                },
                "oneOf": {
                    "type": "string",
                    "description": "A list of acceptable single values for the field.\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "example",
                "label",
                "manyOf",
                "name",
                "oneOf"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getStackScriptsFilter:getStackScriptsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getStackScriptsStackscript:getStackScriptsStackscript": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this StackScript was created.\n"
                },
                "deploymentsActive": {
                    "type": "integer",
                    "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                },
                "deploymentsTotal": {
                    "type": "integer",
                    "description": "The total number of times this StackScript has been deployed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the StackScript.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique ID of the StackScript.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of Image IDs representing the Images that this StackScript is compatible for deploying with.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                },
                "revNote": {
                    "type": "string",
                    "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date this StackScript was updated.\n"
                },
                "userDefinedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getStackScriptsStackscriptUserDefinedField:getStackScriptsStackscriptUserDefinedField"
                    },
                    "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                },
                "userGravatarId": {
                    "type": "string",
                    "description": "The Gravatar ID for the User who created the StackScript.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The User who created the StackScript.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "deploymentsActive",
                "deploymentsTotal",
                "description",
                "id",
                "images",
                "isPublic",
                "label",
                "revNote",
                "script",
                "updated",
                "userDefinedFields",
                "userGravatarId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getStackScriptsStackscriptUserDefinedField:getStackScriptsStackscriptUserDefinedField": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value. If not specified, this value will be used.\n"
                },
                "example": {
                    "type": "string",
                    "description": "An example value for the field.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n"
                },
                "manyOf": {
                    "type": "string",
                    "description": "A list of acceptable values for the field in any quantity, combination or order.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field.\n"
                },
                "oneOf": {
                    "type": "string",
                    "description": "A list of acceptable single values for the field.\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "example",
                "label",
                "manyOf",
                "name",
                "oneOf"
            ]
        },
        "linode:index/getUserDatabaseGrant:getUserDatabaseGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserDomainGrant:getUserDomainGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserFirewallGrant:getUserFirewallGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserGlobalGrant:getUserGlobalGrant": {
            "properties": {
                "accountAccess": {
                    "type": "string",
                    "description": "The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)\n"
                },
                "addDatabases": {
                    "type": "boolean",
                    "description": "If true, this User may add Managed Databases.\n"
                },
                "addDomains": {
                    "type": "boolean",
                    "description": "If true, this User may add Domains.\n"
                },
                "addFirewalls": {
                    "type": "boolean",
                    "description": "If true, this User may add Firewalls.\n"
                },
                "addImages": {
                    "type": "boolean",
                    "description": "If true, this User may add Images.\n"
                },
                "addLinodes": {
                    "type": "boolean",
                    "description": "If true, this User may create Linodes.\n"
                },
                "addLongview": {
                    "type": "boolean",
                    "description": "If true, this User may create Longview clients and view the current plan.\n"
                },
                "addNodebalancers": {
                    "type": "boolean",
                    "description": "If true, this User may add NodeBalancers.\n"
                },
                "addPlacementGroups": {
                    "type": "boolean",
                    "description": "If true, this User may add Placement Groups.\n"
                },
                "addStackscripts": {
                    "type": "boolean"
                },
                "addVolumes": {
                    "type": "boolean",
                    "description": "If true, this User may add Volumes.\n"
                },
                "addVpcs": {
                    "type": "boolean",
                    "description": "If true, this User may add Virtual Private Clouds (VPCs).\n"
                },
                "cancelAccount": {
                    "type": "boolean",
                    "description": "If true, this User may cancel the entire Account.\n"
                },
                "longviewSubscription": {
                    "type": "boolean",
                    "description": "If true, this User may manage the Account’s Longview subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "accountAccess",
                "addDatabases",
                "addDomains",
                "addFirewalls",
                "addImages",
                "addLinodes",
                "addLongview",
                "addNodebalancers",
                "addPlacementGroups",
                "addStackscripts",
                "addVolumes",
                "addVpcs",
                "cancelAccount",
                "longviewSubscription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getUserImageGrant:getUserImageGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserLinodeGrant:getUserLinodeGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserLongviewGrant:getUserLongviewGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserNodebalancerGrant:getUserNodebalancerGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserPlacementGroupGrant:getUserPlacementGroupGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserStackscriptGrant:getUserStackscriptGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserVolumeGrant:getUserVolumeGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUserVpcGrant:getUserVpcGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access. (`read_only`, `read_write`)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersFilter:getUsersFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getUsersUser:getUsersUser": {
            "properties": {
                "databaseGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserDatabaseGrant:getUsersUserDatabaseGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "domainGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserDomainGrant:getUsersUserDomainGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address for this User, for account management communications, and may be used for other communications as configured.\n"
                },
                "firewallGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserFirewallGrant:getUsersUserFirewallGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "globalGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserGlobalGrant:getUsersUserGlobalGrant"
                    },
                    "description": "A structure containing the Account-level grants a User has.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "imageGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserImageGrant:getUsersUserImageGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "linodeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserLinodeGrant:getUsersUserLinodeGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "longviewGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserLongviewGrant:getUsersUserLongviewGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "nodebalancerGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserNodebalancerGrant:getUsersUserNodebalancerGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "passwordCreated": {
                    "type": "string",
                    "description": "The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.\n"
                },
                "placementGroupGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserPlacementGroupGrant:getUsersUserPlacementGroupGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "If true, this User must be granted access to perform actions or access entities on this Account.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.\n"
                },
                "stackscriptGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserStackscriptGrant:getUsersUserStackscriptGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "tfaEnabled": {
                    "type": "boolean",
                    "description": "A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "The type of this user.\n"
                },
                "username": {
                    "type": "string",
                    "description": "This User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).\n"
                },
                "verifiedPhoneNumber": {
                    "type": "string",
                    "description": "The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.\n"
                },
                "volumeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserVolumeGrant:getUsersUserVolumeGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                },
                "vpcGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getUsersUserVpcGrant:getUsersUserVpcGrant"
                    },
                    "description": "A set containing all of the user's active grants.\n"
                }
            },
            "type": "object",
            "required": [
                "databaseGrants",
                "domainGrants",
                "email",
                "firewallGrants",
                "globalGrants",
                "id",
                "imageGrants",
                "linodeGrants",
                "longviewGrants",
                "nodebalancerGrants",
                "passwordCreated",
                "placementGroupGrants",
                "restricted",
                "sshKeys",
                "stackscriptGrants",
                "tfaEnabled",
                "userType",
                "username",
                "verifiedPhoneNumber",
                "volumeGrants",
                "vpcGrants"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "username"
                    ]
                }
            }
        },
        "linode:index/getUsersUserDatabaseGrant:getUsersUserDatabaseGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserDomainGrant:getUsersUserDomainGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserFirewallGrant:getUsersUserFirewallGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserGlobalGrant:getUsersUserGlobalGrant": {
            "properties": {
                "accountAccess": {
                    "type": "string",
                    "description": "The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users. (`read_only`, `read_write`)\n"
                },
                "addDatabases": {
                    "type": "boolean",
                    "description": "If true, this User may add Managed Databases.\n"
                },
                "addDomains": {
                    "type": "boolean",
                    "description": "If true, this User may add Domains.\n"
                },
                "addFirewalls": {
                    "type": "boolean",
                    "description": "If true, this User may add Firewalls.\n"
                },
                "addImages": {
                    "type": "boolean",
                    "description": "If true, this User may add Images.\n"
                },
                "addLinodes": {
                    "type": "boolean",
                    "description": "If true, this User may create Linodes.\n"
                },
                "addLongview": {
                    "type": "boolean",
                    "description": "If true, this User may create Longview clients and view the current plan.\n"
                },
                "addNodebalancers": {
                    "type": "boolean",
                    "description": "If true, this User may add NodeBalancers.\n"
                },
                "addPlacementGroups": {
                    "type": "boolean",
                    "description": "If true, this User may add Placement Groups.\n"
                },
                "addStackscripts": {
                    "type": "boolean"
                },
                "addVolumes": {
                    "type": "boolean",
                    "description": "If true, this User may add Volumes.\n"
                },
                "addVpcs": {
                    "type": "boolean",
                    "description": "If true, this User may add Virtual Private Clouds (VPCs).\n"
                },
                "cancelAccount": {
                    "type": "boolean",
                    "description": "If true, this User may cancel the entire Account.\n"
                },
                "longviewSubscription": {
                    "type": "boolean",
                    "description": "If true, this User may manage the Account’s Longview subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "accountAccess",
                "addDatabases",
                "addDomains",
                "addFirewalls",
                "addImages",
                "addLinodes",
                "addLongview",
                "addNodebalancers",
                "addPlacementGroups",
                "addStackscripts",
                "addVolumes",
                "addVpcs",
                "cancelAccount",
                "longviewSubscription"
            ]
        },
        "linode:index/getUsersUserImageGrant:getUsersUserImageGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserLinodeGrant:getUsersUserLinodeGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserLongviewGrant:getUsersUserLongviewGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserNodebalancerGrant:getUsersUserNodebalancerGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserPlacementGroupGrant:getUsersUserPlacementGroupGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserStackscriptGrant:getUsersUserStackscriptGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserVolumeGrant:getUsersUserVolumeGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getUsersUserVpcGrant:getUsersUserVpcGrant": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of entity this grant applies to.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The current label of the entity this grant applies to, for display purposes.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The level of access this User has to this entity. If null, this User has no access.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "permissions"
            ]
        },
        "linode:index/getVlansFilter:getVlansFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVlansVlan:getVlansVlan": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When the VLAN was created.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The unique label of the VLAN.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The running Linodes currently attached to the VLAN.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region the VLAN is located in. See all regions [here](https://api.linode.com/v4/regions).\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "label",
                "linodes",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getVolumeTypesFilter:getVolumeTypesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVolumeTypesType:getVolumeTypesType": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID representing the Volume type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Volume type label is for display purposes only.\n"
                },
                "prices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getVolumeTypesTypePrice:getVolumeTypesTypePrice"
                    },
                    "description": "Cost in US dollars, broken down into hourly and monthly charges.\n"
                },
                "regionPrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getVolumeTypesTypeRegionPrice:getVolumeTypesTypeRegionPrice"
                    },
                    "description": "A list of region-specific prices for this Volume Type.\n"
                },
                "transfer": {
                    "type": "integer",
                    "description": "The monthly outbound transfer amount, in MB.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label",
                "prices",
                "regionPrices",
                "transfer"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getVolumeTypesTypePrice:getVolumeTypesTypePrice": {
            "properties": {
                "hourly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per hour.\n"
                },
                "monthly": {
                    "type": "number",
                    "description": "Cost (in US dollars) per month.\n"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "monthly"
            ]
        },
        "linode:index/getVolumeTypesTypeRegionPrice:getVolumeTypesTypeRegionPrice": {
            "properties": {
                "hourly": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "The ID representing the Volume type.\n"
                },
                "monthly": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "hourly",
                "id",
                "monthly"
            ]
        },
        "linode:index/getVolumesFilter:getVolumesFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVolumesVolume:getVolumesVolume": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this Volume was created.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.\n"
                },
                "filesystemPath": {
                    "type": "string",
                    "description": "The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique ID of this Volume.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Volume's label is for display purposes only.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The Volume's size, in GiB.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Volume was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "encryption",
                "filesystemPath",
                "id",
                "label",
                "linodeId",
                "region",
                "size",
                "status",
                "tags",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        },
        "linode:index/getVpcIpsFilter:getVpcIpsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVpcIpsVpcIp:getVpcIpsVpcIp": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "True if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise false.\n"
                },
                "address": {
                    "type": "string",
                    "description": "An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Null if an address_range.\n"
                },
                "addressRange": {
                    "type": "string",
                    "description": "A range of IPv4 addresses configured for this VPC interface. Null if a single address.\n"
                },
                "configId": {
                    "type": "integer",
                    "description": "The globally general entity identifier for the Linode configuration profile where the VPC is included.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for the VPC subnet that the IP or IP range belongs to.\n"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "The globally general API entity identifier for the Linode interface.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The identifier for the Linode the VPC interface currently belongs to.\n"
                },
                "nat11": {
                    "type": "string",
                    "description": "The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn't used.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The number of bits set in the subnet mask.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the VPC.\n"
                },
                "subnetId": {
                    "type": "integer",
                    "description": "The id of the VPC Subnet for this interface.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The mask that separates host bits from network bits for the address or address_range.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The id of the parent VPC for the list of VPC IPs.\n\n* `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "address",
                "addressRange",
                "configId",
                "gateway",
                "interfaceId",
                "linodeId",
                "nat11",
                "prefix",
                "region",
                "subnetId",
                "subnetMask",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getVpcSubnetLinode:getVpcSubnetLinode": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique id of this VPC subnet.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getVpcSubnetLinodeInterface:getVpcSubnetLinodeInterface"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "interfaces"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getVpcSubnetLinodeInterface:getVpcSubnetLinodeInterface": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique id of this VPC subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getVpcSubnetsFilter:getVpcSubnetsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVpcSubnetsVpcSubnet:getVpcSubnetsVpcSubnet": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date and time when the VPC Subnet was created.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique id of the VPC subnet.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 range of this subnet in CIDR format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the VPC subnet.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getVpcSubnetsVpcSubnetLinode:getVpcSubnetsVpcSubnetLinode"
                    },
                    "description": "A list of Linode IDs that added to this subnet.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date and time when the VPC Subnet was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "id",
                "ipv4",
                "label",
                "linodes",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "linode:index/getVpcSubnetsVpcSubnetLinode:getVpcSubnetsVpcSubnetLinode": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique id of the VPC subnet.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/getVpcSubnetsVpcSubnetLinodeInterface:getVpcSubnetsVpcSubnetLinodeInterface"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "interfaces"
            ]
        },
        "linode:index/getVpcSubnetsVpcSubnetLinodeInterface:getVpcSubnetsVpcSubnetLinodeInterface": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique id of the VPC subnet.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "id"
            ]
        },
        "linode:index/getVpcsFilter:getVpcsFilter": {
            "properties": {
                "matchBy": {
                    "type": "string",
                    "description": "The method to match the field by. (`exact`, `regex`, `substring`; default `exact`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter by. See the Filterable Fields section for a complete list of filterable fields.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of values for the filter to allow. These values should all be in string form.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "linode:index/getVpcsVpc:getVpcsVpc": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date and time when the VPC was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The user-defined description of this VPC.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of this VPC.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the VPC.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the VPC is deployed.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date and time when the VPC was last updated.\n"
                }
            },
            "type": "object",
            "required": [
                "created",
                "description",
                "id",
                "label",
                "region",
                "updated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "id"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the linode package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiCaPath": {
                "type": "string",
                "description": "The path to a Linode API CA file to trust.\n"
            },
            "apiVersion": {
                "type": "string",
                "description": "The version of Linode API.\n"
            },
            "configPath": {
                "type": "string",
                "description": "The path to the Linode config file to use. (default `~/.config/linode`)\n"
            },
            "configProfile": {
                "type": "string",
                "description": "The Linode config profile to use. (default `default`)\n"
            },
            "disableInternalCache": {
                "type": "boolean",
                "description": "Disable the internal caching system that backs certain Linode API requests.\n"
            },
            "eventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for events.\n"
            },
            "lkeEventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for LKE events.\n"
            },
            "lkeNodeReadyPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for an LKE node to be ready.\n"
            },
            "maxRetryDelayMs": {
                "type": "integer",
                "description": "Maximum delay in milliseconds before retrying a request.\n"
            },
            "minRetryDelayMs": {
                "type": "integer",
                "description": "Minimum delay in milliseconds before retrying a request.\n"
            },
            "objAccessKey": {
                "type": "string",
                "description": "The access key to be used in linode.ObjectStorageBucket and linode_object_storage_object.\n"
            },
            "objBucketForceDelete": {
                "type": "boolean",
                "description": "If true, when deleting a linode.ObjectStorageBucket any objects and versions will be force deleted.\n"
            },
            "objSecretKey": {
                "type": "string",
                "description": "The secret key to be used in linode.ObjectStorageBucket and linode_object_storage_object.\n",
                "secret": true
            },
            "objUseTempKeys": {
                "type": "boolean",
                "description": "If true, temporary object keys will be created implicitly at apply-time for the linode.ObjectStorageObject and\nlinode_object_sorage_bucket resource.\n"
            },
            "skipImplicitReboots": {
                "type": "boolean",
                "description": "If true, Linode Instances will not be rebooted on config and interface changes.\n"
            },
            "skipInstanceDeletePoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode.Instance resource to finish deleting.\n"
            },
            "skipInstanceReadyPoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode.Instance resource to be running.\n"
            },
            "token": {
                "type": "string",
                "description": "The token that allows you access to your Linode account\n"
            },
            "uaPrefix": {
                "type": "string",
                "description": "An HTTP User-Agent Prefix to prepend in API requests.\n"
            },
            "url": {
                "type": "string",
                "description": "The HTTP(S) API address of the Linode API to use.\n"
            }
        },
        "inputProperties": {
            "apiCaPath": {
                "type": "string",
                "description": "The path to a Linode API CA file to trust.\n"
            },
            "apiVersion": {
                "type": "string",
                "description": "The version of Linode API.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_API_VERSION"
                    ]
                }
            },
            "configPath": {
                "type": "string",
                "description": "The path to the Linode config file to use. (default `~/.config/linode`)\n"
            },
            "configProfile": {
                "type": "string",
                "description": "The Linode config profile to use. (default `default`)\n"
            },
            "disableInternalCache": {
                "type": "boolean",
                "description": "Disable the internal caching system that backs certain Linode API requests.\n"
            },
            "eventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for events.\n"
            },
            "lkeEventPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for LKE events.\n"
            },
            "lkeNodeReadyPollMs": {
                "type": "integer",
                "description": "The rate in milliseconds to poll for an LKE node to be ready.\n"
            },
            "maxRetryDelayMs": {
                "type": "integer",
                "description": "Maximum delay in milliseconds before retrying a request.\n"
            },
            "minRetryDelayMs": {
                "type": "integer",
                "description": "Minimum delay in milliseconds before retrying a request.\n"
            },
            "objAccessKey": {
                "type": "string",
                "description": "The access key to be used in linode.ObjectStorageBucket and linode_object_storage_object.\n"
            },
            "objBucketForceDelete": {
                "type": "boolean",
                "description": "If true, when deleting a linode.ObjectStorageBucket any objects and versions will be force deleted.\n"
            },
            "objSecretKey": {
                "type": "string",
                "description": "The secret key to be used in linode.ObjectStorageBucket and linode_object_storage_object.\n",
                "secret": true
            },
            "objUseTempKeys": {
                "type": "boolean",
                "description": "If true, temporary object keys will be created implicitly at apply-time for the linode.ObjectStorageObject and\nlinode_object_sorage_bucket resource.\n"
            },
            "skipImplicitReboots": {
                "type": "boolean",
                "description": "If true, Linode Instances will not be rebooted on config and interface changes.\n"
            },
            "skipInstanceDeletePoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode.Instance resource to finish deleting.\n"
            },
            "skipInstanceReadyPoll": {
                "type": "boolean",
                "description": "Skip waiting for a linode.Instance resource to be running.\n"
            },
            "token": {
                "type": "string",
                "description": "The token that allows you access to your Linode account\n"
            },
            "uaPrefix": {
                "type": "string",
                "description": "An HTTP User-Agent Prefix to prepend in API requests.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_UA_PREFIX"
                    ]
                }
            },
            "url": {
                "type": "string",
                "description": "The HTTP(S) API address of the Linode API to use.\n",
                "defaultInfo": {
                    "environment": [
                        "LINODE_URL"
                    ]
                }
            }
        }
    },
    "resources": {
        "linode:index/accountSettings:AccountSettings": {
            "description": "Manages the settings of a Linode account.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-account-settings).\n\n## Example Usage\n\nThe following example shows how one might use this resource to change their Linode account settings.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myaccount = new linode.AccountSettings(\"myaccount\", {\n    longviewSubscription: \"longview-40\",\n    backupsEnabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmyaccount = linode.AccountSettings(\"myaccount\",\n    longview_subscription=\"longview-40\",\n    backups_enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myaccount = new Linode.AccountSettings(\"myaccount\", new()\n    {\n        LongviewSubscription = \"longview-40\",\n        BackupsEnabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewAccountSettings(ctx, \"myaccount\", \u0026linode.AccountSettingsArgs{\n\t\t\tLongviewSubscription: pulumi.String(\"longview-40\"),\n\t\t\tBackupsEnabled:       pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.AccountSettings;\nimport com.pulumi.linode.AccountSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myaccount = new AccountSettings(\"myaccount\", AccountSettingsArgs.builder()\n            .longviewSubscription(\"longview-40\")\n            .backupsEnabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myaccount:\n    type: linode:AccountSettings\n    properties:\n      longviewSubscription: longview-40\n      backupsEnabled: 'true'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Additional Results\n\n* `managed` - Enables monitoring for connectivity, response, and total request time.\n\n* `object_storage` - A string describing the status of this account’s Object Storage service enrollment.\n",
            "properties": {
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "The account-wide backups default. If true, all Linodes created will automatically be enrolled in the Backups service. If false, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n"
                },
                "longviewSubscription": {
                    "type": "string",
                    "description": "The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](https://techdocs.akamai.com/linode-api/reference/get-longview-subscriptions) ID or null for Longview Free.\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "Enables monitoring for connectivity, response, and total request time.\n"
                },
                "networkHelper": {
                    "type": "boolean",
                    "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                },
                "objectStorage": {
                    "type": "string",
                    "description": "A string describing the status of this account's Object Storage service enrollment.\n"
                }
            },
            "required": [
                "backupsEnabled",
                "longviewSubscription",
                "managed",
                "networkHelper",
                "objectStorage"
            ],
            "inputProperties": {
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "The account-wide backups default. If true, all Linodes created will automatically be enrolled in the Backups service. If false, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n"
                },
                "longviewSubscription": {
                    "type": "string",
                    "description": "The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](https://techdocs.akamai.com/linode-api/reference/get-longview-subscriptions) ID or null for Longview Free.\n"
                },
                "networkHelper": {
                    "type": "boolean",
                    "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountSettings resources.\n",
                "properties": {
                    "backupsEnabled": {
                        "type": "boolean",
                        "description": "The account-wide backups default. If true, all Linodes created will automatically be enrolled in the Backups service. If false, Linodes will not be enrolled by default, but may still be enrolled on creation or later.\n"
                    },
                    "longviewSubscription": {
                        "type": "string",
                        "description": "The Longview Pro tier you are currently subscribed to. The value must be a [Longview Subscription](https://techdocs.akamai.com/linode-api/reference/get-longview-subscriptions) ID or null for Longview Free.\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "Enables monitoring for connectivity, response, and total request time.\n"
                    },
                    "networkHelper": {
                        "type": "boolean",
                        "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n"
                    },
                    "objectStorage": {
                        "type": "string",
                        "description": "A string describing the status of this account's Object Storage service enrollment.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databaseAccessControls:DatabaseAccessControls": {
            "description": "Manages the access control for a Linode Database. Only one `linode.DatabaseAccessControls` resource should be defined per-database.\nFor more information, see the Linode APIv4 docs for [MySQL](https://techdocs.akamai.com/linode-api/reference/put-databases-mysql-instance) and [PostgreSQL](https://techdocs.akamai.com/linode-api/reference/put-databases-postgre-sql-instance).\n\n## Example Usage\n\nGrant a Linode access to a database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"myinstance\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n    image: \"linode/alpine3.19\",\n});\nconst my_db = new linode.DatabaseMysql(\"my-db\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8.0.30\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\nconst my_access = new linode.DatabaseAccessControls(\"my-access\", {\n    databaseId: my_db.id,\n    databaseType: \"mysql\",\n    allowLists: [my_instance.ipAddress],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"myinstance\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\",\n    image=\"linode/alpine3.19\")\nmy_db = linode.DatabaseMysql(\"my-db\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8.0.30\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\nmy_access = linode.DatabaseAccessControls(\"my-access\",\n    database_id=my_db.id,\n    database_type=\"mysql\",\n    allow_lists=[my_instance.ip_address])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"myinstance\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n        Image = \"linode/alpine3.19\",\n    });\n\n    var my_db = new Linode.DatabaseMysql(\"my-db\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8.0.30\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n    var my_access = new Linode.DatabaseAccessControls(\"my-access\", new()\n    {\n        DatabaseId = my_db.Id,\n        DatabaseType = \"mysql\",\n        AllowLists = new[]\n        {\n            my_instance.IpAddress,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_instance, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"myinstance\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tImage:  pulumi.String(\"linode/alpine3.19\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmy_db, err := linode.NewDatabaseMysql(ctx, \"my-db\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"mysql/8.0.30\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDatabaseAccessControls(ctx, \"my-access\", \u0026linode.DatabaseAccessControlsArgs{\n\t\t\tDatabaseId:   my_db.ID(),\n\t\t\tDatabaseType: pulumi.String(\"mysql\"),\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tmy_instance.IpAddress,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport com.pulumi.linode.DatabaseAccessControls;\nimport com.pulumi.linode.DatabaseAccessControlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()\n            .label(\"myinstance\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .image(\"linode/alpine3.19\")\n            .build());\n\n        var my_db = new DatabaseMysql(\"my-db\", DatabaseMysqlArgs.builder()\n            .label(\"mydatabase\")\n            .engineId(\"mysql/8.0.30\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n        var my_access = new DatabaseAccessControls(\"my-access\", DatabaseAccessControlsArgs.builder()\n            .databaseId(my_db.id())\n            .databaseType(\"mysql\")\n            .allowLists(my_instance.ipAddress())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-access:\n    type: linode:DatabaseAccessControls\n    properties:\n      databaseId: ${[\"my-db\"].id}\n      databaseType: mysql\n      allowLists:\n        - ${[\"my-instance\"].ipAddress}\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: myinstance\n      region: us-southeast\n      type: g6-nanode-1\n      image: linode/alpine3.19\n  my-db:\n    type: linode:DatabaseMysql\n    properties:\n      label: mydatabase\n      engineId: mysql/8.0.30\n      region: us-southeast\n      type: g6-nanode-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                },
                "databaseId": {
                    "type": "integer",
                    "description": "The unique ID of the target database.\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "The unique type of the target database. (`mysql`, `postgresql`)\n"
                }
            },
            "required": [
                "allowLists",
                "databaseId",
                "databaseType"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                },
                "databaseId": {
                    "type": "integer",
                    "description": "The unique ID of the target database.\n",
                    "willReplaceOnChanges": true
                },
                "databaseType": {
                    "type": "string",
                    "description": "The unique type of the target database. (`mysql`, `postgresql`)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allowLists",
                "databaseId",
                "databaseType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAccessControls resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n"
                    },
                    "databaseId": {
                        "type": "integer",
                        "description": "The unique ID of the target database.\n",
                        "willReplaceOnChanges": true
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The unique type of the target database. (`mysql`, `postgresql`)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databaseMysql:DatabaseMysql": {
            "description": "\u003e **DEPRECATION NOTICE:** This resource has been deprecated. Please use linode.DatabaseMysqlV2 for all future implementations.\n\nProvides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-instances).\n\nPlease keep in mind that Managed Databases can take up to an hour to provision.\n\n## Example Usage\n\nCreating a simple MySQL database instance:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysql(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8.0.30\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysql(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8.0.30\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysql(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8.0.30\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysql(ctx, \"foobar\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"mysql/8.0.30\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysql(\"foobar\", DatabaseMysqlArgs.builder()\n            .label(\"mydatabase\")\n            .engineId(\"mysql/8.0.30\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysql\n    properties:\n      label: mydatabase\n      engineId: mysql/8.0.30\n      region: us-southeast\n      type: g6-nanode-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a complex MySQL database instance:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysql(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8.0.30\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n    allowLists: [\"0.0.0.0/0\"],\n    clusterSize: 3,\n    encrypted: true,\n    replicationType: \"asynch\",\n    sslConnection: true,\n    updates: {\n        dayOfWeek: \"saturday\",\n        duration: 1,\n        frequency: \"monthly\",\n        hourOfDay: 22,\n        weekOfMonth: 2,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysql(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8.0.30\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\",\n    allow_lists=[\"0.0.0.0/0\"],\n    cluster_size=3,\n    encrypted=True,\n    replication_type=\"asynch\",\n    ssl_connection=True,\n    updates={\n        \"day_of_week\": \"saturday\",\n        \"duration\": 1,\n        \"frequency\": \"monthly\",\n        \"hour_of_day\": 22,\n        \"week_of_month\": 2,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysql(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8.0.30\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n        ClusterSize = 3,\n        Encrypted = true,\n        ReplicationType = \"asynch\",\n        SslConnection = true,\n        Updates = new Linode.Inputs.DatabaseMysqlUpdatesArgs\n        {\n            DayOfWeek = \"saturday\",\n            Duration = 1,\n            Frequency = \"monthly\",\n            HourOfDay = 22,\n            WeekOfMonth = 2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysql(ctx, \"foobar\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"mysql/8.0.30\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t\tClusterSize:     pulumi.Int(3),\n\t\t\tEncrypted:       pulumi.Bool(true),\n\t\t\tReplicationType: pulumi.String(\"asynch\"),\n\t\t\tSslConnection:   pulumi.Bool(true),\n\t\t\tUpdates: \u0026linode.DatabaseMysqlUpdatesArgs{\n\t\t\t\tDayOfWeek:   pulumi.String(\"saturday\"),\n\t\t\t\tDuration:    pulumi.Int(1),\n\t\t\t\tFrequency:   pulumi.String(\"monthly\"),\n\t\t\t\tHourOfDay:   pulumi.Int(22),\n\t\t\t\tWeekOfMonth: pulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport com.pulumi.linode.inputs.DatabaseMysqlUpdatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysql(\"foobar\", DatabaseMysqlArgs.builder()\n            .label(\"mydatabase\")\n            .engineId(\"mysql/8.0.30\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .allowLists(\"0.0.0.0/0\")\n            .clusterSize(3)\n            .encrypted(true)\n            .replicationType(\"asynch\")\n            .sslConnection(true)\n            .updates(DatabaseMysqlUpdatesArgs.builder()\n                .dayOfWeek(\"saturday\")\n                .duration(1)\n                .frequency(\"monthly\")\n                .hourOfDay(22)\n                .weekOfMonth(2)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysql\n    properties:\n      label: mydatabase\n      engineId: mysql/8.0.30\n      region: us-southeast\n      type: g6-nanode-1\n      allowLists:\n        - 0.0.0.0/0\n      clusterSize: 3\n      encrypted: true\n      replicationType: asynch\n      sslConnection: true\n      updates:\n        dayOfWeek: saturday\n        duration: 1\n        frequency: monthly\n        hourOfDay: 22\n        weekOfMonth: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n\n## Import\n\nLinode MySQL Databases can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import linode:index/databaseMysql:DatabaseMysql foobar 1234567\n```\n\n",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `mysql`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.30`)\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n\n* Must be `none` for a single node cluster.\n\n* Must be `asynch` or `semi_synch` for a high availability cluster.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n\n- - -\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "created",
                "engine",
                "engineId",
                "hostPrimary",
                "hostSecondary",
                "label",
                "region",
                "rootPassword",
                "rootUsername",
                "status",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                    "willReplaceOnChanges": true
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.30`)\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n\n* Must be `none` for a single node cluster.\n\n* Must be `asynch` or `semi_synch` for a high availability cluster.\n",
                    "willReplaceOnChanges": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n\n- - -\n",
                    "willReplaceOnChanges": true
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseMysql resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `mysql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.30`)\n",
                        "willReplaceOnChanges": true
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationType": {
                        "type": "string",
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n\n* Must be `none` for a single node cluster.\n\n* Must be `asynch` or `semi_synch` for a high availability cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n\n- - -\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabaseMysqlUpdates:DatabaseMysqlUpdates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databaseMysqlV2:DatabaseMysqlV2": {
            "description": "Provides a Linode MySQL Database resource. This can be used to create, modify, and delete Linode MySQL Databases.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-mysql-instances).\n\nPlease keep in mind that Managed Databases can take up to half an hour to provision.\n\n## Example Usage\n\nCreating a simple MySQL database that does not allow connections:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysqlV2(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8\",\n    region: \"us-mia\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysqlV2(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8\",\n    region=\"us-mia\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysqlV2(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8\",\n        Region = \"us-mia\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysqlV2(ctx, \"foobar\", \u0026linode.DatabaseMysqlV2Args{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"mysql/8\"),\n\t\t\tRegion:   pulumi.String(\"us-mia\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysqlV2;\nimport com.pulumi.linode.DatabaseMysqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysqlV2(\"foobar\", DatabaseMysqlV2Args.builder()\n            .label(\"mydatabase\")\n            .engineId(\"mysql/8\")\n            .region(\"us-mia\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysqlV2\n    properties:\n      label: mydatabase\n      engineId: mysql/8\n      region: us-mia\n      type: g6-nanode-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a simple MySQL database that allows connections from all IPv4 addresses:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysqlV2(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8\",\n    region: \"us-mia\",\n    type: \"g6-nanode-1\",\n    allowLists: [\"0.0.0.0/0\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysqlV2(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8\",\n    region=\"us-mia\",\n    type=\"g6-nanode-1\",\n    allow_lists=[\"0.0.0.0/0\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysqlV2(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8\",\n        Region = \"us-mia\",\n        Type = \"g6-nanode-1\",\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysqlV2(ctx, \"foobar\", \u0026linode.DatabaseMysqlV2Args{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"mysql/8\"),\n\t\t\tRegion:   pulumi.String(\"us-mia\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysqlV2;\nimport com.pulumi.linode.DatabaseMysqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysqlV2(\"foobar\", DatabaseMysqlV2Args.builder()\n            .label(\"mydatabase\")\n            .engineId(\"mysql/8\")\n            .region(\"us-mia\")\n            .type(\"g6-nanode-1\")\n            .allowLists(\"0.0.0.0/0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysqlV2\n    properties:\n      label: mydatabase\n      engineId: mysql/8\n      region: us-mia\n      type: g6-nanode-1\n      allowLists:\n        - 0.0.0.0/0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a complex MySQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysqlV2\n    properties:\n      label: mydatabase\n      engineId: mysql/8\n      region: us-mia\n      type: g6-nanode-1\n      allowLists:\n        - 10.0.0.3/32\n      clusterSize: 3\n      updates:\n        duration: 4\n        frequency: weekly\n        hour_of_day: 22\n        day_of_week: 3\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a forked MySQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabaseMysqlV2(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"mysql/8\",\n    region: \"us-mia\",\n    type: \"g6-nanode-1\",\n    forkSource: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabaseMysqlV2(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"mysql/8\",\n    region=\"us-mia\",\n    type=\"g6-nanode-1\",\n    fork_source=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabaseMysqlV2(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"mysql/8\",\n        Region = \"us-mia\",\n        Type = \"g6-nanode-1\",\n        ForkSource = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabaseMysqlV2(ctx, \"foobar\", \u0026linode.DatabaseMysqlV2Args{\n\t\t\tLabel:      pulumi.String(\"mydatabase\"),\n\t\t\tEngineId:   pulumi.String(\"mysql/8\"),\n\t\t\tRegion:     pulumi.String(\"us-mia\"),\n\t\t\tType:       pulumi.String(\"g6-nanode-1\"),\n\t\t\tForkSource: pulumi.Int(12345),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabaseMysqlV2;\nimport com.pulumi.linode.DatabaseMysqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabaseMysqlV2(\"foobar\", DatabaseMysqlV2Args.builder()\n            .label(\"mydatabase\")\n            .engineId(\"mysql/8\")\n            .region(\"us-mia\")\n            .type(\"g6-nanode-1\")\n            .forkSource(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabaseMysqlV2\n    properties:\n      label: mydatabase\n      engineId: mysql/8\n      region: us-mia\n      type: g6-nanode-1\n      forkSource: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **_NOTE:_** The name of the default database in the returned database cluster is `defaultdb`.\n\n## pending_updates\n\nThe following arguments are exposed by each entry in the `pending_updates` attribute:\n\n* `deadline` - The time when a mandatory update needs to be applied.\n\n* `description` - A description of the update.\n\n* `planned_for` - The date and time a maintenance update will be applied.\n\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) The frequency at which maintenance occurs. (`weekly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n## Import\n\nLinode MySQL Databases can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import linode:index/databaseMysqlV2:DatabaseMysqlV2 foobar 1234567\n```\n\n",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `mysql`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mysql`)\n"
                },
                "forkRestoreTime": {
                    "type": "string",
                    "description": "The database timestamp from which it was restored.\n"
                },
                "forkSource": {
                    "type": "integer",
                    "description": "The ID of the database that was forked from.\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private host for the managed database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "members": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping between IP addresses and strings designating them as primary or failover.\n"
                },
                "oldestRestoreTime": {
                    "type": "string",
                    "description": "The oldest time to which a database can be restored.\n"
                },
                "pendingUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/DatabaseMysqlV2PendingUpdate:DatabaseMysqlV2PendingUpdate"
                    },
                    "description": "A set of pending updates.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The back-end platform for relational databases used by the service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The access port for this Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "Whether this Managed Database should be suspended.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/DatabaseMysqlV2Timeouts:DatabaseMysqlV2Timeouts"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the Managed Database.\n\n- - -\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMysqlV2Updates:DatabaseMysqlV2Updates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "clusterSize",
                "created",
                "encrypted",
                "engine",
                "engineId",
                "forkRestoreTime",
                "hostPrimary",
                "hostSecondary",
                "label",
                "members",
                "oldestRestoreTime",
                "pendingUpdates",
                "platform",
                "port",
                "region",
                "rootPassword",
                "rootUsername",
                "sslConnection",
                "status",
                "suspended",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `mysql`)\n"
                },
                "forkRestoreTime": {
                    "type": "string",
                    "description": "The database timestamp from which it was restored.\n"
                },
                "forkSource": {
                    "type": "integer",
                    "description": "The ID of the database that was forked from.\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "Whether this Managed Database should be suspended.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/DatabaseMysqlV2Timeouts:DatabaseMysqlV2Timeouts"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the Managed Database.\n\n- - -\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabaseMysqlV2Updates:DatabaseMysqlV2Updates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseMysqlV2 resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `mysql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `mysql`)\n"
                    },
                    "forkRestoreTime": {
                        "type": "string",
                        "description": "The database timestamp from which it was restored.\n"
                    },
                    "forkSource": {
                        "type": "integer",
                        "description": "The ID of the database that was forked from.\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private host for the managed database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "members": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping between IP addresses and strings designating them as primary or failover.\n"
                    },
                    "oldestRestoreTime": {
                        "type": "string",
                        "description": "The oldest time to which a database can be restored.\n"
                    },
                    "pendingUpdates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/DatabaseMysqlV2PendingUpdate:DatabaseMysqlV2PendingUpdate"
                        },
                        "description": "A set of pending updates.\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The back-end platform for relational databases used by the service.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The access port for this Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "suspended": {
                        "type": "boolean",
                        "description": "Whether this Managed Database should be suspended.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/linode:index/DatabaseMysqlV2Timeouts:DatabaseMysqlV2Timeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the Managed Database.\n\n- - -\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabaseMysqlV2Updates:DatabaseMysqlV2Updates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databasePostgresql:DatabasePostgresql": {
            "description": "\u003e **DEPRECATION NOTICE:** This resource has been deprecated. Please use linode.DatabasePostgresqlV2 for all future implementations.\n\nProvides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instances).\n\nPlease keep in mind that Managed Databases can take up to an hour to provision.\n\n## Example Usage\n\nCreating a simple PostgreSQL database instance:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresql(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"postgresql/13.2\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresql(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"postgresql/13.2\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresql(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"postgresql/13.2\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresql(ctx, \"foobar\", \u0026linode.DatabasePostgresqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"postgresql/13.2\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresql;\nimport com.pulumi.linode.DatabasePostgresqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresql(\"foobar\", DatabasePostgresqlArgs.builder()\n            .label(\"mydatabase\")\n            .engineId(\"postgresql/13.2\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresql\n    properties:\n      label: mydatabase\n      engineId: postgresql/13.2\n      region: us-southeast\n      type: g6-nanode-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a complex PostgreSQL database instance:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresql(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"postgresql/13.2\",\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n    allowLists: [\"0.0.0.0/0\"],\n    clusterSize: 3,\n    encrypted: true,\n    replicationType: \"semi_synch\",\n    replicationCommitType: \"remote_write\",\n    sslConnection: true,\n    updates: {\n        dayOfWeek: \"saturday\",\n        duration: 1,\n        frequency: \"monthly\",\n        hourOfDay: 22,\n        weekOfMonth: 2,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresql(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"postgresql/13.2\",\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\",\n    allow_lists=[\"0.0.0.0/0\"],\n    cluster_size=3,\n    encrypted=True,\n    replication_type=\"semi_synch\",\n    replication_commit_type=\"remote_write\",\n    ssl_connection=True,\n    updates={\n        \"day_of_week\": \"saturday\",\n        \"duration\": 1,\n        \"frequency\": \"monthly\",\n        \"hour_of_day\": 22,\n        \"week_of_month\": 2,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresql(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"postgresql/13.2\",\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n        ClusterSize = 3,\n        Encrypted = true,\n        ReplicationType = \"semi_synch\",\n        ReplicationCommitType = \"remote_write\",\n        SslConnection = true,\n        Updates = new Linode.Inputs.DatabasePostgresqlUpdatesArgs\n        {\n            DayOfWeek = \"saturday\",\n            Duration = 1,\n            Frequency = \"monthly\",\n            HourOfDay = 22,\n            WeekOfMonth = 2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresql(ctx, \"foobar\", \u0026linode.DatabasePostgresqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"postgresql/13.2\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t\tClusterSize:           pulumi.Int(3),\n\t\t\tEncrypted:             pulumi.Bool(true),\n\t\t\tReplicationType:       pulumi.String(\"semi_synch\"),\n\t\t\tReplicationCommitType: pulumi.String(\"remote_write\"),\n\t\t\tSslConnection:         pulumi.Bool(true),\n\t\t\tUpdates: \u0026linode.DatabasePostgresqlUpdatesArgs{\n\t\t\t\tDayOfWeek:   pulumi.String(\"saturday\"),\n\t\t\t\tDuration:    pulumi.Int(1),\n\t\t\t\tFrequency:   pulumi.String(\"monthly\"),\n\t\t\t\tHourOfDay:   pulumi.Int(22),\n\t\t\t\tWeekOfMonth: pulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresql;\nimport com.pulumi.linode.DatabasePostgresqlArgs;\nimport com.pulumi.linode.inputs.DatabasePostgresqlUpdatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresql(\"foobar\", DatabasePostgresqlArgs.builder()\n            .label(\"mydatabase\")\n            .engineId(\"postgresql/13.2\")\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .allowLists(\"0.0.0.0/0\")\n            .clusterSize(3)\n            .encrypted(true)\n            .replicationType(\"semi_synch\")\n            .replicationCommitType(\"remote_write\")\n            .sslConnection(true)\n            .updates(DatabasePostgresqlUpdatesArgs.builder()\n                .dayOfWeek(\"saturday\")\n                .duration(1)\n                .frequency(\"monthly\")\n                .hourOfDay(22)\n                .weekOfMonth(2)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresql\n    properties:\n      label: mydatabase\n      engineId: postgresql/13.2\n      region: us-southeast\n      type: g6-nanode-1\n      allowLists:\n        - 0.0.0.0/0\n      clusterSize: 3\n      encrypted: true\n      replicationType: semi_synch\n      replicationCommitType: remote_write\n      sslConnection: true\n      updates:\n        dayOfWeek: saturday\n        duration: 1\n        frequency: monthly\n        hourOfDay: 22\n        weekOfMonth: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - (Optional) The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n\n## Import\n\nLinode PostgreSQL Databases can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import linode:index/databasePostgresql:DatabasePostgresql foobar 1234567\n```\n\n",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private network host for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The access port for this Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "replicationCommitType": {
                    "type": "string",
                    "description": "The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`; default `off`)\n\n* Must be `local` or `off` for the `asynch` replication type.\n\n* Must be `on`, `remote_write`, or `remote_apply` for the `semi_synch` replication type.\n"
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n\n* Must be `none` for a single node cluster.\n\n* Must be `asynch` or `semi_synch` for a high availability cluster.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n\n- - -\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "created",
                "engine",
                "engineId",
                "hostPrimary",
                "hostSecondary",
                "label",
                "port",
                "region",
                "rootPassword",
                "rootUsername",
                "status",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                    "willReplaceOnChanges": true
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                    "willReplaceOnChanges": true
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "replicationCommitType": {
                    "type": "string",
                    "description": "The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`; default `off`)\n\n* Must be `local` or `off` for the `asynch` replication type.\n\n* Must be `on`, `remote_write`, or `remote_apply` for the `semi_synch` replication type.\n",
                    "willReplaceOnChanges": true
                },
                "replicationType": {
                    "type": "string",
                    "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n\n* Must be `none` for a single node cluster.\n\n* Must be `asynch` or `semi_synch` for a high availability cluster.\n",
                    "willReplaceOnChanges": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n\n- - -\n",
                    "willReplaceOnChanges": true
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabasePostgresql resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted. (default `false`)\n",
                        "willReplaceOnChanges": true
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n",
                        "willReplaceOnChanges": true
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private network host for the Managed Database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The access port for this Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationCommitType": {
                        "type": "string",
                        "description": "The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`; default `off`)\n\n* Must be `local` or `off` for the `asynch` replication type.\n\n* Must be `on`, `remote_write`, or `remote_apply` for the `semi_synch` replication type.\n",
                        "willReplaceOnChanges": true
                    },
                    "replicationType": {
                        "type": "string",
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`; default `none`)\n\n* Must be `none` for a single node cluster.\n\n* Must be `asynch` or `semi_synch` for a high availability cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database. (default `false`)\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n\n- - -\n",
                        "willReplaceOnChanges": true
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabasePostgresqlUpdates:DatabasePostgresqlUpdates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/databasePostgresqlV2:DatabasePostgresqlV2": {
            "description": "Provides a Linode PostgreSQL Database resource. This can be used to create, modify, and delete Linode PostgreSQL Databases.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-databases-postgre-sql-instances).\n\nPlease keep in mind that Managed Databases can take up to half an hour to provision.\n\n## Example Usage\n\nCreating a simple PostgreSQL database that does not allow connections:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresqlV2(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"postgresql/16\",\n    region: \"us-mia\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresqlV2(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"postgresql/16\",\n    region=\"us-mia\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresqlV2(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"postgresql/16\",\n        Region = \"us-mia\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresqlV2(ctx, \"foobar\", \u0026linode.DatabasePostgresqlV2Args{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"postgresql/16\"),\n\t\t\tRegion:   pulumi.String(\"us-mia\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresqlV2;\nimport com.pulumi.linode.DatabasePostgresqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresqlV2(\"foobar\", DatabasePostgresqlV2Args.builder()\n            .label(\"mydatabase\")\n            .engineId(\"postgresql/16\")\n            .region(\"us-mia\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresqlV2\n    properties:\n      label: mydatabase\n      engineId: postgresql/16\n      region: us-mia\n      type: g6-nanode-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a simple PostgreSQL database that allows connections from all IPv4 addresses:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresqlV2(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"postgresql/16\",\n    region: \"us-mia\",\n    type: \"g6-nanode-1\",\n    allowLists: [\"0.0.0.0/0\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresqlV2(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"postgresql/16\",\n    region=\"us-mia\",\n    type=\"g6-nanode-1\",\n    allow_lists=[\"0.0.0.0/0\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresqlV2(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"postgresql/16\",\n        Region = \"us-mia\",\n        Type = \"g6-nanode-1\",\n        AllowLists = new[]\n        {\n            \"0.0.0.0/0\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresqlV2(ctx, \"foobar\", \u0026linode.DatabasePostgresqlV2Args{\n\t\t\tLabel:    pulumi.String(\"mydatabase\"),\n\t\t\tEngineId: pulumi.String(\"postgresql/16\"),\n\t\t\tRegion:   pulumi.String(\"us-mia\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tAllowLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresqlV2;\nimport com.pulumi.linode.DatabasePostgresqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresqlV2(\"foobar\", DatabasePostgresqlV2Args.builder()\n            .label(\"mydatabase\")\n            .engineId(\"postgresql/16\")\n            .region(\"us-mia\")\n            .type(\"g6-nanode-1\")\n            .allowLists(\"0.0.0.0/0\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresqlV2\n    properties:\n      label: mydatabase\n      engineId: postgresql/16\n      region: us-mia\n      type: g6-nanode-1\n      allowLists:\n        - 0.0.0.0/0\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a complex PostgreSQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresqlV2\n    properties:\n      label: mydatabase\n      engineId: postgresql/16\n      region: us-mia\n      type: g6-nanode-1\n      allowLists:\n        - 10.0.0.3/32\n      clusterSize: 3\n      updates:\n        duration: 4\n        frequency: weekly\n        hour_of_day: 22\n        day_of_week: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a forked PostgreSQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.DatabasePostgresqlV2(\"foobar\", {\n    label: \"mydatabase\",\n    engineId: \"postgresql/16\",\n    region: \"us-mia\",\n    type: \"g6-nanode-1\",\n    forkSource: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.DatabasePostgresqlV2(\"foobar\",\n    label=\"mydatabase\",\n    engine_id=\"postgresql/16\",\n    region=\"us-mia\",\n    type=\"g6-nanode-1\",\n    fork_source=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.DatabasePostgresqlV2(\"foobar\", new()\n    {\n        Label = \"mydatabase\",\n        EngineId = \"postgresql/16\",\n        Region = \"us-mia\",\n        Type = \"g6-nanode-1\",\n        ForkSource = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewDatabasePostgresqlV2(ctx, \"foobar\", \u0026linode.DatabasePostgresqlV2Args{\n\t\t\tLabel:      pulumi.String(\"mydatabase\"),\n\t\t\tEngineId:   pulumi.String(\"postgresql/16\"),\n\t\t\tRegion:     pulumi.String(\"us-mia\"),\n\t\t\tType:       pulumi.String(\"g6-nanode-1\"),\n\t\t\tForkSource: pulumi.Int(12345),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.DatabasePostgresqlV2;\nimport com.pulumi.linode.DatabasePostgresqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new DatabasePostgresqlV2(\"foobar\", DatabasePostgresqlV2Args.builder()\n            .label(\"mydatabase\")\n            .engineId(\"postgresql/16\")\n            .region(\"us-mia\")\n            .type(\"g6-nanode-1\")\n            .forkSource(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:DatabasePostgresqlV2\n    properties:\n      label: mydatabase\n      engineId: postgresql/16\n      region: us-mia\n      type: g6-nanode-1\n      forkSource: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **_NOTE:_** The name of the default database in the returned database cluster is `defaultdb`.\n\n## pending_updates\n\nThe following arguments are exposed by each entry in the `pending_updates` attribute:\n\n* `deadline` - The time when a mandatory update needs to be applied.\n\n* `description` - A description of the update.\n\n* `planned_for` - The date and time a maintenance update will be applied.\n\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - (Required) The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - (Required) The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - (Required) The frequency at which maintenance occurs. (`weekly`)\n\n* `hour_of_day` - (Required) The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n## Import\n\nLinode PostgreSQL Databases can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import linode:index/databasePostgresqlV2:DatabasePostgresqlV2 foobar 1234567\n```\n\n",
            "properties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "The base64-encoded SSL CA certificate for the Managed Database.\n",
                    "secret": true
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Managed Database was created.\n"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Whether the Managed Databases is encrypted.\n"
                },
                "engine": {
                    "type": "string",
                    "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/16`)\n"
                },
                "forkRestoreTime": {
                    "type": "string",
                    "description": "The database timestamp from which it was restored.\n"
                },
                "forkSource": {
                    "type": "integer",
                    "description": "The ID of the database that was forked from.\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "hostPrimary": {
                    "type": "string",
                    "description": "The primary host for the Managed Database.\n"
                },
                "hostSecondary": {
                    "type": "string",
                    "description": "The secondary/private host for the managed database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "members": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A mapping between IP addresses and strings designating them as primary or failover.\n"
                },
                "oldestRestoreTime": {
                    "type": "string",
                    "description": "The oldest time to which a database can be restored.\n"
                },
                "pendingUpdates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/DatabasePostgresqlV2PendingUpdate:DatabasePostgresqlV2PendingUpdate"
                    },
                    "description": "A set of pending updates.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The back-end platform for relational databases used by the service.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The access port for this Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "The randomly-generated root password for the Managed Database instance.\n",
                    "secret": true
                },
                "rootUsername": {
                    "type": "string",
                    "description": "The root username for the Managed Database instance.\n",
                    "secret": true
                },
                "sslConnection": {
                    "type": "boolean",
                    "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The operating status of the Managed Database.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "Whether this Managed Database should be suspended.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlV2Timeouts:DatabasePostgresqlV2Timeouts"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the Managed Database.\n\n- - -\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this Managed Database was last updated.\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlV2Updates:DatabasePostgresqlV2Updates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                }
            },
            "required": [
                "allowLists",
                "caCert",
                "clusterSize",
                "created",
                "encrypted",
                "engine",
                "engineId",
                "forkRestoreTime",
                "hostPrimary",
                "hostSecondary",
                "label",
                "members",
                "oldestRestoreTime",
                "pendingUpdates",
                "platform",
                "port",
                "region",
                "rootPassword",
                "rootUsername",
                "sslConnection",
                "status",
                "suspended",
                "type",
                "updated",
                "updates",
                "version"
            ],
            "inputProperties": {
                "allowLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                },
                "clusterSize": {
                    "type": "integer",
                    "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                },
                "engineId": {
                    "type": "string",
                    "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/16`)\n"
                },
                "forkRestoreTime": {
                    "type": "string",
                    "description": "The database timestamp from which it was restored.\n"
                },
                "forkSource": {
                    "type": "integer",
                    "description": "The ID of the database that was forked from.\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A unique, user-defined string referring to the Managed Database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to use for the Managed Database.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "Whether this Managed Database should be suspended.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlV2Timeouts:DatabasePostgresqlV2Timeouts"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode Instance type used for the nodes of the Managed Database.\n\n- - -\n"
                },
                "updates": {
                    "$ref": "#/types/linode:index/DatabasePostgresqlV2Updates:DatabasePostgresqlV2Updates",
                    "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                }
            },
            "requiredInputs": [
                "engineId",
                "label",
                "region",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabasePostgresqlV2 resources.\n",
                "properties": {
                    "allowLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "The base64-encoded SSL CA certificate for the Managed Database.\n",
                        "secret": true
                    },
                    "clusterSize": {
                        "type": "integer",
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Managed Database was created.\n"
                    },
                    "encrypted": {
                        "type": "boolean",
                        "description": "Whether the Managed Databases is encrypted.\n"
                    },
                    "engine": {
                        "type": "string",
                        "description": "The Managed Database engine. (e.g. `postgresql`)\n"
                    },
                    "engineId": {
                        "type": "string",
                        "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/16`)\n"
                    },
                    "forkRestoreTime": {
                        "type": "string",
                        "description": "The database timestamp from which it was restored.\n"
                    },
                    "forkSource": {
                        "type": "integer",
                        "description": "The ID of the database that was forked from.\n\n* `updates` - (Optional) Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "hostPrimary": {
                        "type": "string",
                        "description": "The primary host for the Managed Database.\n"
                    },
                    "hostSecondary": {
                        "type": "string",
                        "description": "The secondary/private host for the managed database.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A unique, user-defined string referring to the Managed Database.\n"
                    },
                    "members": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A mapping between IP addresses and strings designating them as primary or failover.\n"
                    },
                    "oldestRestoreTime": {
                        "type": "string",
                        "description": "The oldest time to which a database can be restored.\n"
                    },
                    "pendingUpdates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/DatabasePostgresqlV2PendingUpdate:DatabasePostgresqlV2PendingUpdate"
                        },
                        "description": "A set of pending updates.\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The back-end platform for relational databases used by the service.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The access port for this Managed Database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region to use for the Managed Database.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true
                    },
                    "rootUsername": {
                        "type": "string",
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true
                    },
                    "sslConnection": {
                        "type": "boolean",
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The operating status of the Managed Database.\n"
                    },
                    "suspended": {
                        "type": "boolean",
                        "description": "Whether this Managed Database should be suspended.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/linode:index/DatabasePostgresqlV2Timeouts:DatabasePostgresqlV2Timeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode Instance type used for the nodes of the Managed Database.\n\n- - -\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this Managed Database was last updated.\n"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/DatabasePostgresqlV2Updates:DatabasePostgresqlV2Updates",
                        "description": "Configuration settings for automated patch update maintenance for the Managed Database.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The Managed Database engine version. (e.g. `13.2`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/domain:Domain": {
            "description": "Provides a Linode Domain resource.  This can be used to create, modify, and delete Linode Domains through Linode's managed DNS service.\nFor more information, see [DNS Manager](https://www.linode.com/docs/platform/manager/dns-manager/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-domain).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a Domain Record attached to a Linode Domain.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.Domain(\"foobar\", {\n    type: \"master\",\n    domain: \"foobar.example\",\n    soaEmail: \"example@foobar.example\",\n    tags: [\n        \"foo\",\n        \"bar\",\n    ],\n});\nconst foobarDomainRecord = new linode.DomainRecord(\"foobar\", {\n    domainId: foobar.id,\n    name: \"www\",\n    recordType: \"CNAME\",\n    target: \"foobar.example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.Domain(\"foobar\",\n    type=\"master\",\n    domain=\"foobar.example\",\n    soa_email=\"example@foobar.example\",\n    tags=[\n        \"foo\",\n        \"bar\",\n    ])\nfoobar_domain_record = linode.DomainRecord(\"foobar\",\n    domain_id=foobar.id,\n    name=\"www\",\n    record_type=\"CNAME\",\n    target=\"foobar.example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Domain(\"foobar\", new()\n    {\n        Type = \"master\",\n        DomainName = \"foobar.example\",\n        SoaEmail = \"example@foobar.example\",\n        Tags = new[]\n        {\n            \"foo\",\n            \"bar\",\n        },\n    });\n\n    var foobarDomainRecord = new Linode.DomainRecord(\"foobar\", new()\n    {\n        DomainId = foobar.Id,\n        Name = \"www\",\n        RecordType = \"CNAME\",\n        Target = \"foobar.example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := linode.NewDomain(ctx, \"foobar\", \u0026linode.DomainArgs{\n\t\t\tType:     pulumi.String(\"master\"),\n\t\t\tDomain:   pulumi.String(\"foobar.example\"),\n\t\t\tSoaEmail: pulumi.String(\"example@foobar.example\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\tpulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDomainRecord(ctx, \"foobar\", \u0026linode.DomainRecordArgs{\n\t\t\tDomainId:   foobar.ID(),\n\t\t\tName:       pulumi.String(\"www\"),\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tTarget:     pulumi.String(\"foobar.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Domain;\nimport com.pulumi.linode.DomainArgs;\nimport com.pulumi.linode.DomainRecord;\nimport com.pulumi.linode.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Domain(\"foobar\", DomainArgs.builder()\n            .type(\"master\")\n            .domain(\"foobar.example\")\n            .soaEmail(\"example@foobar.example\")\n            .tags(            \n                \"foo\",\n                \"bar\")\n            .build());\n\n        var foobarDomainRecord = new DomainRecord(\"foobarDomainRecord\", DomainRecordArgs.builder()\n            .domainId(foobar.id())\n            .name(\"www\")\n            .recordType(\"CNAME\")\n            .target(\"foobar.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Domain\n    properties:\n      type: master\n      domain: foobar.example\n      soaEmail: example@foobar.example\n      tags:\n        - foo\n        - bar\n  foobarDomainRecord:\n    type: linode:DomainRecord\n    name: foobar\n    properties:\n      domainId: ${foobar.id}\n      name: www\n      recordType: CNAME\n      target: foobar.example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes Domains can be imported using the Linode Domain `id`, e.g.\n\n```sh\n$ pulumi import linode:index/domain:Domain foobar 1234567\n```\n\n",
            "properties": {
                "axfrIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for this Domain. This is for display purposes only.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.\n",
                    "language": {
                        "csharp": {
                            "name": "DomainName"
                        }
                    }
                },
                "expireSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The group this Domain belongs to. This is for display purposes only.\n"
                },
                "masterIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses representing the master DNS for this Domain.\n\n- - -\n"
                },
                "refreshSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "retrySec": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "soaEmail": {
                    "type": "string",
                    "description": "Start of Authority email address. This is required for master Domains.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Used to control whether this Domain is currently being rendered (defaults to \"active\").\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).\n"
                }
            },
            "required": [
                "domain",
                "status",
                "tags",
                "type"
            ],
            "inputProperties": {
                "axfrIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for this Domain. This is for display purposes only.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.\n",
                    "language": {
                        "csharp": {
                            "name": "DomainName"
                        }
                    }
                },
                "expireSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The group this Domain belongs to. This is for display purposes only.\n"
                },
                "masterIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP addresses representing the master DNS for this Domain.\n\n- - -\n"
                },
                "refreshSec": {
                    "type": "integer",
                    "description": "The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "retrySec": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "soaEmail": {
                    "type": "string",
                    "description": "Start of Authority email address. This is required for master Domains.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Used to control whether this Domain is currently being rendered (defaults to \"active\").\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "type": {
                    "type": "string",
                    "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "domain",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "axfrIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for this Domain. This is for display purposes only.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.\n",
                        "language": {
                            "csharp": {
                                "name": "DomainName"
                            }
                        }
                    },
                    "expireSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The group this Domain belongs to. This is for display purposes only.\n"
                    },
                    "masterIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP addresses representing the master DNS for this Domain.\n\n- - -\n"
                    },
                    "refreshSec": {
                        "type": "integer",
                        "description": "The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "retrySec": {
                        "type": "integer",
                        "description": "The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "soaEmail": {
                        "type": "string",
                        "description": "Start of Authority email address. This is required for master Domains.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Used to control whether this Domain is currently being rendered (defaults to \"active\").\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                    },
                    "ttlSec": {
                        "type": "integer",
                        "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/domainRecord:DomainRecord": {
            "description": "Provides a Linode Domain Record resource.  This can be used to create, modify, and delete Linodes Domain Records.\nFor more information, see [DNS Manager](https://www.linode.com/docs/platform/manager/dns-manager/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-domain-record).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a Domain Record attached to a Linode Domain.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.Domain(\"foobar\", {\n    type: \"master\",\n    domain: \"foobar.example\",\n    soaEmail: \"example@foobar.example\",\n});\nconst foobarDomainRecord = new linode.DomainRecord(\"foobar\", {\n    domainId: foobar.id,\n    name: \"www\",\n    recordType: \"CNAME\",\n    target: \"foobar.example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.Domain(\"foobar\",\n    type=\"master\",\n    domain=\"foobar.example\",\n    soa_email=\"example@foobar.example\")\nfoobar_domain_record = linode.DomainRecord(\"foobar\",\n    domain_id=foobar.id,\n    name=\"www\",\n    record_type=\"CNAME\",\n    target=\"foobar.example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Domain(\"foobar\", new()\n    {\n        Type = \"master\",\n        DomainName = \"foobar.example\",\n        SoaEmail = \"example@foobar.example\",\n    });\n\n    var foobarDomainRecord = new Linode.DomainRecord(\"foobar\", new()\n    {\n        DomainId = foobar.Id,\n        Name = \"www\",\n        RecordType = \"CNAME\",\n        Target = \"foobar.example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := linode.NewDomain(ctx, \"foobar\", \u0026linode.DomainArgs{\n\t\t\tType:     pulumi.String(\"master\"),\n\t\t\tDomain:   pulumi.String(\"foobar.example\"),\n\t\t\tSoaEmail: pulumi.String(\"example@foobar.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDomainRecord(ctx, \"foobar\", \u0026linode.DomainRecordArgs{\n\t\t\tDomainId:   foobar.ID(),\n\t\t\tName:       pulumi.String(\"www\"),\n\t\t\tRecordType: pulumi.String(\"CNAME\"),\n\t\t\tTarget:     pulumi.String(\"foobar.example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Domain;\nimport com.pulumi.linode.DomainArgs;\nimport com.pulumi.linode.DomainRecord;\nimport com.pulumi.linode.DomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Domain(\"foobar\", DomainArgs.builder()\n            .type(\"master\")\n            .domain(\"foobar.example\")\n            .soaEmail(\"example@foobar.example\")\n            .build());\n\n        var foobarDomainRecord = new DomainRecord(\"foobarDomainRecord\", DomainRecordArgs.builder()\n            .domainId(foobar.id())\n            .name(\"www\")\n            .recordType(\"CNAME\")\n            .target(\"foobar.example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Domain\n    properties:\n      type: master\n      domain: foobar.example\n      soaEmail: example@foobar.example\n  foobarDomainRecord:\n    type: linode:DomainRecord\n    name: foobar\n    properties:\n      domainId: ${foobar.id}\n      name: www\n      recordType: CNAME\n      target: foobar.example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes Domain Records can be imported using the Linode Domain `id` followed by the Domain Record `id` separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/domainRecord:DomainRecord www-foobar 1234567,7654321\n```\n\n",
            "properties": {
                "domainId": {
                    "type": "integer",
                    "description": "The ID of the Domain to access.  *Changing `domain_id` forces the creation of a new Linode Domain Record.*.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this Record. Setting this is invalid for `SRV` records as it is generated by the API. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this Record points to.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host. Lower values are preferred.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. See all supported record types [here](https://techdocs.akamai.com/linode-api/reference/post-domain-record). *Changing `record_type` forces the creation of a new Linode Domain Record.*.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The service this Record identified. Only valid for SRV records.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag portion of a CAA record. It is invalid to set this on other record types.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n\n- - -\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative weight of this Record. Higher values are preferred.\n"
                }
            },
            "required": [
                "domainId",
                "name",
                "recordType",
                "target"
            ],
            "inputProperties": {
                "domainId": {
                    "type": "integer",
                    "description": "The ID of the Domain to access.  *Changing `domain_id` forces the creation of a new Linode Domain Record.*.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of this Record. Setting this is invalid for `SRV` records as it is generated by the API. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port this Record points to.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of the target host. Lower values are preferred.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. See all supported record types [here](https://techdocs.akamai.com/linode-api/reference/post-domain-record). *Changing `record_type` forces the creation of a new Linode Domain Record.*.\n",
                    "willReplaceOnChanges": true
                },
                "service": {
                    "type": "string",
                    "description": "The service this Record identified. Only valid for SRV records.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag portion of a CAA record. It is invalid to set this on other record types.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n\n- - -\n"
                },
                "ttlSec": {
                    "type": "integer",
                    "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The relative weight of this Record. Higher values are preferred.\n"
                }
            },
            "requiredInputs": [
                "domainId",
                "recordType",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRecord resources.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The ID of the Domain to access.  *Changing `domain_id` forces the creation of a new Linode Domain Record.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this Record. Setting this is invalid for `SRV` records as it is generated by the API. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the subdomain being associated with an IP address.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port this Record points to.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of the target host. Lower values are preferred.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n"
                    },
                    "recordType": {
                        "type": "string",
                        "description": "The type of Record this is in the DNS system. For example, A records associate a domain name with an IPv4 address, and AAAA records associate a domain name with an IPv6 address. See all supported record types [here](https://techdocs.akamai.com/linode-api/reference/post-domain-record). *Changing `record_type` forces the creation of a new Linode Domain Record.*.\n",
                        "willReplaceOnChanges": true
                    },
                    "service": {
                        "type": "string",
                        "description": "The service this Record identified. Only valid for SRV records.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag portion of a CAA record. It is invalid to set this on other record types.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n\n- - -\n"
                    },
                    "ttlSec": {
                        "type": "integer",
                        "description": "'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The relative weight of this Record. Higher values are preferred.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/firewall:Firewall": {
            "description": "Manages a Linode Firewall.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-firewalls).\n\n## Example Usage\n\nAccept only inbound HTTP(s) requests and drop outbound HTTP(s) requests:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myInstance = new linode.Instance(\"my_instance\", {\n    label: \"my_instance\",\n    image: \"linode/ubuntu22.04\",\n    region: \"us-southeast\",\n    type: \"g6-standard-1\",\n    rootPass: \"bogusPassword$\",\n    swapSize: 256,\n});\nconst myFirewall = new linode.Firewall(\"my_firewall\", {\n    label: \"my_firewall\",\n    inbounds: [\n        {\n            label: \"allow-http\",\n            action: \"ACCEPT\",\n            protocol: \"TCP\",\n            ports: \"80\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n        {\n            label: \"allow-https\",\n            action: \"ACCEPT\",\n            protocol: \"TCP\",\n            ports: \"443\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n    ],\n    inboundPolicy: \"DROP\",\n    outbounds: [\n        {\n            label: \"reject-http\",\n            action: \"DROP\",\n            protocol: \"TCP\",\n            ports: \"80\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n        {\n            label: \"reject-https\",\n            action: \"DROP\",\n            protocol: \"TCP\",\n            ports: \"443\",\n            ipv4s: [\"0.0.0.0/0\"],\n            ipv6s: [\"::/0\"],\n        },\n    ],\n    outboundPolicy: \"ACCEPT\",\n    linodes: [myInstance.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my_instance\",\n    label=\"my_instance\",\n    image=\"linode/ubuntu22.04\",\n    region=\"us-southeast\",\n    type=\"g6-standard-1\",\n    root_pass=\"bogusPassword$\",\n    swap_size=256)\nmy_firewall = linode.Firewall(\"my_firewall\",\n    label=\"my_firewall\",\n    inbounds=[\n        {\n            \"label\": \"allow-http\",\n            \"action\": \"ACCEPT\",\n            \"protocol\": \"TCP\",\n            \"ports\": \"80\",\n            \"ipv4s\": [\"0.0.0.0/0\"],\n            \"ipv6s\": [\"::/0\"],\n        },\n        {\n            \"label\": \"allow-https\",\n            \"action\": \"ACCEPT\",\n            \"protocol\": \"TCP\",\n            \"ports\": \"443\",\n            \"ipv4s\": [\"0.0.0.0/0\"],\n            \"ipv6s\": [\"::/0\"],\n        },\n    ],\n    inbound_policy=\"DROP\",\n    outbounds=[\n        {\n            \"label\": \"reject-http\",\n            \"action\": \"DROP\",\n            \"protocol\": \"TCP\",\n            \"ports\": \"80\",\n            \"ipv4s\": [\"0.0.0.0/0\"],\n            \"ipv6s\": [\"::/0\"],\n        },\n        {\n            \"label\": \"reject-https\",\n            \"action\": \"DROP\",\n            \"protocol\": \"TCP\",\n            \"ports\": \"443\",\n            \"ipv4s\": [\"0.0.0.0/0\"],\n            \"ipv6s\": [\"::/0\"],\n        },\n    ],\n    outbound_policy=\"ACCEPT\",\n    linodes=[my_instance.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = new Linode.Instance(\"my_instance\", new()\n    {\n        Label = \"my_instance\",\n        Image = \"linode/ubuntu22.04\",\n        Region = \"us-southeast\",\n        Type = \"g6-standard-1\",\n        RootPass = \"bogusPassword$\",\n        SwapSize = 256,\n    });\n\n    var myFirewall = new Linode.Firewall(\"my_firewall\", new()\n    {\n        Label = \"my_firewall\",\n        Inbounds = new[]\n        {\n            new Linode.Inputs.FirewallInboundArgs\n            {\n                Label = \"allow-http\",\n                Action = \"ACCEPT\",\n                Protocol = \"TCP\",\n                Ports = \"80\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n            new Linode.Inputs.FirewallInboundArgs\n            {\n                Label = \"allow-https\",\n                Action = \"ACCEPT\",\n                Protocol = \"TCP\",\n                Ports = \"443\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n        },\n        InboundPolicy = \"DROP\",\n        Outbounds = new[]\n        {\n            new Linode.Inputs.FirewallOutboundArgs\n            {\n                Label = \"reject-http\",\n                Action = \"DROP\",\n                Protocol = \"TCP\",\n                Ports = \"80\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n            new Linode.Inputs.FirewallOutboundArgs\n            {\n                Label = \"reject-https\",\n                Action = \"DROP\",\n                Protocol = \"TCP\",\n                Ports = \"443\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n        },\n        OutboundPolicy = \"ACCEPT\",\n        Linodes = new[]\n        {\n            myInstance.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyInstance, err := linode.NewInstance(ctx, \"my_instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:    pulumi.String(\"my_instance\"),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-standard-1\"),\n\t\t\tRootPass: pulumi.String(\"bogusPassword$\"),\n\t\t\tSwapSize: pulumi.Int(256),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewFirewall(ctx, \"my_firewall\", \u0026linode.FirewallArgs{\n\t\t\tLabel: pulumi.String(\"my_firewall\"),\n\t\t\tInbounds: linode.FirewallInboundArray{\n\t\t\t\t\u0026linode.FirewallInboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"allow-http\"),\n\t\t\t\t\tAction:   pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"80\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026linode.FirewallInboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"allow-https\"),\n\t\t\t\t\tAction:   pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"443\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tInboundPolicy: pulumi.String(\"DROP\"),\n\t\t\tOutbounds: linode.FirewallOutboundArray{\n\t\t\t\t\u0026linode.FirewallOutboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"reject-http\"),\n\t\t\t\t\tAction:   pulumi.String(\"DROP\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"80\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026linode.FirewallOutboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"reject-https\"),\n\t\t\t\t\tAction:   pulumi.String(\"DROP\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"443\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOutboundPolicy: pulumi.String(\"ACCEPT\"),\n\t\t\tLinodes: pulumi.IntArray{\n\t\t\t\tmyInstance.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Firewall;\nimport com.pulumi.linode.FirewallArgs;\nimport com.pulumi.linode.inputs.FirewallInboundArgs;\nimport com.pulumi.linode.inputs.FirewallOutboundArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myInstance = new Instance(\"myInstance\", InstanceArgs.builder()\n            .label(\"my_instance\")\n            .image(\"linode/ubuntu22.04\")\n            .region(\"us-southeast\")\n            .type(\"g6-standard-1\")\n            .rootPass(\"bogusPassword$\")\n            .swapSize(256)\n            .build());\n\n        var myFirewall = new Firewall(\"myFirewall\", FirewallArgs.builder()\n            .label(\"my_firewall\")\n            .inbounds(            \n                FirewallInboundArgs.builder()\n                    .label(\"allow-http\")\n                    .action(\"ACCEPT\")\n                    .protocol(\"TCP\")\n                    .ports(\"80\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build(),\n                FirewallInboundArgs.builder()\n                    .label(\"allow-https\")\n                    .action(\"ACCEPT\")\n                    .protocol(\"TCP\")\n                    .ports(\"443\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build())\n            .inboundPolicy(\"DROP\")\n            .outbounds(            \n                FirewallOutboundArgs.builder()\n                    .label(\"reject-http\")\n                    .action(\"DROP\")\n                    .protocol(\"TCP\")\n                    .ports(\"80\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build(),\n                FirewallOutboundArgs.builder()\n                    .label(\"reject-https\")\n                    .action(\"DROP\")\n                    .protocol(\"TCP\")\n                    .ports(\"443\")\n                    .ipv4s(\"0.0.0.0/0\")\n                    .ipv6s(\"::/0\")\n                    .build())\n            .outboundPolicy(\"ACCEPT\")\n            .linodes(myInstance.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirewall:\n    type: linode:Firewall\n    name: my_firewall\n    properties:\n      label: my_firewall\n      inbounds:\n        - label: allow-http\n          action: ACCEPT\n          protocol: TCP\n          ports: '80'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n        - label: allow-https\n          action: ACCEPT\n          protocol: TCP\n          ports: '443'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n      inboundPolicy: DROP\n      outbounds:\n        - label: reject-http\n          action: DROP\n          protocol: TCP\n          ports: '80'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n        - label: reject-https\n          action: DROP\n          protocol: TCP\n          ports: '443'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n      outboundPolicy: ACCEPT\n      linodes:\n        - ${myInstance.id}\n  myInstance:\n    type: linode:Instance\n    name: my_instance\n    properties:\n      label: my_instance\n      image: linode/ubuntu22.04\n      region: us-southeast\n      type: g6-standard-1\n      rootPass: bogusPassword$\n      swapSize: 256\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFirewalls can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import linode:index/firewall:Firewall my_firewall 12345\n```\n\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When this firewall was created\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallDevice:FirewallDevice"
                    },
                    "description": "The devices associated with this firewall.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "If `true`, the Firewall's rules are not enforced (defaults to `false`).\n\n* `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)\n\n* `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallInbound:FirewallInbound"
                    },
                    "description": "A firewall rule that specifies what inbound network traffic is allowed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of IDs of Linodes this Firewall should govern network traffic for.\n"
                },
                "nodebalancers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of IDs of NodeBalancers this Firewall should govern network traffic for.\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallOutbound:FirewallOutbound"
                    },
                    "description": "A firewall rule that specifies what outbound network traffic is allowed.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Firewall.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this firewall was last updated\n"
                }
            },
            "required": [
                "created",
                "devices",
                "disabled",
                "inboundPolicy",
                "label",
                "linodes",
                "nodebalancers",
                "outboundPolicy",
                "status",
                "tags",
                "updated"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "If `true`, the Firewall's rules are not enforced (defaults to `false`).\n\n* `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.\n"
                },
                "inboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)\n\n* `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.\n"
                },
                "inbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallInbound:FirewallInbound"
                    },
                    "description": "A firewall rule that specifies what inbound network traffic is allowed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Firewall's unique label.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of IDs of Linodes this Firewall should govern network traffic for.\n"
                },
                "nodebalancers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of IDs of NodeBalancers this Firewall should govern network traffic for.\n"
                },
                "outboundPolicy": {
                    "type": "string",
                    "description": "The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)\n"
                },
                "outbounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/FirewallOutbound:FirewallOutbound"
                    },
                    "description": "A firewall rule that specifies what outbound network traffic is allowed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                }
            },
            "requiredInputs": [
                "inboundPolicy",
                "label",
                "outboundPolicy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When this firewall was created\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/FirewallDevice:FirewallDevice"
                        },
                        "description": "The devices associated with this firewall.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "If `true`, the Firewall's rules are not enforced (defaults to `false`).\n\n* `inbound` - (Optional) A firewall rule that specifies what inbound network traffic is allowed.\n"
                    },
                    "inboundPolicy": {
                        "type": "string",
                        "description": "The default behavior for inbound traffic. This setting can be overridden by updating the inbound.action property of the Firewall Rule. (`ACCEPT`, `DROP`)\n\n* `outbound` - (Optional) A firewall rule that specifies what outbound network traffic is allowed.\n"
                    },
                    "inbounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/FirewallInbound:FirewallInbound"
                        },
                        "description": "A firewall rule that specifies what inbound network traffic is allowed.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "This Firewall's unique label.\n"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of IDs of Linodes this Firewall should govern network traffic for.\n"
                    },
                    "nodebalancers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of IDs of NodeBalancers this Firewall should govern network traffic for.\n"
                    },
                    "outboundPolicy": {
                        "type": "string",
                        "description": "The default behavior for outbound traffic. This setting can be overridden by updating the outbound.action property for an individual Firewall Rule. (`ACCEPT`, `DROP`)\n"
                    },
                    "outbounds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/FirewallOutbound:FirewallOutbound"
                        },
                        "description": "A firewall rule that specifies what outbound network traffic is allowed.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Firewall.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this firewall was last updated\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/firewallDevice:FirewallDevice": {
            "description": "Manages a Linode Firewall Device.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-firewall-device).\n\n**NOTICE:** Attaching a Linode Firewall Device to a `linode.Firewall` resource with user-defined `linodes` may cause device conflicts.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myFirewall = new linode.Firewall(\"my_firewall\", {\n    label: \"my_firewall\",\n    inbounds: [{\n        label: \"http\",\n        action: \"ACCEPT\",\n        protocol: \"TCP\",\n        ports: \"80\",\n        ipv4s: [\"0.0.0.0/0\"],\n        ipv6s: [\"::/0\"],\n    }],\n    inboundPolicy: \"DROP\",\n    outboundPolicy: \"ACCEPT\",\n});\nconst myInstance = new linode.Instance(\"my_instance\", {\n    label: \"my_instance\",\n    region: \"us-southeast\",\n    type: \"g6-standard-1\",\n});\nconst myDevice = new linode.FirewallDevice(\"my_device\", {\n    firewallId: myFirewall.id,\n    entityId: myInstance.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_firewall = linode.Firewall(\"my_firewall\",\n    label=\"my_firewall\",\n    inbounds=[{\n        \"label\": \"http\",\n        \"action\": \"ACCEPT\",\n        \"protocol\": \"TCP\",\n        \"ports\": \"80\",\n        \"ipv4s\": [\"0.0.0.0/0\"],\n        \"ipv6s\": [\"::/0\"],\n    }],\n    inbound_policy=\"DROP\",\n    outbound_policy=\"ACCEPT\")\nmy_instance = linode.Instance(\"my_instance\",\n    label=\"my_instance\",\n    region=\"us-southeast\",\n    type=\"g6-standard-1\")\nmy_device = linode.FirewallDevice(\"my_device\",\n    firewall_id=my_firewall.id,\n    entity_id=my_instance.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirewall = new Linode.Firewall(\"my_firewall\", new()\n    {\n        Label = \"my_firewall\",\n        Inbounds = new[]\n        {\n            new Linode.Inputs.FirewallInboundArgs\n            {\n                Label = \"http\",\n                Action = \"ACCEPT\",\n                Protocol = \"TCP\",\n                Ports = \"80\",\n                Ipv4s = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n                Ipv6s = new[]\n                {\n                    \"::/0\",\n                },\n            },\n        },\n        InboundPolicy = \"DROP\",\n        OutboundPolicy = \"ACCEPT\",\n    });\n\n    var myInstance = new Linode.Instance(\"my_instance\", new()\n    {\n        Label = \"my_instance\",\n        Region = \"us-southeast\",\n        Type = \"g6-standard-1\",\n    });\n\n    var myDevice = new Linode.FirewallDevice(\"my_device\", new()\n    {\n        FirewallId = myFirewall.Id,\n        EntityId = myInstance.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFirewall, err := linode.NewFirewall(ctx, \"my_firewall\", \u0026linode.FirewallArgs{\n\t\t\tLabel: pulumi.String(\"my_firewall\"),\n\t\t\tInbounds: linode.FirewallInboundArray{\n\t\t\t\t\u0026linode.FirewallInboundArgs{\n\t\t\t\t\tLabel:    pulumi.String(\"http\"),\n\t\t\t\t\tAction:   pulumi.String(\"ACCEPT\"),\n\t\t\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t\t\t\tPorts:    pulumi.String(\"80\"),\n\t\t\t\t\tIpv4s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t\tIpv6s: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tInboundPolicy:  pulumi.String(\"DROP\"),\n\t\t\tOutboundPolicy: pulumi.String(\"ACCEPT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyInstance, err := linode.NewInstance(ctx, \"my_instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my_instance\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewFirewallDevice(ctx, \"my_device\", \u0026linode.FirewallDeviceArgs{\n\t\t\tFirewallId: myFirewall.ID(),\n\t\t\tEntityId:   myInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Firewall;\nimport com.pulumi.linode.FirewallArgs;\nimport com.pulumi.linode.inputs.FirewallInboundArgs;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.FirewallDevice;\nimport com.pulumi.linode.FirewallDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirewall = new Firewall(\"myFirewall\", FirewallArgs.builder()\n            .label(\"my_firewall\")\n            .inbounds(FirewallInboundArgs.builder()\n                .label(\"http\")\n                .action(\"ACCEPT\")\n                .protocol(\"TCP\")\n                .ports(\"80\")\n                .ipv4s(\"0.0.0.0/0\")\n                .ipv6s(\"::/0\")\n                .build())\n            .inboundPolicy(\"DROP\")\n            .outboundPolicy(\"ACCEPT\")\n            .build());\n\n        var myInstance = new Instance(\"myInstance\", InstanceArgs.builder()\n            .label(\"my_instance\")\n            .region(\"us-southeast\")\n            .type(\"g6-standard-1\")\n            .build());\n\n        var myDevice = new FirewallDevice(\"myDevice\", FirewallDeviceArgs.builder()\n            .firewallId(myFirewall.id())\n            .entityId(myInstance.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDevice:\n    type: linode:FirewallDevice\n    name: my_device\n    properties:\n      firewallId: ${myFirewall.id}\n      entityId: ${myInstance.id}\n  myFirewall:\n    type: linode:Firewall\n    name: my_firewall\n    properties:\n      label: my_firewall\n      inbounds:\n        - label: http\n          action: ACCEPT\n          protocol: TCP\n          ports: '80'\n          ipv4s:\n            - 0.0.0.0/0\n          ipv6s:\n            - ::/0\n      inboundPolicy: DROP\n      outboundPolicy: ACCEPT\n  myInstance:\n    type: linode:Instance\n    name: my_instance\n    properties:\n      label: my_instance\n      region: us-southeast\n      type: g6-standard-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFirewall Device can be imported using the `firewall_id` followed by the Firewall Device `id` separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/firewallDevice:FirewallDevice my_device_duplicated 1234567,7654321\n```\n\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "When the Firewall Device was last created.\n"
                },
                "entityId": {
                    "type": "integer",
                    "description": "The unique ID of the entity to attach.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of the entity to attach. (default: `linode`)\n"
                },
                "firewallId": {
                    "type": "integer",
                    "description": "The unique ID of the target Firewall.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When the Firewall Device was last updated.\n"
                }
            },
            "required": [
                "created",
                "entityId",
                "entityType",
                "firewallId",
                "updated"
            ],
            "inputProperties": {
                "entityId": {
                    "type": "integer",
                    "description": "The unique ID of the entity to attach.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of the entity to attach. (default: `linode`)\n"
                },
                "firewallId": {
                    "type": "integer",
                    "description": "The unique ID of the target Firewall.\n"
                }
            },
            "requiredInputs": [
                "entityId",
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallDevice resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "When the Firewall Device was last created.\n"
                    },
                    "entityId": {
                        "type": "integer",
                        "description": "The unique ID of the entity to attach.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The type of the entity to attach. (default: `linode`)\n"
                    },
                    "firewallId": {
                        "type": "integer",
                        "description": "The unique ID of the target Firewall.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When the Firewall Device was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/image:Image": {
            "description": "Provides a Linode Image resource.  This can be used to create, modify, and delete Linodes Images.  Linode Images are snapshots of a Linode Instance Disk which can then be used to provision more Linode Instances.  Images can be used across regions.\n\nFor more information, see [Linode's documentation on Images](https://www.linode.com/docs/platform/disk-images/linode-images/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-image).\n\n## Example Usage\n\nCreating an image from an existing Linode Instance and deploying another instance with that image:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.Instance(\"foo\", {\n    type: \"g6-nanode-1\",\n    region: \"us-central\",\n    image: \"linode/ubuntu22.04\",\n    rootPass: \"insecure-p4ssw0rd!!\",\n});\nconst bar = new linode.Image(\"bar\", {\n    label: \"foo-sda-image\",\n    description: \"Image taken from foo\",\n    diskId: foo.disks.apply(disks =\u003e disks[0].id),\n    linodeId: foo.id,\n    tags: [\n        \"image-tag\",\n        \"test\",\n    ],\n});\nconst barBased = new linode.Instance(\"bar_based\", {\n    type: foo.type,\n    region: \"eu-west\",\n    image: bar.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.Instance(\"foo\",\n    type=\"g6-nanode-1\",\n    region=\"us-central\",\n    image=\"linode/ubuntu22.04\",\n    root_pass=\"insecure-p4ssw0rd!!\")\nbar = linode.Image(\"bar\",\n    label=\"foo-sda-image\",\n    description=\"Image taken from foo\",\n    disk_id=foo.disks[0].id,\n    linode_id=foo.id,\n    tags=[\n        \"image-tag\",\n        \"test\",\n    ])\nbar_based = linode.Instance(\"bar_based\",\n    type=foo.type,\n    region=\"eu-west\",\n    image=bar.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.Instance(\"foo\", new()\n    {\n        Type = \"g6-nanode-1\",\n        Region = \"us-central\",\n        Image = \"linode/ubuntu22.04\",\n        RootPass = \"insecure-p4ssw0rd!!\",\n    });\n\n    var bar = new Linode.Image(\"bar\", new()\n    {\n        Label = \"foo-sda-image\",\n        Description = \"Image taken from foo\",\n        DiskId = foo.Disks.Apply(disks =\u003e disks[0].Id),\n        LinodeId = foo.Id,\n        Tags = new[]\n        {\n            \"image-tag\",\n            \"test\",\n        },\n    });\n\n    var barBased = new Linode.Instance(\"bar_based\", new()\n    {\n        Type = foo.Type,\n        Region = \"eu-west\",\n        Image = bar.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := linode.NewInstance(ctx, \"foo\", \u0026linode.InstanceArgs{\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion:   pulumi.String(\"us-central\"),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tRootPass: pulumi.String(\"insecure-p4ssw0rd!!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := linode.NewImage(ctx, \"bar\", \u0026linode.ImageArgs{\n\t\t\tLabel:       pulumi.String(\"foo-sda-image\"),\n\t\t\tDescription: pulumi.String(\"Image taken from foo\"),\n\t\t\tDiskId: pulumi.Int(foo.Disks.ApplyT(func(disks []linode.InstanceDiskType) (*int, error) {\n\t\t\t\treturn \u0026disks[0].Id, nil\n\t\t\t}).(pulumi.IntPtrOutput)),\n\t\t\tLinodeId: foo.ID(),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"image-tag\"),\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstance(ctx, \"bar_based\", \u0026linode.InstanceArgs{\n\t\t\tType:   foo.Type,\n\t\t\tRegion: pulumi.String(\"eu-west\"),\n\t\t\tImage:  bar.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Image;\nimport com.pulumi.linode.ImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()\n            .type(\"g6-nanode-1\")\n            .region(\"us-central\")\n            .image(\"linode/ubuntu22.04\")\n            .rootPass(\"insecure-p4ssw0rd!!\")\n            .build());\n\n        var bar = new Image(\"bar\", ImageArgs.builder()\n            .label(\"foo-sda-image\")\n            .description(\"Image taken from foo\")\n            .diskId(foo.disks().applyValue(_disks -\u003e _disks[0].id()))\n            .linodeId(foo.id())\n            .tags(            \n                \"image-tag\",\n                \"test\")\n            .build());\n\n        var barBased = new Instance(\"barBased\", InstanceArgs.builder()\n            .type(foo.type())\n            .region(\"eu-west\")\n            .image(bar.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:Instance\n    properties:\n      type: g6-nanode-1\n      region: us-central\n      image: linode/ubuntu22.04\n      rootPass: insecure-p4ssw0rd!!\n  bar:\n    type: linode:Image\n    properties:\n      label: foo-sda-image\n      description: Image taken from foo\n      diskId: ${foo.disks[0].id}\n      linodeId: ${foo.id}\n      tags:\n        - image-tag\n        - test\n  barBased:\n    type: linode:Instance\n    name: bar_based\n    properties:\n      type: ${foo.type}\n      region: eu-west\n      image: ${bar.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating and uploading an image from a local file:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\nimport * as std from \"@pulumi/std\";\n\nconst foobar = new linode.Image(\"foobar\", {\n    label: \"foobar-image\",\n    description: \"An image uploaded from Terraform!\",\n    region: \"us-southeast\",\n    tags: [\n        \"image-tag\",\n        \"test\",\n    ],\n    filePath: \"path/to/image.img.gz\",\n    fileHash: std.filemd5({\n        input: \"path/to/image.img.gz\",\n    }).then(invoke =\u003e invoke.result),\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\nimport pulumi_std as std\n\nfoobar = linode.Image(\"foobar\",\n    label=\"foobar-image\",\n    description=\"An image uploaded from Terraform!\",\n    region=\"us-southeast\",\n    tags=[\n        \"image-tag\",\n        \"test\",\n    ],\n    file_path=\"path/to/image.img.gz\",\n    file_hash=std.filemd5(input=\"path/to/image.img.gz\").result)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Image(\"foobar\", new()\n    {\n        Label = \"foobar-image\",\n        Description = \"An image uploaded from Terraform!\",\n        Region = \"us-southeast\",\n        Tags = new[]\n        {\n            \"image-tag\",\n            \"test\",\n        },\n        FilePath = \"path/to/image.img.gz\",\n        FileHash = Std.Filemd5.Invoke(new()\n        {\n            Input = \"path/to/image.img.gz\",\n        }).Apply(invoke =\u003e invoke.Result),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeFilemd5, err := std.Filemd5(ctx, \u0026std.Filemd5Args{\n\t\t\tInput: \"path/to/image.img.gz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewImage(ctx, \"foobar\", \u0026linode.ImageArgs{\n\t\t\tLabel:       pulumi.String(\"foobar-image\"),\n\t\t\tDescription: pulumi.String(\"An image uploaded from Terraform!\"),\n\t\t\tRegion:      pulumi.String(\"us-southeast\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"image-tag\"),\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t\tFilePath: pulumi.String(\"path/to/image.img.gz\"),\n\t\t\tFileHash: pulumi.String(invokeFilemd5.Result),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Image;\nimport com.pulumi.linode.ImageArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.Filemd5Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Image(\"foobar\", ImageArgs.builder()\n            .label(\"foobar-image\")\n            .description(\"An image uploaded from Terraform!\")\n            .region(\"us-southeast\")\n            .tags(            \n                \"image-tag\",\n                \"test\")\n            .filePath(\"path/to/image.img.gz\")\n            .fileHash(StdFunctions.filemd5(Filemd5Args.builder()\n                .input(\"path/to/image.img.gz\")\n                .build()).result())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Image\n    properties:\n      label: foobar-image\n      description: An image uploaded from Terraform!\n      region: us-southeast\n      tags:\n        - image-tag\n        - test\n      filePath: path/to/image.img.gz\n      fileHash:\n        fn::invoke:\n          function: std:filemd5\n          arguments:\n            input: path/to/image.img.gz\n          return: result\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nUpload and replicate an image from a local file:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\nimport * as std from \"@pulumi/std\";\n\nconst foobar = new linode.Image(\"foobar\", {\n    label: \"foobar-image\",\n    description: \"An image uploaded from Terraform!\",\n    region: \"us-southeast\",\n    tags: [\n        \"image-tag\",\n        \"test\",\n    ],\n    filePath: \"path/to/image.img.gz\",\n    fileHash: std.filemd5({\n        input: \"path/to/image.img.gz\",\n    }).then(invoke =\u003e invoke.result),\n    replicaRegions: [\n        \"us-southeast\",\n        \"us-east\",\n        \"eu-west\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\nimport pulumi_std as std\n\nfoobar = linode.Image(\"foobar\",\n    label=\"foobar-image\",\n    description=\"An image uploaded from Terraform!\",\n    region=\"us-southeast\",\n    tags=[\n        \"image-tag\",\n        \"test\",\n    ],\n    file_path=\"path/to/image.img.gz\",\n    file_hash=std.filemd5(input=\"path/to/image.img.gz\").result,\n    replica_regions=[\n        \"us-southeast\",\n        \"us-east\",\n        \"eu-west\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Image(\"foobar\", new()\n    {\n        Label = \"foobar-image\",\n        Description = \"An image uploaded from Terraform!\",\n        Region = \"us-southeast\",\n        Tags = new[]\n        {\n            \"image-tag\",\n            \"test\",\n        },\n        FilePath = \"path/to/image.img.gz\",\n        FileHash = Std.Filemd5.Invoke(new()\n        {\n            Input = \"path/to/image.img.gz\",\n        }).Apply(invoke =\u003e invoke.Result),\n        ReplicaRegions = new[]\n        {\n            \"us-southeast\",\n            \"us-east\",\n            \"eu-west\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeFilemd5, err := std.Filemd5(ctx, \u0026std.Filemd5Args{\n\t\t\tInput: \"path/to/image.img.gz\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewImage(ctx, \"foobar\", \u0026linode.ImageArgs{\n\t\t\tLabel:       pulumi.String(\"foobar-image\"),\n\t\t\tDescription: pulumi.String(\"An image uploaded from Terraform!\"),\n\t\t\tRegion:      pulumi.String(\"us-southeast\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"image-tag\"),\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t\tFilePath: pulumi.String(\"path/to/image.img.gz\"),\n\t\t\tFileHash: pulumi.String(invokeFilemd5.Result),\n\t\t\tReplicaRegions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-southeast\"),\n\t\t\t\tpulumi.String(\"us-east\"),\n\t\t\t\tpulumi.String(\"eu-west\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Image;\nimport com.pulumi.linode.ImageArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.Filemd5Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Image(\"foobar\", ImageArgs.builder()\n            .label(\"foobar-image\")\n            .description(\"An image uploaded from Terraform!\")\n            .region(\"us-southeast\")\n            .tags(            \n                \"image-tag\",\n                \"test\")\n            .filePath(\"path/to/image.img.gz\")\n            .fileHash(StdFunctions.filemd5(Filemd5Args.builder()\n                .input(\"path/to/image.img.gz\")\n                .build()).result())\n            .replicaRegions(            \n                \"us-southeast\",\n                \"us-east\",\n                \"eu-west\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Image\n    properties:\n      label: foobar-image\n      description: An image uploaded from Terraform!\n      region: us-southeast\n      tags:\n        - image-tag\n        - test\n      filePath: path/to/image.img.gz\n      fileHash:\n        fn::invoke:\n          function: std:filemd5\n          arguments:\n            input: path/to/image.img.gz\n          return: result\n      replicaRegions:\n        - us-southeast\n        - us-east\n        - eu-west\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes Images can be imported using the Linode Image `id`, e.g.\n\n```sh\n$ pulumi import linode:index/image:Image myimage 1234567\n```\n\n",
            "properties": {
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The capabilities of this Image.\n"
                },
                "cloudInit": {
                    "type": "boolean",
                    "description": "Whether this image supports cloud-init.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this Image was created.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The name of the User who created this Image.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether or not this Image is deprecated. Will only be True for deprecated public Images.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A detailed description of this Image.\n"
                },
                "diskId": {
                    "type": "integer",
                    "description": "The ID of the Linode Disk that this Image will be created from.\n"
                },
                "expiry": {
                    "type": "string",
                    "description": "Only Images created automatically (from a deleted Linode; type=automatic) will expire.\n"
                },
                "fileHash": {
                    "type": "string",
                    "description": "The MD5 hash of the file to be uploaded. This is used to trigger file updates.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The path of the image file to be uploaded.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "True if the Image is public.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A short description of the Image. Labels cannot contain special characters.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode that this Image will be created from.\n\n- - -\n\n\u003e **NOTICE:** Uploading images is currently in beta. Ensure `LINODE_API_VERSION` is set to `v4beta` in order to use this functionality.\n\nThe following arguments apply to uploading an image:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).\n"
                },
                "replicaRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regions that customer wants to replicate this image in. At least one valid region is required and only core regions allowed. Existing images in the regions not passed will be removed. See Replicate an Image [here](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) for more details.\n"
                },
                "replications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ImageReplication:ImageReplication"
                    },
                    "description": "A list of image replications region and corresponding status.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The minimum size this Image needs to deploy. Size is in MB.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of an image replica.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of customized tags.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/ImageTimeouts:ImageTimeouts"
                },
                "totalSize": {
                    "type": "integer",
                    "description": "The total size of the image in all available regions.\n"
                },
                "type": {
                    "type": "string",
                    "description": "How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.\n"
                },
                "vendor": {
                    "type": "string",
                    "description": "The upstream distribution vendor. Nil for private Images.\n"
                },
                "waitForReplications": {
                    "type": "boolean",
                    "description": "Whether to wait for all image replications become `available`. Default to false.\n\n- - -\n\nThe following arguments apply to creating an image from an existing Linode Instance:\n"
                }
            },
            "required": [
                "capabilities",
                "cloudInit",
                "created",
                "createdBy",
                "deprecated",
                "expiry",
                "isPublic",
                "label",
                "replications",
                "size",
                "status",
                "tags",
                "totalSize",
                "type",
                "vendor",
                "waitForReplications"
            ],
            "inputProperties": {
                "cloudInit": {
                    "type": "boolean",
                    "description": "Whether this image supports cloud-init.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A detailed description of this Image.\n"
                },
                "diskId": {
                    "type": "integer",
                    "description": "The ID of the Linode Disk that this Image will be created from.\n"
                },
                "fileHash": {
                    "type": "string",
                    "description": "The MD5 hash of the file to be uploaded. This is used to trigger file updates.\n"
                },
                "filePath": {
                    "type": "string",
                    "description": "The path of the image file to be uploaded.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A short description of the Image. Labels cannot contain special characters.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode that this Image will be created from.\n\n- - -\n\n\u003e **NOTICE:** Uploading images is currently in beta. Ensure `LINODE_API_VERSION` is set to `v4beta` in order to use this functionality.\n\nThe following arguments apply to uploading an image:\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).\n"
                },
                "replicaRegions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of regions that customer wants to replicate this image in. At least one valid region is required and only core regions allowed. Existing images in the regions not passed will be removed. See Replicate an Image [here](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) for more details.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of customized tags.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/ImageTimeouts:ImageTimeouts"
                },
                "waitForReplications": {
                    "type": "boolean",
                    "description": "Whether to wait for all image replications become `available`. Default to false.\n\n- - -\n\nThe following arguments apply to creating an image from an existing Linode Instance:\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The capabilities of this Image.\n"
                    },
                    "cloudInit": {
                        "type": "boolean",
                        "description": "Whether this image supports cloud-init.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this Image was created.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The name of the User who created this Image.\n"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether or not this Image is deprecated. Will only be True for deprecated public Images.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A detailed description of this Image.\n"
                    },
                    "diskId": {
                        "type": "integer",
                        "description": "The ID of the Linode Disk that this Image will be created from.\n"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "Only Images created automatically (from a deleted Linode; type=automatic) will expire.\n"
                    },
                    "fileHash": {
                        "type": "string",
                        "description": "The MD5 hash of the file to be uploaded. This is used to trigger file updates.\n"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "The path of the image file to be uploaded.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "True if the Image is public.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A short description of the Image. Labels cannot contain special characters.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode that this Image will be created from.\n\n- - -\n\n\u003e **NOTICE:** Uploading images is currently in beta. Ensure `LINODE_API_VERSION` is set to `v4beta` in order to use this functionality.\n\nThe following arguments apply to uploading an image:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the image. See all regions [here](https://techdocs.akamai.com/linode-api/reference/get-regions).\n"
                    },
                    "replicaRegions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of regions that customer wants to replicate this image in. At least one valid region is required and only core regions allowed. Existing images in the regions not passed will be removed. See Replicate an Image [here](https://techdocs.akamai.com/linode-api/reference/post-replicate-image) for more details.\n"
                    },
                    "replications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ImageReplication:ImageReplication"
                        },
                        "description": "A list of image replications region and corresponding status.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The minimum size this Image needs to deploy. Size is in MB.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of an image replica.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of customized tags.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/linode:index/ImageTimeouts:ImageTimeouts"
                    },
                    "totalSize": {
                        "type": "integer",
                        "description": "The total size of the image in all available regions.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.\n"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "The upstream distribution vendor. Nil for private Images.\n"
                    },
                    "waitForReplications": {
                        "type": "boolean",
                        "description": "Whether to wait for all image replications become `available`. Default to false.\n\n- - -\n\nThe following arguments apply to creating an image from an existing Linode Instance:\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instance:Instance": {
            "description": "Provides a Linode Instance resource.  This can be used to create, modify, and delete Linodes.\nFor more information, see [Getting Started with Linode](https://linode.com/docs/getting-started/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-linode-instance).\n\n## Example Usage\n\n### Simple Linode Instance\n\nThe following example shows how one might use this resource to configure a Linode instance.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst web = new linode.Instance(\"web\", {\n    label: \"simple_instance\",\n    image: \"linode/ubuntu22.04\",\n    region: \"us-central\",\n    type: \"g6-standard-1\",\n    authorizedKeys: [\"ssh-rsa AAAA...Gw== user@example.local\"],\n    rootPass: \"this-is-not-a-safe-password\",\n    tags: [\"foo\"],\n    swapSize: 256,\n    privateIp: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nweb = linode.Instance(\"web\",\n    label=\"simple_instance\",\n    image=\"linode/ubuntu22.04\",\n    region=\"us-central\",\n    type=\"g6-standard-1\",\n    authorized_keys=[\"ssh-rsa AAAA...Gw== user@example.local\"],\n    root_pass=\"this-is-not-a-safe-password\",\n    tags=[\"foo\"],\n    swap_size=256,\n    private_ip=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web = new Linode.Instance(\"web\", new()\n    {\n        Label = \"simple_instance\",\n        Image = \"linode/ubuntu22.04\",\n        Region = \"us-central\",\n        Type = \"g6-standard-1\",\n        AuthorizedKeys = new[]\n        {\n            \"ssh-rsa AAAA...Gw== user@example.local\",\n        },\n        RootPass = \"this-is-not-a-safe-password\",\n        Tags = new[]\n        {\n            \"foo\",\n        },\n        SwapSize = 256,\n        PrivateIp = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"web\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"simple_instance\"),\n\t\t\tImage:  pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tRegion: pulumi.String(\"us-central\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh-rsa AAAA...Gw== user@example.local\"),\n\t\t\t},\n\t\t\tRootPass: pulumi.String(\"this-is-not-a-safe-password\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t},\n\t\t\tSwapSize:  pulumi.Int(256),\n\t\t\tPrivateIp: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web = new Instance(\"web\", InstanceArgs.builder()\n            .label(\"simple_instance\")\n            .image(\"linode/ubuntu22.04\")\n            .region(\"us-central\")\n            .type(\"g6-standard-1\")\n            .authorizedKeys(\"ssh-rsa AAAA...Gw== user@example.local\")\n            .rootPass(\"this-is-not-a-safe-password\")\n            .tags(\"foo\")\n            .swapSize(256)\n            .privateIp(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web:\n    type: linode:Instance\n    properties:\n      label: simple_instance\n      image: linode/ubuntu22.04\n      region: us-central\n      type: g6-standard-1\n      authorizedKeys:\n        - ssh-rsa AAAA...Gw== user@example.local\n      rootPass: this-is-not-a-safe-password\n      tags:\n        - foo\n      swapSize: 256\n      privateIp: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Linode Instance with Explicit Networking Interfaces\n\nYou can add a VPC or VLAN interface directly to a Linode instance resource.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst web = new linode.Instance(\"web\", {\n    label: \"simple_instance\",\n    image: \"linode/ubuntu22.04\",\n    region: \"us-central\",\n    type: \"g6-standard-1\",\n    authorizedKeys: [\"ssh-rsa AAAA...Gw== user@example.local\"],\n    rootPass: \"this-is-not-a-safe-password\",\n    interfaces: [\n        {\n            purpose: \"public\",\n        },\n        {\n            purpose: \"vpc\",\n            subnetId: 123,\n            ipv4: {\n                vpc: \"10.0.4.250\",\n            },\n        },\n    ],\n    tags: [\"foo\"],\n    swapSize: 256,\n    privateIp: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nweb = linode.Instance(\"web\",\n    label=\"simple_instance\",\n    image=\"linode/ubuntu22.04\",\n    region=\"us-central\",\n    type=\"g6-standard-1\",\n    authorized_keys=[\"ssh-rsa AAAA...Gw== user@example.local\"],\n    root_pass=\"this-is-not-a-safe-password\",\n    interfaces=[\n        {\n            \"purpose\": \"public\",\n        },\n        {\n            \"purpose\": \"vpc\",\n            \"subnet_id\": 123,\n            \"ipv4\": {\n                \"vpc\": \"10.0.4.250\",\n            },\n        },\n    ],\n    tags=[\"foo\"],\n    swap_size=256,\n    private_ip=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var web = new Linode.Instance(\"web\", new()\n    {\n        Label = \"simple_instance\",\n        Image = \"linode/ubuntu22.04\",\n        Region = \"us-central\",\n        Type = \"g6-standard-1\",\n        AuthorizedKeys = new[]\n        {\n            \"ssh-rsa AAAA...Gw== user@example.local\",\n        },\n        RootPass = \"this-is-not-a-safe-password\",\n        Interfaces = new[]\n        {\n            new Linode.Inputs.InstanceInterfaceArgs\n            {\n                Purpose = \"public\",\n            },\n            new Linode.Inputs.InstanceInterfaceArgs\n            {\n                Purpose = \"vpc\",\n                SubnetId = 123,\n                Ipv4 = new Linode.Inputs.InstanceInterfaceIpv4Args\n                {\n                    Vpc = \"10.0.4.250\",\n                },\n            },\n        },\n        Tags = new[]\n        {\n            \"foo\",\n        },\n        SwapSize = 256,\n        PrivateIp = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"web\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"simple_instance\"),\n\t\t\tImage:  pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tRegion: pulumi.String(\"us-central\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh-rsa AAAA...Gw== user@example.local\"),\n\t\t\t},\n\t\t\tRootPass: pulumi.String(\"this-is-not-a-safe-password\"),\n\t\t\tInterfaces: linode.InstanceInterfaceArray{\n\t\t\t\t\u0026linode.InstanceInterfaceArgs{\n\t\t\t\t\tPurpose: pulumi.String(\"public\"),\n\t\t\t\t},\n\t\t\t\t\u0026linode.InstanceInterfaceArgs{\n\t\t\t\t\tPurpose:  pulumi.String(\"vpc\"),\n\t\t\t\t\tSubnetId: pulumi.Int(123),\n\t\t\t\t\tIpv4: \u0026linode.InstanceInterfaceIpv4Args{\n\t\t\t\t\t\tVpc: pulumi.String(\"10.0.4.250\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t},\n\t\t\tSwapSize:  pulumi.Int(256),\n\t\t\tPrivateIp: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.inputs.InstanceInterfaceArgs;\nimport com.pulumi.linode.inputs.InstanceInterfaceIpv4Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var web = new Instance(\"web\", InstanceArgs.builder()\n            .label(\"simple_instance\")\n            .image(\"linode/ubuntu22.04\")\n            .region(\"us-central\")\n            .type(\"g6-standard-1\")\n            .authorizedKeys(\"ssh-rsa AAAA...Gw== user@example.local\")\n            .rootPass(\"this-is-not-a-safe-password\")\n            .interfaces(            \n                InstanceInterfaceArgs.builder()\n                    .purpose(\"public\")\n                    .build(),\n                InstanceInterfaceArgs.builder()\n                    .purpose(\"vpc\")\n                    .subnetId(123)\n                    .ipv4(InstanceInterfaceIpv4Args.builder()\n                        .vpc(\"10.0.4.250\")\n                        .build())\n                    .build())\n            .tags(\"foo\")\n            .swapSize(256)\n            .privateIp(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  web:\n    type: linode:Instance\n    properties:\n      label: simple_instance\n      image: linode/ubuntu22.04\n      region: us-central\n      type: g6-standard-1\n      authorizedKeys:\n        - ssh-rsa AAAA...Gw== user@example.local\n      rootPass: this-is-not-a-safe-password\n      interfaces:\n        - purpose: public\n        - purpose: vpc\n          subnetId: 123\n          ipv4:\n            vpc: 10.0.4.250\n      tags:\n        - foo\n      swapSize: 256\n      privateIp: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Linode Instance with Explicit Configs and Disks\n\nUsing explicit Instance Configs and Disks it is possible to create a more elaborate Linode instance. This can be used to provision multiple disks and volumes during Instance creation.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  web:\n    type: linode:Instance\n    properties:\n      label: complex_instance\n      tags:\n        - foo\n      region: us-central\n      type: g6-nanode-1\n      privateIp: true\n  webVolume:\n    type: linode:Volume\n    name: web_volume\n    properties:\n      label: web_volume\n      size: 20\n      region: us-central\n  bootDisk:\n    type: linode:InstanceDisk\n    name: boot_disk\n    properties:\n      label: boot\n      linodeId: ${web.id}\n      size: 3000\n      image: linode/ubuntu22.04\n      authorizedKeys:\n        - ssh-rsa AAAA...Gw== user@example.local\n      authorizedUsers:\n        - ${me.username}\n      rootPass: terr4form-test\n  bootConfig:\n    type: linode:InstanceConfig\n    name: boot_config\n    properties:\n      label: boot_config\n      linodeId: ${web.id}\n      devices:\n        - deviceName: sda\n          diskId: ${bootDisk.id}\n        - deviceName: sdb\n          volumeId: ${webVolume.id}\n      rootDevice: /dev/sda\n      kernel: linode/latest-64bit\n      booted: true\nvariables:\n  me:\n    fn::invoke:\n      function: linode:getProfile\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Linode Instance Assigned to a Placement Group\n\nThe following example shows how one might use this resource to configure a Linode instance assigned to a\nPlacement Group.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"my-instance\",\n    region: \"us-mia\",\n    type: \"g6-standard-1\",\n    placementGroup: {\n        id: 12345,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"my-instance\",\n    region=\"us-mia\",\n    type=\"g6-standard-1\",\n    placement_group={\n        \"id\": 12345,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"my-instance\",\n        Region = \"us-mia\",\n        Type = \"g6-standard-1\",\n        PlacementGroup = new Linode.Inputs.InstancePlacementGroupArgs\n        {\n            Id = 12345,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-instance\"),\n\t\t\tRegion: pulumi.String(\"us-mia\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tPlacementGroup: \u0026linode.InstancePlacementGroupArgs{\n\t\t\t\tId: pulumi.Int(12345),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.inputs.InstancePlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()\n            .label(\"my-instance\")\n            .region(\"us-mia\")\n            .type(\"g6-standard-1\")\n            .placementGroup(InstancePlacementGroupArgs.builder()\n                .id(12345)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: my-instance\n      region: us-mia\n      type: g6-standard-1\n      placementGroup:\n        id: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes Instances can be imported using the Linode `id`, e.g.\n\n```sh\n$ pulumi import linode:index/instance:Instance mylinode 1234567\n```\n\nWhen importing an instance, all `disk` and `config` values must be represented.\n\nImported disks must include their `label` value.  **Any disk that is not precisely represented may be removed resulting in data loss.**\n\nImported configs should include all `devices`, and must include `label`, `kernel`, and the `root_device`.  The instance must include a `boot_config_label` referring to the correct configuration profile.\n\n",
            "properties": {
                "alerts": {
                    "$ref": "#/types/linode:index/InstanceAlerts:InstanceAlerts",
                    "description": "Configuration options for alert triggers on this Linode.\n"
                },
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.\n"
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's\n`~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.\n"
                },
                "backupId": {
                    "type": "integer",
                    "description": "A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup\nmust have a status of successful, and the Linode must be deployed to the same region as the Backup. See\n/linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually\nexclusive.\n"
                },
                "backups": {
                    "$ref": "#/types/linode:index/InstanceBackups:InstanceBackups",
                    "description": "Information about this Linode's backups status.\n"
                },
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.\n"
                },
                "bootConfigLabel": {
                    "type": "string",
                    "description": "The Label of the Instance Config that should be used to boot the Linode instance.\n"
                },
                "booted": {
                    "type": "boolean",
                    "description": "If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode's power status will not be managed by the Provider.\n"
                },
                "capabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of capabilities of this Linode instance.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfig:InstanceConfig"
                    },
                    "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n",
                    "deprecationMessage": "The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode.InstanceConfig resource."
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for this instance. (`enabled`, `disabled`; default `enabled` in supported regions)\n\n* **NOTE: Disk encryption may not currently be available to all users.**\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceDisk:InstanceDisk"
                    },
                    "deprecationMessage": "The embedded disk block in linode.Instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode.InstanceDisk resource."
                },
                "firewallId": {
                    "type": "integer",
                    "description": "The ID of the Firewall to attach to the instance upon creation. *Changing `firewall_id` forces the creation of a new Linode Instance.*\n"
                },
                "group": {
                    "type": "string",
                    "description": "A deprecated property denoting a group label for this Linode. We recommend using the `tags` attribute instead.\n",
                    "deprecationMessage": "Group label is deprecated. We recommend using tags instead."
                },
                "hasUserData": {
                    "type": "boolean",
                    "description": "Whether this Instance was created with user-data.\n"
                },
                "hostUuid": {
                    "type": "string",
                    "description": "The Linode’s host machine, as a UUID.\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.\nSee /images for more information on the Images available for you to use.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceInterface:InstanceInterface"
                    },
                    "description": "An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces\nmust be declared in the config block.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "A string containing the Linode's public IP address.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of reserved IPv4 addresses to assign to this Linode on creation.\n\n* **NOTE: IP reservation is not currently available to all users.**\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "lkeClusterId": {
                    "type": "integer",
                    "description": "If applicable, the ID of the LKE cluster this instance is a part of.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceMetadata:InstanceMetadata"
                    },
                    "description": "Various fields related to the Linode Metadata service.\n"
                },
                "migrationType": {
                    "type": "string",
                    "description": "The type of migration to use when updating the type or region of a Linode. (`cold`, `warm`; default `cold`)\n\n* `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.\n"
                },
                "placementGroup": {
                    "$ref": "#/types/linode:index/InstancePlacementGroup:InstancePlacementGroup",
                    "description": "Information about the Placement Group this Linode is assigned to.\n"
                },
                "placementGroupExternallyManaged": {
                    "type": "boolean",
                    "description": "If true, changes to the Linode's assigned Placement Group will be ignored. This is necessary when using this resource in conjunction with the linode.PlacementGroupAssignment resource.\n"
                },
                "privateIp": {
                    "type": "boolean",
                    "description": "If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region. It can be enabled on an existing Linode but it can't be disabled.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` will trigger a migration of this Linode. Migration operations are typically long-running operations, so the update timeout should be adjusted accordingly.*.\n"
                },
                "resizeDisk": {
                    "type": "boolean",
                    "description": "If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*\n\n* `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.\n\n* `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The password that will be initially assigned to the 'root' user account.\n",
                    "secret": true
                },
                "sharedIpv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.\n\n* `metadata.0.user_data` - (Optional) The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.\n\n* `placement_group.0.id` - (Optional) The ID of the Placement Group to assign this Linode to.\n"
                },
                "specs": {
                    "$ref": "#/types/linode:index/InstanceSpecs:InstanceSpecs",
                    "description": "Information about the resources available to this Linode.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only\naccepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.\n",
                    "secret": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image\nthat is compatible with this StackScript.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)\n"
                },
                "swapSize": {
                    "type": "integer",
                    "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This\nis used to set the swap disk size for the newly-created Linode.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n\n- - -\n"
                },
                "watchdogEnabled": {
                    "type": "boolean",
                    "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                }
            },
            "required": [
                "alerts",
                "backups",
                "backupsEnabled",
                "bootConfigLabel",
                "booted",
                "capabilities",
                "configs",
                "disks",
                "diskEncryption",
                "hasUserData",
                "hostUuid",
                "ipAddress",
                "ipv4s",
                "ipv6",
                "label",
                "lkeClusterId",
                "privateIpAddress",
                "region",
                "sharedIpv4s",
                "specs",
                "status",
                "swapSize",
                "tags"
            ],
            "inputProperties": {
                "alerts": {
                    "$ref": "#/types/linode:index/InstanceAlerts:InstanceAlerts",
                    "description": "Configuration options for alert triggers on this Linode.\n"
                },
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.\n",
                    "willReplaceOnChanges": true
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's\n`~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.\n",
                    "willReplaceOnChanges": true
                },
                "backupId": {
                    "type": "integer",
                    "description": "A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup\nmust have a status of successful, and the Linode must be deployed to the same region as the Backup. See\n/linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually\nexclusive.\n",
                    "willReplaceOnChanges": true
                },
                "backupsEnabled": {
                    "type": "boolean",
                    "description": "If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.\n"
                },
                "bootConfigLabel": {
                    "type": "string",
                    "description": "The Label of the Instance Config that should be used to boot the Linode instance.\n"
                },
                "booted": {
                    "type": "boolean",
                    "description": "If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode's power status will not be managed by the Provider.\n"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfig:InstanceConfig"
                    },
                    "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n",
                    "deprecationMessage": "The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode.InstanceConfig resource."
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for this instance. (`enabled`, `disabled`; default `enabled` in supported regions)\n\n* **NOTE: Disk encryption may not currently be available to all users.**\n",
                    "willReplaceOnChanges": true
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceDisk:InstanceDisk"
                    },
                    "deprecationMessage": "The embedded disk block in linode.Instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode.InstanceDisk resource."
                },
                "firewallId": {
                    "type": "integer",
                    "description": "The ID of the Firewall to attach to the instance upon creation. *Changing `firewall_id` forces the creation of a new Linode Instance.*\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "A deprecated property denoting a group label for this Linode. We recommend using the `tags` attribute instead.\n",
                    "deprecationMessage": "Group label is deprecated. We recommend using tags instead."
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.\nSee /images for more information on the Images available for you to use.\n",
                    "willReplaceOnChanges": true
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceInterface:InstanceInterface"
                    },
                    "description": "An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces\nmust be declared in the config block.\n"
                },
                "ipv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of reserved IPv4 addresses to assign to this Linode on creation.\n\n* **NOTE: IP reservation is not currently available to all users.**\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceMetadata:InstanceMetadata"
                    },
                    "description": "Various fields related to the Linode Metadata service.\n"
                },
                "migrationType": {
                    "type": "string",
                    "description": "The type of migration to use when updating the type or region of a Linode. (`cold`, `warm`; default `cold`)\n\n* `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.\n"
                },
                "placementGroup": {
                    "$ref": "#/types/linode:index/InstancePlacementGroup:InstancePlacementGroup",
                    "description": "Information about the Placement Group this Linode is assigned to.\n"
                },
                "placementGroupExternallyManaged": {
                    "type": "boolean",
                    "description": "If true, changes to the Linode's assigned Placement Group will be ignored. This is necessary when using this resource in conjunction with the linode.PlacementGroupAssignment resource.\n"
                },
                "privateIp": {
                    "type": "boolean",
                    "description": "If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region. It can be enabled on an existing Linode but it can't be disabled.\n"
                },
                "region": {
                    "type": "string",
                    "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` will trigger a migration of this Linode. Migration operations are typically long-running operations, so the update timeout should be adjusted accordingly.*.\n"
                },
                "resizeDisk": {
                    "type": "boolean",
                    "description": "If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*\n\n* `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.\n\n* `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The password that will be initially assigned to the 'root' user account.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "sharedIpv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.\n\n* `metadata.0.user_data` - (Optional) The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.\n\n* `placement_group.0.id` - (Optional) The ID of the Placement Group to assign this Linode to.\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only\naccepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image\nthat is compatible with this StackScript.\n",
                    "willReplaceOnChanges": true
                },
                "swapSize": {
                    "type": "integer",
                    "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This\nis used to set the swap disk size for the newly-created Linode.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n\n- - -\n"
                },
                "watchdogEnabled": {
                    "type": "boolean",
                    "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "alerts": {
                        "$ref": "#/types/linode:index/InstanceAlerts:InstanceAlerts",
                        "description": "Configuration options for alert triggers on this Linode.\n"
                    },
                    "authorizedKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "authorizedUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's\n`~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.\n",
                        "willReplaceOnChanges": true
                    },
                    "backupId": {
                        "type": "integer",
                        "description": "A Backup ID from another Linode's available backups. Your User must have read_write access to that Linode, the Backup\nmust have a status of successful, and the Linode must be deployed to the same region as the Backup. See\n/linode/instances/{linodeId}/backups for a Linode's available backups. This field and the image field are mutually\nexclusive.\n",
                        "willReplaceOnChanges": true
                    },
                    "backups": {
                        "$ref": "#/types/linode:index/InstanceBackups:InstanceBackups",
                        "description": "Information about this Linode's backups status.\n"
                    },
                    "backupsEnabled": {
                        "type": "boolean",
                        "description": "If this field is set to true, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.\n"
                    },
                    "bootConfigLabel": {
                        "type": "string",
                        "description": "The Label of the Instance Config that should be used to boot the Linode instance.\n"
                    },
                    "booted": {
                        "type": "boolean",
                        "description": "If true, then the instance is kept or converted into in a running state. If false, the instance will be shutdown. If unspecified, the Linode's power status will not be managed by the Provider.\n"
                    },
                    "capabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of capabilities of this Linode instance.\n"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceConfig:InstanceConfig"
                        },
                        "description": "Configuration profiles define the VM settings and boot behavior of the Linode Instance.\n",
                        "deprecationMessage": "The embedded config is deprecated and scheduled to be removed in the next major version.Please consider migrating it  to linode.InstanceConfig resource."
                    },
                    "diskEncryption": {
                        "type": "string",
                        "description": "The disk encryption policy for this instance. (`enabled`, `disabled`; default `enabled` in supported regions)\n\n* **NOTE: Disk encryption may not currently be available to all users.**\n",
                        "willReplaceOnChanges": true
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceDisk:InstanceDisk"
                        },
                        "deprecationMessage": "The embedded disk block in linode.Instance resource is deprecated and scheduled to be removed in the next major version. Please consider migrating it to be the linode.InstanceDisk resource."
                    },
                    "firewallId": {
                        "type": "integer",
                        "description": "The ID of the Firewall to attach to the instance upon creation. *Changing `firewall_id` forces the creation of a new Linode Instance.*\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "A deprecated property denoting a group label for this Linode. We recommend using the `tags` attribute instead.\n",
                        "deprecationMessage": "Group label is deprecated. We recommend using tags instead."
                    },
                    "hasUserData": {
                        "type": "boolean",
                        "description": "Whether this Instance was created with user-data.\n"
                    },
                    "hostUuid": {
                        "type": "string",
                        "description": "The Linode’s host machine, as a UUID.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.\nSee /images for more information on the Images available for you to use.\n",
                        "willReplaceOnChanges": true
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceInterface:InstanceInterface"
                        },
                        "description": "An array of Network Interfaces for this Linode to be created with. If an explicit config or disk is defined, interfaces\nmust be declared in the config block.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "A string containing the Linode's public IP address.\n"
                    },
                    "ipv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of reserved IPv4 addresses to assign to this Linode on creation.\n\n* **NOTE: IP reservation is not currently available to all users.**\n",
                        "willReplaceOnChanges": true
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "This Linode's IPv6 SLAAC addresses. This address is specific to a Linode, and may not be shared.  The prefix (`/64`) is included in this attribute.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Linode's label is for display purposes only. If no label is provided for a Linode, a default will be assigned.\n"
                    },
                    "lkeClusterId": {
                        "type": "integer",
                        "description": "If applicable, the ID of the LKE cluster this instance is a part of.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceMetadata:InstanceMetadata"
                        },
                        "description": "Various fields related to the Linode Metadata service.\n"
                    },
                    "migrationType": {
                        "type": "string",
                        "description": "The type of migration to use when updating the type or region of a Linode. (`cold`, `warm`; default `cold`)\n\n* `interface` - (Optional) A list of network interfaces to be assigned to the Linode on creation. If an explicit config or disk is defined, interfaces must be declared in the `config` block.\n"
                    },
                    "placementGroup": {
                        "$ref": "#/types/linode:index/InstancePlacementGroup:InstancePlacementGroup",
                        "description": "Information about the Placement Group this Linode is assigned to.\n"
                    },
                    "placementGroupExternallyManaged": {
                        "type": "boolean",
                        "description": "If true, changes to the Linode's assigned Placement Group will be ignored. This is necessary when using this resource in conjunction with the linode.PlacementGroupAssignment resource.\n"
                    },
                    "privateIp": {
                        "type": "boolean",
                        "description": "If true, the created Linode will have private networking enabled, allowing use of the 192.168.128.0/17 network within the Linode's region. It can be enabled on an existing Linode but it can't be disabled.\n"
                    },
                    "privateIpAddress": {
                        "type": "string",
                        "description": "This Linode's Private IPv4 Address, if enabled.  The regional private IP address range, 192.168.128.0/17, is shared by all Linode Instances in a region.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "This is the location where the Linode is deployed. Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). *Changing `region` will trigger a migration of this Linode. Migration operations are typically long-running operations, so the update timeout should be adjusted accordingly.*.\n"
                    },
                    "resizeDisk": {
                        "type": "boolean",
                        "description": "If true, changes in Linode type will attempt to upsize or downsize implicitly created disks. This must be false if explicit disks are defined. *This is an irreversible action as Linode disks cannot be automatically downsized.*\n\n* `alerts.0.cpu` - (Optional) The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.\n\n* `alerts.0.network_in` - (Optional) The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.network_out` - (Optional) The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.transfer_quota` - (Optional) The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.\n\n* `alerts.0.io` - (Optional) The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.\n"
                    },
                    "rootPass": {
                        "type": "string",
                        "description": "The password that will be initially assigned to the 'root' user account.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "sharedIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of IPv4 addresses to be shared with the Instance. These IP addresses can be both private and public, but must be in the same region as the instance.\n\n* `metadata.0.user_data` - (Optional) The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.\n\n* `placement_group.0.id` - (Optional) The ID of the Placement Group to assign this Linode to.\n"
                    },
                    "specs": {
                        "$ref": "#/types/linode:index/InstanceSpecs:InstanceSpecs",
                        "description": "Information about the resources available to this Linode.\n"
                    },
                    "stackscriptData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only\naccepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "stackscriptId": {
                        "type": "integer",
                        "description": "The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image\nthat is compatible with this StackScript.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the instance, indicating the current readiness state. (`running`, `offline`, ...)\n"
                    },
                    "swapSize": {
                        "type": "integer",
                        "description": "When deploying from an Image, this field is optional with a Linode API default of 512mb, otherwise it is ignored. This\nis used to set the swap disk size for the newly-created Linode.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Linode type defines the pricing, CPU, disk, and RAM specs of the instance. Examples are `\"g6-nanode-1\"`, `\"g6-standard-2\"`, `\"g6-highmem-16\"`, `\"g6-dedicated-16\"`, etc. See all types [here](https://api.linode.com/v4/linode/types).\n\n- - -\n"
                    },
                    "watchdogEnabled": {
                        "type": "boolean",
                        "description": "The watchdog, named Lassie, is a Shutdown Watchdog that monitors your Linode and will reboot it if it powers off unexpectedly. It works by issuing a boot job when your Linode powers off without a shutdown job being responsible. To prevent a loop, Lassie will give up if there have been more than 5 boot jobs issued within 15 minutes.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceConfig:InstanceConfig": {
            "description": "## Example Usage\n\nCreating a simple bootable Linode Instance Configuration Profile:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  my-config:\n    type: linode:InstanceConfig\n    properties:\n      linodeId: ${[\"my-instance\"].id}\n      label: my-config\n      devices:\n        - deviceName: sda\n          diskId: ${boot.id}\n      booted: true\n  boot:\n    type: linode:InstanceDisk\n    properties:\n      label: boot\n      linodeId: ${[\"my-instance\"].id}\n      size: ${[\"my-instance\"].specs.disk}\n      image: linode/ubuntu22.04\n      rootPass: myc00lpass!\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: my-instance\n      type: g6-standard-1\n      region: us-southeast\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a complex bootable Instance Configuration Profile with a VPC:\n\n## Import\n\nInstance Configs can be imported using the `linode_id` followed by the Instance Config `id` separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/instanceConfig:InstanceConfig my-config 1234567,7654321\n```\n\n",
            "properties": {
                "booted": {
                    "type": "boolean",
                    "description": "If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Optional field for arbitrary User comments on this Config.\n\n* `devices` - (Optional) A dictionary of device disks to use as a device map in a Linode’s configuration profile.\n\n* `helpers` - (Optional) Helpers enabled when booting to this Linode Config.\n\n* `interface` - (Optional) An array of Network Interfaces to use for this Configuration Profile.\n"
                },
                "device": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigDevice:InstanceConfigDevice"
                    },
                    "description": "Blocks for device disks in a Linode's configuration profile.\n"
                },
                "devices": {
                    "$ref": "#/types/linode:index/InstanceConfigDevices:InstanceConfigDevices",
                    "description": "A dictionary of device disks to use as a device map in a Linode's configuration profile.\n",
                    "deprecationMessage": "Devices attribute is deprecated in favor of `device`."
                },
                "helpers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigHelper:InstanceConfigHelper"
                    },
                    "description": "Helpers enabled when booting to this Linode Config.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigInterface:InstanceConfigInterface"
                    },
                    "description": "An array of Network Interfaces to add to this Linode's Configuration Profile.\n"
                },
                "kernel": {
                    "type": "string",
                    "description": "A Kernel ID to boot a Linode with. Default is `linode/latest-64bit`. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://techdocs.akamai.com/linode-api/reference/get-kernels)).\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Config’s label for display purposes only.\n\n- - -\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to create this configuration profile under.\n"
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory limit of the Config. Defaults to the total ram of the Linode.\n"
                },
                "rootDevice": {
                    "type": "string",
                    "description": "The root device to boot. (default `/dev/sda`)\n"
                },
                "runLevel": {
                    "type": "string",
                    "description": "Defines the state of your Linode after booting. (`default`, `single`, `binbash`)\n"
                },
                "virtMode": {
                    "type": "string",
                    "description": "Controls the virtualization mode. (`paravirt`, `fullvirt`)\n"
                }
            },
            "required": [
                "booted",
                "device",
                "devices",
                "helpers",
                "label",
                "linodeId",
                "memoryLimit"
            ],
            "inputProperties": {
                "booted": {
                    "type": "boolean",
                    "description": "If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Optional field for arbitrary User comments on this Config.\n\n* `devices` - (Optional) A dictionary of device disks to use as a device map in a Linode’s configuration profile.\n\n* `helpers` - (Optional) Helpers enabled when booting to this Linode Config.\n\n* `interface` - (Optional) An array of Network Interfaces to use for this Configuration Profile.\n"
                },
                "device": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigDevice:InstanceConfigDevice"
                    },
                    "description": "Blocks for device disks in a Linode's configuration profile.\n"
                },
                "devices": {
                    "$ref": "#/types/linode:index/InstanceConfigDevices:InstanceConfigDevices",
                    "description": "A dictionary of device disks to use as a device map in a Linode's configuration profile.\n",
                    "deprecationMessage": "Devices attribute is deprecated in favor of `device`."
                },
                "helpers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigHelper:InstanceConfigHelper"
                    },
                    "description": "Helpers enabled when booting to this Linode Config.\n"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceConfigInterface:InstanceConfigInterface"
                    },
                    "description": "An array of Network Interfaces to add to this Linode's Configuration Profile.\n"
                },
                "kernel": {
                    "type": "string",
                    "description": "A Kernel ID to boot a Linode with. Default is `linode/latest-64bit`. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://techdocs.akamai.com/linode-api/reference/get-kernels)).\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Config’s label for display purposes only.\n\n- - -\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to create this configuration profile under.\n",
                    "willReplaceOnChanges": true
                },
                "memoryLimit": {
                    "type": "integer",
                    "description": "The memory limit of the Config. Defaults to the total ram of the Linode.\n"
                },
                "rootDevice": {
                    "type": "string",
                    "description": "The root device to boot. (default `/dev/sda`)\n"
                },
                "runLevel": {
                    "type": "string",
                    "description": "Defines the state of your Linode after booting. (`default`, `single`, `binbash`)\n"
                },
                "virtMode": {
                    "type": "string",
                    "description": "Controls the virtualization mode. (`paravirt`, `fullvirt`)\n"
                }
            },
            "requiredInputs": [
                "label",
                "linodeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceConfig resources.\n",
                "properties": {
                    "booted": {
                        "type": "boolean",
                        "description": "If true, the Linode will be booted into this config. If another config is booted, the Linode will be rebooted into this config. If false, the Linode will be shutdown only if it is currently booted into this config. If undefined, the config will alter the boot status of the Linode.\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Optional field for arbitrary User comments on this Config.\n\n* `devices` - (Optional) A dictionary of device disks to use as a device map in a Linode’s configuration profile.\n\n* `helpers` - (Optional) Helpers enabled when booting to this Linode Config.\n\n* `interface` - (Optional) An array of Network Interfaces to use for this Configuration Profile.\n"
                    },
                    "device": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceConfigDevice:InstanceConfigDevice"
                        },
                        "description": "Blocks for device disks in a Linode's configuration profile.\n"
                    },
                    "devices": {
                        "$ref": "#/types/linode:index/InstanceConfigDevices:InstanceConfigDevices",
                        "description": "A dictionary of device disks to use as a device map in a Linode's configuration profile.\n",
                        "deprecationMessage": "Devices attribute is deprecated in favor of `device`."
                    },
                    "helpers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceConfigHelper:InstanceConfigHelper"
                        },
                        "description": "Helpers enabled when booting to this Linode Config.\n"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceConfigInterface:InstanceConfigInterface"
                        },
                        "description": "An array of Network Interfaces to add to this Linode's Configuration Profile.\n"
                    },
                    "kernel": {
                        "type": "string",
                        "description": "A Kernel ID to boot a Linode with. Default is `linode/latest-64bit`. Examples are `linode/latest-64bit`, `linode/grub2`, `linode/direct-disk`, etc. See all kernels [here](https://api.linode.com/v4/linode/kernels). Note that this is a paginated API endpoint ([docs](https://techdocs.akamai.com/linode-api/reference/get-kernels)).\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Config’s label for display purposes only.\n\n- - -\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to create this configuration profile under.\n",
                        "willReplaceOnChanges": true
                    },
                    "memoryLimit": {
                        "type": "integer",
                        "description": "The memory limit of the Config. Defaults to the total ram of the Linode.\n"
                    },
                    "rootDevice": {
                        "type": "string",
                        "description": "The root device to boot. (default `/dev/sda`)\n"
                    },
                    "runLevel": {
                        "type": "string",
                        "description": "Defines the state of your Linode after booting. (`default`, `single`, `binbash`)\n"
                    },
                    "virtMode": {
                        "type": "string",
                        "description": "Controls the virtualization mode. (`paravirt`, `fullvirt`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceDisk:InstanceDisk": {
            "description": "Provides a Linode Instance Disk resource. This can be used to create, modify, and delete Linode Instance Disks.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-add-linode-disk).\n\n**NOTE:** Deleting a disk will shut down the attached instance if the instance is booted. If the disk was not in use by the booted configuration profile, the instance will be automatically rebooted.\n\n## Example Usage\n\nCreating a simple 512 MB Linode Instance Disk:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"my-instance\",\n    type: \"g6-standard-1\",\n    region: \"us-southeast\",\n});\nconst boot = new linode.InstanceDisk(\"boot\", {\n    label: \"boot\",\n    linodeId: my_instance.id,\n    size: 512,\n    filesystem: \"ext4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"my-instance\",\n    type=\"g6-standard-1\",\n    region=\"us-southeast\")\nboot = linode.InstanceDisk(\"boot\",\n    label=\"boot\",\n    linode_id=my_instance.id,\n    size=512,\n    filesystem=\"ext4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"my-instance\",\n        Type = \"g6-standard-1\",\n        Region = \"us-southeast\",\n    });\n\n    var boot = new Linode.InstanceDisk(\"boot\", new()\n    {\n        Label = \"boot\",\n        LinodeId = my_instance.Id,\n        Size = 512,\n        Filesystem = \"ext4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_instance, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-instance\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstanceDisk(ctx, \"boot\", \u0026linode.InstanceDiskArgs{\n\t\t\tLabel:      pulumi.String(\"boot\"),\n\t\t\tLinodeId:   my_instance.ID(),\n\t\t\tSize:       pulumi.Int(512),\n\t\t\tFilesystem: pulumi.String(\"ext4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceDisk;\nimport com.pulumi.linode.InstanceDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()\n            .label(\"my-instance\")\n            .type(\"g6-standard-1\")\n            .region(\"us-southeast\")\n            .build());\n\n        var boot = new InstanceDisk(\"boot\", InstanceDiskArgs.builder()\n            .label(\"boot\")\n            .linodeId(my_instance.id())\n            .size(512)\n            .filesystem(\"ext4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  boot:\n    type: linode:InstanceDisk\n    properties:\n      label: boot\n      linodeId: ${[\"my-instance\"].id}\n      size: 512\n      filesystem: ext4\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: my-instance\n      type: g6-standard-1\n      region: us-southeast\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating a complex bootable Instance Disk:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {\n    label: \"my-instance\",\n    type: \"g6-standard-1\",\n    region: \"us-southeast\",\n});\nconst boot = new linode.InstanceDisk(\"boot\", {\n    label: \"boot\",\n    linodeId: my_instance.id,\n    size: my_instance.specs.apply(specs =\u003e specs.disk),\n    image: \"linode/ubuntu22.04\",\n    rootPass: \"myc00lpass!\",\n    authorizedKeys: [\"ssh-rsa AAAA...Gw== user@example.local\"],\n    stackscriptId: 12345,\n    stackscriptData: {\n        my_var: \"my_value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\",\n    label=\"my-instance\",\n    type=\"g6-standard-1\",\n    region=\"us-southeast\")\nboot = linode.InstanceDisk(\"boot\",\n    label=\"boot\",\n    linode_id=my_instance.id,\n    size=my_instance.specs.disk,\n    image=\"linode/ubuntu22.04\",\n    root_pass=\"myc00lpass!\",\n    authorized_keys=[\"ssh-rsa AAAA...Gw== user@example.local\"],\n    stackscript_id=12345,\n    stackscript_data={\n        \"my_var\": \"my_value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        Label = \"my-instance\",\n        Type = \"g6-standard-1\",\n        Region = \"us-southeast\",\n    });\n\n    var boot = new Linode.InstanceDisk(\"boot\", new()\n    {\n        Label = \"boot\",\n        LinodeId = my_instance.Id,\n        Size = my_instance.Specs.Apply(specs =\u003e specs.Disk),\n        Image = \"linode/ubuntu22.04\",\n        RootPass = \"myc00lpass!\",\n        AuthorizedKeys = new[]\n        {\n            \"ssh-rsa AAAA...Gw== user@example.local\",\n        },\n        StackscriptId = 12345,\n        StackscriptData = \n        {\n            { \"my_var\", \"my_value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_instance, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-instance\"),\n\t\t\tType:   pulumi.String(\"g6-standard-1\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstanceDisk(ctx, \"boot\", \u0026linode.InstanceDiskArgs{\n\t\t\tLabel:    pulumi.String(\"boot\"),\n\t\t\tLinodeId: my_instance.ID(),\n\t\t\tSize: pulumi.Int(my_instance.Specs.ApplyT(func(specs linode.InstanceSpecs) (*int, error) {\n\t\t\t\treturn \u0026specs.Disk, nil\n\t\t\t}).(pulumi.IntPtrOutput)),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tRootPass: pulumi.String(\"myc00lpass!\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh-rsa AAAA...Gw== user@example.local\"),\n\t\t\t},\n\t\t\tStackscriptId: pulumi.Int(12345),\n\t\t\tStackscriptData: pulumi.StringMap{\n\t\t\t\t\"my_var\": pulumi.String(\"my_value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceDisk;\nimport com.pulumi.linode.InstanceDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()\n            .label(\"my-instance\")\n            .type(\"g6-standard-1\")\n            .region(\"us-southeast\")\n            .build());\n\n        var boot = new InstanceDisk(\"boot\", InstanceDiskArgs.builder()\n            .label(\"boot\")\n            .linodeId(my_instance.id())\n            .size(my_instance.specs().applyValue(_specs -\u003e _specs.disk()))\n            .image(\"linode/ubuntu22.04\")\n            .rootPass(\"myc00lpass!\")\n            .authorizedKeys(\"ssh-rsa AAAA...Gw== user@example.local\")\n            .stackscriptId(12345)\n            .stackscriptData(Map.of(\"my_var\", \"my_value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  boot:\n    type: linode:InstanceDisk\n    properties:\n      label: boot\n      linodeId: ${[\"my-instance\"].id}\n      size: ${[\"my-instance\"].specs.disk}\n      image: linode/ubuntu22.04\n      rootPass: myc00lpass!\n      authorizedKeys:\n        - ssh-rsa AAAA...Gw== user@example.local\n      stackscriptId: 12345\n      stackscriptData:\n        my_var: my_value\n  my-instance:\n    type: linode:Instance\n    properties:\n      label: my-instance\n      type: g6-standard-1\n      region: us-southeast\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nInstance Disks can be imported using the `linode_id` followed by the Instance Disk `id` separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/instanceDisk:InstanceDisk my-disk 1234567,7654321\n```\n\n",
            "properties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image. (Requires `image`)\n"
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root user's ~/.ssh/authorized_keys file. (Requires `image`)\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this disk was created.\n"
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for this disk's parent instance. (`enabled`, `disabled`)\n"
                },
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Linode Disk from.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Disk's label for display purposes only.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to create this Disk under.\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The root user’s password on a newly-created Linode Disk when deploying from an Image. (Requires `image`)\n",
                    "secret": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.\n\n- - -\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given. (Requires `image`)\n",
                    "secret": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk. (Requires `image`)\n"
                },
                "status": {
                    "type": "string",
                    "description": "A brief description of this Disk's current state.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/InstanceDiskTimeouts:InstanceDiskTimeouts"
                },
                "updated": {
                    "type": "string",
                    "description": "When this disk was last updated.\n"
                }
            },
            "required": [
                "created",
                "diskEncryption",
                "filesystem",
                "label",
                "linodeId",
                "size",
                "status",
                "updated"
            ],
            "inputProperties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image. (Requires `image`)\n"
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root user's ~/.ssh/authorized_keys file. (Requires `image`)\n"
                },
                "filesystem": {
                    "type": "string",
                    "description": "The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)\n"
                },
                "image": {
                    "type": "string",
                    "description": "An Image ID to deploy the Linode Disk from.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The Disk's label for display purposes only.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to create this Disk under.\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "The root user’s password on a newly-created Linode Disk when deploying from an Image. (Requires `image`)\n",
                    "secret": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.\n\n- - -\n"
                },
                "stackscriptData": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given. (Requires `image`)\n",
                    "secret": true
                },
                "stackscriptId": {
                    "type": "integer",
                    "description": "A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk. (Requires `image`)\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/InstanceDiskTimeouts:InstanceDiskTimeouts"
                }
            },
            "requiredInputs": [
                "label",
                "linodeId",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceDisk resources.\n",
                "properties": {
                    "authorizedKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of public SSH keys that will be automatically appended to the root user’s ~/.ssh/authorized_keys file when deploying from an Image. (Requires `image`)\n"
                    },
                    "authorizedUsers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root user's ~/.ssh/authorized_keys file. (Requires `image`)\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this disk was created.\n"
                    },
                    "diskEncryption": {
                        "type": "string",
                        "description": "The disk encryption policy for this disk's parent instance. (`enabled`, `disabled`)\n"
                    },
                    "filesystem": {
                        "type": "string",
                        "description": "The filesystem of this disk. (`raw`, `swap`, `ext3`, `ext4`, `initrd`)\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "An Image ID to deploy the Linode Disk from.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Disk's label for display purposes only.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to create this Disk under.\n"
                    },
                    "rootPass": {
                        "type": "string",
                        "description": "The root user’s password on a newly-created Linode Disk when deploying from an Image. (Requires `image`)\n",
                        "secret": true
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the Disk in MB. **NOTE:** Resizing a disk will trigger a Linode reboot.\n\n- - -\n"
                    },
                    "stackscriptData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "An object containing responses to any User Defined Fields present in the StackScript being deployed to this Disk. Only accepted if `stackscript_id` is given. (Requires `image`)\n",
                        "secret": true
                    },
                    "stackscriptId": {
                        "type": "integer",
                        "description": "A StackScript ID that will cause the referenced StackScript to be run during deployment of this Disk. (Requires `image`)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "A brief description of this Disk's current state.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/linode:index/InstanceDiskTimeouts:InstanceDiskTimeouts"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this disk was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceIp:InstanceIp": {
            "description": "Manages a Linode instance IP.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-add-linode-ip).\n\n\u003e **NOTICE:** You may need to contact support to increase your instance IP limit before you can allocate additional IPs.\n\n\u003e **NOTICE:** This resource will reboot the specified instance following IP allocation.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.Instance(\"foo\", {\n    image: \"linode/alpine3.19\",\n    label: \"foobar-test\",\n    type: \"g6-nanode-1\",\n    region: \"us-east\",\n});\nconst fooInstanceIp = new linode.InstanceIp(\"foo\", {\n    linodeId: foo.id,\n    \"public\": true,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.Instance(\"foo\",\n    image=\"linode/alpine3.19\",\n    label=\"foobar-test\",\n    type=\"g6-nanode-1\",\n    region=\"us-east\")\nfoo_instance_ip = linode.InstanceIp(\"foo\",\n    linode_id=foo.id,\n    public=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.Instance(\"foo\", new()\n    {\n        Image = \"linode/alpine3.19\",\n        Label = \"foobar-test\",\n        Type = \"g6-nanode-1\",\n        Region = \"us-east\",\n    });\n\n    var fooInstanceIp = new Linode.InstanceIp(\"foo\", new()\n    {\n        LinodeId = foo.Id,\n        Public = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := linode.NewInstance(ctx, \"foo\", \u0026linode.InstanceArgs{\n\t\t\tImage:  pulumi.String(\"linode/alpine3.19\"),\n\t\t\tLabel:  pulumi.String(\"foobar-test\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"us-east\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstanceIp(ctx, \"foo\", \u0026linode.InstanceIpArgs{\n\t\t\tLinodeId: foo.ID(),\n\t\t\tPublic:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceIp;\nimport com.pulumi.linode.InstanceIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Instance(\"foo\", InstanceArgs.builder()\n            .image(\"linode/alpine3.19\")\n            .label(\"foobar-test\")\n            .type(\"g6-nanode-1\")\n            .region(\"us-east\")\n            .build());\n\n        var fooInstanceIp = new InstanceIp(\"fooInstanceIp\", InstanceIpArgs.builder()\n            .linodeId(foo.id())\n            .public_(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:Instance\n    properties:\n      image: linode/alpine3.19\n      label: foobar-test\n      type: g6-nanode-1\n      region: us-east\n  fooInstanceIp:\n    type: linode:InstanceIp\n    name: foo\n    properties:\n      linodeId: ${foo.id}\n      public: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The resulting IPv4 address.\n"
                },
                "applyImmediately": {
                    "type": "boolean",
                    "description": "If true, the instance will be rebooted to update network interfaces.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The number of bits set in the subnet mask.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address is public or private. Defaults to true.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region this IP resides in.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The mask that separates host bits from network bits for this address.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of IP address. (`ipv4`, `ipv6`, `ipv6/pool`, `ipv6/range`)\n"
                },
                "vpcNat11s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/InstanceIpVpcNat11:InstanceIpVpcNat11"
                    },
                    "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                }
            },
            "required": [
                "address",
                "applyImmediately",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "subnetMask",
                "type",
                "vpcNat11s"
            ],
            "inputProperties": {
                "applyImmediately": {
                    "type": "boolean",
                    "description": "If true, the instance will be rebooted to update network interfaces.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address is public or private. Defaults to true.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                }
            },
            "requiredInputs": [
                "linodeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The resulting IPv4 address.\n"
                    },
                    "applyImmediately": {
                        "type": "boolean",
                        "description": "If true, the instance will be rebooted to update network interfaces.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The default gateway for this address\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                    },
                    "prefix": {
                        "type": "integer",
                        "description": "The number of bits set in the subnet mask.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the IPv4 address is public or private. Defaults to true.\n"
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The reverse DNS assigned to this address.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region this IP resides in.\n"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "The mask that separates host bits from network bits for this address.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of IP address. (`ipv4`, `ipv6`, `ipv6/pool`, `ipv6/range`)\n"
                    },
                    "vpcNat11s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/InstanceIpVpcNat11:InstanceIpVpcNat11"
                        },
                        "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/instanceSharedIps:InstanceSharedIps": {
            "description": "Manages IPs shared to a Linode instance.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-share-ips).\n\n\u003e **Beta Notice** IPv6 sharing is currently available through early access.\nTo use early access resources, the `api_version` provider argument must be set to `v4beta`.\nTo learn more, see the early access documentation.\n\n\u003e **Notice** This resource should only be defined once per-instance and should not be used alongside the `shared_ipv4` field in `linode.Instance`.\n\n## Example Usage\n\nShare in IPv4 address between two instances:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\n// Create a single primary node\nconst primaryInstance = new linode.Instance(\"primary\", {\n    label: \"node-primary\",\n    type: \"g6-nanode-1\",\n    region: \"eu-central\",\n});\n// Allocate an IP under the primary node\nconst primary = new linode.InstanceIp(\"primary\", {linodeId: primaryInstance.id});\n// Create a secondary node\nconst secondary = new linode.Instance(\"secondary\", {\n    label: \"node-secondary\",\n    type: \"g6-nanode-1\",\n    region: \"eu-central\",\n});\n// Share the IP with the secondary node\nconst share_primary = new linode.InstanceSharedIps(\"share-primary\", {\n    linodeId: secondary.id,\n    addresses: [primary.address],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\n# Create a single primary node\nprimary_instance = linode.Instance(\"primary\",\n    label=\"node-primary\",\n    type=\"g6-nanode-1\",\n    region=\"eu-central\")\n# Allocate an IP under the primary node\nprimary = linode.InstanceIp(\"primary\", linode_id=primary_instance.id)\n# Create a secondary node\nsecondary = linode.Instance(\"secondary\",\n    label=\"node-secondary\",\n    type=\"g6-nanode-1\",\n    region=\"eu-central\")\n# Share the IP with the secondary node\nshare_primary = linode.InstanceSharedIps(\"share-primary\",\n    linode_id=secondary.id,\n    addresses=[primary.address])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a single primary node\n    var primaryInstance = new Linode.Instance(\"primary\", new()\n    {\n        Label = \"node-primary\",\n        Type = \"g6-nanode-1\",\n        Region = \"eu-central\",\n    });\n\n    // Allocate an IP under the primary node\n    var primary = new Linode.InstanceIp(\"primary\", new()\n    {\n        LinodeId = primaryInstance.Id,\n    });\n\n    // Create a secondary node\n    var secondary = new Linode.Instance(\"secondary\", new()\n    {\n        Label = \"node-secondary\",\n        Type = \"g6-nanode-1\",\n        Region = \"eu-central\",\n    });\n\n    // Share the IP with the secondary node\n    var share_primary = new Linode.InstanceSharedIps(\"share-primary\", new()\n    {\n        LinodeId = secondary.Id,\n        Addresses = new[]\n        {\n            primary.Address,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a single primary node\n\t\tprimaryInstance, err := linode.NewInstance(ctx, \"primary\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"node-primary\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"eu-central\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Allocate an IP under the primary node\n\t\tprimary, err := linode.NewInstanceIp(ctx, \"primary\", \u0026linode.InstanceIpArgs{\n\t\t\tLinodeId: primaryInstance.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a secondary node\n\t\tsecondary, err := linode.NewInstance(ctx, \"secondary\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"node-secondary\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"eu-central\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Share the IP with the secondary node\n\t\t_, err = linode.NewInstanceSharedIps(ctx, \"share-primary\", \u0026linode.InstanceSharedIpsArgs{\n\t\t\tLinodeId: secondary.ID(),\n\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\tprimary.Address,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.InstanceIp;\nimport com.pulumi.linode.InstanceIpArgs;\nimport com.pulumi.linode.InstanceSharedIps;\nimport com.pulumi.linode.InstanceSharedIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a single primary node\n        var primaryInstance = new Instance(\"primaryInstance\", InstanceArgs.builder()\n            .label(\"node-primary\")\n            .type(\"g6-nanode-1\")\n            .region(\"eu-central\")\n            .build());\n\n        // Allocate an IP under the primary node\n        var primary = new InstanceIp(\"primary\", InstanceIpArgs.builder()\n            .linodeId(primaryInstance.id())\n            .build());\n\n        // Create a secondary node\n        var secondary = new Instance(\"secondary\", InstanceArgs.builder()\n            .label(\"node-secondary\")\n            .type(\"g6-nanode-1\")\n            .region(\"eu-central\")\n            .build());\n\n        // Share the IP with the secondary node\n        var share_primary = new InstanceSharedIps(\"share-primary\", InstanceSharedIpsArgs.builder()\n            .linodeId(secondary.id())\n            .addresses(primary.address())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Share the IP with the secondary node\n  share-primary:\n    type: linode:InstanceSharedIps\n    properties:\n      linodeId: ${secondary.id}\n      addresses:\n        - ${primary.address}\n  # Allocate an IP under the primary node\n  primary:\n    type: linode:InstanceIp\n    properties:\n      linodeId: ${primaryInstance.id}\n  # Create a single primary node\n  primaryInstance:\n    type: linode:Instance\n    name: primary\n    properties:\n      label: node-primary\n      type: g6-nanode-1\n      region: eu-central\n  # Create a secondary node\n  secondary:\n    type: linode:Instance\n    properties:\n      label: node-secondary\n      type: g6-nanode-1\n      region: eu-central\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nShare an IPv6 address among a primary node and its replicas:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\n// Create a single primary node\nconst primary = new linode.Instance(\"primary\", {\n    label: \"node-primary\",\n    type: \"g6-nanode-1\",\n    region: \"eu-central\",\n});\n// Allocate an IPv6 range pointing at the primary node\nconst rangeIpv6Range = new linode.Ipv6Range(\"range\", {\n    prefixLength: 64,\n    linodeId: primary.id,\n});\n// Share with primary node\nconst share_primary = new linode.InstanceSharedIps(\"share-primary\", {\n    linodeId: primary.id,\n    addresses: [rangeIpv6Range.range],\n});\nconst config = new pulumi.Config();\nconst numberReplicas = config.getNumber(\"numberReplicas\") || 2;\n// Create two secondary nodes\nconst secondary: linode.Instance[] = [];\nfor (const range = {value: 0}; range.value \u003c numberReplicas; range.value++) {\n    secondary.push(new linode.Instance(`secondary-${range.value}`, {\n        label: `node-secondary-${range.value}`,\n        type: \"g6-nanode-1\",\n        region: \"eu-central\",\n    }));\n}\n// Share with secondary nodes\nconst share_secondary: linode.InstanceSharedIps[] = [];\nfor (const range = {value: 0}; range.value \u003c numberReplicas; range.value++) {\n    share_secondary.push(new linode.InstanceSharedIps(`share-secondary-${range.value}`, {\n        linodeId: secondary[range.value].id,\n        addresses: [rangeIpv6Range.range],\n    }, {\n    dependsOn: [share_primary],\n}));\n}\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\n# Create a single primary node\nprimary = linode.Instance(\"primary\",\n    label=\"node-primary\",\n    type=\"g6-nanode-1\",\n    region=\"eu-central\")\n# Allocate an IPv6 range pointing at the primary node\nrange_ipv6_range = linode.Ipv6Range(\"range\",\n    prefix_length=64,\n    linode_id=primary.id)\n# Share with primary node\nshare_primary = linode.InstanceSharedIps(\"share-primary\",\n    linode_id=primary.id,\n    addresses=[range_ipv6_range.range])\nconfig = pulumi.Config()\nnumber_replicas = config.get_float(\"numberReplicas\")\nif number_replicas is None:\n    number_replicas = 2\n# Create two secondary nodes\nsecondary = []\nfor range in [{\"value\": i} for i in range(0, number_replicas)]:\n    secondary.append(linode.Instance(f\"secondary-{range['value']}\",\n        label=f\"node-secondary-{range['value']}\",\n        type=\"g6-nanode-1\",\n        region=\"eu-central\"))\n# Share with secondary nodes\nshare_secondary = []\nfor range in [{\"value\": i} for i in range(0, number_replicas)]:\n    share_secondary.append(linode.InstanceSharedIps(f\"share-secondary-{range['value']}\",\n        linode_id=secondary[range[\"value\"]].id,\n        addresses=[range_ipv6_range.range],\n        opts = pulumi.ResourceOptions(depends_on=[share_primary])))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a single primary node\n    var primary = new Linode.Instance(\"primary\", new()\n    {\n        Label = \"node-primary\",\n        Type = \"g6-nanode-1\",\n        Region = \"eu-central\",\n    });\n\n    // Allocate an IPv6 range pointing at the primary node\n    var rangeIpv6Range = new Linode.Ipv6Range(\"range\", new()\n    {\n        PrefixLength = 64,\n        LinodeId = primary.Id,\n    });\n\n    // Share with primary node\n    var share_primary = new Linode.InstanceSharedIps(\"share-primary\", new()\n    {\n        LinodeId = primary.Id,\n        Addresses = new[]\n        {\n            rangeIpv6Range.Range,\n        },\n    });\n\n    var config = new Config();\n    var numberReplicas = config.GetDouble(\"numberReplicas\") ?? 2;\n    // Create two secondary nodes\n    var secondary = new List\u003cLinode.Instance\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c numberReplicas; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        secondary.Add(new Linode.Instance($\"secondary-{range.Value}\", new()\n        {\n            Label = $\"node-secondary-{range.Value}\",\n            Type = \"g6-nanode-1\",\n            Region = \"eu-central\",\n        }));\n    }\n    // Share with secondary nodes\n    var share_secondary = new List\u003cLinode.InstanceSharedIps\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c numberReplicas; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        share_secondary.Add(new Linode.InstanceSharedIps($\"share-secondary-{range.Value}\", new()\n        {\n            LinodeId = secondary[range.Value].Id,\n            Addresses = new[]\n            {\n                rangeIpv6Range.Range,\n            },\n        }, new CustomResourceOptions\n        {\n            DependsOn =\n            {\n                share_primary,\n            },\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a single primary node\n\t\tprimary, err := linode.NewInstance(ctx, \"primary\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"node-primary\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"eu-central\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Allocate an IPv6 range pointing at the primary node\n\t\trangeIpv6Range, err := linode.NewIpv6Range(ctx, \"range\", \u0026linode.Ipv6RangeArgs{\n\t\t\tPrefixLength: pulumi.Int(64),\n\t\t\tLinodeId:     primary.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Share with primary node\n\t\tshare_primary, err := linode.NewInstanceSharedIps(ctx, \"share-primary\", \u0026linode.InstanceSharedIpsArgs{\n\t\t\tLinodeId: primary.ID(),\n\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\trangeIpv6Range.Range,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcfg := config.New(ctx, \"\")\n\t\tnumberReplicas := float64(2)\n\t\tif param := cfg.GetFloat64(\"numberReplicas\"); param != 0 {\n\t\t\tnumberReplicas = param\n\t\t}\n\t\t// Create two secondary nodes\n\t\tvar secondary []*linode.Instance\n\t\tfor index := 0; index \u003c numberReplicas; index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := linode.NewInstance(ctx, fmt.Sprintf(\"secondary-%v\", key0), \u0026linode.InstanceArgs{\n\t\t\t\tLabel:  pulumi.Sprintf(\"node-secondary-%v\", val0),\n\t\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\t\tRegion: pulumi.String(\"eu-central\"),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tsecondary = append(secondary, __res)\n\t\t}\n\t\t// Share with secondary nodes\n\t\tvar share_secondary []*linode.InstanceSharedIps\n\t\tfor index := 0; index \u003c numberReplicas; index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := linode.NewInstanceSharedIps(ctx, fmt.Sprintf(\"share-secondary-%v\", key0), \u0026linode.InstanceSharedIpsArgs{\n\t\t\t\tLinodeId: pulumi.Int(secondary[val0].ID()),\n\t\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\t\trangeIpv6Range.Range,\n\t\t\t\t},\n\t\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\t\tshare_primary,\n\t\t\t}))\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tshare_secondary = append(share_secondary, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Ipv6Range;\nimport com.pulumi.linode.Ipv6RangeArgs;\nimport com.pulumi.linode.InstanceSharedIps;\nimport com.pulumi.linode.InstanceSharedIpsArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        // Create a single primary node\n        var primary = new Instance(\"primary\", InstanceArgs.builder()\n            .label(\"node-primary\")\n            .type(\"g6-nanode-1\")\n            .region(\"eu-central\")\n            .build());\n\n        // Allocate an IPv6 range pointing at the primary node\n        var rangeIpv6Range = new Ipv6Range(\"rangeIpv6Range\", Ipv6RangeArgs.builder()\n            .prefixLength(64)\n            .linodeId(primary.id())\n            .build());\n\n        // Share with primary node\n        var share_primary = new InstanceSharedIps(\"share-primary\", InstanceSharedIpsArgs.builder()\n            .linodeId(primary.id())\n            .addresses(rangeIpv6Range.range())\n            .build());\n\n        final var numberReplicas = config.get(\"numberReplicas\").orElse(2);\n        // Create two secondary nodes\n        for (var i = 0; i \u003c numberReplicas; i++) {\n            new Instance(\"secondary-\" + i, InstanceArgs.builder()\n                .label(String.format(\"node-secondary-%s\", range.value()))\n                .type(\"g6-nanode-1\")\n                .region(\"eu-central\")\n                .build());\n\n        \n}\n        // Share with secondary nodes\n        for (var i = 0; i \u003c numberReplicas; i++) {\n            new InstanceSharedIps(\"share-secondary-\" + i, InstanceSharedIpsArgs.builder()\n                .linodeId(secondary[range.value()].id())\n                .addresses(rangeIpv6Range.range())\n                .build(), CustomResourceOptions.builder()\n                    .dependsOn(share_primary)\n                    .build());\n\n        \n}\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of IPs to share with the Linode.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to share the IPs to.\n"
                }
            },
            "required": [
                "addresses",
                "linodeId"
            ],
            "inputProperties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of IPs to share with the Linode.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to share the IPs to.\n"
                }
            },
            "requiredInputs": [
                "addresses",
                "linodeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceSharedIps resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of IPs to share with the Linode.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to share the IPs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/ipv6Range:Ipv6Range": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.Instance(\"foobar\", {\n    label: \"my-linode\",\n    image: \"linode/alpine3.19\",\n    type: \"g6-nanode-1\",\n    region: \"us-southeast\",\n});\nconst foobarIpv6Range = new linode.Ipv6Range(\"foobar\", {\n    linodeId: foobar.id,\n    prefixLength: 64,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.Instance(\"foobar\",\n    label=\"my-linode\",\n    image=\"linode/alpine3.19\",\n    type=\"g6-nanode-1\",\n    region=\"us-southeast\")\nfoobar_ipv6_range = linode.Ipv6Range(\"foobar\",\n    linode_id=foobar.id,\n    prefix_length=64)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Instance(\"foobar\", new()\n    {\n        Label = \"my-linode\",\n        Image = \"linode/alpine3.19\",\n        Type = \"g6-nanode-1\",\n        Region = \"us-southeast\",\n    });\n\n    var foobarIpv6Range = new Linode.Ipv6Range(\"foobar\", new()\n    {\n        LinodeId = foobar.Id,\n        PrefixLength = 64,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := linode.NewInstance(ctx, \"foobar\", \u0026linode.InstanceArgs{\n\t\t\tLabel:  pulumi.String(\"my-linode\"),\n\t\t\tImage:  pulumi.String(\"linode/alpine3.19\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion: pulumi.String(\"us-southeast\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewIpv6Range(ctx, \"foobar\", \u0026linode.Ipv6RangeArgs{\n\t\t\tLinodeId:     foobar.ID(),\n\t\t\tPrefixLength: pulumi.Int(64),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Ipv6Range;\nimport com.pulumi.linode.Ipv6RangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Instance(\"foobar\", InstanceArgs.builder()\n            .label(\"my-linode\")\n            .image(\"linode/alpine3.19\")\n            .type(\"g6-nanode-1\")\n            .region(\"us-southeast\")\n            .build());\n\n        var foobarIpv6Range = new Ipv6Range(\"foobarIpv6Range\", Ipv6RangeArgs.builder()\n            .linodeId(foobar.id())\n            .prefixLength(64)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Instance\n    properties:\n      label: my-linode\n      image: linode/alpine3.19\n      type: g6-nanode-1\n      region: us-southeast\n  foobarIpv6Range:\n    type: linode:Ipv6Range\n    name: foobar\n    properties:\n      linodeId: ${foobar.id}\n      prefixLength: 64\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "isBgp": {
                    "type": "boolean",
                    "description": "Whether this IPv6 range is shared.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the IPv6 range.\n"
                },
                "range": {
                    "type": "string",
                    "description": "The IPv6 range of addresses in this pool.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for this range of IPv6 addresses.\n"
                },
                "routeTarget": {
                    "type": "string",
                    "description": "The IPv6 SLAAC address to assign this range to.\n"
                }
            },
            "required": [
                "isBgp",
                "linodes",
                "prefixLength",
                "range",
                "region",
                "routeTarget"
            ],
            "inputProperties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "The prefix length of the IPv6 range.\n"
                },
                "routeTarget": {
                    "type": "string",
                    "description": "The IPv6 SLAAC address to assign this range to.\n"
                }
            },
            "requiredInputs": [
                "prefixLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ipv6Range resources.\n",
                "properties": {
                    "isBgp": {
                        "type": "boolean",
                        "description": "Whether this IPv6 range is shared.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to assign this range to. This field may be updated to reassign the IPv6 range.\n"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "The prefix length of the IPv6 range.\n"
                    },
                    "range": {
                        "type": "string",
                        "description": "The IPv6 range of addresses in this pool.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for this range of IPv6 addresses.\n"
                    },
                    "routeTarget": {
                        "type": "string",
                        "description": "The IPv6 SLAAC address to assign this range to.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/lkeCluster:LkeCluster": {
            "description": "\n\n## Import\n\nLKE Clusters can be imported using the `id`, e.g.\n\n```sh\n$ pulumi import linode:index/lkeCluster:LkeCluster my_cluster 12345\n```\n\n",
            "properties": {
                "apiEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The endpoints for the Kubernetes API server.\n"
                },
                "controlPlane": {
                    "$ref": "#/types/linode:index/LkeClusterControlPlane:LkeClusterControlPlane",
                    "description": "Defines settings for the Kubernetes Control Plane.\n"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The Kubernetes Dashboard access URL for this cluster. LKE Enterprise does not have a dashboard URL.\n"
                },
                "externalPoolTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.\n"
                },
                "kubeconfig": {
                    "type": "string",
                    "description": "The base64 encoded kubeconfig for the Kubernetes cluster.\n",
                    "secret": true
                },
                "label": {
                    "type": "string",
                    "description": "This Kubernetes cluster's unique label.\n"
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPool:LkeClusterPool"
                    },
                    "description": "Additional nested attributes:\n"
                },
                "region": {
                    "type": "string",
                    "description": "This Kubernetes cluster's location.\n\n* `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.\n\n* `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the node. (`ready`, `not_ready`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)\n"
                }
            },
            "required": [
                "apiEndpoints",
                "controlPlane",
                "dashboardUrl",
                "k8sVersion",
                "kubeconfig",
                "label",
                "pools",
                "region",
                "status",
                "tags",
                "tier"
            ],
            "inputProperties": {
                "controlPlane": {
                    "$ref": "#/types/linode:index/LkeClusterControlPlane:LkeClusterControlPlane",
                    "description": "Defines settings for the Kubernetes Control Plane.\n"
                },
                "externalPoolTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.\n"
                },
                "label": {
                    "type": "string",
                    "description": "This Kubernetes cluster's unique label.\n"
                },
                "pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeClusterPool:LkeClusterPool"
                    },
                    "description": "Additional nested attributes:\n"
                },
                "region": {
                    "type": "string",
                    "description": "This Kubernetes cluster's location.\n\n* `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.\n\n* `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "k8sVersion",
                "label",
                "pools",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LkeCluster resources.\n",
                "properties": {
                    "apiEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The endpoints for the Kubernetes API server.\n"
                    },
                    "controlPlane": {
                        "$ref": "#/types/linode:index/LkeClusterControlPlane:LkeClusterControlPlane",
                        "description": "Defines settings for the Kubernetes Control Plane.\n"
                    },
                    "dashboardUrl": {
                        "type": "string",
                        "description": "The Kubernetes Dashboard access URL for this cluster. LKE Enterprise does not have a dashboard URL.\n"
                    },
                    "externalPoolTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of node pool tags to ignore when planning and applying this cluster. This prevents externally managed node pools from being deleted or unintentionally updated on subsequent applies. See Externally Managed Node Pools for more details.\n"
                    },
                    "k8sVersion": {
                        "type": "string",
                        "description": "The desired Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.21`), and the latest supported patch version will be deployed.\n"
                    },
                    "kubeconfig": {
                        "type": "string",
                        "description": "The base64 encoded kubeconfig for the Kubernetes cluster.\n",
                        "secret": true
                    },
                    "label": {
                        "type": "string",
                        "description": "This Kubernetes cluster's unique label.\n"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/LkeClusterPool:LkeClusterPool"
                        },
                        "description": "Additional nested attributes:\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "This Kubernetes cluster's location.\n\n* `pool` - (Required) The Node Pool specifications for the Kubernetes cluster. At least one Node Pool is required.\n\n* `control_plane` (Optional) Defines settings for the Kubernetes Control Plane.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the node. (`ready`, `not_ready`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of tags applied to the Kubernetes cluster. Tags are case-insensitive and are for organizational purposes only.\n"
                    },
                    "tier": {
                        "type": "string",
                        "description": "The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/lkeNodePool:LkeNodePool": {
            "description": "\n\n## Import\n\nLKE Node Pools can be imported using the `cluster_id,id`, e.g.\n\n```sh\n$ pulumi import linode:index/lkeNodePool:LkeNodePool my_pool 150003,12345\n```\n\n",
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/linode:index/LkeNodePoolAutoscaler:LkeNodePoolAutoscaler"
                },
                "clusterId": {
                    "type": "integer",
                    "description": "ID of the LKE Cluster where to create the current Node Pool.\n"
                },
                "diskEncryption": {
                    "type": "string",
                    "description": "The disk encryption policy for nodes in this pool.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeNodePoolNode:LkeNodePoolNode"
                    },
                    "description": "A list of nodes in the node pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeNodePoolTaint:LkeNodePoolTaint"
                    },
                    "description": "Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically\nallowing them to repel certain pods.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                },
                "updateStrategy": {
                    "type": "string",
                    "description": "The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.\n\n* `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.\n\n* `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).\n"
                }
            },
            "required": [
                "clusterId",
                "diskEncryption",
                "k8sVersion",
                "labels",
                "nodeCount",
                "nodes",
                "tags",
                "type",
                "updateStrategy"
            ],
            "inputProperties": {
                "autoscaler": {
                    "$ref": "#/types/linode:index/LkeNodePoolAutoscaler:LkeNodePoolAutoscaler"
                },
                "clusterId": {
                    "type": "integer",
                    "description": "ID of the LKE Cluster where to create the current Node Pool.\n"
                },
                "k8sVersion": {
                    "type": "string",
                    "description": "The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/LkeNodePoolTaint:LkeNodePoolTaint"
                    },
                    "description": "Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically\nallowing them to repel certain pods.\n"
                },
                "type": {
                    "type": "string",
                    "description": "A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                },
                "updateStrategy": {
                    "type": "string",
                    "description": "The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.\n\n* `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.\n\n* `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LkeNodePool resources.\n",
                "properties": {
                    "autoscaler": {
                        "$ref": "#/types/linode:index/LkeNodePoolAutoscaler:LkeNodePoolAutoscaler"
                    },
                    "clusterId": {
                        "type": "integer",
                        "description": "ID of the LKE Cluster where to create the current Node Pool.\n"
                    },
                    "diskEncryption": {
                        "type": "string",
                        "description": "The disk encryption policy for nodes in this pool.\n"
                    },
                    "k8sVersion": {
                        "type": "string",
                        "description": "The k8s version of the nodes in this node pool. For LKE enterprise only and may not currently available to all users even under v4beta.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map attribute containing key-value pairs to be added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).\n"
                    },
                    "nodeCount": {
                        "type": "integer",
                        "description": "The number of nodes in the Node Pool. If undefined with an autoscaler the initial node count will equal the autoscaler minimum.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/LkeNodePoolNode:LkeNodePoolNode"
                        },
                        "description": "A list of nodes in the node pool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of tags applied to the Node Pool. Tags can be used to flag node pools as externally managed, see Externally Managed Node Pools for more details.\n"
                    },
                    "taints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/LkeNodePoolTaint:LkeNodePoolTaint"
                        },
                        "description": "Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically\nallowing them to repel certain pods.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A Linode Type for all nodes in the Node Pool. See all node types [here](https://api.linode.com/v4/linode/types).\n"
                    },
                    "updateStrategy": {
                        "type": "string",
                        "description": "The strategy for updating the node pool k8s version. For LKE enterprise only and may not currently available to all users even under v4beta.\n\n* `autoscaler` - (Optional) If defined, an autoscaler will be enabled with the given configuration.\n\n* `taint` - (Optional) Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods. To learn more, review [Add Labels and Taints to your LKE Node Pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/networkingIp:NetworkingIp": {
            "description": "Manages allocation of reserved IPv4 address in a region and optionally assigning the reserved address to a Linode instance.\n\nFor more information, see the corresponding [API documentation](https://techdocs.akamai.com/linode-api/reference/post-allocate-ip).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst testIp = new linode.NetworkingIp(\"test_ip\", {\n    type: \"ipv4\",\n    linodeId: 12345,\n    \"public\": true,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ntest_ip = linode.NetworkingIp(\"test_ip\",\n    type=\"ipv4\",\n    linode_id=12345,\n    public=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testIp = new Linode.NetworkingIp(\"test_ip\", new()\n    {\n        Type = \"ipv4\",\n        LinodeId = 12345,\n        Public = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewNetworkingIp(ctx, \"test_ip\", \u0026linode.NetworkingIpArgs{\n\t\t\tType:     pulumi.String(\"ipv4\"),\n\t\t\tLinodeId: pulumi.Int(12345),\n\t\t\tPublic:   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.NetworkingIp;\nimport com.pulumi.linode.NetworkingIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testIp = new NetworkingIp(\"testIp\", NetworkingIpArgs.builder()\n            .type(\"ipv4\")\n            .linodeId(12345)\n            .public_(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testIp:\n    type: linode:NetworkingIp\n    name: test_ip\n    properties:\n      type: ipv4\n      linodeId: 12345\n      public: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nIP addresses can be imported using the IP address ID, e.g.\n\n```sh\n$ pulumi import linode:index/networkingIp:NetworkingIp example_ip 172.104.30.209\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address that is configured as a 1:1 NAT for this VPC interface.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to which the IP address will be assigned. Updating this field on an ephemeral IP will trigger a recreation. Conflicts with `region`.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The number of bits set in the subnet mask.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IP address is public. Defaults to true.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the reserved IPv4 address. Required when reserved is true and linode_id is not set.\n"
                },
                "reserved": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address should be reserved.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The mask that separates host bits from network bits for this address.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of IP address. (ipv4, ipv6, etc.)\n"
                },
                "vpcNat11": {
                    "$ref": "#/types/linode:index/NetworkingIpVpcNat11:NetworkingIpVpcNat11",
                    "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                }
            },
            "required": [
                "address",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "reserved",
                "subnetMask",
                "type",
                "vpcNat11"
            ],
            "inputProperties": {
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to which the IP address will be assigned. Updating this field on an ephemeral IP will trigger a recreation. Conflicts with `region`.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IP address is public. Defaults to true.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region for the reserved IPv4 address. Required when reserved is true and linode_id is not set.\n"
                },
                "reserved": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address should be reserved.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of IP address. (ipv4, ipv6, etc.)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkingIp resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address that is configured as a 1:1 NAT for this VPC interface.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The default gateway for this address.\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to which the IP address will be assigned. Updating this field on an ephemeral IP will trigger a recreation. Conflicts with `region`.\n"
                    },
                    "prefix": {
                        "type": "integer",
                        "description": "The number of bits set in the subnet mask.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the IP address is public. Defaults to true.\n"
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the reserved IPv4 address. Required when reserved is true and linode_id is not set.\n"
                    },
                    "reserved": {
                        "type": "boolean",
                        "description": "Whether the IPv4 address should be reserved.\n"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "The mask that separates host bits from network bits for this address.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of IP address. (ipv4, ipv6, etc.)\n"
                    },
                    "vpcNat11": {
                        "$ref": "#/types/linode:index/NetworkingIpVpcNat11:NetworkingIpVpcNat11",
                        "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/networkingIpAssignment:NetworkingIpAssignment": {
            "description": "Manages the assignment of multiple IPv4 addresses and/or IPv6 ranges to multiple Linodes in a specified region.\n\nFor more information, see the corresponding [API documentation](https://techdocs.akamai.com/linode-api/reference/post-assign-ips).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  foobar:\n    type: linode:NetworkingIpAssignment\n    properties:\n      region: us-mia\n      assignments:\n        - address: ${reservedIp1.address}\n          linode_id: ${[\"terraform-web1\"].id}\n        - address: ${reservedIp2.address}\n          linode_id: ${[\"terraform-web2\"].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNetwork IP assignments cannot be imported.\n\n",
            "properties": {
                "assignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NetworkingIpAssignmentAssignment:NetworkingIpAssignmentAssignment"
                    },
                    "description": "A list of IP/Linode assignments to apply.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the IP addresses will be assigned.\n"
                }
            },
            "required": [
                "region"
            ],
            "inputProperties": {
                "assignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NetworkingIpAssignmentAssignment:NetworkingIpAssignmentAssignment"
                    },
                    "description": "A list of IP/Linode assignments to apply.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the IP addresses will be assigned.\n"
                }
            },
            "requiredInputs": [
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkingIpAssignment resources.\n",
                "properties": {
                    "assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/NetworkingIpAssignmentAssignment:NetworkingIpAssignmentAssignment"
                        },
                        "description": "A list of IP/Linode assignments to apply.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where the IP addresses will be assigned.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/nodeBalancer:NodeBalancer": {
            "description": "Provides a Linode NodeBalancer resource.  This can be used to create, modify, and delete Linodes NodeBalancers in Linode's managed load balancer service.\nFor more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-node-balancer).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a NodeBalancer.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.NodeBalancer(\"foobar\", {\n    label: \"mynodebalancer\",\n    region: \"us-east\",\n    clientConnThrottle: 20,\n    tags: [\"foobar\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.NodeBalancer(\"foobar\",\n    label=\"mynodebalancer\",\n    region=\"us-east\",\n    client_conn_throttle=20,\n    tags=[\"foobar\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.NodeBalancer(\"foobar\", new()\n    {\n        Label = \"mynodebalancer\",\n        Region = \"us-east\",\n        ClientConnThrottle = 20,\n        Tags = new[]\n        {\n            \"foobar\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewNodeBalancer(ctx, \"foobar\", \u0026linode.NodeBalancerArgs{\n\t\t\tLabel:              pulumi.String(\"mynodebalancer\"),\n\t\t\tRegion:             pulumi.String(\"us-east\"),\n\t\t\tClientConnThrottle: pulumi.Int(20),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foobar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.NodeBalancer;\nimport com.pulumi.linode.NodeBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new NodeBalancer(\"foobar\", NodeBalancerArgs.builder()\n            .label(\"mynodebalancer\")\n            .region(\"us-east\")\n            .clientConnThrottle(20)\n            .tags(\"foobar\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:NodeBalancer\n    properties:\n      label: mynodebalancer\n      region: us-east\n      clientConnThrottle: 20\n      tags:\n        - foobar\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes NodeBalancers can be imported using the Linode NodeBalancer `id`, e.g.\n\n```sh\n$ pulumi import linode:index/nodeBalancer:NodeBalancer mynodebalancer 1234567\n```\n\n",
            "properties": {
                "clientConnThrottle": {
                    "type": "integer",
                    "description": "Throttle connections per second (0-20). Set to 0 (default) to disable throttling.\n"
                },
                "created": {
                    "type": "string",
                    "description": "When this firewall was created.\n"
                },
                "firewallId": {
                    "type": "integer",
                    "description": "ID for the firewall you'd like to use with this NodeBalancer.\n"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerFirewall:NodeBalancerFirewall"
                    },
                    "description": "A list of Firewalls assigned to this NodeBalancer.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "This NodeBalancer's hostname, ending with .nodebalancer.linode.com\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this NodeBalancer will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).  *Changing `region` forces the creation of a new Linode NodeBalancer.*.\n\n- - -\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerTransfer:NodeBalancerTransfer"
                    },
                    "description": "Information about the amount of transfer this NodeBalancer has had so far this month.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "When this firewall was last updated.\n"
                }
            },
            "required": [
                "clientConnThrottle",
                "created",
                "firewalls",
                "hostname",
                "ipv4",
                "ipv6",
                "region",
                "tags",
                "transfers",
                "updated"
            ],
            "inputProperties": {
                "clientConnThrottle": {
                    "type": "integer",
                    "description": "Throttle connections per second (0-20). Set to 0 (default) to disable throttling.\n"
                },
                "firewallId": {
                    "type": "integer",
                    "description": "ID for the firewall you'd like to use with this NodeBalancer.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this NodeBalancer will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).  *Changing `region` forces the creation of a new Linode NodeBalancer.*.\n\n- - -\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeBalancer resources.\n",
                "properties": {
                    "clientConnThrottle": {
                        "type": "integer",
                        "description": "Throttle connections per second (0-20). Set to 0 (default) to disable throttling.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "When this firewall was created.\n"
                    },
                    "firewallId": {
                        "type": "integer",
                        "description": "ID for the firewall you'd like to use with this NodeBalancer.\n"
                    },
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/NodeBalancerFirewall:NodeBalancerFirewall"
                        },
                        "description": "A list of Firewalls assigned to this NodeBalancer.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "This NodeBalancer's hostname, ending with .nodebalancer.linode.com\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode NodeBalancer\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where this NodeBalancer will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions).  *Changing `region` forces the creation of a new Linode NodeBalancer.*.\n\n- - -\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                    },
                    "transfers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/NodeBalancerTransfer:NodeBalancerTransfer"
                        },
                        "description": "Information about the amount of transfer this NodeBalancer has had so far this month.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "When this firewall was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/nodeBalancerConfig:NodeBalancerConfig": {
            "description": "Provides a Linode NodeBalancer Config resource.  This can be used to create, modify, and delete Linodes NodeBalancer Configs.\nFor more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-node-balancer-config).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a NodeBalancer Config attached to a Linode instance.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.NodeBalancer(\"foobar\", {\n    label: \"mynodebalancer\",\n    region: \"us-east\",\n    clientConnThrottle: 20,\n});\nconst foofig = new linode.NodeBalancerConfig(\"foofig\", {\n    nodebalancerId: foobar.id,\n    port: 8088,\n    protocol: \"http\",\n    check: \"http\",\n    checkPath: \"/foo\",\n    checkAttempts: 3,\n    checkTimeout: 30,\n    stickiness: \"http_cookie\",\n    algorithm: \"source\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.NodeBalancer(\"foobar\",\n    label=\"mynodebalancer\",\n    region=\"us-east\",\n    client_conn_throttle=20)\nfoofig = linode.NodeBalancerConfig(\"foofig\",\n    nodebalancer_id=foobar.id,\n    port=8088,\n    protocol=\"http\",\n    check=\"http\",\n    check_path=\"/foo\",\n    check_attempts=3,\n    check_timeout=30,\n    stickiness=\"http_cookie\",\n    algorithm=\"source\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.NodeBalancer(\"foobar\", new()\n    {\n        Label = \"mynodebalancer\",\n        Region = \"us-east\",\n        ClientConnThrottle = 20,\n    });\n\n    var foofig = new Linode.NodeBalancerConfig(\"foofig\", new()\n    {\n        NodebalancerId = foobar.Id,\n        Port = 8088,\n        Protocol = \"http\",\n        Check = \"http\",\n        CheckPath = \"/foo\",\n        CheckAttempts = 3,\n        CheckTimeout = 30,\n        Stickiness = \"http_cookie\",\n        Algorithm = \"source\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := linode.NewNodeBalancer(ctx, \"foobar\", \u0026linode.NodeBalancerArgs{\n\t\t\tLabel:              pulumi.String(\"mynodebalancer\"),\n\t\t\tRegion:             pulumi.String(\"us-east\"),\n\t\t\tClientConnThrottle: pulumi.Int(20),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewNodeBalancerConfig(ctx, \"foofig\", \u0026linode.NodeBalancerConfigArgs{\n\t\t\tNodebalancerId: foobar.ID(),\n\t\t\tPort:           pulumi.Int(8088),\n\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t\tCheck:          pulumi.String(\"http\"),\n\t\t\tCheckPath:      pulumi.String(\"/foo\"),\n\t\t\tCheckAttempts:  pulumi.Int(3),\n\t\t\tCheckTimeout:   pulumi.Int(30),\n\t\t\tStickiness:     pulumi.String(\"http_cookie\"),\n\t\t\tAlgorithm:      pulumi.String(\"source\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.NodeBalancer;\nimport com.pulumi.linode.NodeBalancerArgs;\nimport com.pulumi.linode.NodeBalancerConfig;\nimport com.pulumi.linode.NodeBalancerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new NodeBalancer(\"foobar\", NodeBalancerArgs.builder()\n            .label(\"mynodebalancer\")\n            .region(\"us-east\")\n            .clientConnThrottle(20)\n            .build());\n\n        var foofig = new NodeBalancerConfig(\"foofig\", NodeBalancerConfigArgs.builder()\n            .nodebalancerId(foobar.id())\n            .port(8088)\n            .protocol(\"http\")\n            .check(\"http\")\n            .checkPath(\"/foo\")\n            .checkAttempts(3)\n            .checkTimeout(30)\n            .stickiness(\"http_cookie\")\n            .algorithm(\"source\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:NodeBalancer\n    properties:\n      label: mynodebalancer\n      region: us-east\n      clientConnThrottle: 20\n  foofig:\n    type: linode:NodeBalancerConfig\n    properties:\n      nodebalancerId: ${foobar.id}\n      port: 8088\n      protocol: http\n      check: http\n      checkPath: /foo\n      checkAttempts: 3\n      checkTimeout: 30\n      stickiness: http_cookie\n      algorithm: source\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNodeBalancer Configs can be imported using the NodeBalancer `nodebalancer_id` followed by the NodeBalancer Config `id` separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/nodeBalancerConfig:NodeBalancerConfig http-foobar 1234567,7654321\n```\n\n",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)\n"
                },
                "check": {
                    "type": "string",
                    "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                },
                "checkAttempts": {
                    "type": "integer",
                    "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                },
                "checkBody": {
                    "type": "string",
                    "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in\nthe response body of a check request, the backend is considered to be down\n"
                },
                "checkInterval": {
                    "type": "integer",
                    "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                },
                "checkPassive": {
                    "type": "boolean",
                    "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                },
                "checkPath": {
                    "type": "string",
                    "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                },
                "checkTimeout": {
                    "type": "integer",
                    "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                },
                "cipherSuite": {
                    "type": "string",
                    "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.\n"
                },
                "nodeStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/NodeBalancerConfigNodeStatus:NodeBalancerConfigNodeStatus"
                    },
                    "description": "A structure containing information about the health of the backends for this port. This information is updated\nperiodically as checks are performed against backends.\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n\n- - -\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)\n"
                },
                "sslCert": {
                    "type": "string",
                    "description": "The certificate this port is serving. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "sslCommonname": {
                    "type": "string",
                    "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                },
                "sslFingerprint": {
                    "type": "string",
                    "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                },
                "sslKey": {
                    "type": "string",
                    "description": "The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "stickiness": {
                    "type": "string",
                    "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                }
            },
            "required": [
                "algorithm",
                "check",
                "checkAttempts",
                "checkBody",
                "checkInterval",
                "checkPassive",
                "checkPath",
                "checkTimeout",
                "cipherSuite",
                "nodeStatuses",
                "nodebalancerId",
                "port",
                "protocol",
                "proxyProtocol",
                "sslCommonname",
                "sslFingerprint",
                "stickiness"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)\n"
                },
                "check": {
                    "type": "string",
                    "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                },
                "checkAttempts": {
                    "type": "integer",
                    "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                },
                "checkBody": {
                    "type": "string",
                    "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in\nthe response body of a check request, the backend is considered to be down\n"
                },
                "checkInterval": {
                    "type": "integer",
                    "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                },
                "checkPassive": {
                    "type": "boolean",
                    "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                },
                "checkPath": {
                    "type": "string",
                    "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                },
                "checkTimeout": {
                    "type": "integer",
                    "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                },
                "cipherSuite": {
                    "type": "string",
                    "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n\n- - -\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                },
                "proxyProtocol": {
                    "type": "string",
                    "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)\n"
                },
                "sslCert": {
                    "type": "string",
                    "description": "The certificate this port is serving. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "sslKey": {
                    "type": "string",
                    "description": "The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                    "secret": true
                },
                "stickiness": {
                    "type": "string",
                    "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                }
            },
            "requiredInputs": [
                "nodebalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeBalancerConfig resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "What algorithm this NodeBalancer should use for routing traffic to backends. (`roundrobin`, `leastconn`, `source`)\n"
                    },
                    "check": {
                        "type": "string",
                        "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n"
                    },
                    "checkAttempts": {
                        "type": "integer",
                        "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n"
                    },
                    "checkBody": {
                        "type": "string",
                        "description": "This value must be present in the response body of the check in order for it to pass. If this value is not present in\nthe response body of a check request, the backend is considered to be down\n"
                    },
                    "checkInterval": {
                        "type": "integer",
                        "description": "How often, in seconds, to check that backends are up and serving requests.\n"
                    },
                    "checkPassive": {
                        "type": "boolean",
                        "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n"
                    },
                    "checkPath": {
                        "type": "string",
                        "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n"
                    },
                    "checkTimeout": {
                        "type": "integer",
                        "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n"
                    },
                    "cipherSuite": {
                        "type": "string",
                        "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.\n"
                    },
                    "nodeStatuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/NodeBalancerConfigNodeStatus:NodeBalancerConfigNodeStatus"
                        },
                        "description": "A structure containing information about the health of the backends for this port. This information is updated\nperiodically as checks are performed against backends.\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer to access.\n\n- - -\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443. (Defaults to 80)\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n"
                    },
                    "proxyProtocol": {
                        "type": "string",
                        "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, `v2`) (Defaults to `none`)\n"
                    },
                    "sslCert": {
                        "type": "string",
                        "description": "The certificate this port is serving. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                        "secret": true
                    },
                    "sslCommonname": {
                        "type": "string",
                        "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                    },
                    "sslFingerprint": {
                        "type": "string",
                        "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n"
                    },
                    "sslKey": {
                        "type": "string",
                        "description": "The private key corresponding to this port's certificate. This is not returned. If set, this field will come back as `\u003cREDACTED\u003e`. Please use the ssl_commonname and ssl_fingerprint to identify the certificate.\n",
                        "secret": true
                    },
                    "stickiness": {
                        "type": "string",
                        "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/nodeBalancerNode:NodeBalancerNode": {
            "description": "Provides a Linode NodeBalancer Node resource.  This can be used to create, modify, and delete Linodes NodeBalancer Nodes.\nFor more information, see [Getting Started with NodeBalancers](https://www.linode.com/docs/platform/nodebalancer/getting-started-with-nodebalancers/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-node-balancer-node).\n\n## Import\n\nNodeBalancer Nodes can be imported using the NodeBalancer `nodebalancer_id` followed by the NodeBalancer Config `config_id` followed by the NodeBalancer Node `id`, separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/nodeBalancerNode:NodeBalancerNode https-foobar-1 1234567,7654321,9999999\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The private IP Address where this backend can be reached. This must be a private IP address.\n\n- - -\n"
                },
                "configId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancerConfig to access.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                }
            },
            "required": [
                "address",
                "configId",
                "label",
                "mode",
                "nodebalancerId",
                "status",
                "weight"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The private IP Address where this backend can be reached. This must be a private IP address.\n\n- - -\n"
                },
                "configId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancerConfig to access.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                },
                "nodebalancerId": {
                    "type": "integer",
                    "description": "The ID of the NodeBalancer to access.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                }
            },
            "requiredInputs": [
                "address",
                "configId",
                "label",
                "nodebalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeBalancerNode resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The private IP Address where this backend can be reached. This must be a private IP address.\n\n- - -\n"
                    },
                    "configId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancerConfig to access.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer to access.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/objectStorageBucket:ObjectStorageBucket": {
            "description": "Provides a Linode Object Storage Bucket resource. This can be used to create, modify, and delete Linodes Object Storage Buckets.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-object-storage-bucket).\n\n## Example Usage\n\nThe following example shows how one might use this resource to create an Object Storage Bucket:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.ObjectStorageBucket(\"foobar\", {\n    region: \"us-mia\",\n    label: \"mybucket\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.ObjectStorageBucket(\"foobar\",\n    region=\"us-mia\",\n    label=\"mybucket\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.ObjectStorageBucket(\"foobar\", new()\n    {\n        Region = \"us-mia\",\n        Label = \"mybucket\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageBucket(ctx, \"foobar\", \u0026linode.ObjectStorageBucketArgs{\n\t\t\tRegion: pulumi.String(\"us-mia\"),\n\t\t\tLabel:  pulumi.String(\"mybucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageBucket;\nimport com.pulumi.linode.ObjectStorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new ObjectStorageBucket(\"foobar\", ObjectStorageBucketArgs.builder()\n            .region(\"us-mia\")\n            .label(\"mybucket\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:ObjectStorageBucket\n    properties:\n      region: us-mia\n      label: mybucket\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating an Object Storage Bucket with Lifecycle rules:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mykey = new linode.ObjectStorageKey(\"mykey\", {label: \"image-access\"});\nconst mybucket = new linode.ObjectStorageBucket(\"mybucket\", {\n    accessKey: mykey.accessKey,\n    secretKey: mykey.secretKey,\n    region: \"us-mia\",\n    label: \"mybucket\",\n    lifecycleRules: [{\n        id: \"my-rule\",\n        enabled: true,\n        abortIncompleteMultipartUploadDays: 5,\n        expiration: {\n            date: \"2021-06-21\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmykey = linode.ObjectStorageKey(\"mykey\", label=\"image-access\")\nmybucket = linode.ObjectStorageBucket(\"mybucket\",\n    access_key=mykey.access_key,\n    secret_key=mykey.secret_key,\n    region=\"us-mia\",\n    label=\"mybucket\",\n    lifecycle_rules=[{\n        \"id\": \"my-rule\",\n        \"enabled\": True,\n        \"abort_incomplete_multipart_upload_days\": 5,\n        \"expiration\": {\n            \"date\": \"2021-06-21\",\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mykey = new Linode.ObjectStorageKey(\"mykey\", new()\n    {\n        Label = \"image-access\",\n    });\n\n    var mybucket = new Linode.ObjectStorageBucket(\"mybucket\", new()\n    {\n        AccessKey = mykey.AccessKey,\n        SecretKey = mykey.SecretKey,\n        Region = \"us-mia\",\n        Label = \"mybucket\",\n        LifecycleRules = new[]\n        {\n            new Linode.Inputs.ObjectStorageBucketLifecycleRuleArgs\n            {\n                Id = \"my-rule\",\n                Enabled = true,\n                AbortIncompleteMultipartUploadDays = 5,\n                Expiration = new Linode.Inputs.ObjectStorageBucketLifecycleRuleExpirationArgs\n                {\n                    Date = \"2021-06-21\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmykey, err := linode.NewObjectStorageKey(ctx, \"mykey\", \u0026linode.ObjectStorageKeyArgs{\n\t\t\tLabel: pulumi.String(\"image-access\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewObjectStorageBucket(ctx, \"mybucket\", \u0026linode.ObjectStorageBucketArgs{\n\t\t\tAccessKey: mykey.AccessKey,\n\t\t\tSecretKey: mykey.SecretKey,\n\t\t\tRegion:    pulumi.String(\"us-mia\"),\n\t\t\tLabel:     pulumi.String(\"mybucket\"),\n\t\t\tLifecycleRules: linode.ObjectStorageBucketLifecycleRuleArray{\n\t\t\t\t\u0026linode.ObjectStorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:                                 pulumi.String(\"my-rule\"),\n\t\t\t\t\tEnabled:                            pulumi.Bool(true),\n\t\t\t\t\tAbortIncompleteMultipartUploadDays: pulumi.Int(5),\n\t\t\t\t\tExpiration: \u0026linode.ObjectStorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDate: pulumi.String(\"2021-06-21\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageKey;\nimport com.pulumi.linode.ObjectStorageKeyArgs;\nimport com.pulumi.linode.ObjectStorageBucket;\nimport com.pulumi.linode.ObjectStorageBucketArgs;\nimport com.pulumi.linode.inputs.ObjectStorageBucketLifecycleRuleArgs;\nimport com.pulumi.linode.inputs.ObjectStorageBucketLifecycleRuleExpirationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mykey = new ObjectStorageKey(\"mykey\", ObjectStorageKeyArgs.builder()\n            .label(\"image-access\")\n            .build());\n\n        var mybucket = new ObjectStorageBucket(\"mybucket\", ObjectStorageBucketArgs.builder()\n            .accessKey(mykey.accessKey())\n            .secretKey(mykey.secretKey())\n            .region(\"us-mia\")\n            .label(\"mybucket\")\n            .lifecycleRules(ObjectStorageBucketLifecycleRuleArgs.builder()\n                .id(\"my-rule\")\n                .enabled(true)\n                .abortIncompleteMultipartUploadDays(5)\n                .expiration(ObjectStorageBucketLifecycleRuleExpirationArgs.builder()\n                    .date(\"2021-06-21\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mykey:\n    type: linode:ObjectStorageKey\n    properties:\n      label: image-access\n  mybucket:\n    type: linode:ObjectStorageBucket\n    properties:\n      accessKey: ${mykey.accessKey}\n      secretKey: ${mykey.secretKey}\n      region: us-mia\n      label: mybucket\n      lifecycleRules:\n        - id: my-rule\n          enabled: true\n          abortIncompleteMultipartUploadDays: 5\n          expiration:\n            date: 2021-06-21\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating an Object Storage Bucket with Lifecycle rules using provider-level object credentials\n\n## Import\n\nLinodes Object Storage Buckets can be imported using the resource `id` which is made of `cluster:label`, e.g.\n\n```sh\n$ pulumi import linode:index/objectStorageBucket:ObjectStorageBucket mybucket us-east-1:foobar\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to authenticate with. If not specified with the resource, its value can be\n* configured by `obj_access_key` in the provider configuration;\n* or, generated implicitly at apply-time if `obj_use_temp_keys` at provider-level is set.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://techdocs.akamai.com/linode-api/reference/post-object-storage-bucket).\n"
                },
                "cert": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert",
                    "description": "The cert used by this Object Storage Bucket.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster of the Linode Object Storage Bucket. This is deprecated in favor of `region` attribute.\nFor example, `us-mia-1` cluster can be translated into `us-mia` region. Exactly one of `region` and `cluster` is required for creating a bucket.\n",
                    "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`."
                },
                "corsEnabled": {
                    "type": "boolean",
                    "description": "If true, the bucket will have CORS enabled for all origins.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint for the bucket used for s3 connections.\n",
                    "deprecationMessage": "Use `s3_endpoint` instead"
                },
                "endpointType": {
                    "type": "string",
                    "description": "The type of `s3_endpoint` available to the user in this region. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made\npublic.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Object Storage Bucket.\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule"
                    },
                    "description": "Lifecycle rules to be applied to the bucket.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the Linode Object Storage Bucket. Exactly one of `region` and `cluster` is required for creating a bucket.\n"
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "The user's s3 endpoint URL, based on the `endpoint_type` and `region`.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to authenticate with. If not specified with the resource, its value can be\n* configured by `obj_secret_key` in the provider configuration;\n* or, generated implicitly at apply-time if `obj_use_temp_keys` at provider-level is set.\n",
                    "secret": true
                },
                "versioning": {
                    "type": "boolean",
                    "description": "Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)\n\n* `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)\n\n* `cert` - (Optional) The bucket's TLS/SSL certificate.\n"
                }
            },
            "required": [
                "cluster",
                "corsEnabled",
                "endpoint",
                "endpointType",
                "hostname",
                "label",
                "region",
                "s3Endpoint",
                "versioning"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to authenticate with. If not specified with the resource, its value can be\n* configured by `obj_access_key` in the provider configuration;\n* or, generated implicitly at apply-time if `obj_use_temp_keys` at provider-level is set.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://techdocs.akamai.com/linode-api/reference/post-object-storage-bucket).\n"
                },
                "cert": {
                    "$ref": "#/types/linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert",
                    "description": "The cert used by this Object Storage Bucket.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster of the Linode Object Storage Bucket. This is deprecated in favor of `region` attribute.\nFor example, `us-mia-1` cluster can be translated into `us-mia` region. Exactly one of `region` and `cluster` is required for creating a bucket.\n",
                    "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`.",
                    "willReplaceOnChanges": true
                },
                "corsEnabled": {
                    "type": "boolean",
                    "description": "If true, the bucket will have CORS enabled for all origins.\n"
                },
                "endpointType": {
                    "type": "string",
                    "description": "The type of `s3_endpoint` available to the user in this region. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Object Storage Bucket.\n",
                    "willReplaceOnChanges": true
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule"
                    },
                    "description": "Lifecycle rules to be applied to the bucket.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the Linode Object Storage Bucket. Exactly one of `region` and `cluster` is required for creating a bucket.\n",
                    "willReplaceOnChanges": true
                },
                "s3Endpoint": {
                    "type": "string",
                    "description": "The user's s3 endpoint URL, based on the `endpoint_type` and `region`.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to authenticate with. If not specified with the resource, its value can be\n* configured by `obj_secret_key` in the provider configuration;\n* or, generated implicitly at apply-time if `obj_use_temp_keys` at provider-level is set.\n",
                    "secret": true
                },
                "versioning": {
                    "type": "boolean",
                    "description": "Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)\n\n* `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)\n\n* `cert` - (Optional) The bucket's TLS/SSL certificate.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorageBucket resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key to authenticate with. If not specified with the resource, its value can be\n* configured by `obj_access_key` in the provider configuration;\n* or, generated implicitly at apply-time if `obj_use_temp_keys` at provider-level is set.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The Access Control Level of the bucket using a canned ACL string. See all ACL strings [in the Linode API v4 documentation](https://techdocs.akamai.com/linode-api/reference/post-object-storage-bucket).\n"
                    },
                    "cert": {
                        "$ref": "#/types/linode:index/ObjectStorageBucketCert:ObjectStorageBucketCert",
                        "description": "The cert used by this Object Storage Bucket.\n"
                    },
                    "cluster": {
                        "type": "string",
                        "description": "The cluster of the Linode Object Storage Bucket. This is deprecated in favor of `region` attribute.\nFor example, `us-mia-1` cluster can be translated into `us-mia` region. Exactly one of `region` and `cluster` is required for creating a bucket.\n",
                        "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`.",
                        "willReplaceOnChanges": true
                    },
                    "corsEnabled": {
                        "type": "boolean",
                        "description": "If true, the bucket will have CORS enabled for all origins.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint for the bucket used for s3 connections.\n",
                        "deprecationMessage": "Use `s3_endpoint` instead"
                    },
                    "endpointType": {
                        "type": "string",
                        "description": "The type of `s3_endpoint` available to the user in this region. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made\npublic.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode Object Storage Bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ObjectStorageBucketLifecycleRule:ObjectStorageBucketLifecycleRule"
                        },
                        "description": "Lifecycle rules to be applied to the bucket.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the Linode Object Storage Bucket. Exactly one of `region` and `cluster` is required for creating a bucket.\n",
                        "willReplaceOnChanges": true
                    },
                    "s3Endpoint": {
                        "type": "string",
                        "description": "The user's s3 endpoint URL, based on the `endpoint_type` and `region`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key to authenticate with. If not specified with the resource, its value can be\n* configured by `obj_secret_key` in the provider configuration;\n* or, generated implicitly at apply-time if `obj_use_temp_keys` at provider-level is set.\n",
                        "secret": true
                    },
                    "versioning": {
                        "type": "boolean",
                        "description": "Whether to enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket. (Requires `access_key` and `secret_key`)\n\n* `lifecycle_rule` - (Optional) Lifecycle rules to be applied to the bucket. (Requires `access_key` and `secret_key`)\n\n* `cert` - (Optional) The bucket's TLS/SSL certificate.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/objectStorageKey:ObjectStorageKey": {
            "description": "Provides a Linode Object Storage Key resource. This can be used to create, modify, and delete Linodes Object Storage Keys.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-object-storage-keys).\n\n## Example Usage\n\nThe following example shows how one might use this resource to create an Object Storage Key.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.ObjectStorageKey(\"foo\", {label: \"image-access\"});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.ObjectStorageKey(\"foo\", label=\"image-access\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.ObjectStorageKey(\"foo\", new()\n    {\n        Label = \"image-access\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageKey(ctx, \"foo\", \u0026linode.ObjectStorageKeyArgs{\n\t\t\tLabel: pulumi.String(\"image-access\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageKey;\nimport com.pulumi.linode.ObjectStorageKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ObjectStorageKey(\"foo\", ObjectStorageKeyArgs.builder()\n            .label(\"image-access\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:ObjectStorageKey\n    properties:\n      label: image-access\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following example shows a key with limited access.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.ObjectStorageKey(\"foobar\", {\n    label: \"my-key\",\n    bucketAccesses: [{\n        bucketName: \"my-bucket-name\",\n        region: \"us-mia\",\n        permissions: \"read_write\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.ObjectStorageKey(\"foobar\",\n    label=\"my-key\",\n    bucket_accesses=[{\n        \"bucket_name\": \"my-bucket-name\",\n        \"region\": \"us-mia\",\n        \"permissions\": \"read_write\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.ObjectStorageKey(\"foobar\", new()\n    {\n        Label = \"my-key\",\n        BucketAccesses = new[]\n        {\n            new Linode.Inputs.ObjectStorageKeyBucketAccessArgs\n            {\n                BucketName = \"my-bucket-name\",\n                Region = \"us-mia\",\n                Permissions = \"read_write\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageKey(ctx, \"foobar\", \u0026linode.ObjectStorageKeyArgs{\n\t\t\tLabel: pulumi.String(\"my-key\"),\n\t\t\tBucketAccesses: linode.ObjectStorageKeyBucketAccessArray{\n\t\t\t\t\u0026linode.ObjectStorageKeyBucketAccessArgs{\n\t\t\t\t\tBucketName:  pulumi.String(\"my-bucket-name\"),\n\t\t\t\t\tRegion:      pulumi.String(\"us-mia\"),\n\t\t\t\t\tPermissions: pulumi.String(\"read_write\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageKey;\nimport com.pulumi.linode.ObjectStorageKeyArgs;\nimport com.pulumi.linode.inputs.ObjectStorageKeyBucketAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new ObjectStorageKey(\"foobar\", ObjectStorageKeyArgs.builder()\n            .label(\"my-key\")\n            .bucketAccesses(ObjectStorageKeyBucketAccessArgs.builder()\n                .bucketName(\"my-bucket-name\")\n                .region(\"us-mia\")\n                .permissions(\"read_write\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:ObjectStorageKey\n    properties:\n      label: my-key\n      bucketAccesses:\n        - bucketName: my-bucket-name\n          region: us-mia\n          permissions: read_write\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following example shows how to grant a key the explicit access to multiple buckets.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.ObjectStorageKey(\"foo\", {\n    label: \"image-access\",\n    bucketAccesses: [\n        {\n            bucketName: \"foobar1\",\n            region: \"us-mia\",\n            permissions: \"read_write\",\n        },\n        {\n            bucketName: \"foobar2\",\n            region: \"gb-lon\",\n            permissions: \"read_write\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.ObjectStorageKey(\"foo\",\n    label=\"image-access\",\n    bucket_accesses=[\n        {\n            \"bucket_name\": \"foobar1\",\n            \"region\": \"us-mia\",\n            \"permissions\": \"read_write\",\n        },\n        {\n            \"bucket_name\": \"foobar2\",\n            \"region\": \"gb-lon\",\n            \"permissions\": \"read_write\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.ObjectStorageKey(\"foo\", new()\n    {\n        Label = \"image-access\",\n        BucketAccesses = new[]\n        {\n            new Linode.Inputs.ObjectStorageKeyBucketAccessArgs\n            {\n                BucketName = \"foobar1\",\n                Region = \"us-mia\",\n                Permissions = \"read_write\",\n            },\n            new Linode.Inputs.ObjectStorageKeyBucketAccessArgs\n            {\n                BucketName = \"foobar2\",\n                Region = \"gb-lon\",\n                Permissions = \"read_write\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageKey(ctx, \"foo\", \u0026linode.ObjectStorageKeyArgs{\n\t\t\tLabel: pulumi.String(\"image-access\"),\n\t\t\tBucketAccesses: linode.ObjectStorageKeyBucketAccessArray{\n\t\t\t\t\u0026linode.ObjectStorageKeyBucketAccessArgs{\n\t\t\t\t\tBucketName:  pulumi.String(\"foobar1\"),\n\t\t\t\t\tRegion:      pulumi.String(\"us-mia\"),\n\t\t\t\t\tPermissions: pulumi.String(\"read_write\"),\n\t\t\t\t},\n\t\t\t\t\u0026linode.ObjectStorageKeyBucketAccessArgs{\n\t\t\t\t\tBucketName:  pulumi.String(\"foobar2\"),\n\t\t\t\t\tRegion:      pulumi.String(\"gb-lon\"),\n\t\t\t\t\tPermissions: pulumi.String(\"read_write\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageKey;\nimport com.pulumi.linode.ObjectStorageKeyArgs;\nimport com.pulumi.linode.inputs.ObjectStorageKeyBucketAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ObjectStorageKey(\"foo\", ObjectStorageKeyArgs.builder()\n            .label(\"image-access\")\n            .bucketAccesses(            \n                ObjectStorageKeyBucketAccessArgs.builder()\n                    .bucketName(\"foobar1\")\n                    .region(\"us-mia\")\n                    .permissions(\"read_write\")\n                    .build(),\n                ObjectStorageKeyBucketAccessArgs.builder()\n                    .bucketName(\"foobar2\")\n                    .region(\"gb-lon\")\n                    .permissions(\"read_write\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:ObjectStorageKey\n    properties:\n      label: image-access\n      bucketAccesses:\n        - bucketName: foobar1\n          region: us-mia\n          permissions: read_write\n        - bucketName: foobar2\n          region: gb-lon\n          permissions: read_write\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "This keypair's access key. This is not secret.\n"
                },
                "bucketAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess"
                    },
                    "description": "Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key’s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label given to this key. For display purposes only.\n"
                },
                "limited": {
                    "type": "boolean",
                    "description": "Whether or not this key is a limited access key.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of regions where the key will grant access to create buckets.\n\n- - -\n"
                },
                "regionsDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageKeyRegionsDetail:ObjectStorageKeyRegionsDetail"
                    },
                    "description": "A set of objects containing the detailed info of the regions where this key can access.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "This keypair's secret key.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKey",
                "label",
                "limited",
                "regions",
                "regionsDetails",
                "secretKey"
            ],
            "inputProperties": {
                "bucketAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess"
                    },
                    "description": "Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key’s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label given to this key. For display purposes only.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of regions where the key will grant access to create buckets.\n\n- - -\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorageKey resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "This keypair's access key. This is not secret.\n"
                    },
                    "bucketAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ObjectStorageKeyBucketAccess:ObjectStorageKeyBucketAccess"
                        },
                        "description": "Defines this key as a Limited Access Key. Limited Access Keys restrict this Object Storage key’s access to only the bucket(s) declared in this array and define their bucket-level permissions. Not providing this block will not limit this Object Storage Key.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label given to this key. For display purposes only.\n"
                    },
                    "limited": {
                        "type": "boolean",
                        "description": "Whether or not this key is a limited access key.\n"
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of regions where the key will grant access to create buckets.\n\n- - -\n"
                    },
                    "regionsDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ObjectStorageKeyRegionsDetail:ObjectStorageKeyRegionsDetail"
                        },
                        "description": "A set of objects containing the detailed info of the regions where this key can access.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "This keypair's secret key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/objectStorageObject:ObjectStorageObject": {
            "description": "Provides a Linode Object Storage Object resource. This can be used to create, modify, and delete Linodes Object Storage Objects for Buckets.\n\n## Example Usage\n\n### Uploading a file to a bucket\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\nimport * as std from \"@pulumi/std\";\n\nconst object = new linode.ObjectStorageObject(\"object\", {\n    bucket: \"my-bucket\",\n    region: \"us-mia\",\n    key: \"my-object\",\n    secretKey: myKey.secretKey,\n    accessKey: myKey.accessKey,\n    source: std.pathexpand({\n        input: \"~/files/log.txt\",\n    }).then(invoke =\u003e invoke.result),\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\nimport pulumi_std as std\n\nobject = linode.ObjectStorageObject(\"object\",\n    bucket=\"my-bucket\",\n    region=\"us-mia\",\n    key=\"my-object\",\n    secret_key=my_key[\"secretKey\"],\n    access_key=my_key[\"accessKey\"],\n    source=std.pathexpand(input=\"~/files/log.txt\").result)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @object = new Linode.ObjectStorageObject(\"object\", new()\n    {\n        Bucket = \"my-bucket\",\n        Region = \"us-mia\",\n        Key = \"my-object\",\n        SecretKey = myKey.SecretKey,\n        AccessKey = myKey.AccessKey,\n        Source = Std.Pathexpand.Invoke(new()\n        {\n            Input = \"~/files/log.txt\",\n        }).Apply(invoke =\u003e invoke.Result),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokePathexpand, err := std.Pathexpand(ctx, \u0026std.PathexpandArgs{\n\t\t\tInput: \"~/files/log.txt\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewObjectStorageObject(ctx, \"object\", \u0026linode.ObjectStorageObjectArgs{\n\t\t\tBucket:    pulumi.String(\"my-bucket\"),\n\t\t\tRegion:    pulumi.String(\"us-mia\"),\n\t\t\tKey:       pulumi.String(\"my-object\"),\n\t\t\tSecretKey: pulumi.Any(myKey.SecretKey),\n\t\t\tAccessKey: pulumi.Any(myKey.AccessKey),\n\t\t\tSource:    pulumi.String(invokePathexpand.Result),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageObject;\nimport com.pulumi.linode.ObjectStorageObjectArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.PathexpandArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var object = new ObjectStorageObject(\"object\", ObjectStorageObjectArgs.builder()\n            .bucket(\"my-bucket\")\n            .region(\"us-mia\")\n            .key(\"my-object\")\n            .secretKey(myKey.secretKey())\n            .accessKey(myKey.accessKey())\n            .source(StdFunctions.pathexpand(PathexpandArgs.builder()\n                .input(\"~/files/log.txt\")\n                .build()).result())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  object:\n    type: linode:ObjectStorageObject\n    properties:\n      bucket: my-bucket\n      region: us-mia\n      key: my-object\n      secretKey: ${myKey.secretKey}\n      accessKey: ${myKey.accessKey}\n      source:\n        fn::invoke:\n          function: std:pathexpand\n          arguments:\n            input: ~/files/log.txt\n          return: result\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Uploading plaintext to a bucket\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst object = new linode.ObjectStorageObject(\"object\", {\n    bucket: \"my-bucket\",\n    region: \"us-mia\",\n    key: \"my-object\",\n    secretKey: myKey.secretKey,\n    accessKey: myKey.accessKey,\n    content: \"This is the content of the Object...\",\n    contentType: \"text/plain\",\n    contentLanguage: \"en\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nobject = linode.ObjectStorageObject(\"object\",\n    bucket=\"my-bucket\",\n    region=\"us-mia\",\n    key=\"my-object\",\n    secret_key=my_key[\"secretKey\"],\n    access_key=my_key[\"accessKey\"],\n    content=\"This is the content of the Object...\",\n    content_type=\"text/plain\",\n    content_language=\"en\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @object = new Linode.ObjectStorageObject(\"object\", new()\n    {\n        Bucket = \"my-bucket\",\n        Region = \"us-mia\",\n        Key = \"my-object\",\n        SecretKey = myKey.SecretKey,\n        AccessKey = myKey.AccessKey,\n        Content = \"This is the content of the Object...\",\n        ContentType = \"text/plain\",\n        ContentLanguage = \"en\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewObjectStorageObject(ctx, \"object\", \u0026linode.ObjectStorageObjectArgs{\n\t\t\tBucket:          pulumi.String(\"my-bucket\"),\n\t\t\tRegion:          pulumi.String(\"us-mia\"),\n\t\t\tKey:             pulumi.String(\"my-object\"),\n\t\t\tSecretKey:       pulumi.Any(myKey.SecretKey),\n\t\t\tAccessKey:       pulumi.Any(myKey.AccessKey),\n\t\t\tContent:         pulumi.String(\"This is the content of the Object...\"),\n\t\t\tContentType:     pulumi.String(\"text/plain\"),\n\t\t\tContentLanguage: pulumi.String(\"en\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageObject;\nimport com.pulumi.linode.ObjectStorageObjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var object = new ObjectStorageObject(\"object\", ObjectStorageObjectArgs.builder()\n            .bucket(\"my-bucket\")\n            .region(\"us-mia\")\n            .key(\"my-object\")\n            .secretKey(myKey.secretKey())\n            .accessKey(myKey.accessKey())\n            .content(\"This is the content of the Object...\")\n            .contentType(\"text/plain\")\n            .contentLanguage(\"en\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  object:\n    type: linode:ObjectStorageObject\n    properties:\n      bucket: my-bucket\n      region: us-mia\n      key: my-object\n      secretKey: ${myKey.secretKey}\n      accessKey: ${myKey.accessKey}\n      content: This is the content of the Object...\n      contentType: text/plain\n      contentLanguage: en\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating an object using implicitly created object credentials\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\nimport * as std from \"@pulumi/std\";\n\nconst object = new linode.ObjectStorageObject(\"object\", {\n    bucket: \"my-bucket\",\n    region: \"us-mia\",\n    key: \"my-object\",\n    source: std.pathexpand({\n        input: \"~/files/log.txt\",\n    }).then(invoke =\u003e invoke.result),\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\nimport pulumi_std as std\n\nobject = linode.ObjectStorageObject(\"object\",\n    bucket=\"my-bucket\",\n    region=\"us-mia\",\n    key=\"my-object\",\n    source=std.pathexpand(input=\"~/files/log.txt\").result)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @object = new Linode.ObjectStorageObject(\"object\", new()\n    {\n        Bucket = \"my-bucket\",\n        Region = \"us-mia\",\n        Key = \"my-object\",\n        Source = Std.Pathexpand.Invoke(new()\n        {\n            Input = \"~/files/log.txt\",\n        }).Apply(invoke =\u003e invoke.Result),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokePathexpand, err := std.Pathexpand(ctx, \u0026std.PathexpandArgs{\n\t\t\tInput: \"~/files/log.txt\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewObjectStorageObject(ctx, \"object\", \u0026linode.ObjectStorageObjectArgs{\n\t\t\tBucket: pulumi.String(\"my-bucket\"),\n\t\t\tRegion: pulumi.String(\"us-mia\"),\n\t\t\tKey:    pulumi.String(\"my-object\"),\n\t\t\tSource: pulumi.String(invokePathexpand.Result),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.ObjectStorageObject;\nimport com.pulumi.linode.ObjectStorageObjectArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.PathexpandArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var object = new ObjectStorageObject(\"object\", ObjectStorageObjectArgs.builder()\n            .bucket(\"my-bucket\")\n            .region(\"us-mia\")\n            .key(\"my-object\")\n            .source(StdFunctions.pathexpand(PathexpandArgs.builder()\n                .input(\"~/files/log.txt\")\n                .build()).result())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  object:\n    type: linode:ObjectStorageObject\n    properties:\n      bucket: my-bucket\n      region: us-mia\n      key: my-object\n      source:\n        fn::invoke:\n          function: std:pathexpand\n          arguments:\n            input: ~/files/log.txt\n          return: result\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The REQUIRED access key to authenticate with. If it's not specified with the resource, you must provide its value by\n* configuring the `obj_access_key` in the provider configuration;\n* or, opting-in generating it implicitly at apply-time using `obj_use_temp_keys` at provider-level.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`).\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket to put the object in.\n"
                },
                "cacheControl": {
                    "type": "string",
                    "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster the bucket is in. Required if `region` is not configured. Deprecated in favor of `region`.\n",
                    "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`."
                },
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                },
                "contentDisposition": {
                    "type": "string",
                    "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.\n"
                },
                "contentEncoding": {
                    "type": "string",
                    "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.\n"
                },
                "contentLanguage": {
                    "type": "string",
                    "description": "The language the content is in e.g. en-US or en-GB.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Used with the s3 client to make bucket changes and will be computed automatically if left blank, override for testing/debug purposes.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "The specific version of this object.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`).\n"
                },
                "key": {
                    "type": "string",
                    "description": "They name of the object once it is in the bucket.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of keys/values to provision metadata.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cluster the bucket is in. Required if `cluster` is not configured.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The REQUIRED secret key to authenticate with. If it's not specified with the resource, you must provide its value by\n* configuring the `obj_secret_key` in the provider configuration;\n* or, opting-in generating it implicitly at apply-time using `obj_use_temp_keys` at provider-level.\n",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.\n"
                },
                "versionId": {
                    "type": "string",
                    "description": "A unique version ID value for the object.\n"
                },
                "websiteRedirect": {
                    "type": "string",
                    "description": "Specifies a target URL for website redirect.\n"
                }
            },
            "required": [
                "acl",
                "bucket",
                "contentType",
                "endpoint",
                "etag",
                "forceDestroy",
                "key",
                "metadata",
                "versionId"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The REQUIRED access key to authenticate with. If it's not specified with the resource, you must provide its value by\n* configuring the `obj_access_key` in the provider configuration;\n* or, opting-in generating it implicitly at apply-time using `obj_use_temp_keys` at provider-level.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`).\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket to put the object in.\n"
                },
                "cacheControl": {
                    "type": "string",
                    "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "The cluster the bucket is in. Required if `region` is not configured. Deprecated in favor of `region`.\n",
                    "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`."
                },
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                },
                "contentDisposition": {
                    "type": "string",
                    "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.\n"
                },
                "contentEncoding": {
                    "type": "string",
                    "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.\n"
                },
                "contentLanguage": {
                    "type": "string",
                    "description": "The language the content is in e.g. en-US or en-GB.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Used with the s3 client to make bucket changes and will be computed automatically if left blank, override for testing/debug purposes.\n"
                },
                "etag": {
                    "type": "string",
                    "description": "The specific version of this object.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`).\n"
                },
                "key": {
                    "type": "string",
                    "description": "They name of the object once it is in the bucket.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of keys/values to provision metadata.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The cluster the bucket is in. Required if `cluster` is not configured.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The REQUIRED secret key to authenticate with. If it's not specified with the resource, you must provide its value by\n* configuring the `obj_secret_key` in the provider configuration;\n* or, opting-in generating it implicitly at apply-time using `obj_use_temp_keys` at provider-level.\n",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.\n"
                },
                "websiteRedirect": {
                    "type": "string",
                    "description": "Specifies a target URL for website redirect.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ObjectStorageObject resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The REQUIRED access key to authenticate with. If it's not specified with the resource, you must provide its value by\n* configuring the `obj_access_key` in the provider configuration;\n* or, opting-in generating it implicitly at apply-time using `obj_use_temp_keys` at provider-level.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The canned ACL to apply. (`private`, `public-read`, `authenticated-read`, `public-read-write`, `custom`) (defaults to `private`).\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The name of the bucket to put the object in.\n"
                    },
                    "cacheControl": {
                        "type": "string",
                        "description": "Specifies caching behavior along the request/reply chain Read [w3c cache_control](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9) for further details.\n"
                    },
                    "cluster": {
                        "type": "string",
                        "description": "The cluster the bucket is in. Required if `region` is not configured. Deprecated in favor of `region`.\n",
                        "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`."
                    },
                    "content": {
                        "type": "string",
                        "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                    },
                    "contentDisposition": {
                        "type": "string",
                        "description": "Specifies presentational information for the object. Read [w3c content_disposition](http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) for further information.\n"
                    },
                    "contentEncoding": {
                        "type": "string",
                        "description": "Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field. Read [w3c content encoding](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11) for further information.\n"
                    },
                    "contentLanguage": {
                        "type": "string",
                        "description": "The language the content is in e.g. en-US or en-GB.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "A standard MIME type describing the format of the object data, e.g. application/octet-stream. All Valid MIME Types are valid for this input.\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "Used with the s3 client to make bucket changes and will be computed automatically if left blank, override for testing/debug purposes.\n"
                    },
                    "etag": {
                        "type": "string",
                        "description": "The specific version of this object.\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Allow the object to be deleted regardless of any legal hold or object lock (defaults to `false`).\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "They name of the object once it is in the bucket.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of keys/values to provision metadata.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The cluster the bucket is in. Required if `cluster` is not configured.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The REQUIRED secret key to authenticate with. If it's not specified with the resource, you must provide its value by\n* configuring the `obj_secret_key` in the provider configuration;\n* or, opting-in generating it implicitly at apply-time using `obj_use_temp_keys` at provider-level.\n",
                        "secret": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The path to a file that will be read and uploaded as raw bytes for the object content. The path must either be relative to the root module or absolute.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "A unique version ID value for the object.\n"
                    },
                    "websiteRedirect": {
                        "type": "string",
                        "description": "Specifies a target URL for website redirect.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/placementGroup:PlacementGroup": {
            "description": "Manages a Linode Placement Group.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-placement-group).\n\n## Example Usage\n\nCreate a Placement Group with the local anti-affinity policy:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst test = new linode.PlacementGroup(\"test\", {\n    label: \"my-placement-group\",\n    region: \"us-mia\",\n    placementGroupType: \"anti_affinity:local\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ntest = linode.PlacementGroup(\"test\",\n    label=\"my-placement-group\",\n    region=\"us-mia\",\n    placement_group_type=\"anti_affinity:local\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Linode.PlacementGroup(\"test\", new()\n    {\n        Label = \"my-placement-group\",\n        Region = \"us-mia\",\n        PlacementGroupType = \"anti_affinity:local\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewPlacementGroup(ctx, \"test\", \u0026linode.PlacementGroupArgs{\n\t\t\tLabel:              pulumi.String(\"my-placement-group\"),\n\t\t\tRegion:             pulumi.String(\"us-mia\"),\n\t\t\tPlacementGroupType: pulumi.String(\"anti_affinity:local\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.PlacementGroup;\nimport com.pulumi.linode.PlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PlacementGroup(\"test\", PlacementGroupArgs.builder()\n            .label(\"my-placement-group\")\n            .region(\"us-mia\")\n            .placementGroupType(\"anti_affinity:local\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: linode:PlacementGroup\n    properties:\n      label: my-placement-group\n      region: us-mia\n      placementGroupType: anti_affinity:local\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPlacement Groups be imported using their unique `id`, e.g.\n\n```sh\n$ pulumi import linode:index/placementGroup:PlacementGroup mygroup 1234567\n```\n\n",
            "properties": {
                "isCompliant": {
                    "type": "boolean",
                    "description": "Whether this Linode is currently compliant with the group's placement group type.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/PlacementGroupMember:PlacementGroupMember"
                    },
                    "description": "A set of Linodes currently assigned to this Placement Group.\n"
                },
                "placementGroupPolicy": {
                    "type": "string",
                    "description": "Whether Linodes must be able to become compliant during assignment. (Default `strict`)\n"
                },
                "placementGroupType": {
                    "type": "string",
                    "description": "The placement group type to use when placing Linodes in this group.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the Placement Group.\n"
                }
            },
            "required": [
                "isCompliant",
                "label",
                "members",
                "placementGroupPolicy",
                "placementGroupType",
                "region"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "placementGroupPolicy": {
                    "type": "string",
                    "description": "Whether Linodes must be able to become compliant during assignment. (Default `strict`)\n"
                },
                "placementGroupType": {
                    "type": "string",
                    "description": "The placement group type to use when placing Linodes in this group.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the Placement Group.\n"
                }
            },
            "requiredInputs": [
                "label",
                "placementGroupType",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlacementGroup resources.\n",
                "properties": {
                    "isCompliant": {
                        "type": "boolean",
                        "description": "Whether this Linode is currently compliant with the group's placement group type.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/PlacementGroupMember:PlacementGroupMember"
                        },
                        "description": "A set of Linodes currently assigned to this Placement Group.\n"
                    },
                    "placementGroupPolicy": {
                        "type": "string",
                        "description": "Whether Linodes must be able to become compliant during assignment. (Default `strict`)\n"
                    },
                    "placementGroupType": {
                        "type": "string",
                        "description": "The placement group type to use when placing Linodes in this group.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the Placement Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/placementGroupAssignment:PlacementGroupAssignment": {
            "description": "Manages a single assignment between a Linode and a Placement Group.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-group-add-linode).\n\nTo prevent update conflicts, Linodes managed through the `linode.Instance` resource should specify `placement_group_externally_managed`:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instance = new linode.Instance(\"my-instance\", {placementGroupExternallyManaged: true});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my-instance\", placement_group_externally_managed=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instance = new Linode.Instance(\"my-instance\", new()\n    {\n        PlacementGroupExternallyManaged = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"my-instance\", \u0026linode.InstanceArgs{\n\t\t\tPlacementGroupExternallyManaged: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_instance = new Instance(\"my-instance\", InstanceArgs.builder()\n            .placementGroupExternallyManaged(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-instance:\n    type: linode:Instance\n    properties:\n      placementGroupExternallyManaged: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_pg = new linode.PlacementGroup(\"my-pg\", {\n    label: \"my-pg\",\n    region: \"us-east\",\n    placementGroupType: \"anti_affinity:local\",\n});\nconst my_inst = new linode.Instance(\"my-inst\", {\n    label: \"my-inst\",\n    region: \"us-east\",\n    type: \"g6-nanode-1\",\n    placementGroupExternallyManaged: true,\n});\nconst my_assignment = new linode.PlacementGroupAssignment(\"my-assignment\", {\n    placementGroupId: my_pg.id,\n    linodeId: my_inst.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_pg = linode.PlacementGroup(\"my-pg\",\n    label=\"my-pg\",\n    region=\"us-east\",\n    placement_group_type=\"anti_affinity:local\")\nmy_inst = linode.Instance(\"my-inst\",\n    label=\"my-inst\",\n    region=\"us-east\",\n    type=\"g6-nanode-1\",\n    placement_group_externally_managed=True)\nmy_assignment = linode.PlacementGroupAssignment(\"my-assignment\",\n    placement_group_id=my_pg.id,\n    linode_id=my_inst.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_pg = new Linode.PlacementGroup(\"my-pg\", new()\n    {\n        Label = \"my-pg\",\n        Region = \"us-east\",\n        PlacementGroupType = \"anti_affinity:local\",\n    });\n\n    var my_inst = new Linode.Instance(\"my-inst\", new()\n    {\n        Label = \"my-inst\",\n        Region = \"us-east\",\n        Type = \"g6-nanode-1\",\n        PlacementGroupExternallyManaged = true,\n    });\n\n    var my_assignment = new Linode.PlacementGroupAssignment(\"my-assignment\", new()\n    {\n        PlacementGroupId = my_pg.Id,\n        LinodeId = my_inst.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_pg, err := linode.NewPlacementGroup(ctx, \"my-pg\", \u0026linode.PlacementGroupArgs{\n\t\t\tLabel:              pulumi.String(\"my-pg\"),\n\t\t\tRegion:             pulumi.String(\"us-east\"),\n\t\t\tPlacementGroupType: pulumi.String(\"anti_affinity:local\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmy_inst, err := linode.NewInstance(ctx, \"my-inst\", \u0026linode.InstanceArgs{\n\t\t\tLabel:                           pulumi.String(\"my-inst\"),\n\t\t\tRegion:                          pulumi.String(\"us-east\"),\n\t\t\tType:                            pulumi.String(\"g6-nanode-1\"),\n\t\t\tPlacementGroupExternallyManaged: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewPlacementGroupAssignment(ctx, \"my-assignment\", \u0026linode.PlacementGroupAssignmentArgs{\n\t\t\tPlacementGroupId: my_pg.ID(),\n\t\t\tLinodeId:         my_inst.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.PlacementGroup;\nimport com.pulumi.linode.PlacementGroupArgs;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.PlacementGroupAssignment;\nimport com.pulumi.linode.PlacementGroupAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_pg = new PlacementGroup(\"my-pg\", PlacementGroupArgs.builder()\n            .label(\"my-pg\")\n            .region(\"us-east\")\n            .placementGroupType(\"anti_affinity:local\")\n            .build());\n\n        var my_inst = new Instance(\"my-inst\", InstanceArgs.builder()\n            .label(\"my-inst\")\n            .region(\"us-east\")\n            .type(\"g6-nanode-1\")\n            .placementGroupExternallyManaged(true)\n            .build());\n\n        var my_assignment = new PlacementGroupAssignment(\"my-assignment\", PlacementGroupAssignmentArgs.builder()\n            .placementGroupId(my_pg.id())\n            .linodeId(my_inst.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-assignment:\n    type: linode:PlacementGroupAssignment\n    properties:\n      placementGroupId: ${[\"my-pg\"].id}\n      linodeId: ${[\"my-inst\"].id}\n  my-pg:\n    type: linode:PlacementGroup\n    properties:\n      label: my-pg\n      region: us-east\n      placementGroupType: anti_affinity:local\n  my-inst:\n    type: linode:Instance\n    properties:\n      label: my-inst\n      region: us-east\n      type: g6-nanode-1\n      placementGroupExternallyManaged: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPlacement Group assignments can be imported using the Placement Group's ID followed by the Linode's ID separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/placementGroupAssignment:PlacementGroupAssignment my-assignment 1234567,7654321\n```\n\n",
            "properties": {
                "compliantOnly": {
                    "type": "boolean"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The unique ID of the Linode to assign.\n"
                },
                "placementGroupId": {
                    "type": "integer",
                    "description": "The unique ID of the target Placement Group.\n"
                }
            },
            "required": [
                "linodeId",
                "placementGroupId"
            ],
            "inputProperties": {
                "compliantOnly": {
                    "type": "boolean"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The unique ID of the Linode to assign.\n"
                },
                "placementGroupId": {
                    "type": "integer",
                    "description": "The unique ID of the target Placement Group.\n"
                }
            },
            "requiredInputs": [
                "linodeId",
                "placementGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlacementGroupAssignment resources.\n",
                "properties": {
                    "compliantOnly": {
                        "type": "boolean"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The unique ID of the Linode to assign.\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "The unique ID of the target Placement Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/rdns:Rdns": {
            "description": "Provides a Linode RDNS resource.  This can be used to create and modify RDNS records.\n\nLinode RDNS names must have a matching address value in an A or AAAA record.  This A or AAAA name must be resolvable at the time the RDNS resource is being associated.\n\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/put-ip) and the [Configure your Linode for Reverse DNS](https://www.linode.com/docs/networking/dns/configure-your-linode-for-reverse-dns-classic-manager/) guide.\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure an RDNS address for an IP address.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst fooInstance = new linode.Instance(\"foo\", {\n    image: \"linode/alpine3.19\",\n    region: \"ca-east\",\n    type: \"g6-dedicated-2\",\n});\nconst foo = new linode.Rdns(\"foo\", {\n    address: fooInstance.ipAddress,\n    rdns: pulumi.interpolate`${fooInstance.ipAddress}.nip.io`,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo_instance = linode.Instance(\"foo\",\n    image=\"linode/alpine3.19\",\n    region=\"ca-east\",\n    type=\"g6-dedicated-2\")\nfoo = linode.Rdns(\"foo\",\n    address=foo_instance.ip_address,\n    rdns=foo_instance.ip_address.apply(lambda ip_address: f\"{ip_address}.nip.io\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooInstance = new Linode.Instance(\"foo\", new()\n    {\n        Image = \"linode/alpine3.19\",\n        Region = \"ca-east\",\n        Type = \"g6-dedicated-2\",\n    });\n\n    var foo = new Linode.Rdns(\"foo\", new()\n    {\n        Address = fooInstance.IpAddress,\n        RdnsName = fooInstance.IpAddress.Apply(ipAddress =\u003e $\"{ipAddress}.nip.io\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooInstance, err := linode.NewInstance(ctx, \"foo\", \u0026linode.InstanceArgs{\n\t\t\tImage:  pulumi.String(\"linode/alpine3.19\"),\n\t\t\tRegion: pulumi.String(\"ca-east\"),\n\t\t\tType:   pulumi.String(\"g6-dedicated-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewRdns(ctx, \"foo\", \u0026linode.RdnsArgs{\n\t\t\tAddress: fooInstance.IpAddress,\n\t\t\tRdns: fooInstance.IpAddress.ApplyT(func(ipAddress string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"%v.nip.io\", ipAddress), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Rdns;\nimport com.pulumi.linode.RdnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()\n            .image(\"linode/alpine3.19\")\n            .region(\"ca-east\")\n            .type(\"g6-dedicated-2\")\n            .build());\n\n        var foo = new Rdns(\"foo\", RdnsArgs.builder()\n            .address(fooInstance.ipAddress())\n            .rdns(fooInstance.ipAddress().applyValue(_ipAddress -\u003e String.format(\"%s.nip.io\", _ipAddress)))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:Rdns\n    properties:\n      address: ${fooInstance.ipAddress}\n      rdns: ${fooInstance.ipAddress}.nip.io\n  fooInstance:\n    type: linode:Instance\n    name: foo\n    properties:\n      image: linode/alpine3.19\n      region: ca-east\n      type: g6-dedicated-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following example shows how one might use this resource to configure RDNS for multiple IP addresses.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myInstance: linode.Instance[] = [];\nfor (const range = {value: 0}; range.value \u003c 3; range.value++) {\n    myInstance.push(new linode.Instance(`my_instance-${range.value}`, {\n        label: `simple_instance-${range.value + 1}`,\n        image: \"linode/ubuntu22.04\",\n        region: \"us-central\",\n        type: \"g6-standard-1\",\n        rootPass: \"terr4form-test\",\n    }));\n}\nconst myRdns: linode.Rdns[] = [];\nmyInstance.length.apply(rangeBody =\u003e {\n    for (const range = {value: 0}; range.value \u003c rangeBody; range.value++) {\n        myRdns.push(new linode.Rdns(`my_rdns-${range.value}`, {\n            address: myInstance[range.value].ipAddress,\n            rdns: pulumi.interpolate`${myInstance[range.value].ipAddress}.nip.io`,\n        }));\n    }\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    my_instance.append(linode.Instance(f\"my_instance-{range['value']}\",\n        label=f\"simple_instance-{range['value'] + 1}\",\n        image=\"linode/ubuntu22.04\",\n        region=\"us-central\",\n        type=\"g6-standard-1\",\n        root_pass=\"terr4form-test\"))\nmy_rdns = []\ndef create_my_rdns(range_body):\n    for range in [{\"value\": i} for i in range(0, range_body)]:\n        my_rdns.append(linode.Rdns(f\"my_rdns-{range['value']}\",\n            address=my_instance[range[\"value\"]].ip_address.apply(lambda ip_address: ip_address),\n            rdns=my_instance[range[\"value\"]].ip_address.apply(lambda ip_address: f\"{ip_address}.nip.io\")))\n\n(len(my_instance)).apply(create_my_rdns)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = new List\u003cLinode.Instance\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c 3; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        myInstance.Add(new Linode.Instance($\"my_instance-{range.Value}\", new()\n        {\n            Label = $\"simple_instance-{range.Value + 1}\",\n            Image = \"linode/ubuntu22.04\",\n            Region = \"us-central\",\n            Type = \"g6-standard-1\",\n            RootPass = \"terr4form-test\",\n        }));\n    }\n    var myRdns = new List\u003cLinode.Rdns\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c myInstance.Length; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        myRdns.Add(new Linode.Rdns($\"my_rdns-{range.Value}\", new()\n        {\n            Address = myInstance[range.Value].IpAddress,\n            RdnsName = myInstance[range.Value].IpAddress.Apply(ipAddress =\u003e $\"{ipAddress}.nip.io\"),\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvar myInstance []*linode.Instance\n\t\tfor index := 0; index \u003c 3; index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := linode.NewInstance(ctx, fmt.Sprintf(\"my_instance-%v\", key0), \u0026linode.InstanceArgs{\n\t\t\t\tLabel:    pulumi.Sprintf(\"simple_instance-%v\", val0+1),\n\t\t\t\tImage:    pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\t\tRegion:   pulumi.String(\"us-central\"),\n\t\t\t\tType:     pulumi.String(\"g6-standard-1\"),\n\t\t\t\tRootPass: pulumi.String(\"terr4form-test\"),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tmyInstance = append(myInstance, __res)\n\t\t}\n\t\tvar myRdns []*linode.Rdns\n\t\tfor index := 0; index \u003c int(len(myInstance)); index++ {\n\t\t\tkey0 := index\n\t\t\tval0 := index\n\t\t\t__res, err := linode.NewRdns(ctx, fmt.Sprintf(\"my_rdns-%v\", key0), \u0026linode.RdnsArgs{\n\t\t\t\tAddress: myInstance[val0].IpAddress,\n\t\t\t\tRdns: pulumi.String(myInstance[val0].IpAddress.ApplyT(func(ipAddress string) (string, error) {\n\t\t\t\t\treturn fmt.Sprintf(\"%v.nip.io\", ipAddress), nil\n\t\t\t\t}).(pulumi.StringOutput)),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tmyRdns = append(myRdns, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Rdns;\nimport com.pulumi.linode.RdnsArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        for (var i = 0; i \u003c 3; i++) {\n            new Instance(\"myInstance-\" + i, InstanceArgs.builder()\n                .label(String.format(\"simple_instance-%s\", range.value() + 1))\n                .image(\"linode/ubuntu22.04\")\n                .region(\"us-central\")\n                .type(\"g6-standard-1\")\n                .rootPass(\"terr4form-test\")\n                .build());\n\n        \n}\n        for (var i = 0; i \u003c myInstance.length(); i++) {\n            new Rdns(\"myRdns-\" + i, RdnsArgs.builder()\n                .address(myInstance[range.value()].ipAddress())\n                .rdns(myInstance[range.value()].ipAddress().applyValue(_ipAddress -\u003e String.format(\"%s.nip.io\", _ipAddress)))\n                .build());\n\n        \n}\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes RDNS resources can be imported using the address as the `id`.\n\n```sh\n$ pulumi import linode:index/rdns:Rdns foo 123.123.123.123\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The name of the RDNS address.\n",
                    "language": {
                        "csharp": {
                            "name": "RdnsName"
                        }
                    }
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/RdnsTimeouts:RdnsTimeouts"
                },
                "waitForAvailable": {
                    "type": "boolean",
                    "description": "If true, the RDNS assignment will be retried within the operation timeout period.\n"
                }
            },
            "required": [
                "address",
                "rdns",
                "waitForAvailable"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The name of the RDNS address.\n",
                    "language": {
                        "csharp": {
                            "name": "RdnsName"
                        }
                    }
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/RdnsTimeouts:RdnsTimeouts"
                },
                "waitForAvailable": {
                    "type": "boolean",
                    "description": "If true, the RDNS assignment will be retried within the operation timeout period.\n"
                }
            },
            "requiredInputs": [
                "address",
                "rdns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rdns resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The Public IPv4 or IPv6 address that will receive the `PTR` record.  A matching `A` or `AAAA` record must exist.\n"
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The name of the RDNS address.\n",
                        "language": {
                            "csharp": {
                                "name": "RdnsName"
                            }
                        }
                    },
                    "timeouts": {
                        "$ref": "#/types/linode:index/RdnsTimeouts:RdnsTimeouts"
                    },
                    "waitForAvailable": {
                        "type": "boolean",
                        "description": "If true, the RDNS assignment will be retried within the operation timeout period.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/reservedIpAssignment:ReservedIpAssignment": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The resulting IPv4 address.\n"
                },
                "applyImmediately": {
                    "type": "boolean",
                    "description": "If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the\n`skip_implicit_reboots` provider argument.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The default gateway for this address\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                },
                "prefix": {
                    "type": "integer",
                    "description": "The number of bits set in the subnet mask.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address is public or private.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region this IP resides in.\n"
                },
                "reserved": {
                    "type": "boolean",
                    "description": "The reservation status of the IP address\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "The mask that separates host bits from network bits for this address.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of IP address.\n"
                },
                "vpcNat11s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/ReservedIpAssignmentVpcNat11:ReservedIpAssignmentVpcNat11"
                    },
                    "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                }
            },
            "required": [
                "address",
                "applyImmediately",
                "gateway",
                "linodeId",
                "prefix",
                "public",
                "rdns",
                "region",
                "reserved",
                "subnetMask",
                "type",
                "vpcNat11s"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The resulting IPv4 address.\n"
                },
                "applyImmediately": {
                    "type": "boolean",
                    "description": "If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the\n`skip_implicit_reboots` provider argument.\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the IPv4 address is public or private.\n"
                },
                "rdns": {
                    "type": "string",
                    "description": "The reverse DNS assigned to this address.\n"
                }
            },
            "requiredInputs": [
                "address",
                "linodeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReservedIpAssignment resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The resulting IPv4 address.\n"
                    },
                    "applyImmediately": {
                        "type": "boolean",
                        "description": "If true, the instance will be rebooted to update network interfaces. This functionality is not affected by the\n`skip_implicit_reboots` provider argument.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The default gateway for this address\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of the Linode to allocate an IPv4 address for.\n"
                    },
                    "prefix": {
                        "type": "integer",
                        "description": "The number of bits set in the subnet mask.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the IPv4 address is public or private.\n"
                    },
                    "rdns": {
                        "type": "string",
                        "description": "The reverse DNS assigned to this address.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region this IP resides in.\n"
                    },
                    "reserved": {
                        "type": "boolean",
                        "description": "The reservation status of the IP address\n"
                    },
                    "subnetMask": {
                        "type": "string",
                        "description": "The mask that separates host bits from network bits for this address.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of IP address.\n"
                    },
                    "vpcNat11s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/ReservedIpAssignmentVpcNat11:ReservedIpAssignmentVpcNat11"
                        },
                        "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/sshKey:SshKey": {
            "description": "Provides a Linode SSH Key resource.  This can be used to create, modify, and delete Linodes SSH Keys.  Managed SSH Keys allow instances to be created with a list of Linode usernames, whose SSH keys will be automatically applied to the root account's `~/.ssh/authorized_keys` file.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ssh-keys).\n\n**NOTE**: This does not generate a new ssh key, you must have an existing key generated and saved locally.\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a SSH Key for access to a Linode Instance.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\nimport * as std from \"@pulumi/std\";\n\nconst foo = new linode.SshKey(\"foo\", {\n    label: \"foo\",\n    sshKey: std.file({\n        input: \"~/.ssh/id_rsa.pub\",\n    }).then(invoke =\u003e std.chomp({\n        input: invoke.result,\n    })).then(invoke =\u003e invoke.result),\n});\nconst fooInstance = new linode.Instance(\"foo\", {\n    image: \"linode/ubuntu22.04\",\n    label: \"foo\",\n    region: \"us-east\",\n    type: \"g6-nanode-1\",\n    authorizedKeys: [foo.sshKey],\n    rootPass: \"...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\nimport pulumi_std as std\n\nfoo = linode.SshKey(\"foo\",\n    label=\"foo\",\n    ssh_key=std.chomp(input=std.file(input=\"~/.ssh/id_rsa.pub\").result).result)\nfoo_instance = linode.Instance(\"foo\",\n    image=\"linode/ubuntu22.04\",\n    label=\"foo\",\n    region=\"us-east\",\n    type=\"g6-nanode-1\",\n    authorized_keys=[foo.ssh_key],\n    root_pass=\"...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.SshKey(\"foo\", new()\n    {\n        Label = \"foo\",\n        SshKeyName = Std.File.Invoke(new()\n        {\n            Input = \"~/.ssh/id_rsa.pub\",\n        }).Apply(invoke =\u003e Std.Chomp.Invoke(new()\n        {\n            Input = invoke.Result,\n        })).Apply(invoke =\u003e invoke.Result),\n    });\n\n    var fooInstance = new Linode.Instance(\"foo\", new()\n    {\n        Image = \"linode/ubuntu22.04\",\n        Label = \"foo\",\n        Region = \"us-east\",\n        Type = \"g6-nanode-1\",\n        AuthorizedKeys = new[]\n        {\n            foo.SshKeyName,\n        },\n        RootPass = \"...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeChomp, err := std.Chomp(ctx, \u0026std.ChompArgs{\n\t\t\tInput: std.File(ctx, \u0026std.FileArgs{\n\t\t\t\tInput: \"~/.ssh/id_rsa.pub\",\n\t\t\t}, nil).Result,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo, err := linode.NewSshKey(ctx, \"foo\", \u0026linode.SshKeyArgs{\n\t\t\tLabel:  pulumi.String(\"foo\"),\n\t\t\tSshKey: pulumi.String(invokeChomp.Result),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstance(ctx, \"foo\", \u0026linode.InstanceArgs{\n\t\t\tImage:  pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tLabel:  pulumi.String(\"foo\"),\n\t\t\tRegion: pulumi.String(\"us-east\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tfoo.SshKey,\n\t\t\t},\n\t\t\tRootPass: pulumi.String(\"...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.SshKey;\nimport com.pulumi.linode.SshKeyArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.FileArgs;\nimport com.pulumi.std.inputs.ChompArgs;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SshKey(\"foo\", SshKeyArgs.builder()\n            .label(\"foo\")\n            .sshKey(StdFunctions.chomp(ChompArgs.builder()\n                .input(StdFunctions.file(FileArgs.builder()\n                    .input(\"~/.ssh/id_rsa.pub\")\n                    .build()).result())\n                .build()).result())\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()\n            .image(\"linode/ubuntu22.04\")\n            .label(\"foo\")\n            .region(\"us-east\")\n            .type(\"g6-nanode-1\")\n            .authorizedKeys(foo.sshKey())\n            .rootPass(\"...\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:SshKey\n    properties:\n      label: foo\n      sshKey:\n        fn::invoke:\n          function: std:chomp\n          arguments:\n            input:\n              fn::invoke:\n                function: std:file\n                arguments:\n                  input: ~/.ssh/id_rsa.pub\n                return: result\n          return: result\n  fooInstance:\n    type: linode:Instance\n    name: foo\n    properties:\n      image: linode/ubuntu22.04\n      label: foo\n      region: us-east\n      type: g6-nanode-1\n      authorizedKeys:\n        - ${foo.sshKey}\n      rootPass: '...'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes SSH Keys can be imported using the Linode SSH Key `id`, e.g.\n\n```sh\n$ pulumi import linode:index/sshKey:SshKey mysshkey 1234567\n```\n\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this SSH Key was created.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the SSH Key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                    "language": {
                        "csharp": {
                            "name": "SshKeyName"
                        }
                    }
                }
            },
            "required": [
                "created",
                "label",
                "sshKey"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "A label for the SSH Key.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                    "language": {
                        "csharp": {
                            "name": "SshKeyName"
                        }
                    }
                }
            },
            "requiredInputs": [
                "label",
                "sshKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this SSH Key was created.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the SSH Key.\n"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                        "language": {
                            "csharp": {
                                "name": "SshKeyName"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "linode:index/stackScript:StackScript": {
            "description": "Provides a Linode StackScript resource.  This can be used to create, modify, and delete Linode StackScripts.  StackScripts are private or public managed scripts which run within an instance during startup.  StackScripts can include variables whose values are specified when the Instance is created.  \n\nFor more information, see [Automate Deployment with StackScripts](https://www.linode.com/docs/platform/stackscripts/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-add-stack-script).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a StackScript attached to a Linode Instance.  As shown below, StackScripts must begin with a shebang (`#!`).  The `\u003cUDF ...\u003e` element provided in the Bash comment block defines a variable whose value is provided when creating the Instance (or disk) using the `stackscript_data` field.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.StackScript(\"foo\", {\n    label: \"foo\",\n    description: \"Installs a Package\",\n    script: `#!/bin/bash\n# \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install PACKAGE\n`,\n    images: [\n        \"linode/ubuntu22.04\",\n        \"linode/ubuntu20.04\",\n    ],\n    revNote: \"initial version\",\n});\nconst fooInstance = new linode.Instance(\"foo\", {\n    image: \"linode/ubuntu22.04\",\n    label: \"foo\",\n    region: \"us-east\",\n    type: \"g6-nanode-1\",\n    authorizedKeys: [\"...\"],\n    rootPass: \"...\",\n    stackscriptId: foo.id,\n    stackscriptData: {\n        \"package\": \"nginx\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.StackScript(\"foo\",\n    label=\"foo\",\n    description=\"Installs a Package\",\n    script=\"\"\"#!/bin/bash\n# \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n\"\"\",\n    images=[\n        \"linode/ubuntu22.04\",\n        \"linode/ubuntu20.04\",\n    ],\n    rev_note=\"initial version\")\nfoo_instance = linode.Instance(\"foo\",\n    image=\"linode/ubuntu22.04\",\n    label=\"foo\",\n    region=\"us-east\",\n    type=\"g6-nanode-1\",\n    authorized_keys=[\"...\"],\n    root_pass=\"...\",\n    stackscript_id=foo.id,\n    stackscript_data={\n        \"package\": \"nginx\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.StackScript(\"foo\", new()\n    {\n        Label = \"foo\",\n        Description = \"Installs a Package\",\n        Script = @\"#!/bin/bash\n# \u003cUDF name=\"\"package\"\" label=\"\"System Package to Install\"\" example=\"\"nginx\"\" default=\"\"\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n\",\n        Images = new[]\n        {\n            \"linode/ubuntu22.04\",\n            \"linode/ubuntu20.04\",\n        },\n        RevNote = \"initial version\",\n    });\n\n    var fooInstance = new Linode.Instance(\"foo\", new()\n    {\n        Image = \"linode/ubuntu22.04\",\n        Label = \"foo\",\n        Region = \"us-east\",\n        Type = \"g6-nanode-1\",\n        AuthorizedKeys = new[]\n        {\n            \"...\",\n        },\n        RootPass = \"...\",\n        StackscriptId = foo.Id,\n        StackscriptData = \n        {\n            { \"package\", \"nginx\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := linode.NewStackScript(ctx, \"foo\", \u0026linode.StackScriptArgs{\n\t\t\tLabel:       pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Installs a Package\"),\n\t\t\tScript:      pulumi.String(\"#!/bin/bash\\n# \u003cUDF name=\\\"package\\\" label=\\\"System Package to Install\\\" example=\\\"nginx\\\" default=\\\"\\\"\u003e\\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\\n\"),\n\t\t\tImages: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"linode/ubuntu22.04\"),\n\t\t\t\tpulumi.String(\"linode/ubuntu20.04\"),\n\t\t\t},\n\t\t\tRevNote: pulumi.String(\"initial version\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstance(ctx, \"foo\", \u0026linode.InstanceArgs{\n\t\t\tImage:  pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tLabel:  pulumi.String(\"foo\"),\n\t\t\tRegion: pulumi.String(\"us-east\"),\n\t\t\tType:   pulumi.String(\"g6-nanode-1\"),\n\t\t\tAuthorizedKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"...\"),\n\t\t\t},\n\t\t\tRootPass:      pulumi.String(\"...\"),\n\t\t\tStackscriptId: foo.ID(),\n\t\t\tStackscriptData: pulumi.StringMap{\n\t\t\t\t\"package\": pulumi.String(\"nginx\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.StackScript;\nimport com.pulumi.linode.StackScriptArgs;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new StackScript(\"foo\", StackScriptArgs.builder()\n            .label(\"foo\")\n            .description(\"Installs a Package\")\n            .script(\"\"\"\n#!/bin/bash\n# \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\napt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n            \"\"\")\n            .images(            \n                \"linode/ubuntu22.04\",\n                \"linode/ubuntu20.04\")\n            .revNote(\"initial version\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\", InstanceArgs.builder()\n            .image(\"linode/ubuntu22.04\")\n            .label(\"foo\")\n            .region(\"us-east\")\n            .type(\"g6-nanode-1\")\n            .authorizedKeys(\"...\")\n            .rootPass(\"...\")\n            .stackscriptId(foo.id())\n            .stackscriptData(Map.of(\"package\", \"nginx\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:StackScript\n    properties:\n      label: foo\n      description: Installs a Package\n      script: |\n        #!/bin/bash\n        # \u003cUDF name=\"package\" label=\"System Package to Install\" example=\"nginx\" default=\"\"\u003e\n        apt-get -q update \u0026\u0026 apt-get -q -y install $PACKAGE\n      images:\n        - linode/ubuntu22.04\n        - linode/ubuntu20.04\n      revNote: initial version\n  fooInstance:\n    type: linode:Instance\n    name: foo\n    properties:\n      image: linode/ubuntu22.04\n      label: foo\n      region: us-east\n      type: g6-nanode-1\n      authorizedKeys:\n        - '...'\n      rootPass: '...'\n      stackscriptId: ${foo.id}\n      stackscriptData:\n        package: nginx\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes StackScripts can be imported using the Linode StackScript `id`, e.g.\n\n```sh\n$ pulumi import linode:index/stackScript:StackScript mystackscript 1234567\n```\n\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this StackScript was created.\n"
                },
                "deploymentsActive": {
                    "type": "integer",
                    "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                },
                "deploymentsTotal": {
                    "type": "integer",
                    "description": "The total number of times this StackScript has been deployed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the StackScript.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted. Currently private image IDs are not supported.\n\n- - -\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private. *Changing `is_public` forces the creation of a new StackScript*\n"
                },
                "label": {
                    "type": "string",
                    "description": "The StackScript's label is for display purposes only.\n"
                },
                "revNote": {
                    "type": "string",
                    "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date this StackScript was updated.\n"
                },
                "userDefinedFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField"
                    },
                    "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                },
                "userGravatarId": {
                    "type": "string",
                    "description": "The Gravatar ID for the User who created the StackScript.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The User who created the StackScript.\n"
                }
            },
            "required": [
                "created",
                "deploymentsActive",
                "deploymentsTotal",
                "description",
                "images",
                "isPublic",
                "label",
                "revNote",
                "script",
                "updated",
                "userDefinedFields",
                "userGravatarId",
                "username"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the StackScript.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted. Currently private image IDs are not supported.\n\n- - -\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private. *Changing `is_public` forces the creation of a new StackScript*\n"
                },
                "label": {
                    "type": "string",
                    "description": "The StackScript's label is for display purposes only.\n"
                },
                "revNote": {
                    "type": "string",
                    "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                },
                "script": {
                    "type": "string",
                    "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                }
            },
            "requiredInputs": [
                "description",
                "images",
                "label",
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StackScript resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this StackScript was created.\n"
                    },
                    "deploymentsActive": {
                        "type": "integer",
                        "description": "Count of currently active, deployed Linodes created from this StackScript.\n"
                    },
                    "deploymentsTotal": {
                        "type": "integer",
                        "description": "The total number of times this StackScript has been deployed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the StackScript.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted. Currently private image IDs are not supported.\n\n- - -\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private. *Changing `is_public` forces the creation of a new StackScript*\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The StackScript's label is for display purposes only.\n"
                    },
                    "revNote": {
                        "type": "string",
                        "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "The script to execute when provisioning a new Linode with this StackScript.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date this StackScript was updated.\n"
                    },
                    "userDefinedFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/StackScriptUserDefinedField:StackScriptUserDefinedField"
                        },
                        "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n"
                    },
                    "userGravatarId": {
                        "type": "string",
                        "description": "The Gravatar ID for the User who created the StackScript.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The User who created the StackScript.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/token:Token": {
            "description": "Provides a Linode Token resource.  This can be used to create, modify, and delete Linode API Personal Access Tokens.  Personal Access Tokens proxy user credentials for Linode API access.  This is necessary for tools, such as Pulumi, to interact with Linode services on a user's behalf.\n\nIt is common for the provider itself to be configured with broadly scoped Personal Access Tokens.  Provisioning scripts or tools configured within a Linode Instance should follow the principle of least privilege to afford only the required roles for tools to perform their necessary tasks.  The `linode.Token` resource allows for the management of Personal Access Tokens with scopes mirroring or narrowing the scope of the parent token.\n\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-personal-access-tokens).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a token for use in another tool that needs access to Linode resources.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = new linode.Token(\"foo\", {\n    label: \"token\",\n    scopes: \"linodes:read_only\",\n    expiry: \"2100-01-02T03:04:05Z\",\n});\nconst fooInstance = new linode.Instance(\"foo\", {});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.Token(\"foo\",\n    label=\"token\",\n    scopes=\"linodes:read_only\",\n    expiry=\"2100-01-02T03:04:05Z\")\nfoo_instance = linode.Instance(\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Linode.Token(\"foo\", new()\n    {\n        Label = \"token\",\n        Scopes = \"linodes:read_only\",\n        Expiry = \"2100-01-02T03:04:05Z\",\n    });\n\n    var fooInstance = new Linode.Instance(\"foo\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewToken(ctx, \"foo\", \u0026linode.TokenArgs{\n\t\t\tLabel:  pulumi.String(\"token\"),\n\t\t\tScopes: pulumi.String(\"linodes:read_only\"),\n\t\t\tExpiry: pulumi.String(\"2100-01-02T03:04:05Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewInstance(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Token;\nimport com.pulumi.linode.TokenArgs;\nimport com.pulumi.linode.Instance;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Token(\"foo\", TokenArgs.builder()\n            .label(\"token\")\n            .scopes(\"linodes:read_only\")\n            .expiry(\"2100-01-02T03:04:05Z\")\n            .build());\n\n        var fooInstance = new Instance(\"fooInstance\");\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: linode:Token\n    properties:\n      label: token\n      scopes: linodes:read_only\n      expiry: 2100-01-02T03:04:05Z\n  fooInstance:\n    type: linode:Instance\n    name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes Tokens can be imported using the Linode Token `id`, e.g.  The secret token will not be imported.\n\n```sh\n$ pulumi import linode:index/token:Token mytoken 1234567\n```\n\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date this Token was created.\n"
                },
                "expiry": {
                    "type": "string",
                    "description": "When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the Token.\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure. All scopes can be viewed in [the Linode API documentation](https://techdocs.akamai.com/linode-api/reference/get-started#oauth-reference).\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token used to access the API.\n",
                    "language": {
                        "csharp": {
                            "name": "ApiToken"
                        }
                    },
                    "secret": true
                }
            },
            "required": [
                "created",
                "expiry",
                "scopes",
                "token"
            ],
            "inputProperties": {
                "expiry": {
                    "type": "string",
                    "description": "When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.\n"
                },
                "label": {
                    "type": "string",
                    "description": "A label for the Token.\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure. All scopes can be viewed in [the Linode API documentation](https://techdocs.akamai.com/linode-api/reference/get-started#oauth-reference).\n"
                }
            },
            "requiredInputs": [
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date this Token was created.\n"
                    },
                    "expiry": {
                        "type": "string",
                        "description": "When this token will expire. Personal Access Tokens cannot be renewed, so after this time the token will be completely unusable and a new token will need to be generated. Tokens may be created with 'null' as their expiry and will never expire unless revoked.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "A label for the Token.\n"
                    },
                    "scopes": {
                        "type": "string",
                        "description": "The scopes this token was created with. These define what parts of the Account the token can be used to access. Many command-line tools, such as the Linode CLI, require tokens with access to *. Tokens with more restrictive scopes are generally more secure. All scopes can be viewed in [the Linode API documentation](https://techdocs.akamai.com/linode-api/reference/get-started#oauth-reference).\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token used to access the API.\n",
                        "language": {
                            "csharp": {
                                "name": "ApiToken"
                            }
                        },
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "linode:index/user:User": {
            "description": "Manages a Linode User.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-user).\n\n## Example Usage\n\nCreate an unrestricted user:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst john = new linode.User(\"john\", {\n    username: \"john123\",\n    email: \"john@acme.io\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\njohn = linode.User(\"john\",\n    username=\"john123\",\n    email=\"john@acme.io\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var john = new Linode.User(\"john\", new()\n    {\n        Username = \"john123\",\n        Email = \"john@acme.io\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewUser(ctx, \"john\", \u0026linode.UserArgs{\n\t\t\tUsername: pulumi.String(\"john123\"),\n\t\t\tEmail:    pulumi.String(\"john@acme.io\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.User;\nimport com.pulumi.linode.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var john = new User(\"john\", UserArgs.builder()\n            .username(\"john123\")\n            .email(\"john@acme.io\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  john:\n    type: linode:User\n    properties:\n      username: john123\n      email: john@acme.io\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreate a restricted user with grants:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst fooser = new linode.User(\"fooser\", {\n    username: \"cooluser123\",\n    email: \"cool@acme.io\",\n    restricted: true,\n    globalGrants: {\n        addLinodes: true,\n        addImages: true,\n    },\n    linodeGrants: [{\n        id: 12345,\n        permissions: \"read_write\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfooser = linode.User(\"fooser\",\n    username=\"cooluser123\",\n    email=\"cool@acme.io\",\n    restricted=True,\n    global_grants={\n        \"add_linodes\": True,\n        \"add_images\": True,\n    },\n    linode_grants=[{\n        \"id\": 12345,\n        \"permissions\": \"read_write\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooser = new Linode.User(\"fooser\", new()\n    {\n        Username = \"cooluser123\",\n        Email = \"cool@acme.io\",\n        Restricted = true,\n        GlobalGrants = new Linode.Inputs.UserGlobalGrantsArgs\n        {\n            AddLinodes = true,\n            AddImages = true,\n        },\n        LinodeGrants = new[]\n        {\n            new Linode.Inputs.UserLinodeGrantArgs\n            {\n                Id = 12345,\n                Permissions = \"read_write\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewUser(ctx, \"fooser\", \u0026linode.UserArgs{\n\t\t\tUsername:   pulumi.String(\"cooluser123\"),\n\t\t\tEmail:      pulumi.String(\"cool@acme.io\"),\n\t\t\tRestricted: pulumi.Bool(true),\n\t\t\tGlobalGrants: \u0026linode.UserGlobalGrantsArgs{\n\t\t\t\tAddLinodes: pulumi.Bool(true),\n\t\t\t\tAddImages:  pulumi.Bool(true),\n\t\t\t},\n\t\t\tLinodeGrants: linode.UserLinodeGrantArray{\n\t\t\t\t\u0026linode.UserLinodeGrantArgs{\n\t\t\t\t\tId:          pulumi.Int(12345),\n\t\t\t\t\tPermissions: pulumi.String(\"read_write\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.User;\nimport com.pulumi.linode.UserArgs;\nimport com.pulumi.linode.inputs.UserGlobalGrantsArgs;\nimport com.pulumi.linode.inputs.UserLinodeGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooser = new User(\"fooser\", UserArgs.builder()\n            .username(\"cooluser123\")\n            .email(\"cool@acme.io\")\n            .restricted(true)\n            .globalGrants(UserGlobalGrantsArgs.builder()\n                .addLinodes(true)\n                .addImages(true)\n                .build())\n            .linodeGrants(UserLinodeGrantArgs.builder()\n                .id(12345)\n                .permissions(\"read_write\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooser:\n    type: linode:User\n    properties:\n      username: cooluser123\n      email: cool@acme.io\n      restricted: true\n      globalGrants:\n        addLinodes: true\n        addImages: true\n      linodeGrants:\n        - id: 12345\n          permissions: read_write\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Global Grants\n\n* `account_access` - (optional) The level of access this User has to Account-level actions, like billing information. (`read_only`, `read_write`)\n\n* `add_domains` - (optional) If true, this User may add Domains.\n\n* `add_databases` - (optional) If true, this User may add Databases.\n\n* `add_firewalls` - (optional) If true, this User may add Firewalls.\n\n* `add_images` - (optional) If true, this User may add Images.\n\n* `add_linodes` - (optional) If true, this User may create Linodes.\n\n* `add_longview` - (optional) If true, this User may create Longview clients and view the current plan.\n\n* `add_nodebalancers` - (optional) If true, this User may add NodeBalancers.\n\n* `add_placement_groups` - (optional) If true, this User may add Placement Groups.\n\n* `add_stackscripts` - (optional) If true, this User may add StackScripts.\n\n* `add_vpcs` - (optional) If true, this User may add Virtual Private Clouds (VPCs).\n\n* `cancel_account` - (optional) If true, this User may cancel the entire Account.\n\n* `longview_subscription` - (optional) If true, this User may manage the Account’s Longview subscription.\n\n## Entity Grants\n\n* `id` - (required) The ID of the entity this grant applies to.\n\n* `permissions` - (required) The level of access this User has to this entity. (`read_only`, `read_write`)\n",
            "properties": {
                "domainGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserDomainGrant:UserDomainGrant"
                    },
                    "description": "The domains the user has permissions access to.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n"
                },
                "firewallGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserFirewallGrant:UserFirewallGrant"
                    },
                    "description": "The firewalls the user has permissions access to.\n"
                },
                "globalGrants": {
                    "$ref": "#/types/linode:index/UserGlobalGrants:UserGlobalGrants",
                    "description": "A structure containing the Account-level grants a User has.\n"
                },
                "imageGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserImageGrant:UserImageGrant"
                    },
                    "description": "The images the user has permissions access to.\n"
                },
                "linodeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLinodeGrant:UserLinodeGrant"
                    },
                    "description": "The Linodes the user has permissions access to.\n"
                },
                "longviewGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLongviewGrant:UserLongviewGrant"
                    },
                    "description": "The longview the user has permissions access to.\n"
                },
                "nodebalancerGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserNodebalancerGrant:UserNodebalancerGrant"
                    },
                    "description": "The NodeBalancers the user has permissions access to.\n"
                },
                "placementGroupGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserPlacementGroupGrant:UserPlacementGroupGrant"
                    },
                    "description": "The Placement Groups the user has permissions access to.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "If true, this user will only have explicit permissions granted.\n\n* `global_grants` - (optional) A structure containing the Account-level grants a User has.\n\nThe following arguments are sets of entity grants:\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the User's SSH keys.\n"
                },
                "stackscriptGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserStackscriptGrant:UserStackscriptGrant"
                    },
                    "description": "The StackScripts the user has permissions access to.\n"
                },
                "tfaEnabled": {
                    "type": "boolean",
                    "description": "Whether the user has two-factor-authentication enabled.\n"
                },
                "userType": {
                    "type": "string",
                    "description": "The type of this user.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                },
                "volumeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserVolumeGrant:UserVolumeGrant"
                    },
                    "description": "The volumes the user has permissions access to.\n"
                },
                "vpcGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserVpcGrant:UserVpcGrant"
                    },
                    "description": "The Virtual Private Clouds (VPCs) the user has permissions access to.\n"
                }
            },
            "required": [
                "domainGrants",
                "email",
                "firewallGrants",
                "globalGrants",
                "imageGrants",
                "linodeGrants",
                "longviewGrants",
                "nodebalancerGrants",
                "placementGroupGrants",
                "sshKeys",
                "stackscriptGrants",
                "tfaEnabled",
                "userType",
                "username",
                "volumeGrants",
                "vpcGrants"
            ],
            "inputProperties": {
                "domainGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserDomainGrant:UserDomainGrant"
                    },
                    "description": "The domains the user has permissions access to.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user.\n",
                    "willReplaceOnChanges": true
                },
                "firewallGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserFirewallGrant:UserFirewallGrant"
                    },
                    "description": "The firewalls the user has permissions access to.\n"
                },
                "globalGrants": {
                    "$ref": "#/types/linode:index/UserGlobalGrants:UserGlobalGrants",
                    "description": "A structure containing the Account-level grants a User has.\n"
                },
                "imageGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserImageGrant:UserImageGrant"
                    },
                    "description": "The images the user has permissions access to.\n"
                },
                "linodeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLinodeGrant:UserLinodeGrant"
                    },
                    "description": "The Linodes the user has permissions access to.\n"
                },
                "longviewGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserLongviewGrant:UserLongviewGrant"
                    },
                    "description": "The longview the user has permissions access to.\n"
                },
                "nodebalancerGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserNodebalancerGrant:UserNodebalancerGrant"
                    },
                    "description": "The NodeBalancers the user has permissions access to.\n"
                },
                "placementGroupGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserPlacementGroupGrant:UserPlacementGroupGrant"
                    },
                    "description": "The Placement Groups the user has permissions access to.\n"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "If true, this user will only have explicit permissions granted.\n\n* `global_grants` - (optional) A structure containing the Account-level grants a User has.\n\nThe following arguments are sets of entity grants:\n"
                },
                "stackscriptGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserStackscriptGrant:UserStackscriptGrant"
                    },
                    "description": "The StackScripts the user has permissions access to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the user.\n"
                },
                "volumeGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserVolumeGrant:UserVolumeGrant"
                    },
                    "description": "The volumes the user has permissions access to.\n"
                },
                "vpcGrants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/UserVpcGrant:UserVpcGrant"
                    },
                    "description": "The Virtual Private Clouds (VPCs) the user has permissions access to.\n"
                }
            },
            "requiredInputs": [
                "email",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "domainGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserDomainGrant:UserDomainGrant"
                        },
                        "description": "The domains the user has permissions access to.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "firewallGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserFirewallGrant:UserFirewallGrant"
                        },
                        "description": "The firewalls the user has permissions access to.\n"
                    },
                    "globalGrants": {
                        "$ref": "#/types/linode:index/UserGlobalGrants:UserGlobalGrants",
                        "description": "A structure containing the Account-level grants a User has.\n"
                    },
                    "imageGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserImageGrant:UserImageGrant"
                        },
                        "description": "The images the user has permissions access to.\n"
                    },
                    "linodeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserLinodeGrant:UserLinodeGrant"
                        },
                        "description": "The Linodes the user has permissions access to.\n"
                    },
                    "longviewGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserLongviewGrant:UserLongviewGrant"
                        },
                        "description": "The longview the user has permissions access to.\n"
                    },
                    "nodebalancerGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserNodebalancerGrant:UserNodebalancerGrant"
                        },
                        "description": "The NodeBalancers the user has permissions access to.\n"
                    },
                    "placementGroupGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserPlacementGroupGrant:UserPlacementGroupGrant"
                        },
                        "description": "The Placement Groups the user has permissions access to.\n"
                    },
                    "restricted": {
                        "type": "boolean",
                        "description": "If true, this user will only have explicit permissions granted.\n\n* `global_grants` - (optional) A structure containing the Account-level grants a User has.\n\nThe following arguments are sets of entity grants:\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the User's SSH keys.\n"
                    },
                    "stackscriptGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserStackscriptGrant:UserStackscriptGrant"
                        },
                        "description": "The StackScripts the user has permissions access to.\n"
                    },
                    "tfaEnabled": {
                        "type": "boolean",
                        "description": "Whether the user has two-factor-authentication enabled.\n"
                    },
                    "userType": {
                        "type": "string",
                        "description": "The type of this user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user.\n"
                    },
                    "volumeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserVolumeGrant:UserVolumeGrant"
                        },
                        "description": "The volumes the user has permissions access to.\n"
                    },
                    "vpcGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/UserVpcGrant:UserVpcGrant"
                        },
                        "description": "The Virtual Private Clouds (VPCs) the user has permissions access to.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/volume:Volume": {
            "description": "Provides a Linode Volume resource.  This can be used to create, modify, and delete Linodes Block Storage Volumes.  Block Storage Volumes are removable storage disks that persist outside the life-cycle of Linode Instances. These volumes can be attached to and detached from Linode instances throughout a region.\n\nFor more information, see [How to Use Block Storage with Your Linode](https://www.linode.com/docs/platform/block-storage/how-to-use-block-storage-with-your-linode/) and the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-volume).\n\n## Example Usage\n\nThe following example shows how one might use this resource to configure a Block Storage Volume attached to a Linode Instance.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobaz = new linode.Instance(\"foobaz\", {\n    rootPass: \"3X4mp13\",\n    type: \"g6-nanode-1\",\n    region: \"us-west\",\n    tags: [\"foobaz\"],\n});\nconst foobar = new linode.Volume(\"foobar\", {\n    label: \"foo-volume\",\n    region: foobaz.region,\n    linodeId: foobaz.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobaz = linode.Instance(\"foobaz\",\n    root_pass=\"3X4mp13\",\n    type=\"g6-nanode-1\",\n    region=\"us-west\",\n    tags=[\"foobaz\"])\nfoobar = linode.Volume(\"foobar\",\n    label=\"foo-volume\",\n    region=foobaz.region,\n    linode_id=foobaz.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobaz = new Linode.Instance(\"foobaz\", new()\n    {\n        RootPass = \"3X4mp13\",\n        Type = \"g6-nanode-1\",\n        Region = \"us-west\",\n        Tags = new[]\n        {\n            \"foobaz\",\n        },\n    });\n\n    var foobar = new Linode.Volume(\"foobar\", new()\n    {\n        Label = \"foo-volume\",\n        Region = foobaz.Region,\n        LinodeId = foobaz.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobaz, err := linode.NewInstance(ctx, \"foobaz\", \u0026linode.InstanceArgs{\n\t\t\tRootPass: pulumi.String(\"3X4mp13\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t\tRegion:   pulumi.String(\"us-west\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foobaz\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewVolume(ctx, \"foobar\", \u0026linode.VolumeArgs{\n\t\t\tLabel:    pulumi.String(\"foo-volume\"),\n\t\t\tRegion:   foobaz.Region,\n\t\t\tLinodeId: foobaz.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.Volume;\nimport com.pulumi.linode.VolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobaz = new Instance(\"foobaz\", InstanceArgs.builder()\n            .rootPass(\"3X4mp13\")\n            .type(\"g6-nanode-1\")\n            .region(\"us-west\")\n            .tags(\"foobaz\")\n            .build());\n\n        var foobar = new Volume(\"foobar\", VolumeArgs.builder()\n            .label(\"foo-volume\")\n            .region(foobaz.region())\n            .linodeId(foobaz.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobaz:\n    type: linode:Instance\n    properties:\n      rootPass: 3X4mp13\n      type: g6-nanode-1\n      region: us-west\n      tags:\n        - foobaz\n  foobar:\n    type: linode:Volume\n    properties:\n      label: foo-volume\n      region: ${foobaz.region}\n      linodeId: ${foobaz.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nVolumes can also be attached using the Linode Instance config device map.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  foo:\n    type: linode:Instance\n    properties:\n      region: us-east\n      type: g6-nanode-1\n  fooInstanceConfig:\n    type: linode:InstanceConfig\n    name: foo\n    properties:\n      linodeId: ${foo.id}\n      label: boot-existing-volume\n      kernel: linode/grub2\n      devices:\n        - deviceName: sda\n          volumeId: 12345\n      booted: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nVolumes may also be cloned from existing volumes.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foobar = new linode.Volume(\"foobar\", {\n    label: \"my-cloned-volume\",\n    sourceVolumeId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoobar = linode.Volume(\"foobar\",\n    label=\"my-cloned-volume\",\n    source_volume_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foobar = new Linode.Volume(\"foobar\", new()\n    {\n        Label = \"my-cloned-volume\",\n        SourceVolumeId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewVolume(ctx, \"foobar\", \u0026linode.VolumeArgs{\n\t\t\tLabel:          pulumi.String(\"my-cloned-volume\"),\n\t\t\tSourceVolumeId: pulumi.Int(12345),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Volume;\nimport com.pulumi.linode.VolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foobar = new Volume(\"foobar\", VolumeArgs.builder()\n            .label(\"my-cloned-volume\")\n            .sourceVolumeId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foobar:\n    type: linode:Volume\n    properties:\n      label: my-cloned-volume\n      sourceVolumeId: 12345 # Region is optional when cloning a volume\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinodes Volumes can be imported using the Linode Volume `id`, e.g.\n\n```sh\n$ pulumi import linode:index/volume:Volume myvolume 1234567\n```\n\n",
            "properties": {
                "encryption": {
                    "type": "string",
                    "description": "Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.\n"
                },
                "filesystemPath": {
                    "type": "string",
                    "description": "The full filesystem path for the Volume based on the Volume's label. The path is \"/dev/disk/by-id/scsi-0Linode_Volume_\" + the Volume label\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Volume\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Instance where the Volume should be attached.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this volume will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). This field is optional for cloned volumes. *Changing `region` forces the creation of a new Linode Volume.*.\n\n- - -\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the Volume in GB.\n"
                },
                "sourceVolumeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Volume to clone. NOTE: Cloned volumes must be in the same region as the source volume.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Linode Volume. (`creating`, `active`, `resizing`, `contact_support`)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/VolumeTimeouts:VolumeTimeouts"
                }
            },
            "required": [
                "encryption",
                "filesystemPath",
                "label",
                "linodeId",
                "region",
                "size",
                "status",
                "tags"
            ],
            "inputProperties": {
                "encryption": {
                    "type": "string",
                    "description": "Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the Linode Volume\n"
                },
                "linodeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Instance where the Volume should be attached.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region where this volume will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). This field is optional for cloned volumes. *Changing `region` forces the creation of a new Linode Volume.*.\n\n- - -\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the Volume in GB.\n"
                },
                "sourceVolumeId": {
                    "type": "integer",
                    "description": "The ID of a Linode Volume to clone. NOTE: Cloned volumes must be in the same region as the source volume.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                },
                "timeouts": {
                    "$ref": "#/types/linode:index/VolumeTimeouts:VolumeTimeouts"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "encryption": {
                        "type": "string",
                        "description": "Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.\n"
                    },
                    "filesystemPath": {
                        "type": "string",
                        "description": "The full filesystem path for the Volume based on the Volume's label. The path is \"/dev/disk/by-id/scsi-0Linode_Volume_\" + the Volume label\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the Linode Volume\n"
                    },
                    "linodeId": {
                        "type": "integer",
                        "description": "The ID of a Linode Instance where the Volume should be attached.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region where this volume will be deployed.  Examples are `\"us-east\"`, `\"us-west\"`, `\"ap-south\"`, etc. See all regions [here](https://api.linode.com/v4/regions). This field is optional for cloned volumes. *Changing `region` forces the creation of a new Linode Volume.*.\n\n- - -\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the Volume in GB.\n"
                    },
                    "sourceVolumeId": {
                        "type": "integer",
                        "description": "The ID of a Linode Volume to clone. NOTE: Cloned volumes must be in the same region as the source volume.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Linode Volume. (`creating`, `active`, `resizing`, `contact_support`)\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/linode:index/VolumeTimeouts:VolumeTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/vpc:Vpc": {
            "description": "Manages a Linode VPC.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-vpc).\n\nPlease refer to linode.VpcSubnet to manage the subnets under a Linode VPC.\n\n## Example Usage\n\nCreate a VPC:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst test = new linode.Vpc(\"test\", {\n    label: \"test-vpc\",\n    region: \"us-iad\",\n    description: \"My first VPC.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ntest = linode.Vpc(\"test\",\n    label=\"test-vpc\",\n    region=\"us-iad\",\n    description=\"My first VPC.\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Linode.Vpc(\"test\", new()\n    {\n        Label = \"test-vpc\",\n        Region = \"us-iad\",\n        Description = \"My first VPC.\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewVpc(ctx, \"test\", \u0026linode.VpcArgs{\n\t\t\tLabel:       pulumi.String(\"test-vpc\"),\n\t\t\tRegion:      pulumi.String(\"us-iad\"),\n\t\t\tDescription: pulumi.String(\"My first VPC.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Vpc;\nimport com.pulumi.linode.VpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Vpc(\"test\", VpcArgs.builder()\n            .label(\"test-vpc\")\n            .region(\"us-iad\")\n            .description(\"My first VPC.\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: linode:Vpc\n    properties:\n      label: test-vpc\n      region: us-iad\n      description: My first VPC.\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date and time when the VPC was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The user-defined description of this VPC.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the VPC. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the VPC.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date and time when the VPC was last updated.\n"
                }
            },
            "required": [
                "created",
                "description",
                "label",
                "region",
                "updated"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The user-defined description of this VPC.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the VPC. This field can only contain ASCII letters, digits and dashes.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region of the VPC.\n"
                }
            },
            "requiredInputs": [
                "label",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date and time when the VPC was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The user-defined description of this VPC.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the VPC. This field can only contain ASCII letters, digits and dashes.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region of the VPC.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date and time when the VPC was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "linode:index/vpcSubnet:VpcSubnet": {
            "description": "Manages a Linode VPC subnet.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/post-vpc-subnet).\n\n## Example Usage\n\nCreate a VPC subnet:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst test = new linode.VpcSubnet(\"test\", {\n    vpcId: 123,\n    label: \"test-subnet\",\n    ipv4: \"10.0.0.0/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ntest = linode.VpcSubnet(\"test\",\n    vpc_id=123,\n    label=\"test-subnet\",\n    ipv4=\"10.0.0.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Linode.VpcSubnet(\"test\", new()\n    {\n        VpcId = 123,\n        Label = \"test-subnet\",\n        Ipv4 = \"10.0.0.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewVpcSubnet(ctx, \"test\", \u0026linode.VpcSubnetArgs{\n\t\t\tVpcId: pulumi.Int(123),\n\t\t\tLabel: pulumi.String(\"test-subnet\"),\n\t\t\tIpv4:  pulumi.String(\"10.0.0.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.VpcSubnet;\nimport com.pulumi.linode.VpcSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new VpcSubnet(\"test\", VpcSubnetArgs.builder()\n            .vpcId(123)\n            .label(\"test-subnet\")\n            .ipv4(\"10.0.0.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: linode:VpcSubnet\n    properties:\n      vpcId: 123\n      label: test-subnet\n      ipv4: 10.0.0.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nLinode Virtual Private Cloud (VPC) Subnet can be imported using the `vpc_id` followed by the subnet `id` separated by a comma, e.g.\n\n```sh\n$ pulumi import linode:index/vpcSubnet:VpcSubnet my_subnet_duplicated 1234567,7654321\n```\n\n",
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The date and time when the VPC was created.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 range of this subnet in CIDR format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the VPC. Only contains ASCII letters, digits and dashes.\n"
                },
                "linodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/linode:index/VpcSubnetLinode:VpcSubnetLinode"
                    },
                    "description": "A list of Linode IDs that added to this subnet.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "The date and time when the VPC was last updated.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The id of the parent VPC for this VPC Subnet.\n"
                }
            },
            "required": [
                "created",
                "ipv4",
                "label",
                "linodes",
                "updated",
                "vpcId"
            ],
            "inputProperties": {
                "ipv4": {
                    "type": "string",
                    "description": "The IPv4 range of this subnet in CIDR format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The label of the VPC. Only contains ASCII letters, digits and dashes.\n"
                },
                "vpcId": {
                    "type": "integer",
                    "description": "The id of the parent VPC for this VPC Subnet.\n"
                }
            },
            "requiredInputs": [
                "ipv4",
                "label",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcSubnet resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The date and time when the VPC was created.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "The IPv4 range of this subnet in CIDR format.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the VPC. Only contains ASCII letters, digits and dashes.\n"
                    },
                    "linodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/VpcSubnetLinode:VpcSubnetLinode"
                        },
                        "description": "A list of Linode IDs that added to this subnet.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "The date and time when the VPC was last updated.\n"
                    },
                    "vpcId": {
                        "type": "integer",
                        "description": "The id of the parent VPC for this VPC Subnet.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "linode:index/getAccount:getAccount": {
            "description": "Provides information about a Linode account.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-account).\n\nDue to the sensitive nature of the data exposed by this data source, it should not be used in conjunction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.\n\n## Example Usage\n\nThe following example shows how one might use this data source to access account details.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst account = linode.getAccount({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\naccount = linode.get_account()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var account = Linode.GetAccount.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetAccount(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var account = LinodeFunctions.getAccount(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  account:\n    fn::invoke:\n      function: linode:getAccount\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "activeSince": {
                        "description": "When this account was first activated.\n",
                        "type": "string"
                    },
                    "address1": {
                        "description": "First line of this Account's billing address.\n",
                        "type": "string"
                    },
                    "address2": {
                        "description": "Second line of this Account's billing address.\n",
                        "type": "string"
                    },
                    "balance": {
                        "description": "This Account's balance, in US dollars.\n",
                        "type": "number"
                    },
                    "capabilities": {
                        "description": "A set containing all the capabilities of the current Account.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "city": {
                        "description": "The city for this Account's billing address.\n",
                        "type": "string"
                    },
                    "company": {
                        "description": "The company name associated with this Account.\n",
                        "type": "string"
                    },
                    "country": {
                        "description": "The two-letter country code of this Account's billing address.\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address for this Account, for account management communications, and may be used for other communications as configured.\n",
                        "type": "string"
                    },
                    "euuid": {
                        "type": "string"
                    },
                    "firstName": {
                        "description": "The first name of the person associated with this Account.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lastName": {
                        "description": "The last name of the person associated with this Account.\n",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number associated with this Account.\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.\n",
                        "type": "string"
                    },
                    "zip": {
                        "description": "The zip code of this Account's billing address.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "activeSince",
                    "address1",
                    "address2",
                    "balance",
                    "capabilities",
                    "city",
                    "company",
                    "country",
                    "email",
                    "euuid",
                    "firstName",
                    "id",
                    "lastName",
                    "phone",
                    "state",
                    "zip"
                ],
                "type": "object"
            }
        },
        "linode:index/getAccountAvailabilities:getAccountAvailabilities": {
            "description": "Provides information about services availabilities for the current Linode account.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-availability).\n\n## Example Usage\n\nThe following example shows how one might use this data source to discover regions without specific service availability.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nexport = async () =\u003e {\n    const filtered_availabilities = await linode.getAccountAvailabilities({\n        filters: [{\n            name: \"unavailable\",\n            values: [\"Linodes\"],\n        }],\n    });\n    return {\n        \"regions-without-linodes\": filtered_availabilities.availabilities.map(__item =\u003e __item.region),\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_availabilities = linode.get_account_availabilities(filters=[{\n    \"name\": \"unavailable\",\n    \"values\": [\"Linodes\"],\n}])\npulumi.export(\"regions-without-linodes\", [__item.region for __item in filtered_availabilities.availabilities])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_availabilities = Linode.GetAccountAvailabilities.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetAccountAvailabilitiesFilterInputArgs\n            {\n                Name = \"unavailable\",\n                Values = new[]\n                {\n                    \"Linodes\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"regions-without-linodes\"] = filtered_availabilities.Apply(filtered_availabilities =\u003e filtered_availabilities.Apply(getAccountAvailabilitiesResult =\u003e getAccountAvailabilitiesResult.Availabilities).Select(__item =\u003e __item.Region).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nfiltered_availabilities, err := linode.GetAccountAvailabilities(ctx, \u0026linode.GetAccountAvailabilitiesArgs{\nFilters: []linode.GetAccountAvailabilitiesFilter{\n{\nName: \"unavailable\",\nValues: []string{\n\"Linodes\",\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"regions-without-linodes\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:8,11-59)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetAccountAvailabilitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-availabilities = LinodeFunctions.getAccountAvailabilities(GetAccountAvailabilitiesArgs.builder()\n            .filters(GetAccountAvailabilitiesFilterArgs.builder()\n                .name(\"unavailable\")\n                .values(\"Linodes\")\n                .build())\n            .build());\n\n        ctx.export(\"regions-without-linodes\", filtered_availabilities.availabilities().stream().map(element -\u003e element.region()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `region`\n\n* `unavailable`\n\n* `available`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountAvailabilities.\n",
                "properties": {
                    "availabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountAvailabilitiesAvailability:getAccountAvailabilitiesAvailability"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountAvailabilitiesFilter:getAccountAvailabilitiesFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountAvailabilities.\n",
                "properties": {
                    "availabilities": {
                        "items": {
                            "$ref": "#/types/linode:index/getAccountAvailabilitiesAvailability:getAccountAvailabilitiesAvailability"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getAccountAvailabilitiesFilter:getAccountAvailabilitiesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getAccountAvailability:getAccountAvailability": {
            "description": "Provides details about service availability in a region to an account specifically.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-account-availability).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode account availability.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myAccountAvailability = linode.getAccountAvailability({\n    region: \"us-east\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_account_availability = linode.get_account_availability(region=\"us-east\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAccountAvailability = Linode.GetAccountAvailability.Invoke(new()\n    {\n        Region = \"us-east\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetAccountAvailability(ctx, \u0026linode.GetAccountAvailabilityArgs{\n\t\t\tRegion: \"us-east\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetAccountAvailabilityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAccountAvailability = LinodeFunctions.getAccountAvailability(GetAccountAvailabilityArgs.builder()\n            .region(\"us-east\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAccountAvailability:\n    fn::invoke:\n      function: linode:getAccountAvailability\n      arguments:\n        region: us-east\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountAvailability.\n",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "The region ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "region"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountAvailability.\n",
                "properties": {
                    "availables": {
                        "description": "A set of services which are available to the account in a region.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The region ID.\n",
                        "type": "string"
                    },
                    "unavailables": {
                        "description": "A set of services which are unavailable to the account in a region.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "availables",
                    "region",
                    "unavailables",
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getAccountLogin:getAccountLogin": {
            "description": "Provides details about a specific Linode account login.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-account-login).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode account login.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myAccountLogin = linode.getAccountLogin({\n    id: 123456,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_account_login = linode.get_account_login(id=123456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAccountLogin = Linode.GetAccountLogin.Invoke(new()\n    {\n        Id = 123456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetAccountLogin(ctx, \u0026linode.GetAccountLoginArgs{\n\t\t\tId: 123456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetAccountLoginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAccountLogin = LinodeFunctions.getAccountLogin(GetAccountLoginArgs.builder()\n            .id(123456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAccountLogin:\n    fn::invoke:\n      function: linode:getAccountLogin\n      arguments:\n        id: 123456\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountLogin.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of this login object.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAccountLogin.\n",
                "properties": {
                    "datetime": {
                        "description": "When the login was initiated.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique ID of this login object.\n",
                        "type": "integer"
                    },
                    "ip": {
                        "description": "The remote IP address that requested the login.\n",
                        "type": "string"
                    },
                    "restricted": {
                        "description": "True if the User that was logged into was a restricted User, false otherwise.\n",
                        "type": "boolean"
                    },
                    "status": {
                        "type": "string"
                    },
                    "username": {
                        "description": "The username of the User that was logged into.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "datetime",
                    "id",
                    "ip",
                    "restricted",
                    "status",
                    "username"
                ],
                "type": "object"
            }
        },
        "linode:index/getAccountLogins:getAccountLogins": {
            "description": "Provides information about Linode account logins that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-account-logins).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode account login.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_account_logins = linode.getAccountLogins({\n    filters: [\n        {\n            name: \"restricted\",\n            values: [\"true\"],\n        },\n        {\n            name: \"username\",\n            values: [\"myUsername\"],\n        },\n    ],\n});\nexport const loginIds = filtered_account_logins.then(filtered_account_logins =\u003e filtered_account_logins.logins.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_account_logins = linode.get_account_logins(filters=[\n    {\n        \"name\": \"restricted\",\n        \"values\": [\"true\"],\n    },\n    {\n        \"name\": \"username\",\n        \"values\": [\"myUsername\"],\n    },\n])\npulumi.export(\"loginIds\", [__item.id for __item in filtered_account_logins.logins])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_account_logins = Linode.GetAccountLogins.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetAccountLoginsFilterInputArgs\n            {\n                Name = \"restricted\",\n                Values = new[]\n                {\n                    \"true\",\n                },\n            },\n            new Linode.Inputs.GetAccountLoginsFilterInputArgs\n            {\n                Name = \"username\",\n                Values = new[]\n                {\n                    \"myUsername\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"loginIds\"] = filtered_account_logins.Apply(filtered_account_logins =\u003e filtered_account_logins.Apply(getAccountLoginsResult =\u003e getAccountLoginsResult.Logins).Select(__item =\u003e __item.Id).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nfiltered_account_logins, err := linode.GetAccountLogins(ctx, \u0026linode.GetAccountLoginsArgs{\nFilters: []linode.GetAccountLoginsFilter{\n{\nName: \"restricted\",\nValues: []string{\n\"true\",\n},\n},\n{\nName: \"username\",\nValues: []string{\n\"myUsername\",\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"loginIds\", pulumi.IntArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:11,11-47)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetAccountLoginsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-account-logins = LinodeFunctions.getAccountLogins(GetAccountLoginsArgs.builder()\n            .filters(            \n                GetAccountLoginsFilterArgs.builder()\n                    .name(\"restricted\")\n                    .values(\"true\")\n                    .build(),\n                GetAccountLoginsFilterArgs.builder()\n                    .name(\"username\")\n                    .values(\"myUsername\")\n                    .build())\n            .build());\n\n        ctx.export(\"loginIds\", filtered_account_logins.logins().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `ip`\n\n* `restricted`\n\n* `username`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountLogins.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsFilter:getAccountLoginsFilter"
                        }
                    },
                    "logins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsLogin:getAccountLoginsLogin"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountLogins.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsFilter:getAccountLoginsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of this login object.\n",
                        "type": "string"
                    },
                    "logins": {
                        "items": {
                            "$ref": "#/types/linode:index/getAccountLoginsLogin:getAccountLoginsLogin"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getAccountSettings:getAccountSettings": {
            "description": "Provides information about Linode account settings.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-account-settings).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about Linode account settings.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getAccountSettings({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_account_settings()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetAccountSettings.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupAccountSettings(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getAccountSettings(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: linode:getAccountSettings\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getAccountSettings.\n",
                "properties": {
                    "backupsEnabled": {
                        "description": "Account-wide backups default.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "longviewSubscription": {
                        "description": "The Longview Pro tier you are currently subscribed to.\n",
                        "type": "string"
                    },
                    "managed": {
                        "description": "Enables monitoring for connectivity, response, and total request time.\n",
                        "type": "boolean"
                    },
                    "networkHelper": {
                        "description": "Enables network helper across all users by default for new Linodes and Linode Configs.\n",
                        "type": "boolean"
                    },
                    "objectStorage": {
                        "description": "A string describing the status of this account’s Object Storage service enrollment.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "backupsEnabled",
                    "id",
                    "longviewSubscription",
                    "managed",
                    "networkHelper",
                    "objectStorage"
                ],
                "type": "object"
            }
        },
        "linode:index/getChildAccount:getChildAccount": {
            "description": "Provides information about a Linode Child Account.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-child-account).\n\nDue to the sensitive nature of the data exposed by this data source, it should not be used in conjunction with the `LINODE_DEBUG` option.  See the [debugging notes](https://www.terraform.io/providers/linode/linode/latest/docs#debugging) for more details.\n\n**NOTE: Parent/Child related features may not be generally available.**\n\n## Example Usage\n\nThe following example shows how one might use this data source to access child account details.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst account = linode.getChildAccount({\n    euuid: \"FFFFFFFF-FFFF-FFFF-FFFFFFFFFFFFFFFF\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\naccount = linode.get_child_account(euuid=\"FFFFFFFF-FFFF-FFFF-FFFFFFFFFFFFFFFF\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var account = Linode.GetChildAccount.Invoke(new()\n    {\n        Euuid = \"FFFFFFFF-FFFF-FFFF-FFFFFFFFFFFFFFFF\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetChildAccount(ctx, \u0026linode.GetChildAccountArgs{\n\t\t\tEuuid: \"FFFFFFFF-FFFF-FFFF-FFFFFFFFFFFFFFFF\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetChildAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var account = LinodeFunctions.getChildAccount(GetChildAccountArgs.builder()\n            .euuid(\"FFFFFFFF-FFFF-FFFF-FFFFFFFFFFFFFFFF\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  account:\n    fn::invoke:\n      function: linode:getChildAccount\n      arguments:\n        euuid: FFFFFFFF-FFFF-FFFF-FFFFFFFFFFFFFFFF\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getChildAccount.\n",
                "properties": {
                    "euuid": {
                        "type": "string",
                        "description": "The unique EUUID of this Child Account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "euuid"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getChildAccount.\n",
                "properties": {
                    "activeSince": {
                        "description": "When this account was first activated.\n",
                        "type": "string"
                    },
                    "address1": {
                        "description": "First line of this Account's billing address.\n",
                        "type": "string"
                    },
                    "address2": {
                        "description": "Second line of this Account's billing address.\n",
                        "type": "string"
                    },
                    "balance": {
                        "description": "This Account's balance, in US dollars.\n",
                        "type": "number"
                    },
                    "capabilities": {
                        "description": "A set containing all the capabilities of this Account.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "city": {
                        "description": "The city for this Account's billing address.\n",
                        "type": "string"
                    },
                    "company": {
                        "description": "The company name associated with this Account.\n",
                        "type": "string"
                    },
                    "country": {
                        "description": "The two-letter country code of this Account's billing address.\n",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email address for this Account, for account management communications, and may be used for other communications as configured.\n",
                        "type": "string"
                    },
                    "euuid": {
                        "type": "string"
                    },
                    "firstName": {
                        "description": "The first name of the person associated with this Account.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lastName": {
                        "description": "The last name of the person associated with this Account.\n",
                        "type": "string"
                    },
                    "phone": {
                        "description": "The phone number associated with this Account.\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.\n",
                        "type": "string"
                    },
                    "zip": {
                        "description": "The zip code of this Account's billing address.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "activeSince",
                    "address1",
                    "address2",
                    "balance",
                    "capabilities",
                    "city",
                    "company",
                    "country",
                    "email",
                    "euuid",
                    "firstName",
                    "id",
                    "lastName",
                    "phone",
                    "state",
                    "zip"
                ],
                "type": "object"
            }
        },
        "linode:index/getChildAccounts:getChildAccounts": {
            "description": "Provides information about Linode Child Accounts that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-child-accounts).\n\n**NOTE: Parent/Child related features may not be generally available.**\n\n## Example Usage\n\nThe following example shows how one might use this data source to access Child Accounts under the current Account.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getChildAccounts({});\nconst filtered = linode.getChildAccounts({\n    filters: [\n        {\n            name: \"email\",\n            values: [\"example@linode.com\"],\n        },\n        {\n            name: \"first_name\",\n            values: [\"John\"],\n        },\n        {\n            name: \"last_name\",\n            values: [\"Smith\"],\n        },\n    ],\n});\nexport const allAccounts = all.then(all =\u003e all.childAccounts.map(__item =\u003e __item.euuid));\nexport const filteredAccounts = filtered.then(filtered =\u003e filtered.childAccounts.map(__item =\u003e __item.euuid));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_child_accounts()\nfiltered = linode.get_child_accounts(filters=[\n    {\n        \"name\": \"email\",\n        \"values\": [\"example@linode.com\"],\n    },\n    {\n        \"name\": \"first_name\",\n        \"values\": [\"John\"],\n    },\n    {\n        \"name\": \"last_name\",\n        \"values\": [\"Smith\"],\n    },\n])\npulumi.export(\"allAccounts\", [__item.euuid for __item in all.child_accounts])\npulumi.export(\"filteredAccounts\", [__item.euuid for __item in filtered.child_accounts])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetChildAccounts.Invoke();\n\n    var filtered = Linode.GetChildAccounts.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetChildAccountsFilterInputArgs\n            {\n                Name = \"email\",\n                Values = new[]\n                {\n                    \"example@linode.com\",\n                },\n            },\n            new Linode.Inputs.GetChildAccountsFilterInputArgs\n            {\n                Name = \"first_name\",\n                Values = new[]\n                {\n                    \"John\",\n                },\n            },\n            new Linode.Inputs.GetChildAccountsFilterInputArgs\n            {\n                Name = \"last_name\",\n                Values = new[]\n                {\n                    \"Smith\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"allAccounts\"] = all.Apply(getChildAccountsResult =\u003e getChildAccountsResult.ChildAccounts).Select(__item =\u003e __item.Euuid).ToList(),\n        [\"filteredAccounts\"] = filtered.Apply(getChildAccountsResult =\u003e getChildAccountsResult.ChildAccounts).Select(__item =\u003e __item.Euuid).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall, err := linode.GetChildAccounts(ctx, \u0026linode.GetChildAccountsArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nfiltered, err := linode.GetChildAccounts(ctx, \u0026linode.GetChildAccountsArgs{\nFilters: []linode.GetChildAccountsFilter{\n{\nName: \"email\",\nValues: []string{\n\"example@linode.com\",\n},\n},\n{\nName: \"first_name\",\nValues: []string{\n\"John\",\n},\n},\n{\nName: \"last_name\",\nValues: []string{\n\"Smith\",\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"allAccounts\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:16,11-37)))\nctx.Export(\"filteredAccounts\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:20,11-42)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetChildAccountsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getChildAccounts(GetChildAccountsArgs.builder()\n            .build());\n\n        final var filtered = LinodeFunctions.getChildAccounts(GetChildAccountsArgs.builder()\n            .filters(            \n                GetChildAccountsFilterArgs.builder()\n                    .name(\"email\")\n                    .values(\"example@linode.com\")\n                    .build(),\n                GetChildAccountsFilterArgs.builder()\n                    .name(\"first_name\")\n                    .values(\"John\")\n                    .build(),\n                GetChildAccountsFilterArgs.builder()\n                    .name(\"last_name\")\n                    .values(\"Smith\")\n                    .build())\n            .build());\n\n        ctx.export(\"allAccounts\", all.childAccounts().stream().map(element -\u003e element.euuid()).collect(toList()));\n        ctx.export(\"filteredAccounts\", filtered.childAccounts().stream().map(element -\u003e element.euuid()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `euuid`\n\n* `email`\n\n* `first_name`\n\n* `last_name`\n\n* `company`\n\n* `address_1`\n\n* `address_2`\n\n* `phone`\n\n* `city`\n\n* `state`\n\n* `country`\n\n* `zip`\n\n* `capabilities`\n\n* `active_since`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getChildAccounts.\n",
                "properties": {
                    "childAccounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getChildAccountsChildAccount:getChildAccountsChildAccount"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getChildAccountsFilter:getChildAccountsFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getChildAccounts.\n",
                "properties": {
                    "childAccounts": {
                        "items": {
                            "$ref": "#/types/linode:index/getChildAccountsChildAccount:getChildAccountsChildAccount"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getChildAccountsFilter:getChildAccountsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabaseBackups:getDatabaseBackups": {
            "description": "\u003e **DEPRECATION NOTICE:** This data source has been deprecated.\n\nProvides information about Linode Database Backups that match a set of filters.\nFor more information, see the Linode APIv4 docs for [MySQL](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance-backups) and [PostgreSQL](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).\n\n## Example Usage\n\nGet information about all backups for a MySQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all_backups = linode.getDatabaseBackups({\n    databaseId: 12345,\n    databaseType: \"mysql\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_backups = linode.get_database_backups(database_id=12345,\n    database_type=\"mysql\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_backups = Linode.GetDatabaseBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n        DatabaseType = \"mysql\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseBackups(ctx, \u0026linode.GetDatabaseBackupsArgs{\n\t\t\tDatabaseId:   12345,\n\t\t\tDatabaseType: \"mysql\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()\n            .databaseId(12345)\n            .databaseType(\"mysql\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all-backups:\n    fn::invoke:\n      function: linode:getDatabaseBackups\n      arguments:\n        databaseId: 12345\n        databaseType: mysql\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all automatic PostgreSQL Database Backups:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst auto_backups = linode.getDatabaseBackups({\n    databaseId: 12345,\n    databaseType: \"postgresql\",\n    filters: [{\n        name: \"type\",\n        values: [\"auto\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nauto_backups = linode.get_database_backups(database_id=12345,\n    database_type=\"postgresql\",\n    filters=[{\n        \"name\": \"type\",\n        \"values\": [\"auto\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var auto_backups = Linode.GetDatabaseBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n        DatabaseType = \"postgresql\",\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseBackupsFilterInputArgs\n            {\n                Name = \"type\",\n                Values = new[]\n                {\n                    \"auto\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseBackups(ctx, \u0026linode.GetDatabaseBackupsArgs{\n\t\t\tDatabaseId:   12345,\n\t\t\tDatabaseType: \"postgresql\",\n\t\t\tFilters: []linode.GetDatabaseBackupsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"auto\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var auto-backups = LinodeFunctions.getDatabaseBackups(GetDatabaseBackupsArgs.builder()\n            .databaseId(12345)\n            .databaseType(\"postgresql\")\n            .filters(GetDatabaseBackupsFilterArgs.builder()\n                .name(\"type\")\n                .values(\"auto\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  auto-backups:\n    fn::invoke:\n      function: linode:getDatabaseBackups\n      arguments:\n        databaseId: 12345\n        databaseType: postgresql\n        filters:\n          - name: type\n            values:\n              - auto\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseBackups.\n",
                "properties": {
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsBackup:getDatabaseBackupsBackup"
                        }
                    },
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the database to retrieve backups for.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The type of the database to retrieve backups for. (`mysql`, `postgresql`)\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsFilter:getDatabaseBackupsFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest backup will be returned.\n\n* `filter` - (Optional) A set of filters used to select database backups that meet certain requirements.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`created`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId",
                    "databaseType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseBackups.\n",
                "properties": {
                    "backups": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsBackup:getDatabaseBackupsBackup"
                        },
                        "type": "array"
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "databaseType": {
                        "type": "string"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseBackupsFilter:getDatabaseBackupsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of the database backup object.\n",
                        "type": "integer"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "databaseId",
                    "databaseType",
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabaseEngines:getDatabaseEngines": {
            "description": "Provides information about Linode Managed Database engines that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-engines).\n\n## Example Usage\n\nGet information about all Linode Managed Database engines:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getDatabaseEngines({});\nexport const engineIds = all.then(all =\u003e all.engines.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_database_engines()\npulumi.export(\"engineIds\", [__item.id for __item in all.engines])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetDatabaseEngines.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"engineIds\"] = all.Apply(getDatabaseEnginesResult =\u003e getDatabaseEnginesResult.Engines).Select(__item =\u003e __item.Id).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall, err := linode.GetDatabaseEngines(ctx, \u0026linode.GetDatabaseEnginesArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"engineIds\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:3,11-28)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()\n            .build());\n\n        ctx.export(\"engineIds\", all.engines().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all Linode MySQL Database engines:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mysql = linode.getDatabaseEngines({\n    filters: [{\n        name: \"engine\",\n        values: [\"mysql\"],\n    }],\n});\nexport const engineIds = mysql.then(mysql =\u003e mysql.engines.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmysql = linode.get_database_engines(filters=[{\n    \"name\": \"engine\",\n    \"values\": [\"mysql\"],\n}])\npulumi.export(\"engineIds\", [__item.id for __item in mysql.engines])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysql = Linode.GetDatabaseEngines.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseEnginesFilterInputArgs\n            {\n                Name = \"engine\",\n                Values = new[]\n                {\n                    \"mysql\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"engineIds\"] = mysql.Apply(getDatabaseEnginesResult =\u003e getDatabaseEnginesResult.Engines).Select(__item =\u003e __item.Id).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nmysql, err := linode.GetDatabaseEngines(ctx, \u0026linode.GetDatabaseEnginesArgs{\nFilters: []linode.GetDatabaseEnginesFilter{\n{\nName: \"engine\",\nValues: []string{\n\"mysql\",\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"engineIds\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:8,11-30)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()\n            .filters(GetDatabaseEnginesFilterArgs.builder()\n                .name(\"engine\")\n                .values(\"mysql\")\n                .build())\n            .build());\n\n        ctx.export(\"engineIds\", mysql.engines().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreate a Linode MySQL Database using the latest support MySQL version:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mysql = linode.getDatabaseEngines({\n    latest: true,\n    filters: [{\n        name: \"engine\",\n        values: [\"mysql\"],\n    }],\n});\nconst myDb = new linode.DatabaseMysql(\"my_db\", {\n    label: \"mydb\",\n    engineId: mysql.then(mysql =\u003e mysql.engines?.[0]?.id),\n    region: \"us-southeast\",\n    type: \"g6-nanode-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmysql = linode.get_database_engines(latest=True,\n    filters=[{\n        \"name\": \"engine\",\n        \"values\": [\"mysql\"],\n    }])\nmy_db = linode.DatabaseMysql(\"my_db\",\n    label=\"mydb\",\n    engine_id=mysql.engines[0].id,\n    region=\"us-southeast\",\n    type=\"g6-nanode-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysql = Linode.GetDatabaseEngines.Invoke(new()\n    {\n        Latest = true,\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseEnginesFilterInputArgs\n            {\n                Name = \"engine\",\n                Values = new[]\n                {\n                    \"mysql\",\n                },\n            },\n        },\n    });\n\n    var myDb = new Linode.DatabaseMysql(\"my_db\", new()\n    {\n        Label = \"mydb\",\n        EngineId = mysql.Apply(getDatabaseEnginesResult =\u003e getDatabaseEnginesResult.Engines[0]?.Id),\n        Region = \"us-southeast\",\n        Type = \"g6-nanode-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmysql, err := linode.GetDatabaseEngines(ctx, \u0026linode.GetDatabaseEnginesArgs{\n\t\t\tLatest: pulumi.BoolRef(true),\n\t\t\tFilters: []linode.GetDatabaseEnginesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"engine\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"mysql\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.NewDatabaseMysql(ctx, \"my_db\", \u0026linode.DatabaseMysqlArgs{\n\t\t\tLabel:    pulumi.String(\"mydb\"),\n\t\t\tEngineId: pulumi.String(mysql.Engines[0].Id),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-nanode-1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseEnginesArgs;\nimport com.pulumi.linode.DatabaseMysql;\nimport com.pulumi.linode.DatabaseMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysql = LinodeFunctions.getDatabaseEngines(GetDatabaseEnginesArgs.builder()\n            .latest(true)\n            .filters(GetDatabaseEnginesFilterArgs.builder()\n                .name(\"engine\")\n                .values(\"mysql\")\n                .build())\n            .build());\n\n        var myDb = new DatabaseMysql(\"myDb\", DatabaseMysqlArgs.builder()\n            .label(\"mydb\")\n            .engineId(mysql.engines()[0].id())\n            .region(\"us-southeast\")\n            .type(\"g6-nanode-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDb:\n    type: linode:DatabaseMysql\n    name: my_db\n    properties:\n      label: mydb\n      engineId: ${mysql.engines[0].id}\n      region: us-southeast\n      type: g6-nanode-1\nvariables:\n  mysql:\n    fn::invoke:\n      function: linode:getDatabaseEngines\n      arguments:\n        latest: true\n        filters:\n          - name: engine\n            values:\n              - mysql\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseEngines.\n",
                "properties": {
                    "engines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesEngine:getDatabaseEnginesEngine"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesFilter:getDatabaseEnginesFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest engine version will be returned.\n\n* `filter` - (Optional) A set of filters used to select engines that meet certain requirements.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`version`)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseEngines.\n",
                "properties": {
                    "engines": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesEngine:getDatabaseEnginesEngine"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseEnginesFilter:getDatabaseEnginesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The Managed Database engine ID in engine/version format.\n",
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabaseMysql:getDatabaseMysql": {
            "description": "\u003e **DEPRECATION NOTICE:** This data source has been deprecated. Please use linode.DatabaseMysqlV2 for all future implementations.\n\nProvides information about a Linode MySQL Database.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-instances).\n\n## Example Usage\n\nGet information about a MySQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_db = linode.getDatabaseMysql({\n    id: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_mysql(id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabaseMysql.Invoke(new()\n    {\n        Id = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabaseMysql(ctx, \u0026linode.LookupDatabaseMysqlArgs{\n\t\t\tId: pulumi.IntRef(12345),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabaseMysql(GetDatabaseMysqlArgs.builder()\n            .id(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      function: linode:getDatabaseMysql\n      arguments:\n        id: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## updates\n\nThe following arguments are exported by the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseMysql.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the MySQL database. Deprecated: Use id instead.\n",
                        "deprecationMessage": "Configure `id` instead. This attribute will be removed in the next major version of the provider."
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of the MySQL database. Mutually exclusive with `database_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseMysql.\n",
                "properties": {
                    "allowLists": {
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "caCert": {
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "clusterSize": {
                        "description": "The number of Linode Instance nodes deployed to the Managed Database.\n",
                        "type": "integer"
                    },
                    "created": {
                        "description": "When this Managed Database was created.\n",
                        "type": "string"
                    },
                    "databaseId": {
                        "deprecationMessage": "Configure `id` instead. This attribute will be removed in the next major version of the provider.",
                        "type": "integer"
                    },
                    "encrypted": {
                        "description": "Whether the Managed Databases is encrypted.\n",
                        "type": "boolean"
                    },
                    "engine": {
                        "description": "The Managed Database engine. (e.g. `mysql`)\n",
                        "type": "string"
                    },
                    "engineId": {
                        "description": "The Managed Database engine in engine/version format. (e.g. `mysql/8.0.30`)\n",
                        "type": "string"
                    },
                    "hostPrimary": {
                        "description": "The primary host for the Managed Database.\n",
                        "type": "string"
                    },
                    "hostSecondary": {
                        "description": "The secondary/private network host for the Managed Database.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "label": {
                        "description": "A unique, user-defined string referring to the Managed Database.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The region that hosts this Linode Managed Database.\n",
                        "type": "string"
                    },
                    "replicationType": {
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)\n",
                        "type": "string"
                    },
                    "rootPassword": {
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "rootUsername": {
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "sslConnection": {
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n",
                        "type": "boolean"
                    },
                    "status": {
                        "description": "The operating status of the Managed Database.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "When this Managed Database was last updated.\n",
                        "type": "string"
                    },
                    "updates": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlUpdate:getDatabaseMysqlUpdate"
                        },
                        "type": "array"
                    },
                    "version": {
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "created",
                    "encrypted",
                    "engine",
                    "engineId",
                    "hostPrimary",
                    "hostSecondary",
                    "label",
                    "region",
                    "replicationType",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "type",
                    "updated",
                    "updates",
                    "version"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabaseMysqlBackups:getDatabaseMysqlBackups": {
            "description": "\u003e **DEPRECATION NOTICE:** This data source has been deprecated.\n\nProvides information about Linode MySQL Database Backups that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance-backups).\n\n## Example Usage\n\nGet information about all backups for a MySQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all_backups = linode.getDatabaseMysqlBackups({\n    databaseId: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_backups = linode.get_database_mysql_backups(database_id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_backups = Linode.GetDatabaseMysqlBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseMysqlBackups(ctx, \u0026linode.GetDatabaseMysqlBackupsArgs{\n\t\t\tDatabaseId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()\n            .databaseId(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all-backups:\n    fn::invoke:\n      function: linode:getDatabaseMysqlBackups\n      arguments:\n        databaseId: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all automatic MySQL Database Backups:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst auto_backups = linode.getDatabaseMysqlBackups({\n    databaseId: 12345,\n    filters: [{\n        name: \"type\",\n        values: [\"auto\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nauto_backups = linode.get_database_mysql_backups(database_id=12345,\n    filters=[{\n        \"name\": \"type\",\n        \"values\": [\"auto\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var auto_backups = Linode.GetDatabaseMysqlBackups.Invoke(new()\n    {\n        DatabaseId = 12345,\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabaseMysqlBackupsFilterInputArgs\n            {\n                Name = \"type\",\n                Values = new[]\n                {\n                    \"auto\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDatabaseMysqlBackups(ctx, \u0026linode.GetDatabaseMysqlBackupsArgs{\n\t\t\tDatabaseId: 12345,\n\t\t\tFilters: []linode.GetDatabaseMysqlBackupsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"auto\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var auto-backups = LinodeFunctions.getDatabaseMysqlBackups(GetDatabaseMysqlBackupsArgs.builder()\n            .databaseId(12345)\n            .filters(GetDatabaseMysqlBackupsFilterArgs.builder()\n                .name(\"type\")\n                .values(\"auto\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  auto-backups:\n    fn::invoke:\n      function: linode:getDatabaseMysqlBackups\n      arguments:\n        databaseId: 12345\n        filters:\n          - name: type\n            values:\n              - auto\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseMysqlBackups.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the database to retrieve backups for.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlBackupsFilter:getDatabaseMysqlBackupsFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest backup will be returned.\n\n* `filter` - (Optional) A set of filters used to select database backups that meet certain requirements.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`created`)\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseMysqlBackups.\n",
                "properties": {
                    "backups": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlBackupsBackup:getDatabaseMysqlBackupsBackup"
                        },
                        "type": "array"
                    },
                    "databaseId": {
                        "type": "integer"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlBackupsFilter:getDatabaseMysqlBackupsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "backups",
                    "databaseId",
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabaseMysqlV2:getDatabaseMysqlV2": {
            "description": "Provides information about a Linode MySQL Database.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-mysql-instance).\n\n## Example Usage\n\nGet information about a MySQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_db = linode.getDatabaseMysqlV2({\n    id: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_mysql_v2(id=\"12345\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabaseMysqlV2.Invoke(new()\n    {\n        Id = \"12345\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabaseMysqlV2(ctx, \u0026linode.LookupDatabaseMysqlV2Args{\n\t\t\tId: \"12345\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabaseMysqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabaseMysqlV2(GetDatabaseMysqlV2Args.builder()\n            .id(\"12345\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      function: linode:getDatabaseMysqlV2\n      arguments:\n        id: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## pending_updates\n\nThe following arguments are exposed by each entry in the `pending_updates` attribute:\n\n* `deadline` - The time when a mandatory update needs to be applied.\n\n* `description` - A description of the update.\n\n* `planned_for` - The date and time a maintenance update will be applied.\n\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - The frequency at which maintenance occurs. (`weekly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseMysqlV2.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the MySQL database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseMysqlV2.\n",
                "properties": {
                    "allowLists": {
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "caCert": {
                        "description": "The base64-encoded SSL CA certificate for the Managed Database.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "clusterSize": {
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "type": "integer"
                    },
                    "created": {
                        "description": "When this Managed Database was created.\n",
                        "type": "string"
                    },
                    "encrypted": {
                        "description": "Whether the Managed Databases is encrypted.\n",
                        "type": "boolean"
                    },
                    "engine": {
                        "description": "The Managed Database engine. (e.g. `mysql`)\n",
                        "type": "string"
                    },
                    "engineId": {
                        "description": "The Managed Database engine in engine/version format. (e.g. `mysql`)\n",
                        "type": "string"
                    },
                    "forkRestoreTime": {
                        "description": "The database timestamp from which it was restored.\n",
                        "type": "string"
                    },
                    "forkSource": {
                        "description": "The ID of the database that was forked from.\n",
                        "type": "integer"
                    },
                    "hostPrimary": {
                        "description": "The primary host for the Managed Database.\n",
                        "type": "string"
                    },
                    "hostSecondary": {
                        "description": "The secondary/private host for the managed database.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "description": "A unique, user-defined string referring to the Managed Database.\n",
                        "type": "string"
                    },
                    "members": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "oldestRestoreTime": {
                        "type": "string"
                    },
                    "pendingUpdates": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabaseMysqlV2PendingUpdate:getDatabaseMysqlV2PendingUpdate"
                        },
                        "type": "array"
                    },
                    "platform": {
                        "description": "The back-end platform for relational databases used by the service.\n",
                        "type": "string"
                    },
                    "port": {
                        "description": "The access port for this Managed Database.\n",
                        "type": "integer"
                    },
                    "region": {
                        "description": "The region to use for the Managed Database.\n",
                        "type": "string"
                    },
                    "rootPassword": {
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "rootUsername": {
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "sslConnection": {
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n",
                        "type": "boolean"
                    },
                    "status": {
                        "description": "The operating status of the Managed Database.\n",
                        "type": "string"
                    },
                    "suspended": {
                        "description": "Whether this Managed Database is suspended.\n",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The Linode Instance type used for the nodes of the Managed Database.\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "When this Managed Database was last updated.\n",
                        "type": "string"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/getDatabaseMysqlV2Updates:getDatabaseMysqlV2Updates"
                    },
                    "version": {
                        "description": "The Managed Database engine version. (e.g. `13.2`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "created",
                    "encrypted",
                    "engine",
                    "engineId",
                    "forkRestoreTime",
                    "forkSource",
                    "hostPrimary",
                    "hostSecondary",
                    "id",
                    "label",
                    "members",
                    "oldestRestoreTime",
                    "pendingUpdates",
                    "platform",
                    "port",
                    "region",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "suspended",
                    "type",
                    "updated",
                    "updates",
                    "version"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabasePostgresql:getDatabasePostgresql": {
            "description": "\u003e **DEPRECATION NOTICE:** This data source has been deprecated. Please use linode.DatabasePostgresqlV2 for all future implementations.\n\nProvides information about a Linode PostgreSQL Database.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).\n\n## Example Usage\n\nGet information about a PostgreSQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_db = linode.getDatabasePostgresql({\n    id: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_postgresql(id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabasePostgresql.Invoke(new()\n    {\n        Id = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabasePostgresql(ctx, \u0026linode.LookupDatabasePostgresqlArgs{\n\t\t\tId: pulumi.IntRef(12345),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasePostgresqlArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabasePostgresql(GetDatabasePostgresqlArgs.builder()\n            .id(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      function: linode:getDatabasePostgresql\n      arguments:\n        id: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## updates\n\nThe following arguments are exported by the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - Whether maintenance occurs on a weekly or monthly basis. (`weekly`, `monthly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n\n* `week_of_month` - The week of the month to perform monthly frequency updates. Required for `monthly` frequency updates. (`1`..`4`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabasePostgresql.\n",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "The ID of the PostgreSQL database. Deprecated: Use id instead.\n",
                        "deprecationMessage": "Configure `id` instead. This attribute will be removed in the next major version of the provider."
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of the PostgreSQL database. Mutually exclusive with `database_id`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabasePostgresql.\n",
                "properties": {
                    "allowLists": {
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "caCert": {
                        "description": "The base64-encoded SSL CA certificate for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "clusterSize": {
                        "description": "The number of Linode Instance nodes deployed to the Managed Database.\n",
                        "type": "integer"
                    },
                    "created": {
                        "description": "When this Managed Database was created.\n",
                        "type": "string"
                    },
                    "databaseId": {
                        "deprecationMessage": "Configure `id` instead. This attribute will be removed in the next major version of the provider.",
                        "type": "integer"
                    },
                    "encrypted": {
                        "description": "Whether the Managed Databases is encrypted.\n",
                        "type": "boolean"
                    },
                    "engine": {
                        "description": "The Managed Database engine. (e.g. `postgresql`)\n",
                        "type": "string"
                    },
                    "engineId": {
                        "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/13.2`)\n",
                        "type": "string"
                    },
                    "hostPrimary": {
                        "description": "The primary host for the Managed Database.\n",
                        "type": "string"
                    },
                    "hostSecondary": {
                        "description": "The secondary/private network host for the Managed Database.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "label": {
                        "description": "A unique, user-defined string referring to the Managed Database.\n",
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "region": {
                        "description": "The region that hosts this Linode Managed Database.\n",
                        "type": "string"
                    },
                    "replicationCommitType": {
                        "description": "(Optional) The synchronization level of the replicating server. (`on`, `local`, `remote_write`, `remote_apply`, `off`)\n",
                        "type": "string"
                    },
                    "replicationType": {
                        "description": "The replication method used for the Managed Database. (`none`, `asynch`, `semi_synch`)\n",
                        "type": "string"
                    },
                    "rootPassword": {
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "rootUsername": {
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "sslConnection": {
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n",
                        "type": "boolean"
                    },
                    "status": {
                        "description": "The operating status of the Managed Database.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The Linode Instance type used for the nodes of the  Managed Database instance.\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "When this Managed Database was last updated.\n",
                        "type": "string"
                    },
                    "updates": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasePostgresqlUpdate:getDatabasePostgresqlUpdate"
                        },
                        "type": "array"
                    },
                    "version": {
                        "description": "The Managed Database engine version. (e.g. `v8.0.26`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "created",
                    "encrypted",
                    "engine",
                    "engineId",
                    "hostPrimary",
                    "hostSecondary",
                    "label",
                    "port",
                    "region",
                    "replicationCommitType",
                    "replicationType",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "type",
                    "updated",
                    "updates",
                    "version"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabasePostgresqlV2:getDatabasePostgresqlV2": {
            "description": "Provides information about a Linode PostgreSQL Database.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-backups).\n\n## Example Usage\n\nGet information about a PostgreSQL database:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_db = linode.getDatabasePostgresqlV2({\n    id: \"12345\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_db = linode.get_database_postgresql_v2(id=\"12345\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_db = Linode.GetDatabasePostgresqlV2.Invoke(new()\n    {\n        Id = \"12345\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDatabasePostgresqlV2(ctx, \u0026linode.LookupDatabasePostgresqlV2Args{\n\t\t\tId: \"12345\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasePostgresqlV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-db = LinodeFunctions.getDatabasePostgresqlV2(GetDatabasePostgresqlV2Args.builder()\n            .id(\"12345\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-db:\n    fn::invoke:\n      function: linode:getDatabasePostgresqlV2\n      arguments:\n        id: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## pending_updates\n\nThe following arguments are exposed by each entry in the `pending_updates` attribute:\n\n* `deadline` - The time when a mandatory update needs to be applied.\n\n* `description` - A description of the update.\n\n* `planned_for` - The date and time a maintenance update will be applied.\n\n## updates\n\nThe following arguments are supported in the `updates` specification block:\n\n* `day_of_week` - The day to perform maintenance. (`monday`, `tuesday`, ...)\n\n* `duration` - The maximum maintenance window time in hours. (`1`..`3`)\n\n* `frequency` - The frequency at which maintenance occurs. (`weekly`)\n\n* `hour_of_day` - The hour to begin maintenance based in UTC time. (`0`..`23`)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabasePostgresqlV2.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the PostgreSQL database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabasePostgresqlV2.\n",
                "properties": {
                    "allowLists": {
                        "description": "A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format. Use `linode.DatabaseAccessControls` to manage your allow list separately.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "caCert": {
                        "description": "The base64-encoded SSL CA certificate for the Managed Database.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "clusterSize": {
                        "description": "The number of Linode Instance nodes deployed to the Managed Database. (default `1`)\n",
                        "type": "integer"
                    },
                    "created": {
                        "description": "When this Managed Database was created.\n",
                        "type": "string"
                    },
                    "encrypted": {
                        "description": "Whether the Managed Databases is encrypted.\n",
                        "type": "boolean"
                    },
                    "engine": {
                        "description": "The Managed Database engine. (e.g. `postgresql`)\n",
                        "type": "string"
                    },
                    "engineId": {
                        "description": "The Managed Database engine in engine/version format. (e.g. `postgresql/16`)\n",
                        "type": "string"
                    },
                    "forkRestoreTime": {
                        "description": "The database timestamp from which it was restored.\n",
                        "type": "string"
                    },
                    "forkSource": {
                        "description": "The ID of the database that was forked from.\n",
                        "type": "integer"
                    },
                    "hostPrimary": {
                        "description": "The primary host for the Managed Database.\n",
                        "type": "string"
                    },
                    "hostSecondary": {
                        "description": "The secondary/private host for the managed database.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "description": "A unique, user-defined string referring to the Managed Database.\n",
                        "type": "string"
                    },
                    "members": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "oldestRestoreTime": {
                        "type": "string"
                    },
                    "pendingUpdates": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasePostgresqlV2PendingUpdate:getDatabasePostgresqlV2PendingUpdate"
                        },
                        "type": "array"
                    },
                    "platform": {
                        "description": "The back-end platform for relational databases used by the service.\n",
                        "type": "string"
                    },
                    "port": {
                        "description": "The access port for this Managed Database.\n",
                        "type": "integer"
                    },
                    "region": {
                        "description": "The region to use for the Managed Database.\n",
                        "type": "string"
                    },
                    "rootPassword": {
                        "description": "The randomly-generated root password for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "rootUsername": {
                        "description": "The root username for the Managed Database instance.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "sslConnection": {
                        "description": "Whether to require SSL credentials to establish a connection to the Managed Database.\n",
                        "type": "boolean"
                    },
                    "status": {
                        "description": "The operating status of the Managed Database.\n",
                        "type": "string"
                    },
                    "suspended": {
                        "description": "Whether this Managed Database is suspended.\n",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The Linode Instance type used for the nodes of the Managed Database.\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "When this Managed Database was last updated.\n",
                        "type": "string"
                    },
                    "updates": {
                        "$ref": "#/types/linode:index/getDatabasePostgresqlV2Updates:getDatabasePostgresqlV2Updates"
                    },
                    "version": {
                        "description": "The Managed Database engine version. (e.g. `13.2`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowLists",
                    "caCert",
                    "clusterSize",
                    "created",
                    "encrypted",
                    "engine",
                    "engineId",
                    "forkRestoreTime",
                    "forkSource",
                    "hostPrimary",
                    "hostSecondary",
                    "id",
                    "label",
                    "members",
                    "oldestRestoreTime",
                    "pendingUpdates",
                    "platform",
                    "port",
                    "region",
                    "rootPassword",
                    "rootUsername",
                    "sslConnection",
                    "status",
                    "suspended",
                    "type",
                    "updated",
                    "updates",
                    "version"
                ],
                "type": "object"
            }
        },
        "linode:index/getDatabases:getDatabases": {
            "description": "Provides information about Linode Managed Databases that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-databases-instances).\n\n## Example Usage\n\nGet information about all Linode Managed Databases:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getDatabases({});\nexport const databaseIds = all.then(all =\u003e all.databases.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_databases()\npulumi.export(\"databaseIds\", [__item.id for __item in all.databases])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetDatabases.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseIds\"] = all.Apply(getDatabasesResult =\u003e getDatabasesResult.Databases).Select(__item =\u003e __item.Id).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall, err := linode.GetDatabases(ctx, \u0026linode.GetDatabasesArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"databaseIds\", pulumi.IntArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:3,11-30)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()\n            .build());\n\n        ctx.export(\"databaseIds\", all.databases().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all Linode MySQL Databases:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst mysql = linode.getDatabases({\n    filters: [{\n        name: \"engine\",\n        values: [\"mysql\"],\n    }],\n});\nexport const databaseIds = mysql.then(mysql =\u003e mysql.databases.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmysql = linode.get_databases(filters=[{\n    \"name\": \"engine\",\n    \"values\": [\"mysql\"],\n}])\npulumi.export(\"databaseIds\", [__item.id for __item in mysql.databases])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysql = Linode.GetDatabases.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDatabasesFilterInputArgs\n            {\n                Name = \"engine\",\n                Values = new[]\n                {\n                    \"mysql\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"databaseIds\"] = mysql.Apply(getDatabasesResult =\u003e getDatabasesResult.Databases).Select(__item =\u003e __item.Id).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nmysql, err := linode.GetDatabases(ctx, \u0026linode.GetDatabasesArgs{\nFilters: []linode.GetDatabasesFilter{\n{\nName: \"engine\",\nValues: []string{\n\"mysql\",\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"databaseIds\", pulumi.IntArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:8,11-32)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDatabasesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysql = LinodeFunctions.getDatabases(GetDatabasesArgs.builder()\n            .filters(GetDatabasesFilterArgs.builder()\n                .name(\"engine\")\n                .values(\"mysql\")\n                .build())\n            .build());\n\n        ctx.export(\"databaseIds\", mysql.databases().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabases.\n",
                "properties": {
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesDatabase:getDatabasesDatabase"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesFilter:getDatabasesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. (`version`)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "databases": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesDatabase:getDatabasesDatabase"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getDatabasesFilter:getDatabasesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of the Managed Database.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getDomain:getDomain": {
            "description": "Provides information about a Linode domain.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-domain).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode domain.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getDomain({\n    id: 1234567,\n});\nconst bar = linode.getDomain({\n    domain: \"bar.example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_domain(id=1234567)\nbar = linode.get_domain(domain=\"bar.example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetDomain.Invoke(new()\n    {\n        Id = 1234567,\n    });\n\n    var bar = Linode.GetDomain.Invoke(new()\n    {\n        Domain = \"bar.example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDomain(ctx, \u0026linode.LookupDomainArgs{\n\t\t\tId: pulumi.IntRef(1234567),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.LookupDomain(ctx, \u0026linode.LookupDomainArgs{\n\t\t\tDomain: pulumi.StringRef(\"bar.example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getDomain(GetDomainArgs.builder()\n            .id(1234567)\n            .build());\n\n        final var bar = LinodeFunctions.getDomain(GetDomainArgs.builder()\n            .domain(\"bar.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: linode:getDomain\n      arguments:\n        id: '1234567'\n  bar:\n    fn::invoke:\n      function: linode:getDomain\n      arguments:\n        domain: bar.example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDomain.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "The unique domain name of the Domain record to query.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique numeric ID of the Domain record to query.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomain.\n",
                "properties": {
                    "axfrIps": {
                        "description": "The list of IPs that may perform a zone transfer for this Domain.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "A description for this Domain.\n",
                        "type": "string"
                    },
                    "domain": {
                        "description": "The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain\n",
                        "type": "string"
                    },
                    "expireSec": {
                        "description": "The amount of time in seconds that may pass before this Domain is no longer authoritative.\n",
                        "type": "integer"
                    },
                    "group": {
                        "description": "The group this Domain belongs to.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique ID of this Domain.\n",
                        "type": "integer"
                    },
                    "masterIps": {
                        "description": "The IP addresses representing the master DNS for this Domain.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "refreshSec": {
                        "description": "The amount of time in seconds before this Domain should be refreshed.\n",
                        "type": "integer"
                    },
                    "retrySec": {
                        "description": "The interval, in seconds, at which a failed refresh should be retried.\n",
                        "type": "integer"
                    },
                    "soaEmail": {
                        "description": "Start of Authority email address.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "Used to control whether this Domain is currently being rendered. (`disabled`, `active`)\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ttlSec": {
                        "description": "'Time to Live'-the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.\n",
                        "type": "integer"
                    },
                    "type": {
                        "description": "If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave) (`master`, `slave`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "axfrIps",
                    "description",
                    "expireSec",
                    "group",
                    "masterIps",
                    "refreshSec",
                    "retrySec",
                    "soaEmail",
                    "status",
                    "tags",
                    "ttlSec",
                    "type"
                ],
                "type": "object"
            }
        },
        "linode:index/getDomainRecord:getDomainRecord": {
            "description": "Provides information about a Linode Domain Record.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-domain-record).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Domain Record.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myRecord = linode.getDomainRecord({\n    id: 14950401,\n    domainId: 3150401,\n});\nconst myWwwRecord = linode.getDomainRecord({\n    name: \"www\",\n    domainId: 3150401,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_record = linode.get_domain_record(id=14950401,\n    domain_id=3150401)\nmy_www_record = linode.get_domain_record(name=\"www\",\n    domain_id=3150401)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRecord = Linode.GetDomainRecord.Invoke(new()\n    {\n        Id = 14950401,\n        DomainId = 3150401,\n    });\n\n    var myWwwRecord = Linode.GetDomainRecord.Invoke(new()\n    {\n        Name = \"www\",\n        DomainId = 3150401,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupDomainRecord(ctx, \u0026linode.LookupDomainRecordArgs{\n\t\t\tId:       pulumi.IntRef(14950401),\n\t\t\tDomainId: 3150401,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = linode.LookupDomainRecord(ctx, \u0026linode.LookupDomainRecordArgs{\n\t\t\tName:     pulumi.StringRef(\"www\"),\n\t\t\tDomainId: 3150401,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainRecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .id(14950401)\n            .domainId(3150401)\n            .build());\n\n        final var myWwwRecord = LinodeFunctions.getDomainRecord(GetDomainRecordArgs.builder()\n            .name(\"www\")\n            .domainId(3150401)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myRecord:\n    fn::invoke:\n      function: linode:getDomainRecord\n      arguments:\n        id: '14950401'\n        domainId: '3150401'\n  myWwwRecord:\n    fn::invoke:\n      function: linode:getDomainRecord\n      arguments:\n        name: www\n        domainId: '3150401'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainRecord.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The associated domain's unique ID.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique ID of the Domain Record.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Record.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomainRecord.\n",
                "properties": {
                    "domainId": {
                        "description": "The associated domain's unique ID.\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The unique ID of the Domain Record.\n",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the Record.\n",
                        "type": "string"
                    },
                    "port": {
                        "description": "The port this Record points to.\n",
                        "type": "integer"
                    },
                    "priority": {
                        "description": "The priority of the target host. Lower values are preferred.\n",
                        "type": "integer"
                    },
                    "protocol": {
                        "description": "The protocol this Record's service communicates with. Only valid for SRV records.\n",
                        "type": "string"
                    },
                    "service": {
                        "description": "The service this Record identified. Only valid for SRV records.\n",
                        "type": "string"
                    },
                    "tag": {
                        "description": "The tag portion of a CAA record.\n",
                        "type": "string"
                    },
                    "target": {
                        "description": "The target for this Record. This field's actual usage depends on the type of record this represents. For A and AAAA records, this is the address the named Domain should resolve to.\n",
                        "type": "string"
                    },
                    "ttlSec": {
                        "description": "The amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.\n",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The type of Record this is in the DNS system. See all record types [here](https://techdocs.akamai.com/linode-api/reference/get-domain-record).\n",
                        "type": "string"
                    },
                    "weight": {
                        "description": "The relative weight of this Record. Higher values are preferred.\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "domainId",
                    "port",
                    "priority",
                    "protocol",
                    "service",
                    "tag",
                    "target",
                    "ttlSec",
                    "type",
                    "weight"
                ],
                "type": "object"
            }
        },
        "linode:index/getDomainZonefile:getDomainZonefile": {
            "description": "Provides information about a Linode Domain Zonefile.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-domain-zone).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Domain Zonefile.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myZonefile = linode.getDomainZonefile({\n    domainId: 3150401,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_zonefile = linode.get_domain_zonefile(domain_id=3150401)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myZonefile = Linode.GetDomainZonefile.Invoke(new()\n    {\n        DomainId = 3150401,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetDomainZonefile(ctx, \u0026linode.GetDomainZonefileArgs{\n\t\t\tDomainId: 3150401,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainZonefileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myZonefile = LinodeFunctions.getDomainZonefile(GetDomainZonefileArgs.builder()\n            .domainId(3150401)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myZonefile:\n    fn::invoke:\n      function: linode:getDomainZonefile\n      arguments:\n        domainId: 3.150401e+06\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDomainZonefile.\n",
                "properties": {
                    "domainId": {
                        "type": "integer",
                        "description": "The associated domain's unique ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domainId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDomainZonefile.\n",
                "properties": {
                    "domainId": {
                        "description": "The associated domain's unique ID.\n",
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "zoneFiles": {
                        "description": "Array of strings representing the Domain Zonefile.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "domainId",
                    "id",
                    "zoneFiles"
                ],
                "type": "object"
            }
        },
        "linode:index/getDomains:getDomains": {
            "description": "Provides information about Linode Domains that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-domains).\n\n## Example Usage\n\nGet information about all Linode Cloud Domains with a specific tag:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific = linode.getDomains({\n    filters: [{\n        name: \"tags\",\n        values: [\"test-tag\"],\n    }],\n});\nexport const domain = specific.then(specific =\u003e specific.domains?.[0]?.domain);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific = linode.get_domains(filters=[{\n    \"name\": \"tags\",\n    \"values\": [\"test-tag\"],\n}])\npulumi.export(\"domain\", specific.domains[0].domain)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific = Linode.GetDomains.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetDomainsFilterInputArgs\n            {\n                Name = \"tags\",\n                Values = new[]\n                {\n                    \"test-tag\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"domain\"] = specific.Apply(getDomainsResult =\u003e getDomainsResult.Domains[0]?.Domain),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific, err := linode.GetDomains(ctx, \u0026linode.GetDomainsArgs{\n\t\t\tFilters: []linode.GetDomainsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"tags\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"test-tag\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"domain\", specific.Domains[0].Domain)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetDomainsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific = LinodeFunctions.getDomains(GetDomainsArgs.builder()\n            .filters(GetDomainsFilterArgs.builder()\n                .name(\"tags\")\n                .values(\"test-tag\")\n                .build())\n            .build());\n\n        ctx.export(\"domain\", specific.domains()[0].domain());\n    }\n}\n```\n```yaml\nvariables:\n  specific:\n    fn::invoke:\n      function: linode:getDomains\n      arguments:\n        filters:\n          - name: tags\n            values:\n              - test-tag\noutputs:\n  domain: ${specific.domains[0].domain}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `group`\n\n* `tags`\n\n* `domain`\n\n* `type`\n\n* `status`\n\n* `description`\n\n* `master_ips`\n\n* `axfr_ips`\n\n* `ttl_sec`\n\n* `retry_sec`\n\n* `expire_sec`\n\n* `refresh_sec`\n\n* `soa_email`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDomains.\n",
                "properties": {
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDomainsDomain:getDomainsDomain"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getDomainsFilter:getDomainsFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDomains.\n",
                "properties": {
                    "domains": {
                        "items": {
                            "$ref": "#/types/linode:index/getDomainsDomain:getDomainsDomain"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getDomainsFilter:getDomainsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of this Domain.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getFirewall:getFirewall": {
            "description": "Provides details about a Linode Firewall.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-firewall).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_firewall = linode.getFirewall({\n    id: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_firewall = linode.get_firewall(id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_firewall = Linode.GetFirewall.Invoke(new()\n    {\n        Id = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupFirewall(ctx, \u0026linode.LookupFirewallArgs{\n\t\t\tId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetFirewallArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-firewall = LinodeFunctions.getFirewall(GetFirewallArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-firewall:\n    fn::invoke:\n      function: linode:getFirewall\n      arguments:\n        id: 123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewall.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The Firewall's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFirewall.\n",
                "properties": {
                    "created": {
                        "description": "When this firewall was created.\n",
                        "type": "string"
                    },
                    "devices": {
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallDevice:getFirewallDevice"
                        },
                        "type": "array"
                    },
                    "disabled": {
                        "description": "If true, the firewall is inactive.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the Firewall Device.\n",
                        "type": "integer"
                    },
                    "inboundPolicy": {
                        "description": "The default behavior for inbound traffic. (`ACCEPT`, `DROP`)\n",
                        "type": "string"
                    },
                    "inbounds": {
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallInbound:getFirewallInbound"
                        },
                        "type": "array"
                    },
                    "label": {
                        "description": "The label of the underlying entity this device references.\n",
                        "type": "string"
                    },
                    "linodes": {
                        "description": "The IDs of Linodes assigned to this Firewall.\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "nodebalancers": {
                        "description": "The IDs of NodeBalancers assigned to this Firewall.\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "outboundPolicy": {
                        "description": "The default behavior for outbound traffic. (`ACCEPT`, `DROP`)\n",
                        "type": "string"
                    },
                    "outbounds": {
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallOutbound:getFirewallOutbound"
                        },
                        "type": "array"
                    },
                    "status": {
                        "description": "The status of the firewall. (`enabled`, `disabled`, `deleted`)\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags applied to the firewall. Tags are case-insensitive and are for organizational purposes only.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updated": {
                        "description": "When this firewall was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "created",
                    "devices",
                    "disabled",
                    "id",
                    "inbounds",
                    "inboundPolicy",
                    "label",
                    "linodes",
                    "nodebalancers",
                    "outbounds",
                    "outboundPolicy",
                    "status",
                    "tags",
                    "updated"
                ],
                "type": "object"
            }
        },
        "linode:index/getFirewalls:getFirewalls": {
            "description": "Provides information about Linode Cloud Firewalls that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-firewalls).\n\n## Example Usage\n\nGet information about all Linode Cloud Firewalls with a certain label and visibility:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific = linode.getFirewalls({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"my-firewalls\"],\n        },\n        {\n            name: \"tags\",\n            values: [\"my-tag\"],\n        },\n    ],\n});\nexport const firewallId = specific.then(specific =\u003e specific.firewalls?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific = linode.get_firewalls(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\"my-firewalls\"],\n    },\n    {\n        \"name\": \"tags\",\n        \"values\": [\"my-tag\"],\n    },\n])\npulumi.export(\"firewallId\", specific.firewalls[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific = Linode.GetFirewalls.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetFirewallsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-firewalls\",\n                },\n            },\n            new Linode.Inputs.GetFirewallsFilterInputArgs\n            {\n                Name = \"tags\",\n                Values = new[]\n                {\n                    \"my-tag\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"firewallId\"] = specific.Apply(getFirewallsResult =\u003e getFirewallsResult.Firewalls[0]?.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific, err := linode.GetFirewalls(ctx, \u0026linode.GetFirewallsArgs{\n\t\t\tFilters: []linode.GetFirewallsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-firewalls\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"tags\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-tag\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"firewallId\", specific.Firewalls[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetFirewallsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific = LinodeFunctions.getFirewalls(GetFirewallsArgs.builder()\n            .filters(            \n                GetFirewallsFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"my-firewalls\")\n                    .build(),\n                GetFirewallsFilterArgs.builder()\n                    .name(\"tags\")\n                    .values(\"my-tag\")\n                    .build())\n            .build());\n\n        ctx.export(\"firewallId\", specific.firewalls()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific:\n    fn::invoke:\n      function: linode:getFirewalls\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-firewalls\n          - name: tags\n            values:\n              - my-tag\noutputs:\n  firewallId: ${specific.firewalls[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all Linode images associated with the current token:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getFirewalls({});\nexport const firewallIds = all.then(all =\u003e all.firewalls.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_firewalls()\npulumi.export(\"firewallIds\", [__item.id for __item in all.firewalls])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetFirewalls.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"firewallIds\"] = all.Apply(getFirewallsResult =\u003e getFirewallsResult.Firewalls).Select(__item =\u003e __item.Id).ToList(),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall, err := linode.GetFirewalls(ctx, \u0026linode.GetFirewallsArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"firewallIds\", pulumi.IntArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:3,11-30)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetFirewallsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getFirewalls(GetFirewallsArgs.builder()\n            .build());\n\n        ctx.export(\"firewallIds\", all.firewalls().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Firewall Rule\n\n* `label` - The label of this rule for display purposes only.\n\n* `action` - Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).\n\n* `protocol` - The network protocol this rule controls. (TCP, UDP, ICMP)\n\n* `ports` - A string representation of ports and/or port ranges (i.e. \"443\" or \"80-90, 91\").\n\n* `ipv4` - A list of IPv4 addresses or networks in IP/mask format.\n\n* `ipv6` - A list of IPv6 addresses or networks in IP/mask format.\n\n## Firewall Device\n\n* `id` - The unique ID of this Firewall Device assignment.\n\n* `entity_id` - The ID of the underlying entity this device references.\n\n* `type` - The type of the assigned entity.\n\n* `label` - The label of the assigned entity.\n\n* `url` - The URL of the assigned entity.\n\n## Filterable Fields\n\n* `id`\n\n* `label`\n\n* `status`\n\n* `tags`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewalls.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallsFilter:getFirewallsFilter"
                        }
                    },
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallsFirewall:getFirewallsFirewall"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewalls.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallsFilter:getFirewallsFilter"
                        },
                        "type": "array"
                    },
                    "firewalls": {
                        "items": {
                            "$ref": "#/types/linode:index/getFirewallsFirewall:getFirewallsFirewall"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID assigned to this Firewall.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getImage:getImage": {
            "description": "Provides information about a Linode image\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-image).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode image.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst k8Master = linode.getImage({\n    id: \"linode/debian12\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nk8_master = linode.get_image(id=\"linode/debian12\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var k8Master = Linode.GetImage.Invoke(new()\n    {\n        Id = \"linode/debian12\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupImage(ctx, \u0026linode.LookupImageArgs{\n\t\t\tId: \"linode/debian12\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var k8Master = LinodeFunctions.getImage(GetImageArgs.builder()\n            .id(\"linode/debian12\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  k8Master:\n    fn::invoke:\n      function: linode:getImage\n      arguments:\n        id: linode/debian12\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.\n"
                    },
                    "replications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getImageReplication:getImageReplication"
                        },
                        "description": "A list of image replication regions and corresponding status.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "capabilities": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "created": {
                        "description": "When this Image was created.\n",
                        "type": "string"
                    },
                    "createdBy": {
                        "description": "The name of the User who created this Image, or \"linode\" for official Images.\n",
                        "type": "string"
                    },
                    "deprecated": {
                        "description": "Whether or not this Image is deprecated. Will only be true for deprecated public Images.\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A detailed description of this Image.\n",
                        "type": "string"
                    },
                    "expiry": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isPublic": {
                        "description": "True if the Image is public.\n",
                        "type": "boolean"
                    },
                    "label": {
                        "description": "A short description of the Image.\n",
                        "type": "string"
                    },
                    "replications": {
                        "description": "A list of image replication regions and corresponding status.\n",
                        "items": {
                            "$ref": "#/types/linode:index/getImageReplication:getImageReplication"
                        },
                        "type": "array"
                    },
                    "size": {
                        "description": "The minimum size this Image needs to deploy. Size is in MB. example: 2500\n",
                        "type": "integer"
                    },
                    "status": {
                        "description": "The status of an image replica.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "A list of customized tags.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "totalSize": {
                        "description": "The total size of the image in all available regions.\n",
                        "type": "integer"
                    },
                    "type": {
                        "description": "How the Image was created. Manual Images can be created at any time. \"Automatic\" Images are created automatically from a deleted Linode. (`manual`, `automatic`)\n",
                        "type": "string"
                    },
                    "vendor": {
                        "description": "The upstream distribution vendor. `None` for private Images.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "capabilities",
                    "created",
                    "createdBy",
                    "deprecated",
                    "description",
                    "expiry",
                    "id",
                    "isPublic",
                    "label",
                    "size",
                    "status",
                    "tags",
                    "totalSize",
                    "type",
                    "vendor"
                ],
                "type": "object"
            }
        },
        "linode:index/getImages:getImages": {
            "description": "Provides information about Linode images that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-images).\n\n## Example Usage\n\nGet information about all Linode images with a certain label and visibility:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific_images = linode.getImages({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"Debian 12\"],\n        },\n        {\n            name: \"is_public\",\n            values: [\"true\"],\n        },\n    ],\n});\nexport const imageId = specific_images.then(specific_images =\u003e specific_images.images?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_images = linode.get_images(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\"Debian 12\"],\n    },\n    {\n        \"name\": \"is_public\",\n        \"values\": [\"true\"],\n    },\n])\npulumi.export(\"imageId\", specific_images.images[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_images = Linode.GetImages.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetImagesFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"Debian 12\",\n                },\n            },\n            new Linode.Inputs.GetImagesFilterInputArgs\n            {\n                Name = \"is_public\",\n                Values = new[]\n                {\n                    \"true\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"imageId\"] = specific_images.Apply(specific_images =\u003e specific_images.Apply(getImagesResult =\u003e getImagesResult.Images[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific_images, err := linode.GetImages(ctx, \u0026linode.GetImagesArgs{\n\t\t\tFilters: []linode.GetImagesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Debian 12\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"is_public\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"true\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"imageId\", specific_images.Images[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetImagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-images = LinodeFunctions.getImages(GetImagesArgs.builder()\n            .filters(            \n                GetImagesFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"Debian 12\")\n                    .build(),\n                GetImagesFilterArgs.builder()\n                    .name(\"is_public\")\n                    .values(\"true\")\n                    .build())\n            .build());\n\n        ctx.export(\"imageId\", specific_images.images()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific-images:\n    fn::invoke:\n      function: linode:getImages\n      arguments:\n        filters:\n          - name: label\n            values:\n              - Debian 12\n          - name: is_public\n            values:\n              - 'true'\noutputs:\n  imageId: ${[\"specific-images\"].images[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all Linode images associated with the current token:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all_images = linode.getImages({});\nexport const imageIds = all_images.then(all_images =\u003e all_images.images.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_images = linode.get_images()\npulumi.export(\"imageIds\", [__item.id for __item in all_images.images])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_images = Linode.GetImages.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"imageIds\"] = all_images.Apply(all_images =\u003e all_images.Apply(getImagesResult =\u003e getImagesResult.Images).Select(__item =\u003e __item.Id).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall_images, err := linode.GetImages(ctx, \u0026linode.GetImagesArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"imageIds\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:3,11-34)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetImagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-images = LinodeFunctions.getImages(GetImagesArgs.builder()\n            .build());\n\n        ctx.export(\"imageIds\", all_images.images().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `created_by`\n\n* `deprecated`\n\n* `description`\n\n* `id`\n\n* `is_public`\n\n* `label`\n\n* `size`\n\n* `status`\n\n* `vendor`\n\n* `tags`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImages.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getImagesFilter:getImagesFilter"
                        }
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getImagesImage:getImagesImage"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest image will be returned. Images without a valid `created` field are not included in the result.\n\n* `filter` - (Optional) A set of filters used to select Linode images that meet certain requirements.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImages.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getImagesFilter:getImagesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of this Image.  The ID of private images begin with `private/` followed by the numeric identifier of the private image, for example `private/12345`.\n",
                        "type": "string"
                    },
                    "images": {
                        "items": {
                            "$ref": "#/types/linode:index/getImagesImage:getImagesImage"
                        },
                        "type": "array"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getInstanceBackups:getInstanceBackups": {
            "description": "Provides details about the backups of an Instance.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-backups).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_backups = linode.getInstanceBackups({\n    linodeId: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_backups = linode.get_instance_backups(linode_id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_backups = Linode.GetInstanceBackups.Invoke(new()\n    {\n        LinodeId = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetInstanceBackups(ctx, \u0026linode.GetInstanceBackupsArgs{\n\t\t\tLinodeId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceBackupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-backups = LinodeFunctions.getInstanceBackups(GetInstanceBackupsArgs.builder()\n            .linodeId(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-backups:\n    fn::invoke:\n      function: linode:getInstanceBackups\n      arguments:\n        linodeId: 123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceBackups.\n",
                "properties": {
                    "linodeId": {
                        "type": "integer",
                        "description": "The Linode instance's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "linodeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceBackups.\n",
                "properties": {
                    "automatics": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceBackupsAutomatic:getInstanceBackupsAutomatic"
                        },
                        "type": "array"
                    },
                    "currents": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceBackupsCurrent:getInstanceBackupsCurrent"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of this Backup.\n",
                        "type": "integer"
                    },
                    "inProgresses": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceBackupsInProgress:getInstanceBackupsInProgress"
                        },
                        "type": "array"
                    },
                    "linodeId": {
                        "type": "integer"
                    }
                },
                "required": [
                    "automatics",
                    "currents",
                    "id",
                    "inProgresses",
                    "linodeId"
                ],
                "type": "object"
            }
        },
        "linode:index/getInstanceNetworking:getInstanceNetworking": {
            "description": "Provides details about the networking configuration of an Instance.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-config-interfaces).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getInstanceNetworking({\n    linodeId: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_instance_networking(linode_id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetInstanceNetworking.Invoke(new()\n    {\n        LinodeId = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetInstanceNetworking(ctx, \u0026linode.GetInstanceNetworkingArgs{\n\t\t\tLinodeId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceNetworkingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getInstanceNetworking(GetInstanceNetworkingArgs.builder()\n            .linodeId(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: linode:getInstanceNetworking\n      arguments:\n        linodeId: 123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceNetworking.\n",
                "properties": {
                    "linodeId": {
                        "type": "integer",
                        "description": "The Linode instance's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "linodeId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceNetworking.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "ipv4s": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceNetworkingIpv4:getInstanceNetworkingIpv4"
                        },
                        "type": "array"
                    },
                    "ipv6s": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceNetworkingIpv6:getInstanceNetworkingIpv6"
                        },
                        "type": "array"
                    },
                    "linodeId": {
                        "description": "The ID of the Linode this address currently belongs to.\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "id",
                    "ipv4s",
                    "ipv6s",
                    "linodeId"
                ],
                "type": "object"
            }
        },
        "linode:index/getInstanceType:getInstanceType": {
            "description": "Provides information about a Linode instance type\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-type).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Instance type.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst _default = linode.getInstanceType({\n    id: \"g6-standard-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ndefault = linode.get_instance_type(id=\"g6-standard-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Linode.GetInstanceType.Invoke(new()\n    {\n        Id = \"g6-standard-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetInstanceType(ctx, \u0026linode.GetInstanceTypeArgs{\n\t\t\tId: \"g6-standard-2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = LinodeFunctions.getInstanceType(GetInstanceTypeArgs.builder()\n            .id(\"g6-standard-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      function: linode:getInstanceType\n      arguments:\n        id: g6-standard-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceType.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Label used to identify instance type\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The Linode Type's label is for display purposes only\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceType.\n",
                "properties": {
                    "acceleratedDevices": {
                        "description": "The number of VPUs this Linode Type offers.\n",
                        "type": "integer"
                    },
                    "addons": {
                        "$ref": "#/types/linode:index/getInstanceTypeAddons:getInstanceTypeAddons"
                    },
                    "class": {
                        "description": "The class of the Linode Type. See all classes [here](https://techdocs.akamai.com/linode-api/reference/get-linode-type).\n",
                        "type": "string"
                    },
                    "disk": {
                        "description": "The Disk size, in MB, of the Linode Type\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID representing the Linode Type\n",
                        "type": "string"
                    },
                    "label": {
                        "description": "The Linode Type's label is for display purposes only\n",
                        "type": "string"
                    },
                    "memory": {
                        "description": "The amount of RAM included in this Linode Type.\n",
                        "type": "integer"
                    },
                    "networkOut": {
                        "description": "The Mbits outbound bandwidth allocation.\n",
                        "type": "integer"
                    },
                    "price": {
                        "$ref": "#/types/linode:index/getInstanceTypePrice:getInstanceTypePrice"
                    },
                    "regionPrices": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypeRegionPrice:getInstanceTypeRegionPrice"
                        },
                        "type": "array"
                    },
                    "transfer": {
                        "description": "The monthly outbound transfer amount, in MB.\n",
                        "type": "integer"
                    },
                    "vcpus": {
                        "description": "The number of VCPU cores this Linode Type offers.\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "acceleratedDevices",
                    "addons",
                    "class",
                    "disk",
                    "id",
                    "label",
                    "memory",
                    "networkOut",
                    "price",
                    "regionPrices",
                    "transfer",
                    "vcpus"
                ],
                "type": "object"
            }
        },
        "linode:index/getInstanceTypes:getInstanceTypes": {
            "description": "Provides information about Linode Instance types that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-types).\n\n## Example Usage\n\nGet information about all Linode Instance types with a certain number of VCPUs:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific_types = linode.getInstanceTypes({\n    filters: [{\n        name: \"vcpus\",\n        values: [\"2\"],\n    }],\n});\nexport const typeIds = specific_types.then(specific_types =\u003e specific_types.types.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_types = linode.get_instance_types(filters=[{\n    \"name\": \"vcpus\",\n    \"values\": [\"2\"],\n}])\npulumi.export(\"typeIds\", [__item.id for __item in specific_types.types])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_types = Linode.GetInstanceTypes.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetInstanceTypesFilterInputArgs\n            {\n                Name = \"vcpus\",\n                Values = new[]\n                {\n                    \"2\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"typeIds\"] = specific_types.Apply(specific_types =\u003e specific_types.Apply(getInstanceTypesResult =\u003e getInstanceTypesResult.Types).Select(__item =\u003e __item.Id).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nspecific_types, err := linode.GetInstanceTypes(ctx, \u0026linode.GetInstanceTypesArgs{\nFilters: []linode.GetInstanceTypesFilter{\n{\nName: \"vcpus\",\nValues: []string{\n\"2\",\n},\n},\n},\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"typeIds\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:8,11-37)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceTypesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()\n            .filters(GetInstanceTypesFilterArgs.builder()\n                .name(\"vcpus\")\n                .values(\"2\")\n                .build())\n            .build());\n\n        ctx.export(\"typeIds\", specific_types.types().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all Linode Instance types:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all_types = linode.getInstanceTypes({});\nexport const typeIds = all_types.then(all_types =\u003e all_types.types.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_types = linode.get_instance_types()\npulumi.export(\"typeIds\", [__item.id for __item in all_types.types])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_types = Linode.GetInstanceTypes.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"typeIds\"] = all_types.Apply(all_types =\u003e all_types.Apply(getInstanceTypesResult =\u003e getInstanceTypesResult.Types).Select(__item =\u003e __item.Id).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall_types, err := linode.GetInstanceTypes(ctx, \u0026linode.GetInstanceTypesArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"typeIds\", pulumi.StringArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:3,11-32)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstanceTypesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-types = LinodeFunctions.getInstanceTypes(GetInstanceTypesArgs.builder()\n            .build());\n\n        ctx.export(\"typeIds\", all_types.types().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `class`\n\n* `disk`\n\n* `gpus`\n\n* `label`\n\n* `memory`\n\n* `network_out`\n\n* `transfer`\n\n* `vcpus`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstanceTypes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesFilter:getInstanceTypesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesType:getInstanceTypesType"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstanceTypes.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesFilter:getInstanceTypesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID representing the Linode Type.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstanceTypesType:getInstanceTypesType"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getInstances:getInstances": {
            "description": "Provides information about Linode instances that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-linode-instances).\n\n## Example Usage\n\nGet information about all Linode instances with a certain label and tag:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_instances = linode.getInstances({\n    filters: [\n        {\n            name: \"label\",\n            values: [\n                \"my-label\",\n                \"my-other-label\",\n            ],\n        },\n        {\n            name: \"tags\",\n            values: [\"my-tag\"],\n        },\n    ],\n});\nexport const instanceId = my_instances.then(my_instances =\u003e my_instances.instances?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instances = linode.get_instances(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\n            \"my-label\",\n            \"my-other-label\",\n        ],\n    },\n    {\n        \"name\": \"tags\",\n        \"values\": [\"my-tag\"],\n    },\n])\npulumi.export(\"instanceId\", my_instances.instances[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_instances = Linode.GetInstances.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetInstancesFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-label\",\n                    \"my-other-label\",\n                },\n            },\n            new Linode.Inputs.GetInstancesFilterInputArgs\n            {\n                Name = \"tags\",\n                Values = new[]\n                {\n                    \"my-tag\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceId\"] = my_instances.Apply(my_instances =\u003e my_instances.Apply(getInstancesResult =\u003e getInstancesResult.Instances[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmy_instances, err := linode.GetInstances(ctx, \u0026linode.GetInstancesArgs{\n\t\t\tFilters: []linode.GetInstancesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-label\",\n\t\t\t\t\t\t\"my-other-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"tags\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-tag\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"instanceId\", my_instances.Instances[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstancesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-instances = LinodeFunctions.getInstances(GetInstancesArgs.builder()\n            .filters(            \n                GetInstancesFilterArgs.builder()\n                    .name(\"label\")\n                    .values(                    \n                        \"my-label\",\n                        \"my-other-label\")\n                    .build(),\n                GetInstancesFilterArgs.builder()\n                    .name(\"tags\")\n                    .values(\"my-tag\")\n                    .build())\n            .build());\n\n        ctx.export(\"instanceId\", my_instances.instances()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  my-instances:\n    fn::invoke:\n      function: linode:getInstances\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-label\n              - my-other-label\n          - name: tags\n            values:\n              - my-tag\noutputs:\n  instanceId: ${[\"my-instances\"].instances[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet information about all Linode instances associated with the current token:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all_instances = linode.getInstances({});\nexport const instanceIds = all_instances.then(all_instances =\u003e all_instances.instances.map(__item =\u003e __item.id));\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall_instances = linode.get_instances()\npulumi.export(\"instanceIds\", [__item.id for __item in all_instances.instances])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all_instances = Linode.GetInstances.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceIds\"] = all_instances.Apply(all_instances =\u003e all_instances.Apply(getInstancesResult =\u003e getInstancesResult.Instances).Select(__item =\u003e __item.Id).ToList()),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nall_instances, err := linode.GetInstances(ctx, \u0026linode.GetInstancesArgs{\n}, nil);\nif err != nil {\nreturn err\n}\nctx.Export(\"instanceIds\", pulumi.IntArray(%!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ example.pp:3,11-40)))\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetInstancesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all-instances = LinodeFunctions.getInstances(GetInstancesArgs.builder()\n            .build());\n\n        ctx.export(\"instanceIds\", all_instances.instances().stream().map(element -\u003e element.id()).collect(toList()));\n    }\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `group`\n\n* `id`\n\n* `image`\n\n* `label`\n\n* `region`\n\n* `status`\n\n* `tags`\n\n* `type`\n\n* `watchdog_enabled`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInstances.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getInstancesFilter:getInstancesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInstances.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstancesFilter:getInstancesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "instances": {
                        "items": {
                            "$ref": "#/types/linode:index/getInstancesInstance:getInstancesInstance"
                        },
                        "type": "array"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "instances",
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getIpv6Range:getIpv6Range": {
            "description": "Provides information about a Linode IPv6 Range.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ipv6-range).\n\n## Example Usage\n\nGet information about an IPv6 range assigned to a Linode:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst range_info = linode.getIpv6Range({\n    range: \"2001:0db8::\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nrange_info = linode.get_ipv6_range(range=\"2001:0db8::\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var range_info = Linode.GetIpv6Range.Invoke(new()\n    {\n        Range = \"2001:0db8::\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupIpv6Range(ctx, \u0026linode.LookupIpv6RangeArgs{\n\t\t\tRange: \"2001:0db8::\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetIpv6RangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var range-info = LinodeFunctions.getIpv6Range(GetIpv6RangeArgs.builder()\n            .range(\"2001:0db8::\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  range-info:\n    fn::invoke:\n      function: linode:getIpv6Range\n      arguments:\n        range: '2001:0db8::'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpv6Range.\n",
                "properties": {
                    "range": {
                        "type": "string",
                        "description": "The IPv6 range to retrieve information about.\n"
                    }
                },
                "type": "object",
                "required": [
                    "range"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpv6Range.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "isBgp": {
                        "type": "boolean"
                    },
                    "linodes": {
                        "description": "A set of Linodes targeted by this IPv6 range. Includes Linodes with IP sharing.\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "prefix": {
                        "description": "The prefix length of the address, denoting how many addresses can be assigned from this range.\n",
                        "type": "integer"
                    },
                    "range": {
                        "type": "string"
                    },
                    "region": {
                        "description": "The region for this range of IPv6 addresses.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "isBgp",
                    "linodes",
                    "prefix",
                    "range",
                    "region"
                ],
                "type": "object"
            }
        },
        "linode:index/getIpv6Ranges:getIpv6Ranges": {
            "description": "Provides information about Linode IPv6 ranges that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ipv6-ranges).\n\n\u003e Some fields may not be accessible directly the results of this data source.\nFor additional information about a specific IPv6 range consider using the linode.Ipv6Range\ndata source.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_ranges = linode.getIpv6Ranges({\n    filters: [{\n        name: \"region\",\n        values: [\"us-mia\"],\n    }],\n});\nexport const ranges = filtered_ranges;\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_ranges = linode.get_ipv6_ranges(filters=[{\n    \"name\": \"region\",\n    \"values\": [\"us-mia\"],\n}])\npulumi.export(\"ranges\", filtered_ranges)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_ranges = Linode.GetIpv6Ranges.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetIpv6RangesFilterInputArgs\n            {\n                Name = \"region\",\n                Values = new[]\n                {\n                    \"us-mia\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ranges\"] = filtered_ranges,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_ranges, err := linode.GetIpv6Ranges(ctx, \u0026linode.GetIpv6RangesArgs{\n\t\t\tFilters: []linode.GetIpv6RangesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"region\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"us-mia\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ranges\", filtered_ranges)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetIpv6RangesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-ranges = LinodeFunctions.getIpv6Ranges(GetIpv6RangesArgs.builder()\n            .filters(GetIpv6RangesFilterArgs.builder()\n                .name(\"region\")\n                .values(\"us-mia\")\n                .build())\n            .build());\n\n        ctx.export(\"ranges\", filtered_ranges);\n    }\n}\n```\n```yaml\nvariables:\n  filtered-ranges:\n    fn::invoke:\n      function: linode:getIpv6Ranges\n      arguments:\n        filters:\n          - name: region\n            values:\n              - us-mia\noutputs:\n  ranges: ${[\"filtered-ranges\"]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `range`\n\n* `route_target`\n\n* `prefix`\n\n* `region`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpv6Ranges.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getIpv6RangesFilter:getIpv6RangesFilter"
                        }
                    },
                    "ranges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getIpv6RangesRange:getIpv6RangesRange"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIpv6Ranges.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getIpv6RangesFilter:getIpv6RangesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ranges": {
                        "items": {
                            "$ref": "#/types/linode:index/getIpv6RangesRange:getIpv6RangesRange"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getKernel:getKernel": {
            "description": "Provides information about a Linode kernel\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-kernel).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode kernel.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst latest = linode.getKernel({\n    id: \"linode/latest-64bit\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nlatest = linode.get_kernel(id=\"linode/latest-64bit\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var latest = Linode.GetKernel.Invoke(new()\n    {\n        Id = \"linode/latest-64bit\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetKernel(ctx, \u0026linode.GetKernelArgs{\n\t\t\tId: \"linode/latest-64bit\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetKernelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var latest = LinodeFunctions.getKernel(GetKernelArgs.builder()\n            .id(\"linode/latest-64bit\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  latest:\n    fn::invoke:\n      function: linode:getKernel\n      arguments:\n        id: linode/latest-64bit\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKernel.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this Kernel.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getKernel.\n",
                "properties": {
                    "architecture": {
                        "description": "The architecture of this Kernel.\n",
                        "type": "string"
                    },
                    "built": {
                        "type": "string"
                    },
                    "deprecated": {
                        "description": "Whether or not this Kernel is deprecated.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kvm": {
                        "description": "If this Kernel is suitable for KVM Linodes.\n",
                        "type": "boolean"
                    },
                    "label": {
                        "description": "The friendly name of this Kernel.\n",
                        "type": "string"
                    },
                    "pvops": {
                        "description": "If this Kernel is suitable for paravirtualized operations.\n",
                        "type": "boolean"
                    },
                    "version": {
                        "description": "Linux Kernel version\n",
                        "type": "string"
                    },
                    "xen": {
                        "description": "If this Kernel is suitable for Xen Linodes.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "architecture",
                    "built",
                    "deprecated",
                    "id",
                    "kvm",
                    "label",
                    "pvops",
                    "version",
                    "xen"
                ],
                "type": "object"
            }
        },
        "linode:index/getKernels:getKernels": {
            "description": "Provides information about Linode Kernels that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-kernels).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Kernel.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filteredKernels = linode.getKernels({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"my-kernel\"],\n        },\n        {\n            name: \"architecture\",\n            values: [\"x86_64\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_kernels = linode.get_kernels(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\"my-kernel\"],\n    },\n    {\n        \"name\": \"architecture\",\n        \"values\": [\"x86_64\"],\n    },\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filteredKernels = Linode.GetKernels.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetKernelsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-kernel\",\n                },\n            },\n            new Linode.Inputs.GetKernelsFilterInputArgs\n            {\n                Name = \"architecture\",\n                Values = new[]\n                {\n                    \"x86_64\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetKernels(ctx, \u0026linode.GetKernelsArgs{\n\t\t\tFilters: []linode.GetKernelsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-kernel\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"architecture\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"x86_64\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetKernelsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filteredKernels = LinodeFunctions.getKernels(GetKernelsArgs.builder()\n            .filters(            \n                GetKernelsFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"my-kernel\")\n                    .build(),\n                GetKernelsFilterArgs.builder()\n                    .name(\"architecture\")\n                    .values(\"x86_64\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  filteredKernels:\n    fn::invoke:\n      function: linode:getKernels\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-kernel\n          - name: architecture\n            values:\n              - x86_64\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `id`\n\n* `architecture`\n\n* `deprecated`\n\n* `kvm`\n\n* `label`\n\n* `pvops`\n\n* `version`\n\n* `xen`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getKernels.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getKernelsFilter:getKernelsFilter"
                        }
                    },
                    "kernels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getKernelsKernel:getKernelsKernel"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKernels.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getKernelsFilter:getKernelsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of this Kernel.\n",
                        "type": "string"
                    },
                    "kernels": {
                        "items": {
                            "$ref": "#/types/linode:index/getKernelsKernel:getKernelsKernel"
                        },
                        "type": "array"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getLinodeObjectStorageBucket:getLinodeObjectStorageBucket": {
            "description": "Provides information about a Linode Object Storage Bucket\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-object-storage-bucket).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Object Storage Bucket.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_bucket = linode.getLinodeObjectStorageBucket({\n    label: \"my-bucket\",\n    region: \"us-mia\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_bucket = linode.get_linode_object_storage_bucket(label=\"my-bucket\",\n    region=\"us-mia\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_bucket = Linode.GetLinodeObjectStorageBucket.Invoke(new()\n    {\n        Label = \"my-bucket\",\n        Region = \"us-mia\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetLinodeObjectStorageBucket(ctx, \u0026linode.GetLinodeObjectStorageBucketArgs{\n\t\t\tLabel:  \"my-bucket\",\n\t\t\tRegion: pulumi.StringRef(\"us-mia\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLinodeObjectStorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-bucket = LinodeFunctions.getLinodeObjectStorageBucket(GetLinodeObjectStorageBucketArgs.builder()\n            .label(\"my-bucket\")\n            .region(\"us-mia\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-bucket:\n    fn::invoke:\n      function: linode:getLinodeObjectStorageBucket\n      arguments:\n        label: my-bucket\n        region: us-mia\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLinodeObjectStorageBucket.\n",
                "properties": {
                    "cluster": {
                        "type": "string",
                        "description": "The ID of the Object Storage Cluster this bucket is in. Required if `region` is not configured.\n",
                        "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`."
                    },
                    "label": {
                        "type": "string",
                        "description": "The name of this bucket.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The ID of the region this bucket is in. Required if `cluster` is not configured.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLinodeObjectStorageBucket.\n",
                "properties": {
                    "cluster": {
                        "deprecationMessage": "The cluster attribute has been deprecated, please consider switching to the region attribute. For example, a cluster value of `us-mia-1` can be translated to a region value of `us-mia`.",
                        "type": "string"
                    },
                    "created": {
                        "type": "string"
                    },
                    "endpointType": {
                        "type": "string"
                    },
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "objects": {
                        "type": "integer"
                    },
                    "region": {
                        "type": "string"
                    },
                    "s3Endpoint": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    }
                },
                "required": [
                    "cluster",
                    "created",
                    "endpointType",
                    "hostname",
                    "id",
                    "label",
                    "objects",
                    "region",
                    "s3Endpoint",
                    "size"
                ],
                "type": "object"
            }
        },
        "linode:index/getLkeCluster:getLkeCluster": {
            "description": "Provides details about an LKE Cluster.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-cluster).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_cluster = linode.getLkeCluster({\n    id: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_cluster = linode.get_lke_cluster(id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_cluster = Linode.GetLkeCluster.Invoke(new()\n    {\n        Id = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupLkeCluster(ctx, \u0026linode.LookupLkeClusterArgs{\n\t\t\tId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-cluster = LinodeFunctions.getLkeCluster(GetLkeClusterArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-cluster:\n    fn::invoke:\n      function: linode:getLkeCluster\n      arguments:\n        id: 123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLkeCluster.\n",
                "properties": {
                    "controlPlanes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClusterControlPlane:getLkeClusterControlPlane"
                        },
                        "description": "The settings for the Kubernetes Control Plane.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The LKE Cluster's ID.\n"
                    },
                    "pools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClusterPool:getLkeClusterPool"
                        },
                        "description": "Node pools associated with this cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLkeCluster.\n",
                "properties": {
                    "apiEndpoints": {
                        "description": "The endpoints for the Kubernetes API server.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "controlPlanes": {
                        "description": "The settings for the Kubernetes Control Plane.\n",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClusterControlPlane:getLkeClusterControlPlane"
                        },
                        "type": "array"
                    },
                    "created": {
                        "description": "When this Kubernetes cluster was created.\n",
                        "type": "string"
                    },
                    "dashboardUrl": {
                        "description": "The Kubernetes Dashboard access URL for this cluster. LKE Enterprise does not have a dashboard URL.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the node.\n",
                        "type": "integer"
                    },
                    "k8sVersion": {
                        "description": "The Kubernetes version for this Kubernetes cluster in the format of `major.minor` (e.g. `1.17`).\n",
                        "type": "string"
                    },
                    "kubeconfig": {
                        "description": "The base64 encoded kubeconfig for the Kubernetes cluster.\n",
                        "secret": true,
                        "type": "string"
                    },
                    "label": {
                        "description": "The unique label for the cluster.\n",
                        "type": "string"
                    },
                    "pools": {
                        "description": "Node pools associated with this cluster.\n",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClusterPool:getLkeClusterPool"
                        },
                        "type": "array"
                    },
                    "region": {
                        "description": "This Kubernetes cluster's location.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the node. (`ready`, `not_ready`)\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tier": {
                        "description": "The desired Kubernetes tier. (**Note: v4beta only and may not currently be available to all users.**)\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "When this Kubernetes cluster was updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "apiEndpoints",
                    "created",
                    "dashboardUrl",
                    "id",
                    "k8sVersion",
                    "kubeconfig",
                    "label",
                    "region",
                    "status",
                    "tags",
                    "tier",
                    "updated"
                ],
                "type": "object"
            }
        },
        "linode:index/getLkeClusters:getLkeClusters": {
            "description": "Provides information about a list of current Linode Kubernetes (LKE) clusters on your account that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-clusters).\n\n## Example Usage\n\nGet information about all LKE clusters with a specific tag:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific = linode.getLkeClusters({\n    filters: [{\n        name: \"tags\",\n        values: [\"test-tag\"],\n    }],\n});\nexport const lkeCluster = specific.then(specific =\u003e specific.lkeClusters?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific = linode.get_lke_clusters(filters=[{\n    \"name\": \"tags\",\n    \"values\": [\"test-tag\"],\n}])\npulumi.export(\"lkeCluster\", specific.lke_clusters[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific = Linode.GetLkeClusters.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetLkeClustersFilterInputArgs\n            {\n                Name = \"tags\",\n                Values = new[]\n                {\n                    \"test-tag\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"lkeCluster\"] = specific.Apply(getLkeClustersResult =\u003e getLkeClustersResult.LkeClusters[0]?.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific, err := linode.GetLkeClusters(ctx, \u0026linode.GetLkeClustersArgs{\n\t\t\tFilters: []linode.GetLkeClustersFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"tags\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"test-tag\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"lkeCluster\", specific.LkeClusters[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeClustersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific = LinodeFunctions.getLkeClusters(GetLkeClustersArgs.builder()\n            .filters(GetLkeClustersFilterArgs.builder()\n                .name(\"tags\")\n                .values(\"test-tag\")\n                .build())\n            .build());\n\n        ctx.export(\"lkeCluster\", specific.lkeClusters()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific:\n    fn::invoke:\n      function: linode:getLkeClusters\n      arguments:\n        filters:\n          - name: tags\n            values:\n              - test-tag\noutputs:\n  lkeCluster: ${specific.lkeClusters[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `k8s_version`\n\n* `label`\n\n* `region`\n\n* `tags`\n\n* `status`\n\n* `created`\n\n* `updated`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLkeClusters.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClustersFilter:getLkeClustersFilter"
                        }
                    },
                    "lkeClusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClustersLkeCluster:getLkeClustersLkeCluster"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLkeClusters.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClustersFilter:getLkeClustersFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The LKE Cluster's ID.\n",
                        "type": "string"
                    },
                    "lkeClusters": {
                        "items": {
                            "$ref": "#/types/linode:index/getLkeClustersLkeCluster:getLkeClustersLkeCluster"
                        },
                        "type": "array"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getLkeTypes:getLkeTypes": {
            "description": "Provides information about Linode LKE types that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-types).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLkeTypes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeTypesFilter:getLkeTypesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeTypesType:getLkeTypesType"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLkeTypes.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getLkeTypesFilter:getLkeTypesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID representing the Kubernetes type.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/types/linode:index/getLkeTypesType:getLkeTypesType"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getLkeVersion:getLkeVersion": {
            "description": "Provides details about a specific Kubernetes versions available for deployment to a Kubernetes cluster.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-version).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode LKE Version.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getLkeVersion({\n    id: \"1.31\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_lke_version(id=\"1.31\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetLkeVersion.Invoke(new()\n    {\n        Id = \"1.31\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetLkeVersion(ctx, \u0026linode.GetLkeVersionArgs{\n\t\t\tId: \"1.31\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getLkeVersion(GetLkeVersionArgs.builder()\n            .id(\"1.31\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: linode:getLkeVersion\n      arguments:\n        id: '1.31'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following example shows how one might use this data source to access information about a Linode LKE Version\nwith additional information about the Linode LKE Version's tier (`enterprise` or `standard`).\n\n\u003e **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getLkeVersion({\n    id: \"1.31\",\n    tier: \"standard\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_lke_version(id=\"1.31\",\n    tier=\"standard\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetLkeVersion.Invoke(new()\n    {\n        Id = \"1.31\",\n        Tier = \"standard\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetLkeVersion(ctx, \u0026linode.GetLkeVersionArgs{\n\t\t\tId:   \"1.31\",\n\t\t\tTier: pulumi.StringRef(\"standard\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getLkeVersion(GetLkeVersionArgs.builder()\n            .id(\"1.31\")\n            .tier(\"standard\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: linode:getLkeVersion\n      arguments:\n        id: '1.31'\n        tier: standard\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLkeVersion.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this Linode LKE Version.\n"
                    },
                    "tier": {
                        "type": "string",
                        "description": "The tier (`standard` or `enterprise`) of Linode LKE Version to fetch.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLkeVersion.\n",
                "properties": {
                    "id": {
                        "description": "The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.\n",
                        "type": "string"
                    },
                    "tier": {
                        "description": "The Kubernetes version tier. Only exported if `tier` was provided when using the datasource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "tier"
                ],
                "type": "object"
            }
        },
        "linode:index/getLkeVersions:getLkeVersions": {
            "description": "Provides details about the Kubernetes versions available for deployment to a Kubernetes cluster.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-lke-versions).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode LKE Version.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst example = linode.getLkeVersions({});\nexport const exampleOutput = example;\nexport const exampleOutputFirstVersion = example.then(example =\u003e example.versions?.[0]);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample = linode.get_lke_versions()\npulumi.export(\"exampleOutput\", example)\npulumi.export(\"exampleOutputFirstVersion\", example.versions[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Linode.GetLkeVersions.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleOutput\"] = example,\n        [\"exampleOutputFirstVersion\"] = example.Apply(getLkeVersionsResult =\u003e getLkeVersionsResult.Versions[0]),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := linode.GetLkeVersions(ctx, \u0026linode.GetLkeVersionsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleOutput\", example)\n\t\tctx.Export(\"exampleOutputFirstVersion\", example.Versions[0])\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeVersionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LinodeFunctions.getLkeVersions(GetLkeVersionsArgs.builder()\n            .build());\n\n        ctx.export(\"exampleOutput\", example);\n        ctx.export(\"exampleOutputFirstVersion\", example.versions()[0]);\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: linode:getLkeVersions\n      arguments: {}\noutputs:\n  exampleOutput: ${example}\n  exampleOutputFirstVersion: ${example.versions[0]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following example shows how one might use this data source to access information about a Linode LKE Version\nwith additional information about the Linode LKE Version's tier (`enterprise` or `standard`).\n\n\u003e **_NOTE:_**  This functionality may not be currently available to all users and can only be used with v4beta.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst exampleEnterprise = linode.getLkeVersions({\n    tier: \"enterprise\",\n});\nexport const exampleEnterpriseOutput = exampleEnterprise;\nexport const exampleEnterpriseOutputFirstVersion = exampleEnterprise.then(exampleEnterprise =\u003e exampleEnterprise.versions?.[0]);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nexample_enterprise = linode.get_lke_versions(tier=\"enterprise\")\npulumi.export(\"exampleEnterpriseOutput\", example_enterprise)\npulumi.export(\"exampleEnterpriseOutputFirstVersion\", example_enterprise.versions[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleEnterprise = Linode.GetLkeVersions.Invoke(new()\n    {\n        Tier = \"enterprise\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"exampleEnterpriseOutput\"] = exampleEnterprise,\n        [\"exampleEnterpriseOutputFirstVersion\"] = exampleEnterprise.Apply(getLkeVersionsResult =\u003e getLkeVersionsResult.Versions[0]),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleEnterprise, err := linode.GetLkeVersions(ctx, \u0026linode.GetLkeVersionsArgs{\n\t\t\tTier: pulumi.StringRef(\"enterprise\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"exampleEnterpriseOutput\", exampleEnterprise)\n\t\tctx.Export(\"exampleEnterpriseOutputFirstVersion\", exampleEnterprise.Versions[0])\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetLkeVersionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleEnterprise = LinodeFunctions.getLkeVersions(GetLkeVersionsArgs.builder()\n            .tier(\"enterprise\")\n            .build());\n\n        ctx.export(\"exampleEnterpriseOutput\", exampleEnterprise);\n        ctx.export(\"exampleEnterpriseOutputFirstVersion\", exampleEnterprise.versions()[0]);\n    }\n}\n```\n```yaml\nvariables:\n  exampleEnterprise:\n    fn::invoke:\n      function: linode:getLkeVersions\n      arguments:\n        tier: enterprise\noutputs:\n  exampleEnterpriseOutput: ${exampleEnterprise}\n  exampleEnterpriseOutputFirstVersion: ${exampleEnterprise.versions[0]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLkeVersions.\n",
                "properties": {
                    "tier": {
                        "type": "string",
                        "description": "The tier (`standard` or `enterprise`) of Linode LKE Versions to fetch.\n"
                    },
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getLkeVersionsVersion:getLkeVersionsVersion"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLkeVersions.\n",
                "properties": {
                    "id": {
                        "description": "The Kubernetes version numbers available for deployment to a Kubernetes cluster in the format of [major].[minor], and the latest supported patch version.\n",
                        "type": "string"
                    },
                    "tier": {
                        "description": "The Kubernetes version tier. Only exported if `tier` was provided when using the datasource.\n",
                        "type": "string"
                    },
                    "versions": {
                        "items": {
                            "$ref": "#/types/linode:index/getLkeVersionsVersion:getLkeVersionsVersion"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getNbTypes:getNbTypes": {
            "inputs": {
                "description": "A collection of arguments for invoking getNbTypes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNbTypesFilter:getNbTypesFilter"
                        }
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNbTypesType:getNbTypesType"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNbTypes.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getNbTypesFilter:getNbTypesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/types/linode:index/getNbTypesType:getNbTypesType"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getNetworkTransferPrices:getNetworkTransferPrices": {
            "description": "Provides information about Linode Network Transfer Prices that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-network-transfer-prices).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkTransferPrices.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkTransferPricesFilter:getNetworkTransferPricesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkTransferPricesType:getNetworkTransferPricesType"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkTransferPrices.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkTransferPricesFilter:getNetworkTransferPricesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID representing the Network Transfer Price.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkTransferPricesType:getNetworkTransferPricesType"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getNetworkingIp:getNetworkingIp": {
            "description": "Provides information about a Linode Networking IP Address\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ip).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Networking IP Address.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst ns1LinodeCom = linode.getNetworkingIp({\n    address: \"162.159.27.72\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nns1_linode_com = linode.get_networking_ip(address=\"162.159.27.72\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ns1LinodeCom = Linode.GetNetworkingIp.Invoke(new()\n    {\n        Address = \"162.159.27.72\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNetworkingIp(ctx, \u0026linode.LookupNetworkingIpArgs{\n\t\t\tAddress: \"162.159.27.72\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNetworkingIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ns1LinodeCom = LinodeFunctions.getNetworkingIp(GetNetworkingIpArgs.builder()\n            .address(\"162.159.27.72\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ns1LinodeCom:\n    fn::invoke:\n      function: linode:getNetworkingIp\n      arguments:\n        address: 162.159.27.72\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkingIp.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP Address to access.  The address must be associated with the account and a resource that the user has access to view.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkingIp.\n",
                "properties": {
                    "address": {
                        "description": "The IPv4 address that is configured as a 1:1 NAT for this VPC interface.\n",
                        "type": "string"
                    },
                    "gateway": {
                        "description": "The default gateway for this address.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "linodeId": {
                        "description": "The ID of the Linode this address currently belongs to.\n",
                        "type": "integer"
                    },
                    "prefix": {
                        "description": "The number of bits set in the subnet mask.\n",
                        "type": "integer"
                    },
                    "public": {
                        "description": "Whether this is a public or private IP address.\n",
                        "type": "boolean"
                    },
                    "rdns": {
                        "description": "The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The Region this IP address resides in. See all regions [here](https://api.linode.com/v4/regions).\n",
                        "type": "string"
                    },
                    "reserved": {
                        "description": "Whether this IP address is a reserved IP.\n",
                        "type": "boolean"
                    },
                    "subnetMask": {
                        "description": "The mask that separates host bits from network bits for this address.\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of address this is (ipv4, ipv6, ipv6/pool, ipv6/range).\n",
                        "type": "string"
                    },
                    "vpcNat11": {
                        "$ref": "#/types/linode:index/getNetworkingIpVpcNat11:getNetworkingIpVpcNat11",
                        "description": "Contains information about the NAT 1:1 mapping of a public IP address to a VPC subnet.\n"
                    }
                },
                "required": [
                    "address",
                    "gateway",
                    "id",
                    "linodeId",
                    "prefix",
                    "public",
                    "rdns",
                    "region",
                    "reserved",
                    "subnetMask",
                    "type",
                    "vpcNat11"
                ],
                "type": "object"
            }
        },
        "linode:index/getNetworkingIps:getNetworkingIps": {
            "description": "Provides information about all IP addresses associated with the current Linode account, including both assigned and unassigned reserved IP addresses.\n\n## Example Usage\n\nRetrieve all IPs under the current account:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst all = linode.getNetworkingIps({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_networking_ips()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetNetworkingIps.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetNetworkingIps(ctx, \u0026linode.GetNetworkingIpsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNetworkingIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getNetworkingIps(GetNetworkingIpsArgs.builder()\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      function: linode:getNetworkingIps\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nRetrieve all IPs under the current account in a specific region:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered = linode.getNetworkingIps({\n    filters: [{\n        name: \"region\",\n        values: [\"us-mia\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered = linode.get_networking_ips(filters=[{\n    \"name\": \"region\",\n    \"values\": [\"us-mia\"],\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered = Linode.GetNetworkingIps.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetNetworkingIpsFilterInputArgs\n            {\n                Name = \"region\",\n                Values = new[]\n                {\n                    \"us-mia\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetNetworkingIps(ctx, \u0026linode.GetNetworkingIpsArgs{\n\t\t\tFilters: []linode.GetNetworkingIpsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"region\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"us-mia\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNetworkingIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered = LinodeFunctions.getNetworkingIps(GetNetworkingIpsArgs.builder()\n            .filters(GetNetworkingIpsFilterArgs.builder()\n                .name(\"region\")\n                .values(\"us-mia\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  filtered:\n    fn::invoke:\n      function: linode:getNetworkingIps\n      arguments:\n        filters:\n          - name: region\n            values:\n              - us-mia\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `address`\n\n* `gateway`\n\n* `subnet_mask`\n\n* `prefix`\n\n* `type`\n\n* `public`\n\n* `rdns`\n\n* `linode_id`\n\n* `region`\n\n* `reserved`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkingIps.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkingIpsFilter:getNetworkingIpsFilter"
                        }
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkingIpsIpAddress:getNetworkingIpsIpAddress"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkingIps.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkingIpsFilter:getNetworkingIpsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipAddresses": {
                        "items": {
                            "$ref": "#/types/linode:index/getNetworkingIpsIpAddress:getNetworkingIpsIpAddress"
                        },
                        "type": "array"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getNodeBalancer:getNodeBalancer": {
            "description": "Provides details about a Linode NodeBalancer.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancer).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_nodebalancer = linode.getNodeBalancer({\n    id: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_nodebalancer = linode.get_node_balancer(id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_nodebalancer = Linode.GetNodeBalancer.Invoke(new()\n    {\n        Id = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNodeBalancer(ctx, \u0026linode.LookupNodeBalancerArgs{\n\t\t\tId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodeBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-nodebalancer = LinodeFunctions.getNodeBalancer(GetNodeBalancerArgs.builder()\n            .id(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-nodebalancer:\n    fn::invoke:\n      function: linode:getNodeBalancer\n      arguments:\n        id: 123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeBalancer.\n",
                "properties": {
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodeBalancerFirewall:getNodeBalancerFirewall"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "description": "The NodeBalancer's ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeBalancer.\n",
                "properties": {
                    "clientConnThrottle": {
                        "description": "Throttle connections per second (0-20).\n",
                        "type": "integer"
                    },
                    "created": {
                        "description": "When this firewall was created.\n",
                        "type": "string"
                    },
                    "firewalls": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodeBalancerFirewall:getNodeBalancerFirewall"
                        },
                        "type": "array"
                    },
                    "hostname": {
                        "description": "This NodeBalancer's hostname, ending with .ip.linodeusercontent.com\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Firewall's ID.\n",
                        "type": "integer"
                    },
                    "ipv4": {
                        "description": "A list of IPv4 addresses or networks. Must be in IP/mask format.\n",
                        "type": "string"
                    },
                    "ipv6": {
                        "description": "A list of IPv6 addresses or networks. Must be in IP/mask format.\n",
                        "type": "string"
                    },
                    "label": {
                        "description": "Used to identify this rule. For display purposes only.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The Region where this Linode NodeBalancer is located. NodeBalancers only support backends in the same Region.\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tags applied to the firewall. Tags are case-insensitive and are for organizational purposes only.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "transfers": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodeBalancerTransfer:getNodeBalancerTransfer"
                        },
                        "type": "array"
                    },
                    "updated": {
                        "description": "When this firewall was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "clientConnThrottle",
                    "created",
                    "hostname",
                    "id",
                    "ipv4",
                    "ipv6",
                    "label",
                    "region",
                    "tags",
                    "transfers",
                    "updated"
                ],
                "type": "object"
            }
        },
        "linode:index/getNodeBalancerConfig:getNodeBalancerConfig": {
            "description": "Provides details about a Linode NodeBalancer Config.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-config).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_config = linode.getNodeBalancerConfig({\n    id: 123,\n    nodebalancerId: 456,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_config = linode.get_node_balancer_config(id=123,\n    nodebalancer_id=456)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_config = Linode.GetNodeBalancerConfig.Invoke(new()\n    {\n        Id = 123,\n        NodebalancerId = 456,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNodeBalancerConfig(ctx, \u0026linode.LookupNodeBalancerConfigArgs{\n\t\t\tId:             123,\n\t\t\tNodebalancerId: 456,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodeBalancerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-config = LinodeFunctions.getNodeBalancerConfig(GetNodeBalancerConfigArgs.builder()\n            .id(123)\n            .nodebalancerId(456)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-config:\n    fn::invoke:\n      function: linode:getNodeBalancerConfig\n      arguments:\n        id: 123\n        nodebalancerId: 456\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeBalancerConfig.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The config's ID.\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer that contains the config.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "nodebalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeBalancerConfig.\n",
                "properties": {
                    "algorithm": {
                        "description": "What algorithm this NodeBalancer should use for routing traffic to backends (`roundrobin`, `leastconn`, `source`)\n",
                        "type": "string"
                    },
                    "check": {
                        "description": "The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected. (`none`, `connection`, `http`, `http_body`)\n",
                        "type": "string"
                    },
                    "checkAttempts": {
                        "description": "How many times to attempt a check before considering a backend to be down. (1-30)\n",
                        "type": "integer"
                    },
                    "checkBody": {
                        "type": "string"
                    },
                    "checkInterval": {
                        "description": "How often, in seconds, to check that backends are up and serving requests.\n",
                        "type": "integer"
                    },
                    "checkPassive": {
                        "description": "If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.\n",
                        "type": "boolean"
                    },
                    "checkPath": {
                        "description": "The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.\n",
                        "type": "string"
                    },
                    "checkTimeout": {
                        "description": "How long, in seconds, to wait for a check attempt before considering it failed. (1-30)\n",
                        "type": "integer"
                    },
                    "cipherSuite": {
                        "description": "What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary. (`recommended`, `legacy`)\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "nodeStatuses": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodeBalancerConfigNodeStatus:getNodeBalancerConfigNodeStatus"
                        },
                        "type": "array"
                    },
                    "nodebalancerId": {
                        "type": "integer"
                    },
                    "port": {
                        "description": "The TCP port this Config is for.\n",
                        "type": "integer"
                    },
                    "protocol": {
                        "description": "The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key. (`http`, `https`, `tcp`) (Defaults to `http`)\n",
                        "type": "string"
                    },
                    "proxyProtocol": {
                        "description": "The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. (`none`, `v1`, and `v2`) (Defaults to `none`)\n",
                        "type": "string"
                    },
                    "sslCommonname": {
                        "description": "The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n",
                        "type": "string"
                    },
                    "sslFingerprint": {
                        "description": "The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.\n",
                        "type": "string"
                    },
                    "stickiness": {
                        "description": "Controls how session stickiness is handled on this port. (`none`, `table`, `http_cookie`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "algorithm",
                    "check",
                    "checkAttempts",
                    "checkBody",
                    "checkInterval",
                    "checkPassive",
                    "checkPath",
                    "checkTimeout",
                    "cipherSuite",
                    "id",
                    "nodeStatuses",
                    "nodebalancerId",
                    "port",
                    "protocol",
                    "proxyProtocol",
                    "sslCommonname",
                    "sslFingerprint",
                    "stickiness"
                ],
                "type": "object"
            }
        },
        "linode:index/getNodeBalancerNode:getNodeBalancerNode": {
            "description": "Provides details about a Linode NodeBalancer node.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-node).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst my_node = linode.getNodeBalancerNode({\n    id: 123,\n    nodebalancerId: 456,\n    configId: 789,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_node = linode.get_node_balancer_node(id=123,\n    nodebalancer_id=456,\n    config_id=789)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_node = Linode.GetNodeBalancerNode.Invoke(new()\n    {\n        Id = 123,\n        NodebalancerId = 456,\n        ConfigId = 789,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupNodeBalancerNode(ctx, \u0026linode.LookupNodeBalancerNodeArgs{\n\t\t\tId:             123,\n\t\t\tNodebalancerId: 456,\n\t\t\tConfigId:       789,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodeBalancerNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-node = LinodeFunctions.getNodeBalancerNode(GetNodeBalancerNodeArgs.builder()\n            .id(123)\n            .nodebalancerId(456)\n            .configId(789)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-node:\n    fn::invoke:\n      function: linode:getNodeBalancerNode\n      arguments:\n        id: 123\n        nodebalancerId: 456\n        configId: 789\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeBalancerNode.\n",
                "properties": {
                    "configId": {
                        "type": "integer",
                        "description": "The ID of the config that contains the Node.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The node's ID.\n"
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer that contains the node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configId",
                    "id",
                    "nodebalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeBalancerNode.\n",
                "properties": {
                    "address": {
                        "description": "The private IP Address where this backend can be reached.\n",
                        "type": "string"
                    },
                    "configId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "label": {
                        "description": "The label of the Linode NodeBalancer Node. This is for display purposes only.\n",
                        "type": "string"
                    },
                    "mode": {
                        "description": "The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new traffic, but connections already pinned to it will continue to be routed to it. (`accept`, `reject`, `drain`, `backup`)\n",
                        "type": "string"
                    },
                    "nodebalancerId": {
                        "type": "integer"
                    },
                    "status": {
                        "description": "The current status of this node, based on the configured checks of its NodeBalancer Config. (`unknown`, `UP`, `DOWN`).\n",
                        "type": "string"
                    },
                    "weight": {
                        "description": "Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight will receive more traffic. (1-255).\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "address",
                    "configId",
                    "id",
                    "label",
                    "mode",
                    "nodebalancerId",
                    "status",
                    "weight"
                ],
                "type": "object"
            }
        },
        "linode:index/getNodebalancerConfigs:getNodebalancerConfigs": {
            "description": "Provides information about Linode NodeBalancer Configs that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancer-configs).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a list of NodeBalancer Configs.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filterNbConfigs = linode.getNodebalancerConfigs({\n    nodebalancerId: 12345,\n    filters: [{\n        name: \"port\",\n        values: [\"80\"],\n    }],\n});\nexport const nodebalancerConfigId = filterNbConfigs.then(filterNbConfigs =\u003e filterNbConfigs.nodebalancerConfigs?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfilter_nb_configs = linode.get_nodebalancer_configs(nodebalancer_id=12345,\n    filters=[{\n        \"name\": \"port\",\n        \"values\": [\"80\"],\n    }])\npulumi.export(\"nodebalancerConfigId\", filter_nb_configs.nodebalancer_configs[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filterNbConfigs = Linode.GetNodebalancerConfigs.Invoke(new()\n    {\n        NodebalancerId = 12345,\n        Filters = new[]\n        {\n            new Linode.Inputs.GetNodebalancerConfigsFilterInputArgs\n            {\n                Name = \"port\",\n                Values = new[]\n                {\n                    \"80\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"nodebalancerConfigId\"] = filterNbConfigs.Apply(getNodebalancerConfigsResult =\u003e getNodebalancerConfigsResult.NodebalancerConfigs[0]?.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfilterNbConfigs, err := linode.GetNodebalancerConfigs(ctx, \u0026linode.GetNodebalancerConfigsArgs{\n\t\t\tNodebalancerId: 12345,\n\t\t\tFilters: []linode.GetNodebalancerConfigsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"port\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"80\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"nodebalancerConfigId\", filterNbConfigs.NodebalancerConfigs[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodebalancerConfigsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filterNbConfigs = LinodeFunctions.getNodebalancerConfigs(GetNodebalancerConfigsArgs.builder()\n            .nodebalancerId(12345)\n            .filters(GetNodebalancerConfigsFilterArgs.builder()\n                .name(\"port\")\n                .values(\"80\")\n                .build())\n            .build());\n\n        ctx.export(\"nodebalancerConfigId\", filterNbConfigs.nodebalancerConfigs()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  filterNbConfigs:\n    fn::invoke:\n      function: linode:getNodebalancerConfigs\n      arguments:\n        nodebalancerId: 12345\n        filters:\n          - name: port\n            values:\n              - '80'\noutputs:\n  nodebalancerConfigId: ${filterNbConfigs.nodebalancerConfigs[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `algorithm`\n\n* `check`\n\n* `nodebalancer_id`\n\n* `port`\n\n* `protocol`\n\n* `proxy_protocol`\n\n* `stickiness`\n\n* `check_path`\n\n* `check_body`\n\n* `check_passive`\n\n* `cipher_suite`\n\n* `ssl_commonname`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodebalancerConfigs.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancerConfigsFilter:getNodebalancerConfigsFilter"
                        }
                    },
                    "nodebalancerConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancerConfigsNodebalancerConfig:getNodebalancerConfigsNodebalancerConfig"
                        }
                    },
                    "nodebalancerId": {
                        "type": "integer",
                        "description": "The ID of the NodeBalancer to access.\n\n* `filter` - (Optional) A set of filters used to select Linode NodeBalancers that meet certain requirements.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodebalancerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodebalancerConfigs.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancerConfigsFilter:getNodebalancerConfigsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The config's ID.\n",
                        "type": "string"
                    },
                    "nodebalancerConfigs": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancerConfigsNodebalancerConfig:getNodebalancerConfigsNodebalancerConfig"
                        },
                        "type": "array"
                    },
                    "nodebalancerId": {
                        "description": "The ID of the NodeBalancer that contains the config.\n",
                        "type": "integer"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "nodebalancerId"
                ],
                "type": "object"
            }
        },
        "linode:index/getNodebalancers:getNodebalancers": {
            "description": "Provides information about Linode NodeBalancers that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-node-balancers).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode NodeBalancer.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific_nodebalancers = linode.getNodebalancers({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"my-nodebalancer\"],\n        },\n        {\n            name: \"region\",\n            values: [\"us-iad\"],\n        },\n    ],\n});\nexport const nodebalancerId = specific_nodebalancers.then(specific_nodebalancers =\u003e specific_nodebalancers.nodebalancers?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_nodebalancers = linode.get_nodebalancers(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\"my-nodebalancer\"],\n    },\n    {\n        \"name\": \"region\",\n        \"values\": [\"us-iad\"],\n    },\n])\npulumi.export(\"nodebalancerId\", specific_nodebalancers.nodebalancers[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_nodebalancers = Linode.GetNodebalancers.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetNodebalancersFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-nodebalancer\",\n                },\n            },\n            new Linode.Inputs.GetNodebalancersFilterInputArgs\n            {\n                Name = \"region\",\n                Values = new[]\n                {\n                    \"us-iad\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"nodebalancerId\"] = specific_nodebalancers.Apply(specific_nodebalancers =\u003e specific_nodebalancers.Apply(getNodebalancersResult =\u003e getNodebalancersResult.Nodebalancers[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific_nodebalancers, err := linode.GetNodebalancers(ctx, \u0026linode.GetNodebalancersArgs{\n\t\t\tFilters: []linode.GetNodebalancersFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-nodebalancer\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"region\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"us-iad\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"nodebalancerId\", specific_nodebalancers.Nodebalancers[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetNodebalancersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-nodebalancers = LinodeFunctions.getNodebalancers(GetNodebalancersArgs.builder()\n            .filters(            \n                GetNodebalancersFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"my-nodebalancer\")\n                    .build(),\n                GetNodebalancersFilterArgs.builder()\n                    .name(\"region\")\n                    .values(\"us-iad\")\n                    .build())\n            .build());\n\n        ctx.export(\"nodebalancerId\", specific_nodebalancers.nodebalancers()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific-nodebalancers:\n    fn::invoke:\n      function: linode:getNodebalancers\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-nodebalancer\n          - name: region\n            values:\n              - us-iad\noutputs:\n  nodebalancerId: ${[\"specific-nodebalancers\"].nodebalancers[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `label`\n\n* `tags`\n\n* `ipv4`\n\n* `ipv6`\n\n* `hostname`\n\n* `region`\n\n* `client_conn_throttle`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodebalancers.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancersFilter:getNodebalancersFilter"
                        }
                    },
                    "nodebalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancersNodebalancer:getNodebalancersNodebalancer"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNodebalancers.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancersFilter:getNodebalancersFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The Linode NodeBalancer's unique ID\n",
                        "type": "string"
                    },
                    "nodebalancers": {
                        "items": {
                            "$ref": "#/types/linode:index/getNodebalancersNodebalancer:getNodebalancersNodebalancer"
                        },
                        "type": "array"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getObjectStorageCluster:getObjectStorageCluster": {
            "description": "Provides information about a Linode Object Storage Cluster\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-object-storage-cluster).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Object Storage Cluster.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst primary = linode.getObjectStorageCluster({\n    id: \"us-east-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nprimary = linode.get_object_storage_cluster(id=\"us-east-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var primary = Linode.GetObjectStorageCluster.Invoke(new()\n    {\n        Id = \"us-east-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetObjectStorageCluster(ctx, \u0026linode.GetObjectStorageClusterArgs{\n\t\t\tId: \"us-east-1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetObjectStorageClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var primary = LinodeFunctions.getObjectStorageCluster(GetObjectStorageClusterArgs.builder()\n            .id(\"us-east-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  primary:\n    fn::invoke:\n      function: linode:getObjectStorageCluster\n      arguments:\n        id: us-east-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectStorageCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of this cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjectStorageCluster.\n",
                "properties": {
                    "domain": {
                        "description": "The base URL for this cluster.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "region": {
                        "description": "The region this cluster is located in. See all regions [here](https://api.linode.com/v4/regions).\n",
                        "type": "string"
                    },
                    "staticSiteDomain": {
                        "description": "The base URL for this cluster used when hosting static sites.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "This cluster's status. (`available`, `unavailable`)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "domain",
                    "id",
                    "region",
                    "staticSiteDomain",
                    "status"
                ],
                "type": "object"
            }
        },
        "linode:index/getObjectStorageEndpoints:getObjectStorageEndpoints": {
            "description": "Provides information about Linode Object Storage endpoints available to the user.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-object-storage-endpoints).\n\n## Example Usage\n\nGet an endpoint of E3 type (highest performance and capacity) of Linode Object Storage services:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nexport = async () =\u003e {\n    const test = await linode.getObjectStorageEndpoints({\n        filters: [{\n            name: \"endpoint_type\",\n            values: [\"E3\"],\n        }],\n    });\n    return {\n        \"high-performance-obj-endpoint\": test.endpoints?.[0]?.s3Endpoint,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ntest = linode.get_object_storage_endpoints(filters=[{\n    \"name\": \"endpoint_type\",\n    \"values\": [\"E3\"],\n}])\npulumi.export(\"high-performance-obj-endpoint\", test.endpoints[0].s3_endpoint)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Linode.GetObjectStorageEndpoints.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetObjectStorageEndpointsFilterInputArgs\n            {\n                Name = \"endpoint_type\",\n                Values = new[]\n                {\n                    \"E3\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"high-performance-obj-endpoint\"] = test.Apply(getObjectStorageEndpointsResult =\u003e getObjectStorageEndpointsResult.Endpoints[0]?.S3Endpoint),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := linode.GetObjectStorageEndpoints(ctx, \u0026linode.GetObjectStorageEndpointsArgs{\n\t\t\tFilters: []linode.GetObjectStorageEndpointsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"endpoint_type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"E3\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"high-performance-obj-endpoint\", test.Endpoints[0].S3Endpoint)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetObjectStorageEndpointsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = LinodeFunctions.getObjectStorageEndpoints(GetObjectStorageEndpointsArgs.builder()\n            .filters(GetObjectStorageEndpointsFilterArgs.builder()\n                .name(\"endpoint_type\")\n                .values(\"E3\")\n                .build())\n            .build());\n\n        ctx.export(\"high-performance-obj-endpoint\", test.endpoints()[0].s3Endpoint());\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      function: linode:getObjectStorageEndpoints\n      arguments:\n        filters:\n          - name: endpoint_type\n            values:\n              - E3\noutputs:\n  high-performance-obj-endpoint: ${test.endpoints[0].s3Endpoint}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nGet a list of all available endpoints of Linode Object Storage services.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nexport = async () =\u003e {\n    const test = await linode.getObjectStorageEndpoints({});\n    return {\n        \"available-endpoints\": test.endpoints,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\ntest = linode.get_object_storage_endpoints()\npulumi.export(\"available-endpoints\", test.endpoints)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Linode.GetObjectStorageEndpoints.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"available-endpoints\"] = test.Apply(getObjectStorageEndpointsResult =\u003e getObjectStorageEndpointsResult.Endpoints),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := linode.GetObjectStorageEndpoints(ctx, \u0026linode.GetObjectStorageEndpointsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"available-endpoints\", test.Endpoints)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetObjectStorageEndpointsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = LinodeFunctions.getObjectStorageEndpoints(GetObjectStorageEndpointsArgs.builder()\n            .build());\n\n        ctx.export(\"available-endpoints\", test.endpoints());\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      function: linode:getObjectStorageEndpoints\n      arguments: {}\noutputs:\n  available-endpoints: ${test.endpoints}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `endpoint_type`\n\n* `region`\n\n* `s3_endpoint`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjectStorageEndpoints.\n",
                "properties": {
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getObjectStorageEndpointsEndpoint:getObjectStorageEndpointsEndpoint"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getObjectStorageEndpointsFilter:getObjectStorageEndpointsFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getObjectStorageEndpoints.\n",
                "properties": {
                    "endpoints": {
                        "items": {
                            "$ref": "#/types/linode:index/getObjectStorageEndpointsEndpoint:getObjectStorageEndpointsEndpoint"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getObjectStorageEndpointsFilter:getObjectStorageEndpointsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getPlacementGroup:getPlacementGroup": {
            "description": "`linode.PlacementGroup` provides details about a Linode placement group.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-placement-group).\n\n## Example Usage\n\nThe following example shows how the resource might be used to obtain additional information about a Linode placement group.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst pg = linode.getPlacementGroup({\n    id: 12345,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\npg = linode.get_placement_group(id=12345)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pg = Linode.GetPlacementGroup.Invoke(new()\n    {\n        Id = 12345,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupPlacementGroup(ctx, \u0026linode.LookupPlacementGroupArgs{\n\t\t\tId: 12345,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetPlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pg = LinodeFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()\n            .id(12345)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  pg:\n    fn::invoke:\n      function: linode:getPlacementGroup\n      arguments:\n        id: 12345\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlacementGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the Placement Group.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getPlacementGroupMember:getPlacementGroupMember"
                        },
                        "description": "A set of Linodes currently assigned to this Placement Group.\n"
                    },
                    "migrations": {
                        "$ref": "#/types/linode:index/getPlacementGroupMigrations:getPlacementGroupMigrations",
                        "description": "Any Linodes that are being migrated to or from the placement group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlacementGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "isCompliant": {
                        "description": "Whether this Linode is currently compliant with the group's placement group type.\n",
                        "type": "boolean"
                    },
                    "label": {
                        "description": "The label of the Placement Group. This field can only contain ASCII letters, digits and dashes.\n",
                        "type": "string"
                    },
                    "members": {
                        "description": "A set of Linodes currently assigned to this Placement Group.\n",
                        "items": {
                            "$ref": "#/types/linode:index/getPlacementGroupMember:getPlacementGroupMember"
                        },
                        "type": "array"
                    },
                    "migrations": {
                        "$ref": "#/types/linode:index/getPlacementGroupMigrations:getPlacementGroupMigrations",
                        "description": "Any Linodes that are being migrated to or from the placement group.\n"
                    },
                    "placementGroupPolicy": {
                        "description": "Whether Linodes must be able to become compliant during assignment. (Default `strict`)\n",
                        "type": "string"
                    },
                    "placementGroupType": {
                        "description": "The placement group type to use when placing Linodes in this group.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The region of the Placement Group.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "isCompliant",
                    "label",
                    "placementGroupPolicy",
                    "placementGroupType",
                    "region"
                ],
                "type": "object"
            }
        },
        "linode:index/getPlacementGroups:getPlacementGroups": {
            "description": "Provides information about a list of Linode Placement Groups that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-placement-groups).\n\n## Example Usage\n\nThe following example shows how one might use this data source to list Placement Groups.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nexport = async () =\u003e {\n    const all = await linode.getPlacementGroups({});\n    const filtered = await linode.getPlacementGroups({\n        filters: [{\n            name: \"label\",\n            values: [\"my-label\"],\n        }],\n    });\n    return {\n        \"all-pgs\": all.placementGroups,\n        \"filtered-pgs\": filtered.placementGroups,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nall = linode.get_placement_groups()\nfiltered = linode.get_placement_groups(filters=[{\n    \"name\": \"label\",\n    \"values\": [\"my-label\"],\n}])\npulumi.export(\"all-pgs\", all.placement_groups)\npulumi.export(\"filtered-pgs\", filtered.placement_groups)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Linode.GetPlacementGroups.Invoke();\n\n    var filtered = Linode.GetPlacementGroups.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetPlacementGroupsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-label\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"all-pgs\"] = all.Apply(getPlacementGroupsResult =\u003e getPlacementGroupsResult.PlacementGroups),\n        [\"filtered-pgs\"] = filtered.Apply(getPlacementGroupsResult =\u003e getPlacementGroupsResult.PlacementGroups),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := linode.GetPlacementGroups(ctx, \u0026linode.GetPlacementGroupsArgs{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfiltered, err := linode.GetPlacementGroups(ctx, \u0026linode.GetPlacementGroupsArgs{\n\t\t\tFilters: []linode.GetPlacementGroupsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-label\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"all-pgs\", all.PlacementGroups)\n\t\tctx.Export(\"filtered-pgs\", filtered.PlacementGroups)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetPlacementGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = LinodeFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()\n            .build());\n\n        final var filtered = LinodeFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()\n            .filters(GetPlacementGroupsFilterArgs.builder()\n                .name(\"label\")\n                .values(\"my-label\")\n                .build())\n            .build());\n\n        ctx.export(\"all-pgs\", all.placementGroups());\n        ctx.export(\"filtered-pgs\", filtered.placementGroups());\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      function: linode:getPlacementGroups\n      arguments: {}\n  filtered:\n    fn::invoke:\n      function: linode:getPlacementGroups\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-label\noutputs:\n  all-pgs: ${all.placementGroups}\n  filtered-pgs: ${filtered.placementGroups}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `id`\n\n* `label`\n\n* `region`\n\n* `placement_group_type`\n\n* `placement_group_policy`\n\n* `is_compliant`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlacementGroups.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getPlacementGroupsFilter:getPlacementGroupsFilter"
                        }
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "placementGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlacementGroups.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getPlacementGroupsFilter:getPlacementGroupsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "placementGroups": {
                        "items": {
                            "$ref": "#/types/linode:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getProfile:getProfile": {
            "description": "Provides information about a Linode profile.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-profile).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access profile details.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst profile = linode.getProfile({});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nprofile = linode.get_profile()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var profile = Linode.GetProfile.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetProfile(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var profile = LinodeFunctions.getProfile(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  profile:\n    fn::invoke:\n      function: linode:getProfile\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getProfile.\n",
                "properties": {
                    "authorizedKeys": {
                        "description": "The list of SSH Keys authorized to use Lish for this user. This value is ignored if lish_auth_method is 'disabled'.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "email": {
                        "description": "The profile email address. This address will be used for communication with Linode as necessary.\n",
                        "type": "string"
                    },
                    "emailNotifications": {
                        "description": "If true, email notifications will be sent about account activity. If false, when false business-critical communications may still be sent through email.\n",
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipWhitelistEnabled": {
                        "description": "If true, logins for the user will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled.\n",
                        "type": "boolean"
                    },
                    "lishAuthMethod": {
                        "description": "The methods of authentication allowed when connecting via Lish. 'keys_only' is the most secure with the intent to use Lish, and 'disabled' is recommended for users that will not use Lish at all.\n",
                        "type": "string"
                    },
                    "referrals": {
                        "$ref": "#/types/linode:index/getProfileReferrals:getProfileReferrals",
                        "description": "Credit Card information associated with this Account.\n"
                    },
                    "restricted": {
                        "description": "If true, the user has restrictions on what can be accessed on the Account.\n",
                        "type": "boolean"
                    },
                    "timezone": {
                        "description": "The profile's preferred timezone. This is not used by the API, and is for the benefit of clients only. All times the API returns are in UTC.\n",
                        "type": "string"
                    },
                    "twoFactorAuth": {
                        "description": "If true, logins from untrusted computers will require Two Factor Authentication.\n",
                        "type": "boolean"
                    },
                    "username": {
                        "description": "The username for logging in to Linode services.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "authorizedKeys",
                    "email",
                    "emailNotifications",
                    "id",
                    "ipWhitelistEnabled",
                    "lishAuthMethod",
                    "referrals",
                    "restricted",
                    "timezone",
                    "twoFactorAuth",
                    "username"
                ],
                "type": "object"
            }
        },
        "linode:index/getRegion:getRegion": {
            "description": "`linode.getRegion` provides details about a specific Linode region. See all regions [here](https://api.linode.com/v4/regions).\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-region).\n\n## Example Usage\n\nThe following example shows how the resource might be used to obtain additional information about a Linode region.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst region = linode.getRegion({\n    id: \"us-east\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nregion = linode.get_region(id=\"us-east\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var region = Linode.GetRegion.Invoke(new()\n    {\n        Id = \"us-east\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetRegion(ctx, \u0026linode.GetRegionArgs{\n\t\t\tId: \"us-east\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetRegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var region = LinodeFunctions.getRegion(GetRegionArgs.builder()\n            .id(\"us-east\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  region:\n    fn::invoke:\n      function: linode:getRegion\n      arguments:\n        id: us-east\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The code name of the region to select.\n"
                    },
                    "resolvers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionResolver:getRegionResolver"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "capabilities": {
                        "description": "A list of capabilities of this region.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "country": {
                        "description": "The country the region resides in.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "description": "Detailed location information for this Region, including city, state or region, and country.\n",
                        "type": "string"
                    },
                    "placementGroupLimits": {
                        "items": {
                            "$ref": "#/types/linode:index/getRegionPlacementGroupLimit:getRegionPlacementGroupLimit"
                        },
                        "type": "array"
                    },
                    "resolvers": {
                        "items": {
                            "$ref": "#/types/linode:index/getRegionResolver:getRegionResolver"
                        },
                        "type": "array"
                    },
                    "siteType": {
                        "description": "The type of this region.\n",
                        "type": "string"
                    },
                    "status": {
                        "description": "This region’s current operational status (ok or outage).\n",
                        "type": "string"
                    }
                },
                "required": [
                    "capabilities",
                    "country",
                    "id",
                    "label",
                    "placementGroupLimits",
                    "siteType",
                    "status"
                ],
                "type": "object"
            }
        },
        "linode:index/getRegions:getRegions": {
            "description": "Provides information about Linode regions that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-regions).\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_regions = linode.getRegions({\n    filters: [\n        {\n            name: \"status\",\n            values: [\"ok\"],\n        },\n        {\n            name: \"capabilities\",\n            values: [\"NodeBalancers\"],\n        },\n    ],\n});\nexport const regions = filtered_regions.then(filtered_regions =\u003e filtered_regions.regions);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_regions = linode.get_regions(filters=[\n    {\n        \"name\": \"status\",\n        \"values\": [\"ok\"],\n    },\n    {\n        \"name\": \"capabilities\",\n        \"values\": [\"NodeBalancers\"],\n    },\n])\npulumi.export(\"regions\", filtered_regions.regions)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_regions = Linode.GetRegions.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetRegionsFilterInputArgs\n            {\n                Name = \"status\",\n                Values = new[]\n                {\n                    \"ok\",\n                },\n            },\n            new Linode.Inputs.GetRegionsFilterInputArgs\n            {\n                Name = \"capabilities\",\n                Values = new[]\n                {\n                    \"NodeBalancers\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"regions\"] = filtered_regions.Apply(filtered_regions =\u003e filtered_regions.Apply(getRegionsResult =\u003e getRegionsResult.Regions)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_regions, err := linode.GetRegions(ctx, \u0026linode.GetRegionsArgs{\n\t\t\tFilters: []linode.GetRegionsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"status\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"ok\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"capabilities\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"NodeBalancers\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"regions\", filtered_regions.Regions)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetRegionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-regions = LinodeFunctions.getRegions(GetRegionsArgs.builder()\n            .filters(            \n                GetRegionsFilterArgs.builder()\n                    .name(\"status\")\n                    .values(\"ok\")\n                    .build(),\n                GetRegionsFilterArgs.builder()\n                    .name(\"capabilities\")\n                    .values(\"NodeBalancers\")\n                    .build())\n            .build());\n\n        ctx.export(\"regions\", filtered_regions.regions());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-regions:\n    fn::invoke:\n      function: linode:getRegions\n      arguments:\n        filters:\n          - name: status\n            values:\n              - ok\n          - name: capabilities\n            values:\n              - NodeBalancers\noutputs:\n  regions: ${[\"filtered-regions\"].regions}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `status`\n\n* `country`\n\n* `capabilities`\n\n* `site_type`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegions.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsFilter:getRegionsFilter"
                        }
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsRegion:getRegionsRegion"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegions.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsFilter:getRegionsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "regions": {
                        "items": {
                            "$ref": "#/types/linode:index/getRegionsRegion:getRegionsRegion"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getSshKey:getSshKey": {
            "description": "`linode.SshKey` provides access to a specifically labeled SSH Key in the Profile of the User identified by the access token.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ssh-key).\n\n## Example Usage\n\nThe following example shows how the resource might be used to obtain the name of the SSH Key configured on the Linode user profile.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getSshKey({\n    label: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_ssh_key(label=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetSshKey.Invoke(new()\n    {\n        Label = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupSshKey(ctx, \u0026linode.LookupSshKeyArgs{\n\t\t\tLabel: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getSshKey(GetSshKeyArgs.builder()\n            .label(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: linode:getSshKey\n      arguments:\n        label: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the SSH Key\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The label of the SSH Key to select.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "created": {
                        "description": "The date this key was added.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the SSH Key\n",
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "sshKey": {
                        "description": "The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "created",
                    "label",
                    "sshKey"
                ],
                "type": "object"
            }
        },
        "linode:index/getSshkeys:getSshkeys": {
            "description": "`linode.SshKey` provides access to a filtered list of SSH Keys in the Profile of the User identified by the access token.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-ssh-keys).\n\n## Example Usage\n\nThe following example shows how the resource might be used to obtain the names of the SSH Keys configured on the Linode user profile.\n\nThe following example shows how one might use this data source to access information about a Linode Kernel.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filteredSsh = linode.getSshkeys({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"my-ssh\"],\n        },\n        {\n            name: \"ssh_key\",\n            values: [\"RSA-6522525\"],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_ssh = linode.get_sshkeys(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\"my-ssh\"],\n    },\n    {\n        \"name\": \"ssh_key\",\n        \"values\": [\"RSA-6522525\"],\n    },\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filteredSsh = Linode.GetSshkeys.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetSshkeysFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-ssh\",\n                },\n            },\n            new Linode.Inputs.GetSshkeysFilterInputArgs\n            {\n                Name = \"ssh_key\",\n                Values = new[]\n                {\n                    \"RSA-6522525\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.GetSshkeys(ctx, \u0026linode.GetSshkeysArgs{\n\t\t\tFilters: []linode.GetSshkeysFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-ssh\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"ssh_key\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"RSA-6522525\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetSshkeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filteredSsh = LinodeFunctions.getSshkeys(GetSshkeysArgs.builder()\n            .filters(            \n                GetSshkeysFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"my-ssh\")\n                    .build(),\n                GetSshkeysFilterArgs.builder()\n                    .name(\"ssh_key\")\n                    .values(\"RSA-6522525\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  filteredSsh:\n    fn::invoke:\n      function: linode:getSshkeys\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-ssh\n          - name: ssh_key\n            values:\n              - RSA-6522525\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `id`\n\n* `label`\n\n* `ssh_key`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSshkeys.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getSshkeysFilter:getSshkeysFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "sshkeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getSshkeysSshkey:getSshkeysSshkey"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshkeys.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getSshkeysFilter:getSshkeysFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of the SSH Key.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "sshkeys": {
                        "items": {
                            "$ref": "#/types/linode:index/getSshkeysSshkey:getSshkeysSshkey"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getStackScript:getStackScript": {
            "description": "Provides details about a specific Linode StackScript.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-stack-script).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode StackScript.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myStackscript = linode.getStackScript({\n    id: \"355872\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_stackscript = linode.get_stack_script(id=\"355872\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myStackscript = Linode.GetStackScript.Invoke(new()\n    {\n        Id = \"355872\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupStackScript(ctx, \u0026linode.LookupStackScriptArgs{\n\t\t\tId: \"355872\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetStackScriptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myStackscript = LinodeFunctions.getStackScript(GetStackScriptArgs.builder()\n            .id(\"355872\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myStackscript:\n    fn::invoke:\n      function: linode:getStackScript\n      arguments:\n        id: 355872\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStackScript.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique numeric ID of the StackScript to query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStackScript.\n",
                "properties": {
                    "created": {
                        "description": "The date this StackScript was created.\n",
                        "type": "string"
                    },
                    "deploymentsActive": {
                        "description": "Count of currently active, deployed Linodes created from this StackScript.\n",
                        "type": "integer"
                    },
                    "deploymentsTotal": {
                        "description": "The total number of times this StackScript has been deployed.\n",
                        "type": "integer"
                    },
                    "description": {
                        "description": "A description for the StackScript.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "images": {
                        "description": "A set of Image IDs representing the Images that this StackScript is compatible for deploying with. `any/all` indicates that all available image distributions, including private images, are accepted.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "isPublic": {
                        "description": "This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.\n",
                        "type": "boolean"
                    },
                    "label": {
                        "description": "A human-readable label for the field that will serve as the input prompt for entering the value during deployment.\n",
                        "type": "string"
                    },
                    "revNote": {
                        "description": "This field allows you to add notes for the set of revisions made to this StackScript.\n",
                        "type": "string"
                    },
                    "script": {
                        "description": "The script to execute when provisioning a new Linode with this StackScript.\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "The date this StackScript was updated.\n",
                        "type": "string"
                    },
                    "userDefinedFields": {
                        "description": "This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.\n",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptUserDefinedField:getStackScriptUserDefinedField"
                        },
                        "type": "array"
                    },
                    "userGravatarId": {
                        "description": "The Gravatar ID for the User who created the StackScript.\n",
                        "type": "string"
                    },
                    "username": {
                        "description": "The User who created the StackScript.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "created",
                    "deploymentsActive",
                    "deploymentsTotal",
                    "description",
                    "id",
                    "images",
                    "isPublic",
                    "label",
                    "revNote",
                    "script",
                    "updated",
                    "userDefinedFields",
                    "userGravatarId",
                    "username"
                ],
                "type": "object"
            }
        },
        "linode:index/getStackScripts:getStackScripts": {
            "description": "Provides information about Linode StackScripts that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-stack-scripts).\n\n**NOTICE:** Due to the large number of public StackScripts, this data source may time out if `is_public` is not filtered on.\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode StackScript.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific_stackscripts = linode.getStackScripts({\n    filters: [\n        {\n            name: \"label\",\n            values: [\"my-cool-stackscript\"],\n        },\n        {\n            name: \"is_public\",\n            values: [\"false\"],\n        },\n    ],\n});\nexport const stackscriptId = specific_stackscripts.then(specific_stackscripts =\u003e specific_stackscripts.stackscripts?.[0]?.id);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_stackscripts = linode.get_stack_scripts(filters=[\n    {\n        \"name\": \"label\",\n        \"values\": [\"my-cool-stackscript\"],\n    },\n    {\n        \"name\": \"is_public\",\n        \"values\": [\"false\"],\n    },\n])\npulumi.export(\"stackscriptId\", specific_stackscripts.stackscripts[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_stackscripts = Linode.GetStackScripts.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetStackScriptsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-cool-stackscript\",\n                },\n            },\n            new Linode.Inputs.GetStackScriptsFilterInputArgs\n            {\n                Name = \"is_public\",\n                Values = new[]\n                {\n                    \"false\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"stackscriptId\"] = specific_stackscripts.Apply(specific_stackscripts =\u003e specific_stackscripts.Apply(getStackScriptsResult =\u003e getStackScriptsResult.Stackscripts[0]?.Id)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific_stackscripts, err := linode.GetStackScripts(ctx, \u0026linode.GetStackScriptsArgs{\n\t\t\tFilters: []linode.GetStackScriptsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-cool-stackscript\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName: \"is_public\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"false\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"stackscriptId\", specific_stackscripts.Stackscripts[0].Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetStackScriptsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-stackscripts = LinodeFunctions.getStackScripts(GetStackScriptsArgs.builder()\n            .filters(            \n                GetStackScriptsFilterArgs.builder()\n                    .name(\"label\")\n                    .values(\"my-cool-stackscript\")\n                    .build(),\n                GetStackScriptsFilterArgs.builder()\n                    .name(\"is_public\")\n                    .values(\"false\")\n                    .build())\n            .build());\n\n        ctx.export(\"stackscriptId\", specific_stackscripts.stackscripts()[0].id());\n    }\n}\n```\n```yaml\nvariables:\n  specific-stackscripts:\n    fn::invoke:\n      function: linode:getStackScripts\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-cool-stackscript\n          - name: is_public\n            values:\n              - false\noutputs:\n  stackscriptId: ${[\"specific-stackscripts\"].stackscripts[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `deployments_active`\n\n* `deployments_total`\n\n* `description`\n\n* `images`\n\n* `is_public`\n\n* `label`\n\n* `mine`\n\n* `rev_note`\n\n* `username`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStackScripts.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsFilter:getStackScriptsFilter"
                        }
                    },
                    "latest": {
                        "type": "boolean",
                        "description": "If true, only the latest StackScript will be returned. StackScripts without a valid `created` field are not included in the result.\n\n* `filter` - (Optional) A set of filters used to select Linode StackScripts that meet certain requirements.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "stackscripts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsStackscript:getStackScriptsStackscript"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStackScripts.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsFilter:getStackScriptsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of the StackScript.\n",
                        "type": "string"
                    },
                    "latest": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "stackscripts": {
                        "items": {
                            "$ref": "#/types/linode:index/getStackScriptsStackscript:getStackScriptsStackscript"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getUser:getUser": {
            "description": "Provides information about a Linode user\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-user).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode user.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getUser({\n    username: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_user(username=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetUser.Invoke(new()\n    {\n        Username = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupUser(ctx, \u0026linode.LookupUserArgs{\n\t\t\tUsername: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getUser(GetUserArgs.builder()\n            .username(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: linode:getUser\n      arguments:\n        username: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nThe following example shows a sample grant.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "databaseGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserDatabaseGrant:getUserDatabaseGrant"
                        }
                    },
                    "domainGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserDomainGrant:getUserDomainGrant"
                        }
                    },
                    "firewallGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserFirewallGrant:getUserFirewallGrant"
                        }
                    },
                    "imageGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserImageGrant:getUserImageGrant"
                        }
                    },
                    "linodeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserLinodeGrant:getUserLinodeGrant"
                        }
                    },
                    "longviewGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserLongviewGrant:getUserLongviewGrant"
                        }
                    },
                    "nodebalancerGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserNodebalancerGrant:getUserNodebalancerGrant"
                        }
                    },
                    "placementGroupGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserPlacementGroupGrant:getUserPlacementGroupGrant"
                        }
                    },
                    "stackscriptGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserStackscriptGrant:getUserStackscriptGrant"
                        }
                    },
                    "username": {
                        "type": "string",
                        "description": "The unique username of this User.\n"
                    },
                    "volumeGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserVolumeGrant:getUserVolumeGrant"
                        }
                    },
                    "vpcGrants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUserVpcGrant:getUserVpcGrant"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "databaseGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserDatabaseGrant:getUserDatabaseGrant"
                        },
                        "type": "array"
                    },
                    "domainGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserDomainGrant:getUserDomainGrant"
                        },
                        "type": "array"
                    },
                    "email": {
                        "description": "The email address for this User, for account management communications, and may be used for other communications as configured.\n",
                        "type": "string"
                    },
                    "firewallGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserFirewallGrant:getUserFirewallGrant"
                        },
                        "type": "array"
                    },
                    "globalGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserGlobalGrant:getUserGlobalGrant"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of entity this grant applies to.\n",
                        "type": "string"
                    },
                    "imageGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserImageGrant:getUserImageGrant"
                        },
                        "type": "array"
                    },
                    "linodeGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserLinodeGrant:getUserLinodeGrant"
                        },
                        "type": "array"
                    },
                    "longviewGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserLongviewGrant:getUserLongviewGrant"
                        },
                        "type": "array"
                    },
                    "nodebalancerGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserNodebalancerGrant:getUserNodebalancerGrant"
                        },
                        "type": "array"
                    },
                    "passwordCreated": {
                        "description": "The date and time when this User’s current password was created. User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage. null if this User has not created a password yet.\n",
                        "type": "string"
                    },
                    "placementGroupGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserPlacementGroupGrant:getUserPlacementGroupGrant"
                        },
                        "type": "array"
                    },
                    "restricted": {
                        "description": "If true, this User must be granted access to perform actions or access entities on this Account.\n",
                        "type": "boolean"
                    },
                    "sshKeys": {
                        "description": "A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "stackscriptGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserStackscriptGrant:getUserStackscriptGrant"
                        },
                        "type": "array"
                    },
                    "tfaEnabled": {
                        "description": "A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.\n",
                        "type": "boolean"
                    },
                    "userType": {
                        "description": "The type of this user.\n",
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "verifiedPhoneNumber": {
                        "description": "The phone number verified for this User Profile with the Phone Number Verify command. null if this User Profile has no verified phone number.\n",
                        "type": "string"
                    },
                    "volumeGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserVolumeGrant:getUserVolumeGrant"
                        },
                        "type": "array"
                    },
                    "vpcGrants": {
                        "items": {
                            "$ref": "#/types/linode:index/getUserVpcGrant:getUserVpcGrant"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "databaseGrants",
                    "domainGrants",
                    "email",
                    "firewallGrants",
                    "globalGrants",
                    "id",
                    "imageGrants",
                    "linodeGrants",
                    "longviewGrants",
                    "nodebalancerGrants",
                    "passwordCreated",
                    "placementGroupGrants",
                    "restricted",
                    "sshKeys",
                    "stackscriptGrants",
                    "tfaEnabled",
                    "userType",
                    "username",
                    "verifiedPhoneNumber",
                    "volumeGrants",
                    "vpcGrants"
                ],
                "type": "object"
            }
        },
        "linode:index/getUsers:getUsers": {
            "description": "Provides information about Linode users that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-users).\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_users = linode.getUsers({\n    filters: [{\n        name: \"username\",\n        values: [\"test-user\"],\n    }],\n});\nexport const users = filtered_users.then(filtered_users =\u003e filtered_users.users);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_users = linode.get_users(filters=[{\n    \"name\": \"username\",\n    \"values\": [\"test-user\"],\n}])\npulumi.export(\"users\", filtered_users.users)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_users = Linode.GetUsers.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetUsersFilterInputArgs\n            {\n                Name = \"username\",\n                Values = new[]\n                {\n                    \"test-user\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"users\"] = filtered_users.Apply(filtered_users =\u003e filtered_users.Apply(getUsersResult =\u003e getUsersResult.Users)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_users, err := linode.GetUsers(ctx, \u0026linode.GetUsersArgs{\n\t\t\tFilters: []linode.GetUsersFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"username\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"test-user\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"users\", filtered_users.Users)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-users = LinodeFunctions.getUsers(GetUsersArgs.builder()\n            .filters(GetUsersFilterArgs.builder()\n                .name(\"username\")\n                .values(\"test-user\")\n                .build())\n            .build());\n\n        ctx.export(\"users\", filtered_users.users());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-users:\n    fn::invoke:\n      function: linode:getUsers\n      arguments:\n        filters:\n          - name: username\n            values:\n              - test-user\noutputs:\n  users: ${[\"filtered-users\"].users}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `username`\n\n* `email`\n\n* `restricted`\n\n* `user_type`\n\n* `password_created`\n\n* `tfa_enabled`\n\n* `verfied_phone_number`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsers.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUsersFilter:getUsersFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getUsersUser:getUsersUser"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getUsersFilter:getUsersFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of entity this grant applies to.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/types/linode:index/getUsersUser:getUsersUser"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getVlans:getVlans": {
            "description": "\u003e **Beta Notice** VLANs are currently available through early access.\nTo use early access resources, the `api_version` provider argument must be set to `v4beta`.\nTo learn more, see the early access documentation.\n\nProvides details about Linode VLANs.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vlans).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst myInstance = new linode.Instance(\"my_instance\", {\n    label: \"my_instance\",\n    image: \"linode/ubuntu22.04\",\n    region: \"us-southeast\",\n    type: \"g6-standard-1\",\n    rootPass: \"bogusPassword$\",\n    interfaces: [{\n        purpose: \"vlan\",\n        label: \"my-vlan\",\n    }],\n});\nconst my_vlans = linode.getVlans({\n    filters: [{\n        name: \"label\",\n        values: [\"my-vlan\"],\n    }],\n});\nexport const vlanLinodes = my_vlans.then(my_vlans =\u003e my_vlans.vlans?.[0]?.linodes);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nmy_instance = linode.Instance(\"my_instance\",\n    label=\"my_instance\",\n    image=\"linode/ubuntu22.04\",\n    region=\"us-southeast\",\n    type=\"g6-standard-1\",\n    root_pass=\"bogusPassword$\",\n    interfaces=[{\n        \"purpose\": \"vlan\",\n        \"label\": \"my-vlan\",\n    }])\nmy_vlans = linode.get_vlans(filters=[{\n    \"name\": \"label\",\n    \"values\": [\"my-vlan\"],\n}])\npulumi.export(\"vlanLinodes\", my_vlans.vlans[0].linodes)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = new Linode.Instance(\"my_instance\", new()\n    {\n        Label = \"my_instance\",\n        Image = \"linode/ubuntu22.04\",\n        Region = \"us-southeast\",\n        Type = \"g6-standard-1\",\n        RootPass = \"bogusPassword$\",\n        Interfaces = new[]\n        {\n            new Linode.Inputs.InstanceInterfaceArgs\n            {\n                Purpose = \"vlan\",\n                Label = \"my-vlan\",\n            },\n        },\n    });\n\n    var my_vlans = Linode.GetVlans.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetVlansFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"my-vlan\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vlanLinodes\"] = my_vlans.Apply(my_vlans =\u003e my_vlans.Apply(getVlansResult =\u003e getVlansResult.Vlans[0]?.Linodes)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.NewInstance(ctx, \"my_instance\", \u0026linode.InstanceArgs{\n\t\t\tLabel:    pulumi.String(\"my_instance\"),\n\t\t\tImage:    pulumi.String(\"linode/ubuntu22.04\"),\n\t\t\tRegion:   pulumi.String(\"us-southeast\"),\n\t\t\tType:     pulumi.String(\"g6-standard-1\"),\n\t\t\tRootPass: pulumi.String(\"bogusPassword$\"),\n\t\t\tInterfaces: linode.InstanceInterfaceArray{\n\t\t\t\t\u0026linode.InstanceInterfaceArgs{\n\t\t\t\t\tPurpose: pulumi.String(\"vlan\"),\n\t\t\t\t\tLabel:   pulumi.String(\"my-vlan\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmy_vlans, err := linode.GetVlans(ctx, \u0026linode.GetVlansArgs{\n\t\t\tFilters: []linode.GetVlansFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"my-vlan\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vlanLinodes\", my_vlans.Vlans[0].Linodes)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.Instance;\nimport com.pulumi.linode.InstanceArgs;\nimport com.pulumi.linode.inputs.InstanceInterfaceArgs;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVlansArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myInstance = new Instance(\"myInstance\", InstanceArgs.builder()\n            .label(\"my_instance\")\n            .image(\"linode/ubuntu22.04\")\n            .region(\"us-southeast\")\n            .type(\"g6-standard-1\")\n            .rootPass(\"bogusPassword$\")\n            .interfaces(InstanceInterfaceArgs.builder()\n                .purpose(\"vlan\")\n                .label(\"my-vlan\")\n                .build())\n            .build());\n\n        final var my-vlans = LinodeFunctions.getVlans(GetVlansArgs.builder()\n            .filters(GetVlansFilterArgs.builder()\n                .name(\"label\")\n                .values(\"my-vlan\")\n                .build())\n            .build());\n\n        ctx.export(\"vlanLinodes\", my_vlans.vlans()[0].linodes());\n    }\n}\n```\n```yaml\nresources:\n  myInstance:\n    type: linode:Instance\n    name: my_instance\n    properties:\n      label: my_instance\n      image: linode/ubuntu22.04\n      region: us-southeast\n      type: g6-standard-1\n      rootPass: bogusPassword$\n      interfaces:\n        - purpose: vlan\n          label: my-vlan\nvariables:\n  my-vlans:\n    fn::invoke:\n      function: linode:getVlans\n      arguments:\n        filters:\n          - name: label\n            values:\n              - my-vlan\noutputs:\n  vlanLinodes: ${[\"my-vlans\"].vlans[0].linodes}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `label`\n\n* `region`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVlansFilter:getVlansFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVlansVlan:getVlansVlan"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlans.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getVlansFilter:getVlansFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "vlans": {
                        "items": {
                            "$ref": "#/types/linode:index/getVlansVlan:getVlansVlan"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getVolume:getVolume": {
            "description": "Provides information about a Linode Volume.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-volume).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode Volume.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getVolume({\n    id: 1234567,\n});\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_volume(id=1234567)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetVolume.Invoke(new()\n    {\n        Id = 1234567,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := linode.LookupVolume(ctx, \u0026linode.LookupVolumeArgs{\n\t\t\tId: 1234567,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getVolume(GetVolumeArgs.builder()\n            .id(1234567)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: linode:getVolume\n      arguments:\n        id: '1234567'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique numeric ID of the Volume record to query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "created": {
                        "description": "When this Volume was created.\n",
                        "type": "string"
                    },
                    "encryption": {
                        "description": "Whether Block Storage Disk Encryption is enabled or disabled on this Volume. Note: Block Storage Disk Encryption is not currently available to all users.\n",
                        "type": "string"
                    },
                    "filesystemPath": {
                        "description": "The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique ID of this Volume.\n",
                        "type": "integer"
                    },
                    "label": {
                        "description": "This Volume's label is for display purposes only.\n",
                        "type": "string"
                    },
                    "linodeId": {
                        "description": "If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here. If the Volume is unattached, this value will be null.\n",
                        "type": "integer"
                    },
                    "region": {
                        "description": "The datacenter in which this Volume is located. See all regions [here](https://api.linode.com/v4/regions).\n",
                        "type": "string"
                    },
                    "size": {
                        "description": "The Volume's size, in GiB.\n",
                        "type": "integer"
                    },
                    "status": {
                        "description": "The current status of the Volume. (`creating`, `active`, `resizing`, `contact_support`)\n",
                        "type": "string"
                    },
                    "tags": {
                        "description": "An array of tags applied to this object. Tags are case-insensitive and are for organizational purposes only.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "updated": {
                        "description": "When this Volume was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "created",
                    "encryption",
                    "filesystemPath",
                    "id",
                    "label",
                    "linodeId",
                    "region",
                    "size",
                    "status",
                    "tags",
                    "updated"
                ],
                "type": "object"
            }
        },
        "linode:index/getVolumeTypes:getVolumeTypes": {
            "description": "Provides information about Linode Volume types that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-volume-types).\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVolumeTypes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVolumeTypesFilter:getVolumeTypesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "types": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVolumeTypesType:getVolumeTypesType"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolumeTypes.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getVolumeTypesFilter:getVolumeTypesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID representing the Volume type.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "types": {
                        "items": {
                            "$ref": "#/types/linode:index/getVolumeTypesType:getVolumeTypesType"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getVolumes:getVolumes": {
            "description": "Provides information about Linode volumes that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-volumes).\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_volumes = linode.getVolumes({\n    filters: [{\n        name: \"label\",\n        values: [\"test-volume\"],\n    }],\n});\nexport const volumes = filtered_volumes.then(filtered_volumes =\u003e filtered_volumes.volumes);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_volumes = linode.get_volumes(filters=[{\n    \"name\": \"label\",\n    \"values\": [\"test-volume\"],\n}])\npulumi.export(\"volumes\", filtered_volumes.volumes)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_volumes = Linode.GetVolumes.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetVolumesFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"test-volume\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"volumes\"] = filtered_volumes.Apply(filtered_volumes =\u003e filtered_volumes.Apply(getVolumesResult =\u003e getVolumesResult.Volumes)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_volumes, err := linode.GetVolumes(ctx, \u0026linode.GetVolumesArgs{\n\t\t\tFilters: []linode.GetVolumesFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"test-volume\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"volumes\", filtered_volumes.Volumes)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVolumesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-volumes = LinodeFunctions.getVolumes(GetVolumesArgs.builder()\n            .filters(GetVolumesFilterArgs.builder()\n                .name(\"label\")\n                .values(\"test-volume\")\n                .build())\n            .build());\n\n        ctx.export(\"volumes\", filtered_volumes.volumes());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-volumes:\n    fn::invoke:\n      function: linode:getVolumes\n      arguments:\n        filters:\n          - name: label\n            values:\n              - test-volume\noutputs:\n  volumes: ${[\"filtered-volumes\"].volumes}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `label`\n\n* `tags`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVolumes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVolumesFilter:getVolumesFilter"
                        }
                    },
                    "order": {
                        "type": "string",
                        "description": "The order in which results should be returned. (`asc`, `desc`; default `asc`)\n"
                    },
                    "orderBy": {
                        "type": "string",
                        "description": "The attribute to order the results by. See the Filterable Fields section for a list of valid fields.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVolumesVolume:getVolumesVolume"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolumes.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getVolumesFilter:getVolumesFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique ID of this Volume.\n",
                        "type": "string"
                    },
                    "order": {
                        "type": "string"
                    },
                    "orderBy": {
                        "type": "string"
                    },
                    "volumes": {
                        "items": {
                            "$ref": "#/types/linode:index/getVolumesVolume:getVolumesVolume"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getVpc:getVpc": {
            "description": "Provides information about a Linode VPC.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode VPC.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getVpc({\n    id: \"123\",\n});\nexport const vpc = foo;\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_vpc(id=\"123\")\npulumi.export(\"vpc\", foo)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetVpc.Invoke(new()\n    {\n        Id = \"123\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpc\"] = foo,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := linode.LookupVpc(ctx, \u0026linode.LookupVpcArgs{\n\t\t\tId: \"123\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpc\", foo)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVpcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getVpc(GetVpcArgs.builder()\n            .id(\"123\")\n            .build());\n\n        ctx.export(\"vpc\", foo);\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: linode:getVpc\n      arguments:\n        id: 123\noutputs:\n  vpc: ${foo}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpc.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique id of this VPC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpc.\n",
                "properties": {
                    "created": {
                        "description": "The date and time when the VPC was created.\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "The user-defined description of this VPC.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "label": {
                        "description": "The label of the VPC.\n",
                        "type": "string"
                    },
                    "region": {
                        "description": "The region where the VPC is deployed.\n",
                        "type": "string"
                    },
                    "updated": {
                        "description": "The date and time when the VPC was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "created",
                    "description",
                    "id",
                    "label",
                    "region",
                    "updated"
                ],
                "type": "object"
            }
        },
        "linode:index/getVpcIps:getVpcIps": {
            "description": "Provides information about a list of Linode VPC IPs that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs-ips).\n\nProvides information about a list of Linode VPC IPs in a specific VPC that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-ips).\n\n## Example Usage\n\nThe following example shows how one might use this data source to list VPC IPs.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_ips = linode.getVpcIps({\n    filters: [{\n        name: \"address\",\n        values: [\"10.0.0.0\"],\n    }],\n});\nexport const vpcIps = filtered_ips.then(filtered_ips =\u003e filtered_ips.vpcIps);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_ips = linode.get_vpc_ips(filters=[{\n    \"name\": \"address\",\n    \"values\": [\"10.0.0.0\"],\n}])\npulumi.export(\"vpcIps\", filtered_ips.vpc_ips)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_ips = Linode.GetVpcIps.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetVpcIpsFilterInputArgs\n            {\n                Name = \"address\",\n                Values = new[]\n                {\n                    \"10.0.0.0\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpcIps\"] = filtered_ips.Apply(filtered_ips =\u003e filtered_ips.Apply(getVpcIpsResult =\u003e getVpcIpsResult.VpcIps)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_ips, err := linode.GetVpcIps(ctx, \u0026linode.GetVpcIpsArgs{\n\t\t\tFilters: []linode.GetVpcIpsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"address\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"10.0.0.0\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpcIps\", filtered_ips.VpcIps)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVpcIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-ips = LinodeFunctions.getVpcIps(GetVpcIpsArgs.builder()\n            .filters(GetVpcIpsFilterArgs.builder()\n                .name(\"address\")\n                .values(\"10.0.0.0\")\n                .build())\n            .build());\n\n        ctx.export(\"vpcIps\", filtered_ips.vpcIps());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-ips:\n    fn::invoke:\n      function: linode:getVpcIps\n      arguments:\n        filters:\n          - name: address\n            values:\n              - 10.0.0.0\noutputs:\n  vpcIps: ${[\"filtered-ips\"].vpcIps}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nOne might also use this data source to list all VPC IPs in a specific VPC. The following example shows how to do this.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst specific_vpc_ips = linode.getVpcIps({\n    vpcId: 123,\n});\nexport const vpcIps = specific_vpc_ips.then(specific_vpc_ips =\u003e specific_vpc_ips.vpcIps);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nspecific_vpc_ips = linode.get_vpc_ips(vpc_id=123)\npulumi.export(\"vpcIps\", specific_vpc_ips.vpc_ips)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var specific_vpc_ips = Linode.GetVpcIps.Invoke(new()\n    {\n        VpcId = 123,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpcIps\"] = specific_vpc_ips.Apply(specific_vpc_ips =\u003e specific_vpc_ips.Apply(getVpcIpsResult =\u003e getVpcIpsResult.VpcIps)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tspecific_vpc_ips, err := linode.GetVpcIps(ctx, \u0026linode.GetVpcIpsArgs{\n\t\t\tVpcId: pulumi.IntRef(123),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpcIps\", specific_vpc_ips.VpcIps)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVpcIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var specific-vpc-ips = LinodeFunctions.getVpcIps(GetVpcIpsArgs.builder()\n            .vpcId(123)\n            .build());\n\n        ctx.export(\"vpcIps\", specific_vpc_ips.vpcIps());\n    }\n}\n```\n```yaml\nvariables:\n  specific-vpc-ips:\n    fn::invoke:\n      function: linode:getVpcIps\n      arguments:\n        vpcId: 123\noutputs:\n  vpcIps: ${[\"specific-vpc-ips\"].vpcIps}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `active`\n\n* `config_id`\n\n* `linode_id`\n\n* `region`\n\n* `vpc_id`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcIps.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcIpsFilter:getVpcIpsFilter"
                        }
                    },
                    "vpcId": {
                        "type": "integer",
                        "description": "The id of the parent VPC for the list of VPC IPs.\n\n* `filter` - (Optional) A set of filters used to select Linode VPC IPs that meet certain requirements.\n"
                    },
                    "vpcIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcIpsVpcIp:getVpcIpsVpcIp"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcIps.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getVpcIpsFilter:getVpcIpsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "vpcId": {
                        "description": "The unique globally general API entity identifier for the VPC.\n",
                        "type": "integer"
                    },
                    "vpcIps": {
                        "items": {
                            "$ref": "#/types/linode:index/getVpcIpsVpcIp:getVpcIpsVpcIp"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "linode:index/getVpcSubnet:getVpcSubnet": {
            "description": "Provides information about a Linode VPC subnet.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-subnet).\n\n## Example Usage\n\nThe following example shows how one might use this data source to access information about a Linode VPC subnet.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst foo = linode.getVpcSubnet({\n    vpcId: 123,\n    id: \"12345\",\n});\nexport const vpcSubnet = foo;\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfoo = linode.get_vpc_subnet(vpc_id=123,\n    id=\"12345\")\npulumi.export(\"vpcSubnet\", foo)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Linode.GetVpcSubnet.Invoke(new()\n    {\n        VpcId = 123,\n        Id = \"12345\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpcSubnet\"] = foo,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := linode.LookupVpcSubnet(ctx, \u0026linode.LookupVpcSubnetArgs{\n\t\t\tVpcId: 123,\n\t\t\tId:    \"12345\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpcSubnet\", foo)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVpcSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = LinodeFunctions.getVpcSubnet(GetVpcSubnetArgs.builder()\n            .vpcId(123)\n            .id(\"12345\")\n            .build());\n\n        ctx.export(\"vpcSubnet\", foo);\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: linode:getVpcSubnet\n      arguments:\n        vpcId: 123\n        id: 12345\noutputs:\n  vpcSubnet: ${foo}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcSubnet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique id of this VPC subnet.\n"
                    },
                    "vpcId": {
                        "type": "integer",
                        "description": "The id of the parent VPC for this VPC Subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcSubnet.\n",
                "properties": {
                    "created": {
                        "description": "The date and time when the VPC Subnet was created.\n",
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ipv4": {
                        "description": "The IPv4 range of this subnet in CIDR format.\n",
                        "type": "string"
                    },
                    "label": {
                        "description": "The label of the VPC subnet.\n",
                        "type": "string"
                    },
                    "linodes": {
                        "description": "A list of Linode IDs that added to this subnet.\n",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcSubnetLinode:getVpcSubnetLinode"
                        },
                        "type": "array"
                    },
                    "updated": {
                        "description": "The date and time when the VPC Subnet was last updated.\n",
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "integer"
                    }
                },
                "required": [
                    "created",
                    "id",
                    "ipv4",
                    "label",
                    "linodes",
                    "updated",
                    "vpcId"
                ],
                "type": "object"
            }
        },
        "linode:index/getVpcSubnets:getVpcSubnets": {
            "description": "Provides information about a list of Linode VPC subnets that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpc-subnets).\n\n## Example Usage\n\nThe following example shows how one might use this data source to list VPC subnets.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_subnets = linode.getVpcSubnets({\n    vpcId: 123,\n    filters: [{\n        name: \"label\",\n        values: [\"test\"],\n    }],\n});\nexport const vpcSubnets = filtered_subnets.then(filtered_subnets =\u003e filtered_subnets.vpcSubnets);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_subnets = linode.get_vpc_subnets(vpc_id=123,\n    filters=[{\n        \"name\": \"label\",\n        \"values\": [\"test\"],\n    }])\npulumi.export(\"vpcSubnets\", filtered_subnets.vpc_subnets)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_subnets = Linode.GetVpcSubnets.Invoke(new()\n    {\n        VpcId = 123,\n        Filters = new[]\n        {\n            new Linode.Inputs.GetVpcSubnetsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"test\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpcSubnets\"] = filtered_subnets.Apply(filtered_subnets =\u003e filtered_subnets.Apply(getVpcSubnetsResult =\u003e getVpcSubnetsResult.VpcSubnets)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_subnets, err := linode.GetVpcSubnets(ctx, \u0026linode.GetVpcSubnetsArgs{\n\t\t\tVpcId: 123,\n\t\t\tFilters: []linode.GetVpcSubnetsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"test\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpcSubnets\", filtered_subnets.VpcSubnets)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVpcSubnetsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-subnets = LinodeFunctions.getVpcSubnets(GetVpcSubnetsArgs.builder()\n            .vpcId(123)\n            .filters(GetVpcSubnetsFilterArgs.builder()\n                .name(\"label\")\n                .values(\"test\")\n                .build())\n            .build());\n\n        ctx.export(\"vpcSubnets\", filtered_subnets.vpcSubnets());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-subnets:\n    fn::invoke:\n      function: linode:getVpcSubnets\n      arguments:\n        vpcId: 123\n        filters:\n          - name: label\n            values:\n              - test\noutputs:\n  vpcSubnets: ${[\"filtered-subnets\"].vpcSubnets}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `id`\n\n* `label`\n\n* `ipv4`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcSubnets.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcSubnetsFilter:getVpcSubnetsFilter"
                        }
                    },
                    "vpcId": {
                        "type": "integer",
                        "description": "The id of the parent VPC for the list of VPCs.\n\n* `filter` - (Optional) A set of filters used to select Linode VPC subnets that meet certain requirements.\n"
                    },
                    "vpcSubnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcSubnetsVpcSubnet:getVpcSubnetsVpcSubnet"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vpcId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcSubnets.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getVpcSubnetsFilter:getVpcSubnetsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique id of the VPC subnet.\n",
                        "type": "string"
                    },
                    "vpcId": {
                        "type": "integer"
                    },
                    "vpcSubnets": {
                        "items": {
                            "$ref": "#/types/linode:index/getVpcSubnetsVpcSubnet:getVpcSubnetsVpcSubnet"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "vpcId"
                ],
                "type": "object"
            }
        },
        "linode:index/getVpcs:getVpcs": {
            "description": "Provides information about a list of Linode VPCs that match a set of filters.\nFor more information, see the [Linode APIv4 docs](https://techdocs.akamai.com/linode-api/reference/get-vpcs).\n\n## Example Usage\n\nThe following example shows how one might use this data source to list VPCs.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as linode from \"@pulumi/linode\";\n\nconst filtered_vpcs = linode.getVpcs({\n    filters: [{\n        name: \"label\",\n        values: [\"test\"],\n    }],\n});\nexport const vpcs = filtered_vpcs.then(filtered_vpcs =\u003e filtered_vpcs.vpcs);\n```\n```python\nimport pulumi\nimport pulumi_linode as linode\n\nfiltered_vpcs = linode.get_vpcs(filters=[{\n    \"name\": \"label\",\n    \"values\": [\"test\"],\n}])\npulumi.export(\"vpcs\", filtered_vpcs.vpcs)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Linode = Pulumi.Linode;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var filtered_vpcs = Linode.GetVpcs.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Linode.Inputs.GetVpcsFilterInputArgs\n            {\n                Name = \"label\",\n                Values = new[]\n                {\n                    \"test\",\n                },\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"vpcs\"] = filtered_vpcs.Apply(filtered_vpcs =\u003e filtered_vpcs.Apply(getVpcsResult =\u003e getVpcsResult.Vpcs)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-linode/sdk/v4/go/linode\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfiltered_vpcs, err := linode.GetVpcs(ctx, \u0026linode.GetVpcsArgs{\n\t\t\tFilters: []linode.GetVpcsFilter{\n\t\t\t\t{\n\t\t\t\t\tName: \"label\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"test\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"vpcs\", filtered_vpcs.Vpcs)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.linode.LinodeFunctions;\nimport com.pulumi.linode.inputs.GetVpcsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var filtered-vpcs = LinodeFunctions.getVpcs(GetVpcsArgs.builder()\n            .filters(GetVpcsFilterArgs.builder()\n                .name(\"label\")\n                .values(\"test\")\n                .build())\n            .build());\n\n        ctx.export(\"vpcs\", filtered_vpcs.vpcs());\n    }\n}\n```\n```yaml\nvariables:\n  filtered-vpcs:\n    fn::invoke:\n      function: linode:getVpcs\n      arguments:\n        filters:\n          - name: label\n            values:\n              - test\noutputs:\n  vpcs: ${[\"filtered-vpcs\"].vpcs}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Filterable Fields\n\n* `id`\n\n* `label`\n\n* `description`\n\n* `region`\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcs.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcsFilter:getVpcsFilter"
                        }
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/linode:index/getVpcsVpc:getVpcsVpc"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcs.\n",
                "properties": {
                    "filters": {
                        "items": {
                            "$ref": "#/types/linode:index/getVpcsFilter:getVpcsFilter"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The unique id of this VPC.\n",
                        "type": "string"
                    },
                    "vpcs": {
                        "items": {
                            "$ref": "#/types/linode:index/getVpcsVpc:getVpcsVpc"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        }
    }
}